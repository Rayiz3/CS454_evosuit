/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 01:36:50 GMT 2023
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Properties;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultParser_ESTest extends DefaultParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "e?oD%:C";
      Properties properties0 = new Properties();
      defaultParser0.parse(options0, stringArray0, properties0);
      Option option0 = new Option("a", "a");
      Options options1 = options0.addOption(option0);
      Properties properties1 = new Properties();
      defaultParser0.parse(options1, (String[]) null, properties1, true);
      defaultParser0.handleConcatenatedOptions("-aQIb");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      defaultParser0.parse(options0, (String[]) null);
      defaultParser0.parse(options1, (String[]) null, properties1, true);
      DefaultParser defaultParser1 = new DefaultParser();
      defaultParser0.handleConcatenatedOptions("=f*");
      String[] stringArray1 = new String[9];
      stringArray1[0] = "-aQIb";
      stringArray1[1] = "-o-F5_=";
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("t1foZath", "t1foZath", true, "t1foZath");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-";
      stringArray0[1] = "-";
      stringArray0[2] = "-t1";
      stringArray0[3] = "-";
      stringArray0[4] = "t1foZath";
      defaultParser0.parse(options1, stringArray0);
      boolean boolean0 = true;
      defaultParser0.parse(options1, stringArray0, true);
      Properties properties0 = new Properties();
      properties0.remove((Object) options0);
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        options0.addOption("foAG3#a", true, "j)!ebKIQF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'foAG3#a' contains an illegal character : '#'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String string0 = "P";
      Options options1 = options0.addRequiredOption("P", "P", false, "P");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "P";
      stringArray0[1] = "P";
      stringArray0[2] = "P";
      stringArray0[3] = "--=";
      stringArray0[4] = "--=";
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: --=
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("a", "a");
      option0.setArgs((-1));
      DefaultParser defaultParser0 = new DefaultParser();
      Properties properties0 = new Properties();
      option0.setArgs((-1));
      Options options1 = options0.addOption("a", "toast", true, "a");
      properties0.remove((Object) defaultParser0);
      Properties properties1 = new Properties();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      optionGroup1.setRequired(true);
      DefaultParser defaultParser1 = new DefaultParser();
      options0.getRequiredOptions();
      options1.addOption("a", "a", true, ">*I@LQ");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A{BLYup;d\"u@pjd2sq";
      stringArray0[1] = "--=";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")");
      try { 
        defaultParser1.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Ambiguous option: '--'  (could be: 'toast', 'a')
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("a", "a");
      DefaultParser defaultParser0 = new DefaultParser();
      option0.setArgs((-1));
      Options options1 = options0.addOption("a", "toast", true, "a");
      Properties properties0 = new Properties();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.toString();
      optionGroup1.setRequired(true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[-a a]";
      stringArray0[1] = "--=";
      CommandLine commandLine0 = defaultParser0.parse(options1, stringArray0);
      CommandLine commandLine1 = defaultParser0.parse(options1, stringArray0, properties0, true);
      assertFalse(commandLine1.equals((Object)commandLine0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("t1foZath", "---=", true, "t1foZath");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "---=";
      DefaultParser defaultParser0 = new DefaultParser();
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("a");
      Option option0 = option_Builder0.build();
      Options options1 = options0.addOption(option0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-aQIb";
      Properties properties0 = new Properties();
      options0.toString();
      defaultParser0.parse(options1, (String[]) null, properties0, true);
      defaultParser0.handleConcatenatedOptions("-aQIb");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options2 = options0.addOptionGroup(optionGroup0);
      optionGroup0.setRequired(true);
      defaultParser0.parse(options2, stringArray0, properties0, true);
      defaultParser0.parse(options2, (String[]) null, properties0);
      options1.addOption("a", "Hc$VeK`JzWN(X[+", true, "vyFwotEUk7H[");
      defaultParser0.parse(options1, (String[]) null, true);
      Options options3 = new Options();
      DefaultParser defaultParser1 = new DefaultParser();
      CommandLine commandLine0 = defaultParser1.parse(options2, (String[]) null, true);
      defaultParser1.cmd = commandLine0;
      defaultParser1.parse(options2, stringArray0);
      defaultParser1.handleConcatenatedOptions("-a.");
      DefaultParser defaultParser2 = new DefaultParser();
      defaultParser2.handleConcatenatedOptions("a");
      defaultParser1.handleConcatenatedOptions("-aQIb");
      assertFalse(defaultParser1.equals((Object)defaultParser2));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Options options1 = options0.addOption("t1foZath", "t1foZath", true, "t1foZath");
      String[] stringArray0 = new String[9];
      stringArray0[1] = "-t1";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "-t1";
      stringArray1[1] = "-F5=";
      stringArray1[2] = "t1foZath";
      stringArray1[3] = "-t1";
      Options options2 = options1.addOption((String) null, "--F5=");
      Properties properties0 = new Properties();
      defaultParser0.parse(options2, stringArray1, properties0, true);
      defaultParser0.handleConcatenatedOptions("-");
      defaultParser0.handleConcatenatedOptions("--=");
      defaultParser0.handleConcatenatedOptions("%5?WGD,W1");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      options0.addOption("t1foZath", "t1foZath", true, "t1foZath");
      String[] stringArray0 = new String[9];
      stringArray0[1] = "-t1";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "-t1";
      stringArray1[1] = "-F5=";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("a");
      Option option0 = option_Builder0.build();
      option0.setArgs((-2));
      Options options1 = options0.addOption(option0);
      options0.addRequiredOption("b", "b", true, "b");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-ab";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("a", "a");
      option0.setArgs(188);
      options0.addOption(option0);
      String[] stringArray0 = new String[11];
      stringArray0[0] = "-ab";
      DefaultParser defaultParser0 = new DefaultParser();
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Option option0 = defaultParser0.currentOption;
      Options options0 = new Options();
      defaultParser0.currentToken = "----b=bar";
      Option.builder();
      Option.Builder option_Builder0 = Option.builder("a");
      Option.Builder option_Builder1 = option_Builder0.hasArg(false);
      Option option1 = option_Builder1.build();
      option1.setArgs((-2));
      options0.addOption(option1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "a";
      stringArray0[1] = "-ab";
      stringArray0[2] = "a";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Option option0 = defaultParser0.currentOption;
      Options options0 = new Options();
      defaultParser0.currentToken = "----b=bar";
      Option.builder();
      Option.builder();
      Option option1 = new Option("a", "a");
      Option.Builder option_Builder0 = Option.builder("a");
      Option.Builder option_Builder1 = option_Builder0.hasArg(true);
      Option option2 = option_Builder1.build();
      Options options1 = options0.addOption(option2);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "a";
      stringArray0[1] = "-ab";
      stringArray0[2] = "a";
      Properties properties0 = new Properties();
      defaultParser0.parse(options0, stringArray0, properties0, true);
      defaultParser0.handleConcatenatedOptions("-ab");
      defaultParser0.parse(options0, stringArray0, properties0, true);
      String[] stringArray1 = new String[0];
      defaultParser0.parse(options1, stringArray1);
      DefaultParser defaultParser1 = new DefaultParser();
      defaultParser1.parse(options0, (String[]) null, properties0, true);
      CommandLine commandLine0 = defaultParser1.parse(options1, stringArray0, true);
      CommandLine commandLine1 = defaultParser1.parse(options0, (String[]) null);
      assertFalse(commandLine1.equals((Object)commandLine0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Options options0 = new Options();
      String string0 = "a";
      Option.builder("a");
      Option option0 = new Option("a", "a");
      option0.setArgs(135);
      Options options1 = options0.addOption(option0);
      String[] stringArray0 = new String[9];
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options1.addOptionGroup(optionGroup1);
      stringArray0[0] = "-ab";
      DefaultParser defaultParser0 = new DefaultParser();
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Options options0 = new Options();
      options0.hasLongOption("t1fo9ath");
      options0.addOption("t1fo9ath", "t1fo9ath", true, "t1fo9ath");
      Properties properties0 = new Properties();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[7];
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("t1fo9ath", true, "t1fo9ath");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      stringArray0[0] = "-t1";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption((String) null, (String) null, false, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "!B3 !VkyD?Vb0$");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options1.addOptionGroup(optionGroup1);
      String[] stringArray0 = new String[0];
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing required option: null
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("a", "O(xg4s@,N!@f]ja5C#:", false, "-a");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-a";
      stringArray0[1] = "t1foZath";
      stringArray0[2] = "a";
      CommandLine commandLine0 = defaultParser0.parse(options1, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "--b=bar";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: --b=bar
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "--1";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: --1
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option option0 = new Option("a", "a");
      Options options1 = options0.addOption(option0);
      Properties properties0 = new Properties();
      CommandLine commandLine0 = defaultParser0.parse(options1, (String[]) null, properties0, true);
      defaultParser0.handleConcatenatedOptions("-aQIb");
      OptionGroup optionGroup0 = new OptionGroup();
      CommandLine commandLine1 = defaultParser0.parse(options1, (String[]) null);
      assertFalse(commandLine1.equals((Object)commandLine0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1_path");
      Properties properties0 = new Properties();
      properties0.put("t1_path", option_Builder0);
      String[] stringArray0 = new String[0];
      DefaultParser defaultParser0 = new DefaultParser();
      try { 
        defaultParser0.parse(options0, stringArray0, properties0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Default option wasn't defined
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("a");
      Option.builder("t1_path");
      option_Builder0.build();
      Option.Builder option_Builder1 = Option.builder("b");
      Option option0 = option_Builder1.build();
      Option.builder("last");
      option0.setDescription("-a");
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "t1_path";
      stringArray0[1] = "last";
      stringArray0[2] = "a";
      stringArray0[3] = "a";
      defaultParser0.parse(options0, stringArray0, properties0, true);
      defaultParser0.handleConcatenatedOptions("-a");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("a");
      Option option0 = option_Builder0.build();
      Options options1 = options0.addOption(option0);
      options0.addRequiredOption("b", "b", true, "b");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-ab";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("a");
      option_Builder0.hasArg(true);
      Option option0 = option_Builder0.build();
      options0.addOption(option0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-ab";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Options options0 = new Options();
      options0.addRequiredOption("t1o9at", "t1o9at", true, "t1o9at");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-t1";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Properties properties0 = new Properties();
      defaultParser0.parse(options0, (String[]) null, properties0, true);
      defaultParser0.handleConcatenatedOptions("-Fs");
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      options0.addRequiredOption((String) null, (String) null, true, (String) null);
      try { 
        defaultParser0.parse(options0, (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing required option: null
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = defaultParser0.options;
      defaultParser0.handleConcatenatedOptions("d");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[24];
      stringArray0[0] = ",\"kv6fG";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void shouldParseShortOptionWithValueshouldParseShortOptionWithValue_31()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      option_Builder0.hasArg();
      Option.builder();
      option_Builder0.optionalArg(true);
      option_Builder0.argName("t1_path");
      Option option0 = option_Builder0.build();
      Options options1 = options0.addOption(option0);
      Option.Builder option_Builder1 = Option.builder("a");
      option_Builder1.hasArg(false);
      Option option1 = option_Builder1.build();
      Options options2 = options1.addOption(option1);
      Option.Builder option_Builder2 = Option.builder("b");
      option_Builder2.hasArg(false);
      Option option2 = option_Builder2.build();
      Options options3 = options2.addOption(option2);
      Option.Builder option_Builder3 = Option.builder("last");
      option_Builder3.hasArg(false);
      Option option3 = option_Builder3.build();
      Options options4 = options3.addOption(option3);
      option3.setDescription("-t1");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-t1";
      stringArray0[1] = "a";
      defaultParser0.parse(options4, stringArray0);
      defaultParser0.handleConcatenatedOptions("+Ca");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[24];
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void shouldParseShortOptionWithValueshouldParseShortOptionWithoutValue_33()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      option_Builder0.hasArg();
      option_Builder0.numberOfArgs(1);
      option_Builder0.optionalArg(true);
      option_Builder0.argName("t1_path");
      Option option0 = option_Builder0.build();
      Options options1 = options0.addOption(option0);
      Option.Builder option_Builder1 = Option.builder("a");
      option_Builder1.hasArg(false);
      Option option1 = option_Builder1.build();
      Options options2 = options1.addOption(option1);
      Option.Builder option_Builder2 = Option.builder("b");
      option_Builder2.hasArg(false);
      Option option2 = option_Builder2.build();
      Options options3 = options2.addOption(option2);
      Option.Builder option_Builder3 = Option.builder("last");
      option_Builder3.hasArg(false);
      Option option3 = option_Builder3.build();
      Options options4 = options3.addOption(option3);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-t1";
      stringArray0[1] = "path/to/my/db";
      defaultParser0.parse(options4, stringArray0);
      defaultParser0.handleConcatenatedOptions("t1_path");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      CommandLine commandLine0 = defaultParser0.parse(options0, (String[]) null);
      assertNotNull(commandLine0);
      
      defaultParser0.handleConcatenatedOptions("9qh#SU)M");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-F5=";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -F5=
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      // Undeclared exception!
      try { 
        defaultParser0.handleConcatenatedOptions("GR[$BwezialBUi6R1p6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Properties properties0 = new Properties();
      CommandLine commandLine0 = defaultParser0.parse(options0, (String[]) null, properties0, false);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      Option.Builder option_Builder1 = option_Builder0.hasArg();
      option_Builder0.build();
      Option.builder();
      Option option0 = option_Builder1.build();
      Options options1 = options0.addOption(option0);
      Option.builder("last");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-t1";
      stringArray0[1] = "-t1";
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option: t1
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      option_Builder0.hasArg();
      Option option0 = option_Builder0.build();
      Options options1 = options0.addOption(option0);
      Option.Builder option_Builder1 = Option.builder("a");
      Option option1 = option_Builder1.build();
      Options options2 = options1.addOption(option1);
      Option option2 = option_Builder1.build();
      Options options3 = options2.addOption(option2);
      Option.Builder option_Builder2 = Option.builder("last");
      option_Builder2.build();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-t1";
      option0.setArgs((-2));
      stringArray0[1] = "a";
      defaultParser0.parse(options3, stringArray0);
      // Undeclared exception!
      try { 
        defaultParser0.handleConcatenatedOptions((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("a", "a");
      Options options1 = options0.addOption(option0);
      String[] stringArray0 = new String[38];
      stringArray0[0] = "-aKb";
      DefaultParser defaultParser0 = new DefaultParser();
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -aKb
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-1";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -1
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "t1foath";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      option_Builder0.build();
      Option option0 = option_Builder0.build();
      options0.addOption(option0);
      Option.builder("last");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-t1";
      stringArray0[1] = "-t1";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[0];
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[10];
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-,6aK";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -,6aK
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-F=";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -F=
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("t1o9at", "t1o9at", true, "t1o9at");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-t1";
      stringArray0[1] = "+f";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("t1o9at", "t1o9at", true, "t1o9at");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-t1";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("t1foZath", "t1foZath", true, "t1foZath");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-t1";
      stringArray0[1] = "-t1";
      DefaultParser defaultParser0 = new DefaultParser();
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option: t1foZath
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("t1fo9wth", "t1fo9wth", true, "t1fo9wth");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-t1";
      stringArray0[1] = "-f";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
