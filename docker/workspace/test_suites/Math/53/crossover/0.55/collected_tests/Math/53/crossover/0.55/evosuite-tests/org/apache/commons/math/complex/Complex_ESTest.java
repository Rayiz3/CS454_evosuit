/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 17 09:03:47 GMT 2023
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.multiply((-1.0));
      Complex complex3 = complex2.sqrt();
      assertEquals((-0.7071067811865475), complex3.getImaginary(), 0.01);
      assertEquals((-1.0), complex2.getImaginary(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertEquals(0.7071067811865476, complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = new Complex(9.140260083262505E-9, 9.140260083262505E-9);
      Complex complex3 = Complex.ZERO;
      complex1.equals(complex0);
      Complex complex4 = complex2.sqrt();
      complex4.nthRoot(431);
      complex3.nthRoot(431);
      Complex complex5 = new Complex(2.0, 431);
      complex5.sqrt();
      complex1.sqrt();
      complex5.abs();
      // Undeclared exception!
      complex3.nthRoot(4782);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-1649.9961887791378), 2.0);
      Complex complex1 = Complex.I;
      Complex complex2 = new Complex(9.140260083262505E-9, 9.140260083262505E-9);
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex2.asin();
      Complex complex6 = complex5.I.sinh();
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(0.8414709848078965, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex1.multiply((-1649.9961887791378));
      assertEquals(-0.0, complex7.getReal(), 0.01);
      assertEquals((-1649.9961887791378), complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex5.sqrt();
      assertEquals(4.350873322995117E-5, complex8.getImaginary(), 0.01);
      
      complex3.multiply(Double.POSITIVE_INFINITY);
      Object object0 = complex4.readResolve();
      boolean boolean0 = complex4.equals(object0);
      assertTrue(boolean0);
      
      Complex complex9 = complex4.multiply(0.1818181574344635);
      assertTrue(complex4.isInfinite());
      assertFalse(complex2.equals((Object)complex5));
      assertEquals(Double.POSITIVE_INFINITY, complex9.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.equals(complex0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      assertFalse(boolean0);
      
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.sqrt1z();
      assertFalse(complex2.equals((Object)complex0));
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
      
      Complex complex3 = complex1.I.sin();
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(1.1752011936438014, complex3.getImaginary(), 0.01);
      
      boolean boolean1 = complex0.equals(complex1);
      assertFalse(boolean1);
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.divide(complex1);
      assertSame(complex2, complex1);
      
      Complex complex3 = complex0.asin();
      assertEquals(0.8813735870195428, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex1.isInfinite());
      
      Complex complex2 = complex1.sqrt();
      assertEquals(0.7071067811865476, complex2.getReal(), 0.01);
      assertEquals(0.7071067811865475, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.negate();
      assertTrue(complex1.isNaN());
      
      List<Complex> list0 = complex0.nthRoot(1585);
      assertFalse(list0.contains(complex1));
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertTrue(list0.contains(complex0));
      assertEquals(1585, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.multiply(complex1);
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.cos();
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.asin();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(671.7936, 1691.16);
      List<Complex> list0 = complex0.nthRoot(332);
      assertEquals(332, list0.size());
      
      Complex complex1 = complex0.atan();
      Complex complex2 = new Complex((-1.2246467991473532E-16), 1691.16);
      Complex complex3 = complex0.multiply(Double.NaN);
      complex1.isNaN();
      Complex complex4 = Complex.I;
      complex4.readResolve();
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex3.equals(complex1);
      assertEquals(1.5705934493975422, complex1.getReal(), 0.01);
      assertEquals(5.107194683516701E-4, complex1.getImaginary(), 0.01);
      assertFalse(boolean0);
      
      complex4.divide(complex0);
      Complex complex5 = complex2.cos();
      assertEquals(Double.POSITIVE_INFINITY, complex5.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex5.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      complex1.equals(complex0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ZERO.negate();
      assertEquals(-0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex2.sqrt();
      assertSame(complex4, complex2);
      assertFalse(complex4.equals((Object)complex3));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex((-1.2246467991473532E-16), (-0.5411961001461971));
      Complex complex1 = new Complex((-1.414213562373095), (-1.3065629648763764));
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = Complex.I;
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.cosh();
      complex5.ZERO.abs();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex1.sin();
      assertEquals((-1.9578540235256534), complex7.getReal(), 0.01);
      
      Complex complex8 = new Complex(0.2976933952858309, Double.POSITIVE_INFINITY);
      Complex complex9 = Complex.INF;
      Complex complex10 = new Complex(873.24, 1.5707652033312343);
      Complex complex11 = complex9.add(complex10);
      Complex complex12 = Complex.ZERO;
      Complex complex13 = complex2.subtract(complex1);
      assertEquals(2.0719298296065563, complex13.getImaginary(), 0.01);
      assertEquals(0.7071067811865476, complex13.getReal(), 0.01);
      
      complex8.asin();
      Complex complex14 = complex8.atan();
      Complex complex15 = complex14.multiply(complex3);
      assertTrue(complex8.isInfinite());
      assertFalse(complex15.equals((Object)complex11));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.ONE.asin();
      assertEquals(1.5707963267948966, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex0.multiply(complex1);
      assertSame(complex3, complex1);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.exp();
      List<Complex> list0 = complex0.nthRoot(382);
      assertTrue(list0.contains(complex2));
      assertSame(complex0, complex2);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-1.2246467991473532E-16), (-0.5411961001461971));
      Complex complex1 = new Complex((-1.3065629648763764), (-1.414213562373095));
      Complex complex2 = complex1.add(complex0);
      complex2.add(complex0);
      Complex complex3 = complex0.atan();
      Complex complex4 = new Complex((-2295.344086250528), (-1.3065629648763764));
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.asin();
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      
      Complex complex7 = complex3.atan();
      assertEquals((-2.736249424321106E-16), complex7.getReal(), 0.01);
      
      Complex complex8 = complex4.multiply((-2295.344086250528));
      complex1.isNaN();
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex8.equals(object0);
      assertFalse(boolean0);
      assertEquals(2999.011574742947, complex8.getImaginary(), 0.01);
      assertTrue(object0.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      boolean boolean0 = complex1.equals(complex0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      boolean boolean0 = complex0.equals(complex1);
      assertTrue(boolean0);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(9.140260083262505E-9, 9.140260083262505E-9);
      Complex complex1 = complex0.NaN.sin();
      assertTrue(complex1.isNaN());
      
      Complex complex2 = complex0.asin();
      assertEquals(9.140260083262505E-9, complex2.getReal(), 0.01);
      assertEquals(9.140260146117721E-9, complex2.getImaginary(), 0.01);
      
      double double0 = complex0.abs();
      assertEquals(1.292627977336727E-8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      assertTrue(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      
      Complex complex2 = complex1.NaN.tanh();
      assertTrue(complex2.isNaN());
      
      Complex complex3 = complex1.multiply(complex0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertTrue(complex3.equals((Object)complex0));
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.hashCode();
      Complex complex1 = complex0.asin();
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.atan();
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-1.2246467991473532E-16), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply((-2147.35373));
      Complex complex2 = complex1.multiply(complex0);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      
      double double0 = complex0.abs();
      assertTrue(complex0.isInfinite());
      assertEquals((-1.2246467991473532E-16), complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.conjugate();
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      
      Complex complex2 = Complex.ZERO;
      assertNotSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-418.242048796));
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.acos();
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      
      List<Complex> list0 = complex0.nthRoot(1585);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(list0.contains(complex1));
      assertEquals(1585, list0.size());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.abs();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      Object object0 = new Object();
      Complex complex2 = complex1.sqrt();
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.divide(complex1);
      assertEquals(0.0, complex2.getReal(), 0.01);
      
      Complex complex3 = complex0.multiply((-1.0));
      Complex complex4 = complex3.multiply(0.0);
      List<Complex> list0 = complex4.nthRoot(1104);
      assertTrue(list0.contains(complex0));
      assertEquals(1104, list0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(9.140260083262505E-9, 9.140260083262505E-9);
      Complex complex1 = complex0.NaN.sinh();
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.asin();
      double double0 = complex2.abs();
      assertEquals(1.2926279817812619E-8, double0, 0.01);
      assertEquals(9.140260083262505E-9, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      boolean boolean0 = complex1.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-1.0));
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.nthRoot((-280));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -280
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-1.2246467991473532E-16), (-0.5411961001461971));
      Complex complex1 = new Complex((-1.414213562373095), (-1.3065629648763764));
      Complex complex2 = new Complex(1.2246467991473532E-16, (-1.414213562373095));
      Complex complex3 = complex2.add(complex0);
      complex3.add(complex1);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex2.subtract(complex4);
      assertEquals(2.95655891161834E-16, complex5.getReal(), 0.01);
      
      Complex complex6 = complex4.subtract(complex1);
      assertEquals(0.7007173663705842, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex3.tan();
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals((-0.9607380093555846), complex7.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.atan();
      try { 
        complex0.nthRoot((-1294));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,294
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.tanh();
      try { 
        complex0.nthRoot((-674));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -674
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      assertEquals(1.1752011936438014, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      
      Complex complex2 = (Complex)complex0.readResolve();
      Complex complex3 = complex0.multiply(complex2);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals((-1.0), complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.cosh();
      try { 
        complex0.nthRoot((-2091));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,091
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.asin();
      assertNotSame(complex0, complex1);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-6.020172044899887), (-6.020172044899887));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply((-6.020172044899887));
      Complex complex3 = complex2.NaN.cosh();
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      
      Complex complex4 = (Complex)complex2.readResolve();
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.equals((Object)complex2));
      assertEquals(36.24247145019409, complex4.getReal(), 0.01);
      assertEquals(36.24247145019409, complex4.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.multiply((-1.0));
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-1.2246467991473532E-16), (-0.5411961001461971));
      Complex complex1 = new Complex((-1.414213562373095), (-1.3065629648763764));
      Complex complex2 = new Complex(1.2246467991473532E-16, 1.3065629648763764);
      Complex complex3 = new Complex(1.414213562373095, 0.5411961001461969);
      Complex complex4 = complex2.add(complex3);
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = complex2.subtract(complex5);
      assertEquals((-1.4142135623730947), complex6.getReal(), 0.01);
      
      Complex complex7 = complex0.subtract(complex1);
      assertEquals(0.7653668647301792, complex7.getImaginary(), 0.01);
      
      String string0 = complex4.toString();
      assertEquals("(1.4142135623730951, 1.8477590650225733)", string0);
      assertFalse(complex4.isInfinite());
      assertEquals(0.5411961001461969, complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      String string0 = complex0.toString();
      assertEquals("(Infinity, Infinity)", string0);
      
      Complex complex1 = complex0.sqrt();
      assertFalse(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-1.2246467991473532E-16), (-0.5411961001461971));
      Complex complex1 = new Complex((-1.414213562373095), (-1.3065629648763764));
      Complex complex2 = new Complex(1.2246467991473532E-16, 1.3065629648763764);
      Complex complex3 = new Complex(1.414213562373095, 0.5411961001461969);
      complex0.add(complex2);
      Complex complex4 = complex1.add(complex3);
      Complex complex5 = complex0.subtract(complex2);
      assertEquals((-2.4492935982947064E-16), complex5.getReal(), 0.01);
      assertEquals((-1.8477590650225735), complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex2.divide(complex4);
      assertEquals(1.6000781528203304E-16, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals((-1.7071067811865475), complex6.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.atan();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.asin();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertTrue(complex0.equals((Object)complex1));
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tan();
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      complex1.NaN.divide(complex0);
      try { 
        complex0.nthRoot((-2960));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,960
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      List<Complex> list0 = complex0.nthRoot(1055);
      assertTrue(list0.contains(complex0));
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.subtract(complex1);
      assertSame(complex2, complex1);
      
      Complex complex3 = complex0.ONE.asin();
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      complex1.ZERO.getField();
      Complex complex2 = complex1.multiply(complex0);
      assertTrue(complex2.equals((Object)complex0));
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-1.2246467991473532E-16), (-0.5411961001461971));
      Complex complex1 = new Complex(2312.477080849, (-1.3065629648763764));
      Complex complex2 = new Complex(524.671404709, 524.671404709);
      Complex complex3 = new Complex((-1763.581062), (-1.414213562373095));
      complex2.add(complex1);
      Complex complex4 = complex3.add(complex2);
      Complex complex5 = complex4.ONE.acos();
      assertEquals((-1238.909657291), complex4.getReal(), 0.01);
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertEquals(523.2571911466268, complex4.getImaginary(), 0.01);
      
      Complex complex6 = Complex.I;
      Complex complex7 = complex1.subtract(complex6);
      Complex complex8 = complex7.subtract(complex0);
      assertEquals(2312.477080849, complex7.getReal(), 0.01);
      assertEquals((-1.7653668647301795), complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex2.log();
      assertEquals(6.609345761124675, complex9.getReal(), 0.01);
      assertEquals(0.7853981633974483, complex9.getImaginary(), 0.01);
      
      complex1.negate();
      assertEquals(2312.477080849, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.acos();
      assertEquals((-0.8813735870195429), complex1.getImaginary(), 0.01);
      
      List<Complex> list0 = complex0.nthRoot(26);
      assertTrue(list0.contains(complex0));
      assertEquals(26, list0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.abs();
      double double0 = complex0.abs();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(2.718281828459045, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      complex0.ONE.pow(complex1);
      try { 
        complex0.nthRoot((-161));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -161
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.subtract(complex1);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      
      double double0 = complex0.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sinh();
      assertEquals(1.1752011936438014, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.asin();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      List<Complex> list0 = complex0.nthRoot(102);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(complex0));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      List<Complex> list0 = complex0.nthRoot(1055);
      assertTrue(list0.contains(complex0));
      assertEquals(1055, list0.size());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.asin();
      assertEquals(0.8813735870195428, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.hashCode();
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.asin();
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.sqrt();
  }
}
