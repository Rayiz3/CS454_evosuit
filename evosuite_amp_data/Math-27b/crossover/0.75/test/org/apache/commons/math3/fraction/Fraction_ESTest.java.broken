/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 23:30:00 GMT 2023
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter;
import com.thoughtworks.xstream.io.StreamException;
import org.apache.commons.math3.fraction.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.testcarver.testcase.EvoSuiteXStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      // Undeclared exception!
      try { 
        fraction0.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.023018285195576E-6);
      Fraction fraction1 = new Fraction((-4023.525929118201));
      Fraction fraction2 = new Fraction((-296.83390055564706));
      Fraction fraction3 = new Fraction(3.814697265625E-6);
      Fraction fraction4 = new Fraction(1.0);
      Fraction fraction5 = Fraction.ZERO;
      Fraction fraction6 = fraction0.subtract(fraction5);
      fraction5.getField();
      Fraction fraction7 = Fraction.ONE_THIRD;
      Fraction fraction8 = new Fraction(332.0);
      String string0 = fraction2.toString();
      assertEquals("-85785 / 289", string0);
      
      Fraction fraction9 = fraction7.multiply(fraction1);
      Fraction fraction10 = new Fraction((-3074));
      Fraction fraction11 = Fraction.TWO_QUARTERS;
      fraction4.equals(fraction11);
      Fraction fraction12 = fraction6.subtract(fraction9);
      Fraction fraction13 = fraction12.add(Integer.MIN_VALUE);
      assertFalse(fraction12.equals((Object)fraction9));
      assertEquals((-5301087.585185185), fraction13.doubleValue(), 0.01);
      
      int int0 = fraction6.compareTo(fraction1);
      assertEquals(1, int0);
      
      Fraction fraction14 = Fraction.getReducedFraction((-3074), 301);
      Fraction fraction15 = fraction14.add(fraction3);
      assertSame(fraction15, fraction14);
      
      Fraction fraction16 = Fraction.TWO_THIRDS;
      int int1 = fraction3.compareTo(fraction16);
      assertTrue(fraction3.equals((Object)fraction6));
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.FOUR_FIFTHS;
      Fraction fraction2 = fraction0.add(fraction1);
      Fraction fraction3 = fraction2.negate();
      assertSame(fraction2, fraction1);
      assertEquals((-4), fraction3.getNumerator());
      assertEquals((-0.8F), fraction3.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = new Fraction((double) Integer.MAX_VALUE);
      Fraction fraction2 = new Fraction(75.0);
      Fraction fraction3 = Fraction.TWO_QUARTERS;
      Fraction fraction4 = new Fraction(10.0);
      Fraction fraction5 = new Fraction(0.02);
      Fraction fraction6 = new Fraction((double) Integer.MAX_VALUE);
      Fraction fraction7 = new Fraction((-2593.92));
      Fraction fraction8 = Fraction.ZERO;
      Fraction fraction9 = fraction8.FOUR_FIFTHS.abs();
      assertEquals(5, fraction9.getDenominator());
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Object object0 = new Object();
      Fraction fraction10 = Fraction.ONE_HALF;
      Fraction fraction11 = fraction3.subtract(fraction0);
      assertEquals(0.16666667F, fraction11.floatValue(), 0.01F);
      
      Fraction fraction12 = new Fraction(10.0);
      Fraction fraction13 = Fraction.getReducedFraction(4, Integer.MAX_VALUE);
      Fraction fraction14 = Fraction.ZERO;
      String string0 = fraction0.toString();
      assertEquals("1 / 3", string0);
      
      Fraction fraction15 = fraction12.add(2195);
      assertEquals(2205, fraction15.getNumerator());
      
      int int0 = fraction12.compareTo(fraction13);
      assertTrue(fraction12.equals((Object)fraction4));
      assertEquals(1.8626451500983188E-9, fraction13.doubleValue(), 0.01);
      assertEquals(1, int0);
      assertFalse(fraction12.equals((Object)fraction14));
      
      Object object1 = new Object();
      Fraction fraction16 = Fraction.ZERO;
      assertFalse(fraction16.equals((Object)fraction5));
      
      Fraction fraction17 = Fraction.ONE_HALF;
      boolean boolean0 = fraction0.equals(fraction17);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = Fraction.TWO_FIFTHS;
      Fraction fraction2 = new Fraction(5766.329257395584);
      Fraction fraction3 = new Fraction(75.0);
      Fraction fraction4 = new Fraction(1.0E-5);
      fraction1.toString();
      Fraction fraction5 = new Fraction(1100.1011934320002);
      int int0 = 2147483626;
      Fraction fraction6 = new Fraction(2147483626);
      // Undeclared exception!
      try { 
        fraction4.subtract(fraction5);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: -6,160,505,005
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, (-1077));
      assertEquals(0, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = new Fraction(2147483638, 2147483638);
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getNumerator());
      
      Fraction fraction1 = Fraction.ONE_QUARTER;
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = null;
      try {
        fraction1 = new Fraction(2.1691754E9, 1005);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,169,175,400 to fraction (2,169,175,400/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.ONE_HALF.divide(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      // Undeclared exception!
      try { 
        fraction0.ONE_FIFTH.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-398));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-398, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      // Undeclared exception!
      try { 
        fraction0.THREE_QUARTERS.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.negate();
      int int0 = fraction1.compareTo(fraction0);
      assertEquals((-0.6F), fraction1.floatValue(), 0.01F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(6.176300416882441E-6, Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 0 to fraction after -2,147,483,648 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = new Fraction(75.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction((-1.0));
      Fraction fraction3 = Fraction.TWO_QUARTERS;
      Fraction fraction4 = new Fraction((-0.1));
      Fraction fraction5 = new Fraction((-242343.0));
      Fraction fraction6 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction7 = new Fraction(2993.420359907);
      Fraction fraction8 = new Fraction(75.0);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Object object0 = new Object();
      fraction1.equals(object0);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction7.add(54799088);
      Fraction fraction9 = new Fraction(0.8);
      fraction9.FOUR_FIFTHS.abs();
      Fraction fraction10 = new Fraction((-675.0));
      fraction3.multiply(fraction2);
      Fraction fraction11 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        EvoSuiteXStream.fromString("org.apache.commons.math3.fraction.Fraction");
        fail("Expecting exception: StreamException");
      
      } catch(StreamException e) {
         //
         // 
         //
         verifyException("com.thoughtworks.xstream.io.xml.XppReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 59049;
      Fraction.getReducedFraction(59049, (-2213));
      Fraction fraction0 = new Fraction(75.0);
      Fraction.getReducedFraction(285, (-2110));
      Fraction fraction1 = new Fraction((-550));
      Fraction fraction2 = new Fraction((-1923.7718));
      Fraction fraction3 = new Fraction((-53));
      Fraction fraction4 = new Fraction((double) (-2110));
      Fraction fraction5 = new Fraction(199.5979146);
      Fraction fraction6 = new Fraction(1.0E-5);
      Fraction fraction7 = new Fraction((-53));
      fraction2.equals(fraction5);
      String string0 = "<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>";
      // Undeclared exception!
      try { 
        EvoSuiteXStream.fromString("org.apache.commons.math3.linear.FieldLUDecomposition$Solver");
        fail("Expecting exception: StreamException");
      
      } catch(StreamException e) {
         //
         // 
         //
         verifyException("com.thoughtworks.xstream.io.xml.XppReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = new Fraction(50.069236394536105);
      Fraction fraction2 = fraction0.THREE_FIFTHS.add(fraction1);
      assertEquals(50.66923F, fraction2.floatValue(), 0.01F);
      assertEquals(6587, fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction1.TWO_QUARTERS.add(fraction0);
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      
      Fraction fraction3 = fraction0.negate();
      assertEquals((-1), fraction3.getNumerator());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.MINUS_ONE.abs();
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1L, fraction1.longValue());
      
      String string0 = fraction0.toString();
      assertEquals("2", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.ONE;
      int int0 = fraction1.compareTo(fraction0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-0.1));
      fraction6.TWO_FIFTHS.toString();
      Fraction fraction7 = new Fraction((-242343.0));
      int int0 = Integer.MIN_VALUE;
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      double double0 = 351.6928626902487;
      Fraction fraction9 = new Fraction(351.6928626902487);
      fraction9.subtract(fraction1);
      Fraction fraction10 = new Fraction((-3455.99016207397));
      fraction9.TWO_FIFTHS.multiply(Integer.MIN_VALUE);
      fraction8.intValue();
      Fraction fraction11 = null;
      try {
        fraction11 = new Fraction((double) Integer.MAX_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      int int0 = Integer.MAX_VALUE;
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction.getReducedFraction(Integer.MAX_VALUE, Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-0.1));
      fraction6.TWO_FIFTHS.toString();
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      fraction8.ONE_FIFTH.subtract(fraction7);
      Fraction fraction9 = Fraction.THREE_FIFTHS;
      Fraction fraction10 = new Fraction((-0.2499999997677497));
      fraction4.floatValue();
      Fraction fraction11 = null;
      try {
        fraction11 = new Fraction((double) Integer.MAX_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      Fraction fraction2 = fraction0.ZERO.subtract(fraction1);
      assertEquals(4, fraction2.getDenominator());
      assertEquals((-0.75F), fraction2.floatValue(), 0.01F);
      
      String string0 = fraction0.toString();
      assertEquals("4 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction((-8271), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -8,271/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      Fraction fraction0 = new Fraction(Integer.MAX_VALUE);
      fraction0.MINUS_ONE.reciprocal();
      Fraction fraction1 = new Fraction((-1.0));
      Fraction fraction2 = new Fraction((double) Integer.MAX_VALUE);
      Fraction fraction3 = new Fraction((-0.1));
      Fraction fraction4 = new Fraction((-242343.0));
      Fraction fraction5 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction6 = new Fraction(332.0);
      Fraction fraction7 = new Fraction((-2323.0));
      fraction7.THREE_FIFTHS.subtract(fraction3);
      Fraction fraction8 = new Fraction((double) Integer.MAX_VALUE);
      Fraction fraction9 = new Fraction(0.6317245727548733);
      fraction9.ONE_QUARTER.multiply(fraction8);
      Fraction fraction10 = new Fraction((-0.1));
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction10.equals(object0);
      fraction3.getNumerator();
      // Undeclared exception!
      try { 
        EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <nulerator>0</nKmerator>\n</org.apache.commons.math3.fraction.Fraction>");
        fail("Expecting exception: AbstractReflectionConverter.UnknownFieldException");
      
      } catch(AbstractReflectionConverter.UnknownFieldException e) {
         //
         // No such field org.apache.commons.math3.fraction.Fraction.nulerator
         // ---- Debugging information ----
         // message             : No such field org.apache.commons.math3.fraction.Fraction.nulerator
         // field               : nulerator
         // class               : org.apache.commons.math3.fraction.Fraction
         // required-type       : org.apache.commons.math3.fraction.Fraction
         // converter-type      : com.thoughtworks.xstream.converters.reflection.ReflectionConverter
         // path                : /org.apache.commons.math3.fraction.Fraction/nulerator
         // line number         : 3
         // version             : 1.2.1-SNAPSHOT
         // -------------------------------
         //
         verifyException("com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (2,147,483,649/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = fraction1.TWO_THIRDS.divide(2142);
      assertEquals(3.112356053532524E-4, fraction2.doubleValue(), 0.01);
      assertEquals(1, fraction2.getNumerator());
      
      Fraction fraction3 = new Fraction(500.0);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-0.1));
      Fraction fraction7 = fraction6.ZERO.abs();
      String string0 = fraction6.TWO_FIFTHS.toString();
      assertEquals("2 / 5", string0);
      
      Fraction fraction8 = new Fraction((-242343.0));
      Fraction fraction9 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction10 = new Fraction(351.6928626902487);
      Fraction fraction11 = new Fraction(44.0);
      Fraction fraction12 = fraction3.ONE_QUARTER.add(fraction10);
      assertEquals(351.94287F, fraction12.floatValue(), 0.01F);
      
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction3.equals(object0);
      Fraction fraction13 = Fraction.ONE_QUARTER;
      Fraction fraction14 = new Fraction((-242343.0));
      fraction8.equals(fraction14);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction5.equals(object1);
      assertTrue(fraction5.equals((Object)fraction7));
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction11.hashCode();
      assertFalse(fraction11.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-0.1));
      Fraction fraction7 = fraction6.ZERO.abs();
      String string0 = fraction6.TWO_FIFTHS.toString();
      assertEquals("2 / 5", string0);
      
      Fraction fraction8 = new Fraction((-242343.0));
      Fraction fraction9 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction10 = new Fraction(351.6928626902487);
      Fraction fraction11 = new Fraction((-2323.0));
      Fraction fraction12 = new Fraction(44.0);
      Fraction fraction13 = new Fraction(Integer.MAX_VALUE);
      boolean boolean0 = fraction8.equals(fraction13);
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction2.equals(object0);
      Fraction fraction14 = fraction5.ONE_QUARTER.subtract(fraction0);
      assertEquals((-99.75), fraction14.doubleValue(), 0.01);
      assertEquals((-399), fraction14.getNumerator());
      
      Fraction fraction15 = new Fraction((-242343.0));
      boolean boolean1 = fraction8.equals(fraction15);
      assertFalse(boolean1 == boolean0);
      
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction5.equals(object1);
      assertTrue(fraction5.equals((Object)fraction7));
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.hashCode();
      assertFalse(fraction12.equals((Object)fraction15));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = new Fraction(75.0);
      Fraction fraction1 = new Fraction(500.0);
      Fraction fraction2 = new Fraction(2147483644);
      Fraction fraction3 = new Fraction((-1.0));
      Fraction fraction4 = new Fraction(0.0);
      Fraction fraction5 = new Fraction((-0.19375104357755193));
      Fraction fraction6 = new Fraction((-242343.0));
      Fraction fraction7 = new Fraction(2147483644);
      Fraction fraction8 = new Fraction((-2323.0));
      Fraction fraction9 = fraction8.THREE_FIFTHS.subtract(fraction5);
      Fraction fraction10 = new Fraction((double) 2147483644);
      Fraction fraction11 = Fraction.TWO_FIFTHS;
      Fraction fraction12 = fraction5.subtract(fraction9);
      fraction12.toString();
      Fraction fraction13 = new Fraction(1169.1958);
      Fraction fraction14 = new Fraction(500.0);
      // Undeclared exception!
      try { 
        fraction7.multiply(fraction10);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(75.0);
      Fraction fraction3 = new Fraction((-1.0));
      Fraction fraction4 = Fraction.TWO_QUARTERS;
      Fraction fraction5 = new Fraction((-0.1));
      Fraction fraction6 = new Fraction(75.0);
      Fraction fraction7 = new Fraction(332.0);
      Fraction fraction8 = new Fraction((-2323.0));
      Fraction fraction9 = new Fraction(44.0);
      Fraction fraction10 = new Fraction(0.6317245727548733);
      Fraction fraction11 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction11.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction11.add(54799088);
      fraction11.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction11.equals(object2);
      Object object3 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction11.equals(object3);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction9.divide(fraction3);
      fraction7.longValue();
      // Undeclared exception!
      try { 
        fraction10.compareTo((Fraction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.TWO_QUARTERS.multiply(fraction1);
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      
      Fraction fraction3 = Fraction.ONE_QUARTER;
      Fraction fraction4 = fraction0.TWO_QUARTERS.divide(fraction3);
      assertEquals(2.0, fraction4.doubleValue(), 0.01);
      assertEquals(1, fraction4.getDenominator());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction1.divide(fraction0);
      String string0 = fraction2.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = new Fraction(75.0);
      Fraction fraction1 = new Fraction(500.0);
      Fraction fraction2 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction3 = new Fraction((-1.0));
      Fraction fraction4 = new Fraction(Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(1, fraction4.getDenominator());
      
      Fraction fraction5 = new Fraction((-0.1));
      Fraction fraction6 = new Fraction((-242343.0));
      Fraction fraction7 = new Fraction((-2147483617));
      assertEquals((-2147483617), fraction7.getNumerator());
      
      Fraction fraction8 = new Fraction(332.0);
      Fraction fraction9 = new Fraction((-2323.0));
      Fraction fraction10 = fraction9.THREE_FIFTHS.subtract(fraction5);
      assertEquals(0.7F, fraction10.floatValue(), 0.01F);
      
      Fraction fraction11 = new Fraction((double) Integer.MAX_VALUE);
      Fraction fraction12 = new Fraction(0.6317245727548733);
      Fraction fraction13 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object2);
      Object object3 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object3);
      assertFalse(fraction13.equals((Object)fraction12));
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      int int0 = fraction3.getDenominator();
      assertFalse(fraction3.equals((Object)fraction4));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.negate();
      assertEquals((-1), fraction1.getNumerator());
      assertEquals((-0.33333334F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01);
      
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = new Fraction((-799), (-799));
      Fraction fraction1 = fraction0.ONE_HALF.add((-799));
      assertEquals((-1597), fraction1.getNumerator());
      assertEquals((-798L), fraction1.longValue());
      
      Fraction fraction2 = Fraction.getReducedFraction((-799), (-799));
      assertTrue(fraction2.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = Fraction.TWO_QUARTERS;
      Fraction fraction3 = new Fraction(2147483628);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-0.1));
      Fraction fraction7 = new Fraction((-242343.0807689162));
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction9 = new Fraction(351.6928626902487);
      Fraction fraction10 = new Fraction((-2323.0));
      Fraction fraction11 = new Fraction(44.0);
      fraction11.ONE_QUARTER.subtract(Integer.MIN_VALUE);
      fraction11.ONE_FIFTH.percentageValue();
      Fraction fraction12 = new Fraction(0.6317245727548733);
      Fraction fraction13 = new Fraction(2147483628);
      fraction7.equals(fraction13);
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction2.equals(object0);
      Fraction fraction14 = new Fraction((-242343.0807689162));
      fraction7.equals(fraction14);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction5.equals(object1);
      org.apache.commons.math3.fraction.Fraction fraction15 = (org.apache.commons.math3.fraction.Fraction)EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      assertEquals(0, fraction15.intValue());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.TWO_FIFTHS.subtract(284);
      assertEquals(5, fraction1.getDenominator());
      assertEquals((-283.6), fraction1.doubleValue(), 0.01);
      
      String string0 = fraction0.toString();
      assertEquals("2", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2024.94111185337), Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.divide(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,025/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0025073208470560715, 249934832);
      assertEquals(0.0025073208F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      fraction0.THREE_QUARTERS.getField();
      String string0 = fraction0.toString();
      assertEquals("1 / 3", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.ONE.add(fraction1);
      assertEquals(1, fraction2.getNumerator());
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = Fraction.TWO_THIRDS;
      Fraction fraction2 = fraction1.THREE_QUARTERS.add(fraction0);
      assertEquals(1.35, fraction2.doubleValue(), 0.01);
      assertEquals(27, fraction2.getNumerator());
      
      Fraction fraction3 = Fraction.ONE;
      assertFalse(fraction3.equals((Object)fraction2));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      String string0 = fraction0.toString();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
      
      String string0 = fraction1.toString();
      assertEquals("1 / 2", string0);
      
      Fraction fraction2 = Fraction.TWO;
      int int0 = fraction2.compareTo(fraction1);
      assertEquals(1, int0);
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = new Fraction((-1));
      boolean boolean0 = fraction0.equals(fraction1);
      assertTrue(boolean0);
      
      Fraction fraction2 = fraction1.subtract(fraction0);
      Fraction fraction3 = fraction0.divide((-1));
      Fraction fraction4 = fraction1.abs();
      assertTrue(fraction4.equals((Object)fraction3));
      
      Fraction fraction5 = fraction2.add(fraction1);
      assertSame(fraction5, fraction1);
      assertFalse(fraction0.equals((Object)fraction2));
      
      Fraction fraction6 = Fraction.getReducedFraction((-1), (-2843));
      assertEquals(3.5174111853675694E-4, fraction6.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.ONE_HALF.abs();
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) 2816, 1660);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,816 to fraction (-2,815/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        fraction0.divide(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 1/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2147483636), (-2147483636));
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      double double0 = fraction0.THREE_QUARTERS.percentageValue();
      assertEquals(75.0, double0, 0.01);
      
      String string0 = fraction0.toString();
      assertEquals("1 / 2", string0);
      assertEquals(0L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.ONE_FIFTH;
      Fraction fraction2 = fraction0.FOUR_FIFTHS.subtract(fraction1);
      assertEquals(0.6F, fraction2.floatValue(), 0.01F);
      
      String string0 = fraction0.toString();
      assertEquals("1 / 4", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.ONE_QUARTER.subtract(fraction0);
      assertEquals((-0.35), fraction1.doubleValue(), 0.01);
      
      Fraction fraction2 = Fraction.ONE_THIRD;
      Fraction fraction3 = fraction2.negate();
      assertEquals((-0.33333334F), fraction3.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = new Fraction(500.0);
      Fraction fraction1 = Fraction.ONE;
      Fraction fraction2 = Fraction.ONE_THIRD;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(boolean0);
      assertEquals((short)500, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.TWO_QUARTERS.divide(fraction0);
      assertEquals(0.6666667F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) Integer.MIN_VALUE);
      assertEquals((-2147483648L), fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.TWO_FIFTHS.reciprocal();
      assertEquals(5, fraction1.getNumerator());
      assertEquals(2.5, fraction1.doubleValue(), 0.01);
      
      Object object0 = new Object();
      boolean boolean0 = fraction0.equals(object0);
      assertFalse(boolean0);
      
      Fraction fraction2 = Fraction.ONE_QUARTER;
      assertFalse(fraction2.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.062248078399989026);
      assertEquals(0.062240664F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      String string0 = fraction0.toString();
      assertEquals("1 / 3", string0);
  }
}
