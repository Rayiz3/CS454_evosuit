/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 10:57:40 GMT 2023
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thoughtworks.xstream.io.StreamException;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVRecord;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.testcarver.testcase.EvoSuiteXStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVRecord_ESTest extends CSVRecord_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[2];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-52));
      hashMap0.put((String) null, integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, (String) null, 32767L);
      boolean boolean0 = cSVRecord0.isSet((String) null);
      assertTrue(boolean0);
      assertEquals(32767L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[14];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(192);
      hashMap0.put((String) null, integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, (String) null, 32767L);
      boolean boolean0 = cSVRecord0.isSet((String) null);
      assertEquals(32767L, cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "first", 1L);
      Integer integer0 = new Integer(1122);
      hashMap0.put("first", integer0);
      cSVRecord0.isSet("first");
      // Undeclared exception!
      try { 
        EvoSuiteXStream.fromString("first");
        fail("Expecting exception: StreamException");
      
      } catch(StreamException e) {
         //
         // 
         //
         verifyException("com.thoughtworks.xstream.io.xml.XppReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = null;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-2137058968));
      hashMap0.put((String) null, integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, (String) null, 0L);
      // Undeclared exception!
      try { 
        cSVRecord0.get((String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2137058968
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[2];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put((String) null, (Integer) null);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, (String) null, 0L);
      // Undeclared exception!
      try { 
        cSVRecord0.isSet((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap1, "A", (-3L));
      cSVRecord0.iterator();
      boolean boolean0 = cSVRecord0.isConsistent();
      cSVRecord0.isConsistent();
      cSVRecord0.values();
      boolean boolean1 = cSVRecord0.isSet("");
      assertTrue(boolean1 == boolean0);
      
      cSVRecord0.isMapped("d0+#(;h:F");
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals((-3L), long0);
      
      cSVRecord0.get("fourth");
      assertEquals((-3L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = "Gwt:R;.n";
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "Gwt:R;.n", 4294967295L);
      // Undeclared exception!
      try { 
        cSVRecord0.get("Gwt:R;.n");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No header mapping was specified, the record values can't be accessed by name
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[6] = "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      long long0 = 1597L;
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[0], 1597L);
      cSVRecord0.isConsistent();
      cSVRecord0.get("d|zlR");
      Integer integer0 = new Integer(2);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>", integer0, biFunction0);
      cSVRecord0.spliterator();
      String string0 = "AVT{q";
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVRecord0.forEach(consumer0);
      cSVRecord0.toString();
      // Undeclared exception!
      try { 
        EvoSuiteXStream.fromString("AVT{q");
        fail("Expecting exception: StreamException");
      
      } catch(StreamException e) {
         //
         // 
         //
         verifyException("com.thoughtworks.xstream.io.xml.XppReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[1] = "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[2] = "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[3] = "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[4] = "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>", (-645L));
      cSVRecord0.size();
      assertEquals((-645L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "first", 0L);
      cSVRecord0.values();
      CSVRecord cSVRecord1 = new CSVRecord(stringArray0, hashMap0, "dS NNT", 0L);
      boolean boolean0 = cSVRecord1.isSet("first");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, (String) null, 0L);
      cSVRecord0.isMapped((String) null);
      String string0 = cSVRecord0.get((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[6] = "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      long long0 = 1597L;
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap1, stringArray0[0], 1597L);
      cSVRecord0.isConsistent();
      cSVRecord0.get("d|zlR");
      Integer integer0 = new Integer(2);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.merge("<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>", integer0, biFunction0);
      cSVRecord0.spliterator();
      String string0 = "AVT{q";
      // Undeclared exception!
      try { 
        EvoSuiteXStream.fromString("AVT{q");
        fail("Expecting exception: StreamException");
      
      } catch(StreamException e) {
         //
         // 
         //
         verifyException("com.thoughtworks.xstream.io.xml.XppReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[5];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[4], (-2508L));
      boolean boolean0 = cSVRecord0.isConsistent();
      assertEquals((-2508L), cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "%k)KTe!u}!,Ag31", 0L);
      assertEquals("[]", cSVRecord0.toString());
      
      boolean boolean0 = cSVRecord0.isConsistent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[5];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[4], (-2505L));
      cSVRecord0.spliterator();
      cSVRecord0.isMapped(stringArray0[2]);
      assertEquals((-2505L), cSVRecord0.getRecordNumber());
      assertEquals(5, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "first";
      String string1 = "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "first";
      stringArray0[1] = "first";
      stringArray0[2] = "first";
      stringArray0[3] = "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[4] = "qsMi#H";
      stringArray0[5] = "first";
      stringArray0[6] = "first";
      stringArray0[7] = "first";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "NOT MAPPED", (-1L));
      // Undeclared exception!
      try { 
        cSVRecord0.get((-2665));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2665
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, (String) null, (-2090L));
      boolean boolean0 = cSVRecord0.isConsistent();
      assertTrue(boolean0);
      assertEquals((-2090L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[1];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "4mH@tzVFlK7", 2165L);
      boolean boolean0 = cSVRecord0.isMapped("4mH@tzVFlK7");
      assertFalse(boolean0);
      assertEquals(2165L, cSVRecord0.getRecordNumber());
      assertEquals("[null]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[7];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "f&!PCXVpp-@e", 3324L);
      cSVRecord0.getComment();
      cSVRecord0.isMapped("<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>");
      assertEquals(3324L, cSVRecord0.getRecordNumber());
      
      CSVRecord cSVRecord1 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "$jL7s\"H-Za3/;tT xr", 0L);
      boolean boolean0 = cSVRecord1.isMapped("");
      assertFalse(boolean0);
      assertEquals("[null, null, null, null, null, null, null]", cSVRecord1.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[7];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[4], (-2508L));
      assertEquals(7, cSVRecord0.size());
      assertEquals((-2508L), cSVRecord0.getRecordNumber());
      
      boolean boolean0 = cSVRecord0.isMapped(stringArray0[2]);
      assertEquals((-2508L), cSVRecord0.getRecordNumber());
      assertFalse(cSVRecord0.isConsistent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[14];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, (String) null, 32767L);
      boolean boolean0 = cSVRecord0.isSet((String) null);
      assertFalse(boolean0);
      assertEquals(32767L, cSVRecord0.getRecordNumber());
      assertEquals(14, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "a>rp!l+", 0L);
      assertEquals("[]", cSVRecord0.toString());
  }
}
