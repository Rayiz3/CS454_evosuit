/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 20:22:19 GMT 2023
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0.-xmEsEdQ`^{W;<9");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      NumberUtils.isNumber("..");
      int[] intArray0 = new int[3];
      intArray0[0] = 7;
      intArray0[1] = 70;
      intArray0[2] = 76;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(76, int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)36;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)115, byte0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)36;
      floatArray0[1] = (float) 76;
      floatArray0[2] = (float) 70;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(36.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1.9E670F");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1.1E70FF");
      assertEquals((-1.1E70), number0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".93L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("+0.");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234E5l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      NumberUtils.createNumber("-1l");
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      try { 
        NumberUtils.createNumber("- l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // - l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-123E2.12");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.9");
      assertEquals(0.9F, number0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "E |VNL)e0";
      NumberUtils.isNumber("E |VNL)e0");
      try { 
        NumberUtils.createNumber("E |VNL)e0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"E\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1eE+00001");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("55eC");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-200");
      assertEquals(1.1E-200, number0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      NumberUtils.isNumber("0x7ffffffffffff9ff0");
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-418.2F);
      floatArray0[1] = (-332.53964F);
      floatArray0[2] = (-3823.0F);
      floatArray0[3] = 3087.0674F;
      floatArray0[4] = 1.0F;
      floatArray0[5] = 3310.0F;
      NumberUtils.max(floatArray0);
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-221.23F");
      assertEquals((-221.23F), number0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      NumberUtils.isNumber("0y9");
      float[] floatArray0 = new float[3];
      floatArray0[0] = 278.0F;
      floatArray0[1] = 3.4028235E38F;
      floatArray0[2] = (-1.0F);
      NumberUtils.min(floatArray0);
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("0y9");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("57e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-1.1E-700F");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1.1E-700F");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-1234E5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)91;
      shortArray0[1] = (short)1116;
      shortArray0[2] = (short)1116;
      shortArray0[3] = (short) (-1321);
      shortArray0[4] = (short) (-11818);
      boolean boolean0 = NumberUtils.isNumber("0xu5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-(af");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -(af is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1l");
      assertEquals(1L, number0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1.1E700");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 2015.6F;
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      try { 
        NumberUtils.createNumber("50~C_-p34F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 50~C_-p34F is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x-#-1234E5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("eI|I");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0eVD6j`MwB{[9g");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0eVD6j`MwB{[9g is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      try { 
        NumberUtils.createNumber("DWt@dZ@-~9|:W0edu");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // DWt@dZ@-~9|:W0edu is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0.[U>d,4L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.[U>d,4L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      try { 
        NumberUtils.createNumber("toLong(Long.MAX_VALUE) failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // toLong(Long.MAX_VALUE) failed is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-0");
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234.5D");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      try { 
        NumberUtils.createNumber("7.]6vSl");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 7.]6vSl is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (int)numberUtils0.INTEGER_ZERO;
      doubleArray0[1] = (-2515.0);
      doubleArray0[2] = (double) (short)numberUtils0.SHORT_MINUS_ONE;
      doubleArray0[3] = (double) (int)numberUtils0.INTEGER_MINUS_ONE;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-2515.0), double0, 0.01);
      
      boolean boolean0 = NumberUtils.isNumber("0x7fffffffffffffff0");
      assertTrue(boolean0);
      
      Number number0 = NumberUtils.createNumber("0x7fffffffffffffff0");
      assertEquals((short) (-16), number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-12E+-22");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      NumberUtils.isNumber("/@V");
      boolean boolean0 = NumberUtils.isNumber("-0x");
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-10.5);
      doubleArray0[1] = 4.9E-324;
      doubleArray0[2] = (-1151.6920540466024);
      doubleArray0[3] = (-3153.7);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-3153.7), double0, 0.01);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1974;
      shortArray0[1] = (short)1745;
      shortArray0[2] = (short)18834;
      shortArray0[3] = (short) (-28887);
      shortArray0[4] = (short)9;
      shortArray0[5] = (short) (-1484);
      shortArray0[6] = (short)1248;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-28887), short0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("l");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      try { 
        NumberUtils.createNumber("vSj~[)+Ja6KL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // vSj~[)+Ja6KL is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      try { 
        NumberUtils.createNumber("heKDgtjL.6)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // heKDgtjL.6) is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      try { 
        NumberUtils.createNumber(".[");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .[ is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (long)numberUtils0.LONG_MINUS_ONE;
      floatArray0[1] = (-5.0F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-5.0F), float0, 0.01F);
      
      Long long0 = new Long((long) numberUtils0.BYTE_ZERO);
      long long1 = NumberUtils.min((long) numberUtils0.INTEGER_MINUS_ONE, (-10L), (-808L));
      assertEquals((-808L), long1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) numberUtils0.BYTE_ZERO;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.createNumber("1.");
      Long long0 = new Long((long) numberUtils0.LONG_MINUS_ONE);
      boolean boolean0 = NumberUtils.isNumber("1.");
      assertTrue(boolean0);
      
      byte byte0 = NumberUtils.max((byte) numberUtils0.BYTE_MINUS_ONE, (byte) numberUtils0.BYTE_ONE, (byte) numberUtils0.BYTE_ONE);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[1] = 249L;
      longArray0[3] = (-526L);
      longArray0[5] = (-1L);
      NumberUtils.min(longArray0);
      NumberUtils.toByte("?/");
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("--##~");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // --##~ is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null);
      assertEquals(0L, long0);
      
      NumberUtils.isNumber("M");
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1.1E200");
      assertEquals((-1.1E200), number0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-#~Dk(^YiXkI}y];uAs G");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"~Dk(^\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0x3|T6Fo1h4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3|T6Fo1h4\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-118), (byte) (-118), (byte)58);
      assertEquals((byte)58, byte0);
      
      long long0 = NumberUtils.toLong("createNumber(String) 16 failed", (long) (byte)58);
      assertEquals(58L, long0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".[UH>Nd,4L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      try { 
        NumberUtils.createNumber("should throw NoSuchMethodException");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // should throw NoSuchMethodException is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)2209;
      shortArray0[1] = (short)1901;
      shortArray0[2] = (short)1901;
      shortArray0[3] = (short)1901;
      shortArray0[4] = (short)1901;
      short short0 = NumberUtils.min((short)1901, (short)1901, (short)1901);
      assertEquals((short)1901, short0);
      
      int int0 = NumberUtils.min(9, (int) (short)1901, 4653);
      assertEquals(9, int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)1901;
      int int1 = NumberUtils.max(intArray0);
      assertEquals(1901, int1);
      
      short short1 = NumberUtils.min((short)615, (short)1901, (short) (-1535));
      assertEquals((short) (-1535), short1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[3] = 9.34;
      float[] floatArray0 = new float[4];
      floatArray0[0] = 139.05023F;
      floatArray0[1] = Float.NaN;
      floatArray0[2] = 139.05023F;
      floatArray0[3] = 139.05023F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
      
      boolean boolean0 = NumberUtils.isNumber("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-323.43408F);
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("0X.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"X.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      try { 
        NumberUtils.createNumber("}pd");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // }pd is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
      
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Strings must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Strings must not be null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("-5v{KN'<");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"5v{KN'<\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      boolean boolean0 = NumberUtils.isNumber("0x0x#fMYBcXk}D]jEM2");
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      doubleArray0[1] = (double) (float)numberUtils0.FLOAT_ONE;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x7fffffffffffffff0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xFalse result for (true, true, false)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xFADE");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("0");
      assertTrue(boolean0);
      
      short short0 = NumberUtils.min((short) (-2246), (short) (-2246), (short)84);
      assertEquals((short) (-2246), short0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-2246);
      shortArray0[1] = (short) (-638);
      shortArray0[2] = (short) (-2246);
      shortArray0[3] = (short)84;
      shortArray0[4] = (short)4;
      shortArray0[5] = (short) (-2246);
      shortArray0[6] = (short) (-2246);
      shortArray0[7] = (short) (-638);
      shortArray0[8] = (short) (-638);
      short short1 = NumberUtils.max(shortArray0);
      assertEquals((short)84, short1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      NumberUtils.createBigInteger((String) null);
      byte byte0 = NumberUtils.toByte((String) null);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 197.751323831933;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(197.751323831933, double0, 0.01);
      
      byte byte0 = NumberUtils.toByte("--1234.p'5D");
      assertEquals((byte)0, byte0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (-973);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-973), short0);
      
      short short1 = NumberUtils.min((short)3278, (short)46, (short)1018);
      assertEquals((short)46, short1);
      
      short short2 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short2);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
      
      NumberUtils.toByte((String) null);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)0;
      NumberUtils.min(shortArray0);
      NumberUtils.min((short)13814, (short) (byte)0, (short)1922);
      short short0 = new Short((short)0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      NumberUtils.min(byteArray0);
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      short short0 = NumberUtils.toShort((String) null, (short)2308);
      assertEquals((short)2308, short0);
      
      long long0 = NumberUtils.toLong("The String did not match any specified value", (long) (short)2308);
      assertEquals(2308L, long0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[7];
      intArray0[0] = (int) numberUtils0.INTEGER_MINUS_ONE;
      boolean boolean0 = NumberUtils.isNumber("1.");
      assertTrue(boolean0);
      
      long long0 = NumberUtils.max((-1359L), (-1598L), (long) numberUtils0.SHORT_ONE);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-#");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[7];
      intArray0[0] = (int) numberUtils0.INTEGER_MINUS_ONE;
      intArray0[1] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[2] = (int) numberUtils0.INTEGER_MINUS_ONE;
      intArray0[3] = (-79);
      intArray0[4] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[5] = (int) numberUtils0.INTEGER_ONE;
      intArray0[6] = (int) (byte)numberUtils0.BYTE_ZERO;
      NumberUtils.min(intArray0);
      NumberUtils.createNumber("1.");
      long long0 = NumberUtils.max((long) numberUtils0.BYTE_MINUS_ONE, (long) numberUtils0.INTEGER_ZERO, (long) numberUtils0.SHORT_ZERO);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1101;
      intArray0[1] = 4;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)32, (byte) (-41), (byte) (-41));
      assertEquals((byte)32, byte0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2798.584F;
      float float0 = NumberUtils.max(2798.584F, 2798.584F, 2798.584F);
      assertEquals(2798.584F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      try { 
        NumberUtils.createNumber(")`dcv`sB_E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // )`dcv`sB_E is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)numberUtils0.BYTE_ONE;
      longArray0[1] = (long) (byte)numberUtils0.BYTE_MINUS_ONE;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1L, long0);
      
      longArray0[2] = (long) numberUtils0.LONG_ZERO;
      longArray0[3] = (long) numberUtils0.LONG_ZERO;
      longArray0[4] = (-1L);
      longArray0[5] = (long) (short)numberUtils0.SHORT_ONE;
      longArray0[6] = (long) (int)numberUtils0.INTEGER_ONE;
      longArray0[7] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      longArray0[8] = (long) (byte)numberUtils0.BYTE_MINUS_ONE;
      long long1 = NumberUtils.min(longArray0);
      NumberUtils.createDouble((String) null);
      long long2 = NumberUtils.toLong("#f", (long) numberUtils0.BYTE_ONE);
      assertFalse(long2 == long1);
      assertEquals(1L, long2);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      try { 
        NumberUtils.createNumber("lr");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // lr is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.toShort("-");
      short[] shortArray0 = new short[6];
      shortArray0[1] = (short) numberUtils0.SHORT_ZERO;
      NumberUtils.isNumber("B=t");
      long[] longArray0 = new long[5];
      short short1 = NumberUtils.max(shortArray0);
      assertTrue(short1 == short0);
      
      longArray0[0] = (long) numberUtils0.LONG_MINUS_ONE;
      longArray0[1] = (long) (byte)numberUtils0.BYTE_ONE;
      longArray0[2] = (long) 101;
      longArray0[3] = (long) (int)numberUtils0.INTEGER_ONE;
      longArray0[4] = (long) (short)0;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(101L, long0);
      
      int int0 = NumberUtils.max((-1172), (int) numberUtils0.INTEGER_MINUS_ONE, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(" uS6`\tan,3 o");
      assertFalse(boolean0);
      
      double double0 = NumberUtils.toDouble(" uS6`\tan,3 o", (-5.0));
      assertEquals((-5.0), double0, 0.01);
      
      byte byte0 = NumberUtils.min((byte)102, (byte)102, (byte) (-21));
      assertEquals((byte) (-21), byte0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)69;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("#1.", (byte) (-7));
      assertEquals((byte) (-7), byte0);
      
      int int0 = NumberUtils.max((int) (byte) (-7), (int) (byte) (-7), (int) (byte) (-7));
      assertEquals((-7), int0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte) (-7);
      floatArray0[1] = (float) (-7);
      floatArray0[2] = (float) (-7);
      floatArray0[3] = (float) (-7);
      floatArray0[4] = (float) (byte) (-7);
      floatArray0[5] = (float) (-7);
      floatArray0[6] = (float) (-7);
      floatArray0[7] = (float) (-7);
      floatArray0[8] = (float) (-7);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-7.0F), float0, 0.01F);
      
      short short0 = NumberUtils.toShort("#1.", (short)2012);
      assertEquals((short)2012, short0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.toInt("The Array must not be null");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("0x=5v{KN+<");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("#Strings must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Str\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("9)Y@e/`-j[`7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (long)numberUtils0.LONG_MINUS_ONE;
      floatArray0[1] = (-5.0F);
      floatArray0[2] = (-2106.0F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-2106.0F), float0, 0.01F);
      
      int int0 = NumberUtils.max((-1403), 102, 102);
      assertEquals(102, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("3|T6Fo1h4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0X");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.2339999888423831E23;
      doubleArray0[3] = 9.34;
      doubleArray0[4] = 10.78;
      NumberUtils.isNumber("0X3.40282354e+38");
      long[] longArray0 = new long[1];
      longArray0[0] = 10L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(10L, long0);
      
      int int0 = NumberUtils.max(123, 123, 123);
      assertEquals(123, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (int)numberUtils0.INTEGER_ONE;
      longArray0[1] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      longArray0[2] = (long) (short)numberUtils0.SHORT_ZERO;
      boolean boolean0 = NumberUtils.isDigits("org.apache.commons.lang3.math.NumberUtils");
      assertFalse(boolean0);
      
      byte byte0 = NumberUtils.min((byte) numberUtils0.BYTE_MINUS_ONE, (byte)5, (byte)68);
      assertEquals((byte) (-1), byte0);
      
      short short0 = NumberUtils.max((short) numberUtils0.BYTE_ZERO, (short) numberUtils0.BYTE_ONE, (short)79);
      assertEquals((short)79, short0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      doubleArray0[1] = (double) (byte)numberUtils0.BYTE_ONE;
      doubleArray0[2] = (double) (byte)numberUtils0.BYTE_MINUS_ONE;
      doubleArray0[3] = (double) (byte)numberUtils0.BYTE_ONE;
      doubleArray0[4] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (int)numberUtils0.INTEGER_MINUS_ONE;
      floatArray0[1] = (float) (short)numberUtils0.SHORT_ZERO;
      floatArray0[2] = (float) (long)numberUtils0.LONG_ONE;
      floatArray0[3] = (float) (short)numberUtils0.SHORT_ZERO;
      floatArray0[4] = (float) numberUtils0.FLOAT_ZERO;
      double double0 = NumberUtils.toDouble((String) null, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-3062.5789F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-3062.5789F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null, 14);
      assertEquals(14, int0);
      
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long long0 = NumberUtils.max(1234L, 2209L, 2209L);
      assertEquals(2209L, long0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 504L;
      longArray0[1] = 3268L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(3268L, long0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[2] = (-2515L);
      longArray0[3] = (-1180L);
      longArray0[4] = 1L;
      longArray0[5] = (-1L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1L, long0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-3580L);
      floatArray0[1] = (float) (-1180L);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals((-1180.0F), float0, 0.01F);
      
      short short0 = NumberUtils.toShort("FQq{j8qzDj}etemV`", (short)1);
      assertEquals((short)1, short0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short) (-2432);
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short) (-5);
      short short1 = NumberUtils.min(shortArray0);
      assertEquals((short) (-2432), short1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      short[] shortArray0 = new short[16];
      shortArray0[0] = (short)91;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.2339999888423831E23;
      doubleArray0[3] = 9.34;
      doubleArray0[4] = 10.78;
      doubleArray0[5] = 5.0;
      doubleArray0[6] = (-3748.19836980648);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-3748.19836980648), double0, 0.01);
      
      boolean boolean0 = NumberUtils.isDigits("[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.toShort("y]?HYmC7wX0RrSY$");
      assertEquals((short)0, short0);
      
      short[] shortArray0 = new short[6];
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (int)numberUtils0.INTEGER_MINUS_ONE;
      floatArray0[1] = (float) (byte)numberUtils0.BYTE_ONE;
      floatArray0[2] = (float) numberUtils0.FLOAT_MINUS_ONE;
      floatArray0[3] = (float) (int)numberUtils0.INTEGER_MINUS_ONE;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (byte)numberUtils0.BYTE_ONE;
      floatArray0[6] = (float) (short)numberUtils0.SHORT_ZERO;
      floatArray0[7] = (float) numberUtils0.FLOAT_MINUS_ONE;
      floatArray0[8] = (float) (short)numberUtils0.SHORT_MINUS_ONE;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
      
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[2] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[3] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[4] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[5] = (short) (byte)numberUtils0.BYTE_ZERO;
      NumberUtils.max(shortArray0);
      short short1 = NumberUtils.max(shortArray0);
      assertEquals((short)1, short1);
      
      int int0 = NumberUtils.min((int) (short)1, (-2147483647), (-2147483647));
      assertEquals((-2147483647), int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[3] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[4] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[5] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[6] = (byte) numberUtils0.BYTE_ZERO;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-53);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("E2ez");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.toLong("V!EP");
      assertEquals(0L, long0);
      
      double double0 = NumberUtils.min((double) numberUtils0.DOUBLE_ONE, (double) numberUtils0.FLOAT_MINUS_ONE, (double) numberUtils0.BYTE_ONE);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.min((double) numberUtils0.DOUBLE_ONE, (double) numberUtils0.FLOAT_MINUS_ONE, (-561.0));
      assertEquals((-561.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.toInt("wYNz;gU{,>fU", (int) numberUtils0.SHORT_MINUS_ONE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1234E5");
      assertEquals((-1.234E8F), number0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      try { 
        NumberUtils.createNumber("3|T6Fo1h4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3|T6Fo1h4\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1234.5D");
      assertEquals(1234.5, number0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      try { 
        NumberUtils.createNumber("%Djgu^eA");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // %Djgu^eA is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (long)numberUtils0.LONG_ONE;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[2] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[3] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[4] = (short) numberUtils0.SHORT_ONE;
      shortArray0[5] = (short)3771;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1), short0);
      
      double double0 = NumberUtils.toDouble("S1\bO1pJVtS", (double) numberUtils0.SHORT_ZERO);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      short[] shortArray0 = new short[10];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      boolean boolean0 = NumberUtils.isDigits("1234E5");
      assertFalse(boolean0);
      
      byte byte0 = NumberUtils.min((byte) numberUtils0.BYTE_ONE, (byte) numberUtils0.BYTE_MINUS_ONE, (byte)5);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = 190.5349F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(190.5349F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      float[] floatArray0 = new float[11];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = (-5.599999904632568);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("user.home");
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      long long0 = NumberUtils.max(1566L, 1L, 1L);
      assertEquals(1566L, long0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      doubleArray0[0] = 4.0;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      try { 
        NumberUtils.createNumber(".");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_153()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float float0 = NumberUtils.min((float) numberUtils0.FLOAT_MINUS_ONE, (float) numberUtils0.LONG_ONE, 3994.2F);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_154()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[6];
      NumberUtils.max(intArray0);
      intArray0[0] = (int) (short)numberUtils0.SHORT_ZERO;
      intArray0[1] = (int) (short)numberUtils0.SHORT_ONE;
      intArray0[2] = (int) (byte)numberUtils0.BYTE_ZERO;
      intArray0[3] = (-1093552557);
      intArray0[4] = (int) numberUtils0.INTEGER_ZERO;
      intArray0[5] = (int) (byte)numberUtils0.BYTE_ZERO;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 57;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(57, int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      long[] longArray0 = new long[14];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.createNumber((String) null);
      long long0 = NumberUtils.max(75L, (-1L), (-2515L));
      assertEquals(75L, long0);
      
      long long1 = NumberUtils.min(1234L, (-2515L), (long) numberUtils0.SHORT_MINUS_ONE);
      assertEquals((-2515L), long1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.min((long) numberUtils0.SHORT_ONE, 12346L, (long) numberUtils0.SHORT_ONE);
      assertEquals(1L, long0);
      
      double double0 = NumberUtils.min((double) numberUtils0.FLOAT_ZERO, (double) numberUtils0.BYTE_MINUS_ONE, (double) numberUtils0.SHORT_ZERO);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.toDouble("++0");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)2, (byte)85, (byte)99);
      assertEquals((byte)2, byte0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 1272L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      long[] longArray0 = new long[6];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      float float0 = NumberUtils.toFloat("1r");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_166()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.min((int) numberUtils0.INTEGER_ZERO, (-1110), 48);
      assertEquals((-1110), int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      NumberUtils.toShort("/@V");
      NumberUtils.isNumber("/@V");
      try { 
        NumberUtils.createNumber("0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.toShort("-");
      assertEquals((short)0, short0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[2] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[3] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[4] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[5] = (short) (byte)numberUtils0.BYTE_ONE;
      short short1 = NumberUtils.max(shortArray0);
      assertEquals((short)1, short1);
      
      int int0 = NumberUtils.min(101, (int) numberUtils0.SHORT_ONE, (-449));
      assertEquals((-449), int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      NumberUtils.min(2163, 2163, (-472));
      Float float0 = NumberUtils.FLOAT_ONE;
      assertEquals(1.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short) numberUtils0.SHORT_ZERO, (short) numberUtils0.SHORT_ONE, (short) numberUtils0.BYTE_ZERO);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_172()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short)2545, (short)2545, (short)102);
      assertEquals((short)2545, short0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("XXRk',[");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"XXRk',[\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      short[] shortArray0 = new short[10];
      shortArray0[3] = (short)91;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)91, short0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1002);
      shortArray0[1] = (short) (-148);
      shortArray0[2] = (short) (-2650);
      shortArray0[3] = (short) (-307);
      shortArray0[4] = (short)6;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)6, short0);
      
      double double0 = NumberUtils.max(1.0, 10.78, 9.34);
      assertEquals(10.78, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.toShort("#1eE+00001", (short) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("8&|J5l6`r_?/.");
      assertFalse(boolean0);
  }
}
