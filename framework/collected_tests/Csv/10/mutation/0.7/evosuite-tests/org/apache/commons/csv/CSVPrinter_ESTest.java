/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 13:23:25 GMT 2023
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.sql.ResultSet;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.Delayed;
import java.util.stream.IntStream;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.testcarver.testcase.EvoSuiteXStream;
import org.h2.tools.SimpleResultSet;
import org.h2.value.Value;
import org.h2.value.ValueLong;
import org.h2.value.ValueRow;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      Character.valueOf('n');
      Character character0 = Character.valueOf('n');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat0.withCommentStart('l');
      cSVFormat3.withQuoteChar(',');
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat0);
      Object object0 = new Object();
      Object object1 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringBuilder0, cSVFormat2);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "<string-builder></string-builder>";
      objectArray0[3] = (Object) cSVFormat1;
      cSVPrinter2.println();
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) character0;
      objectArray0[7] = (Object) cSVFormat2;
      cSVPrinter2.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.printRecords(objectArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("PAGE_STORE_TRIM");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      stringBuilder0.chars();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("(");
      arrayList0.add("(");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("Dr'wUYOnY");
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('\'');
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat1);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('n');
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat2.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringBuilder0, cSVFormat2);
      CSVPrinter cSVPrinter3 = new CSVPrinter(stringBuilder0, cSVFormat2);
      cSVPrinter3.printComment("(");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("<string-builder></sjring-bui+der>");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      stringBuilder0.chars();
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      cSVFormat2.withDelimiter('J');
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat3 = cSVFormat1.withQuotePolicy(quote0);
      LinkedHashSet<MockFileReader> linkedHashSet0 = new LinkedHashSet<MockFileReader>();
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVFormat3.withRecordSeparator('#');
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat3);
      ValueLong valueLong0 = ValueLong.get(0L);
      ValueLong.get(6);
      ResultSet resultSet0 = valueLong0.getResultSet();
      cSVPrinter1.printRecords(resultSet0);
      cSVPrinter1.printComment("(");
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("<string-builder></string-builder>");
      Vector<Delayed> vector0 = new Vector<Delayed>();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('c');
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      Character character0 = new Character('s');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      Character character1 = Character.valueOf('s');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character1);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat3);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add((String) null);
      arrayList0.add("(");
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart('P');
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) vector0;
      objectArray0[1] = (Object) arrayList0;
      objectArray0[2] = object1;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) quote0;
      objectArray0[6] = (Object) "<string-builder></string-builder>";
      objectArray0[7] = (Object) cSVFormat2;
      objectArray0[8] = (Object) arrayList0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.flush();
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringBuilder0, cSVFormat4);
      cSVPrinter1.printRecords((Iterable<?>) arrayList0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("<string-builder></string-builder>");
      assertNotNull(stringBuilder0);
      assertEquals("<string-builder></string-builder>", stringBuilder0.toString());
      
      Vector<Delayed> vector0 = new Vector<Delayed>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      CSVFormat cSVFormat0 = CSVFormat.newFormat('c');
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getEscape());
      assertEquals('c', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getRecordSeparator());
      
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNull(cSVFormat0.getEscape());
      assertEquals('c', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals(Quote.ALL, cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('c', cSVFormat1.getDelimiter());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      Character character0 = new Character('s');
      assertNotNull(character0);
      assertEquals('s', (char)character0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertNull(cSVFormat0.getEscape());
      assertEquals('c', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals(Quote.ALL, cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('c', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals('s', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals('c', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getEscape());
      assertEquals(Quote.ALL, cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.isQuoting());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      
      Character character1 = Character.valueOf('s');
      assertNotNull(character1);
      assertTrue(character1.equals((Object)character0));
      assertEquals('s', (char)character1);
      
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character1);
      assertNotNull(cSVFormat3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(character0.equals((Object)character1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(character1.equals((Object)character0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertNull(cSVFormat0.getEscape());
      assertEquals('c', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals(Quote.ALL, cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('c', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals('s', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals('c', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getEscape());
      assertEquals(Quote.ALL, cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('s', (char)cSVFormat3.getQuoteChar());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getCommentStart());
      assertNull(cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertEquals('s', (char)cSVFormat3.getEscape());
      assertTrue(cSVFormat3.isQuoting());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isNullHandling());
      assertEquals('c', cSVFormat3.getDelimiter());
      assertEquals(Quote.ALL, cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat3);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(character0.equals((Object)character1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertTrue(character1.equals((Object)character0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertEquals("<string-builder></string-builder>", stringBuilder0.toString());
      assertNull(cSVFormat0.getEscape());
      assertEquals('c', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals(Quote.ALL, cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('c', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals('s', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals('c', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getEscape());
      assertEquals(Quote.ALL, cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('s', (char)cSVFormat3.getQuoteChar());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getCommentStart());
      assertNull(cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertEquals('s', (char)cSVFormat3.getEscape());
      assertTrue(cSVFormat3.isQuoting());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isNullHandling());
      assertEquals('c', cSVFormat3.getDelimiter());
      assertEquals(Quote.ALL, cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("<string-builder></string-builder>"));
      
      boolean boolean0 = arrayList0.add((String) null);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertFalse(arrayList0.contains("<string-builder></string-builder>"));
      
      boolean boolean1 = arrayList0.add("(");
      assertTrue(boolean1 == boolean0);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1);
      assertTrue(arrayList0.contains("("));
      assertFalse(arrayList0.contains("<string-builder></string-builder>"));
      
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart('P');
      assertNotNull(cSVFormat4);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(character0.equals((Object)character1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertTrue(character1.equals((Object)character0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertNull(cSVFormat0.getEscape());
      assertEquals('c', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals(Quote.ALL, cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('c', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals('s', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals('c', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getEscape());
      assertEquals(Quote.ALL, cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('s', (char)cSVFormat3.getQuoteChar());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getCommentStart());
      assertNull(cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertEquals('s', (char)cSVFormat3.getEscape());
      assertTrue(cSVFormat3.isQuoting());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isNullHandling());
      assertEquals('c', cSVFormat3.getDelimiter());
      assertEquals(Quote.ALL, cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertTrue(cSVFormat4.isEscaping());
      assertEquals('s', (char)cSVFormat4.getQuoteChar());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertNull(cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertTrue(cSVFormat4.isQuoting());
      assertEquals('s', (char)cSVFormat4.getEscape());
      assertEquals('c', cSVFormat4.getDelimiter());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.isNullHandling());
      assertEquals('P', (char)cSVFormat4.getCommentStart());
      assertEquals(Quote.ALL, cSVFormat4.getQuotePolicy());
      assertTrue(cSVFormat4.isCommentingEnabled());
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVFormat4, cSVFormat0);
      
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat0);
      assertNotNull(cSVPrinter1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertEquals("<string-builder></string-builder>", stringBuilder0.toString());
      assertNull(cSVFormat0.getEscape());
      assertEquals('c', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getRecordSeparator());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) vector0;
      objectArray0[1] = (Object) arrayList0;
      objectArray0[2] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(9, objectArray0.length);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertTrue(character0.equals((Object)character1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertTrue(character1.equals((Object)character0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter1));
      assertNull(cSVFormat0.getEscape());
      assertEquals('c', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals(Quote.ALL, cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('c', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.isNullHandling());
      assertEquals('s', (char)cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals('c', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getNullString());
      assertNull(cSVFormat2.getEscape());
      assertEquals(Quote.ALL, cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('s', (char)cSVFormat3.getQuoteChar());
      assertTrue(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getCommentStart());
      assertNull(cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertEquals('s', (char)cSVFormat3.getEscape());
      assertTrue(cSVFormat3.isQuoting());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isNullHandling());
      assertEquals('c', cSVFormat3.getDelimiter());
      assertEquals(Quote.ALL, cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat4);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVPrinter0, cSVPrinter1);
      
      CSVPrinter cSVPrinter2 = cSVFormat1.print(stringBuilder0);
      assertNotNull(cSVPrinter2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertNull(cSVFormat0.getEscape());
      assertEquals('c', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals(Quote.ALL, cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('c', cSVFormat1.getDelimiter());
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVPrinter2, cSVPrinter1);
      assertNotSame(cSVPrinter2, cSVPrinter0);
      
      cSVPrinter2.flush();
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertNull(cSVFormat0.getEscape());
      assertEquals('c', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals(Quote.ALL, cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('c', cSVFormat1.getDelimiter());
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVPrinter2, cSVPrinter1);
      assertNotSame(cSVPrinter2, cSVPrinter0);
      
      CSVFormat cSVFormat5 = cSVFormat1.withNullString("P.;iT[<rNj");
      assertNotNull(cSVFormat5);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertNull(cSVFormat0.getEscape());
      assertEquals('c', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals(Quote.ALL, cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('c', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertNull(cSVFormat5.getCommentStart());
      assertNull(cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.isEscaping());
      assertNull(cSVFormat5.getQuoteChar());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertEquals('c', cSVFormat5.getDelimiter());
      assertNull(cSVFormat5.getEscape());
      assertFalse(cSVFormat5.isCommentingEnabled());
      assertEquals(Quote.ALL, cSVFormat5.getQuotePolicy());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.isQuoting());
      assertEquals("P.;iT[<rNj", cSVFormat5.getNullString());
      assertTrue(cSVFormat5.isNullHandling());
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat0);
      
      CSVPrinter cSVPrinter3 = new CSVPrinter(stringBuilder0, cSVFormat5);
      assertNotNull(cSVPrinter3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVPrinter3.equals((Object)cSVPrinter2));
      assertFalse(cSVPrinter3.equals((Object)cSVPrinter1));
      assertFalse(cSVPrinter3.equals((Object)cSVPrinter0));
      assertNull(cSVFormat0.getEscape());
      assertEquals('c', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals(Quote.ALL, cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('c', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertNull(cSVFormat5.getCommentStart());
      assertNull(cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.isEscaping());
      assertNull(cSVFormat5.getQuoteChar());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertEquals('c', cSVFormat5.getDelimiter());
      assertNull(cSVFormat5.getEscape());
      assertFalse(cSVFormat5.isCommentingEnabled());
      assertEquals(Quote.ALL, cSVFormat5.getQuotePolicy());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.isQuoting());
      assertEquals("P.;iT[<rNj", cSVFormat5.getNullString());
      assertTrue(cSVFormat5.isNullHandling());
      
      cSVPrinter3.printRecords((Iterable<?>) arrayList0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVPrinter3.equals((Object)cSVPrinter2));
      assertFalse(cSVPrinter3.equals((Object)cSVPrinter1));
      assertFalse(cSVPrinter3.equals((Object)cSVPrinter0));
      assertNull(cSVFormat0.getEscape());
      assertEquals('c', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals(Quote.ALL, cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('c', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertNull(cSVFormat5.getCommentStart());
      assertNull(cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.isEscaping());
      assertNull(cSVFormat5.getQuoteChar());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertEquals('c', cSVFormat5.getDelimiter());
      assertNull(cSVFormat5.getEscape());
      assertFalse(cSVFormat5.isCommentingEnabled());
      assertEquals(Quote.ALL, cSVFormat5.getQuotePolicy());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.isQuoting());
      assertEquals("P.;iT[<rNj", cSVFormat5.getNullString());
      assertTrue(cSVFormat5.isNullHandling());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat1);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVPrinter3, cSVPrinter2);
      assertNotSame(cSVPrinter3, cSVPrinter1);
      assertNotSame(cSVPrinter3, cSVPrinter0);
      assertTrue(arrayList0.contains("("));
      assertFalse(arrayList0.contains("P.;iT[<rNj"));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("<string-builder></sjring-bui+der>");
      assertNotNull(stringBuilder0);
      assertEquals("<string-builder></sjring-bui+der>", stringBuilder0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertEquals("<string-builder></sjring-bui+der>", stringBuilder0.toString());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      
      IntStream intStream0 = stringBuilder0.chars();
      assertNotNull(intStream0);
      assertEquals("<string-builder></sjring-bui+der>", stringBuilder0.toString());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("<string-builder></sjring-bui+der>"));
      
      boolean boolean0 = arrayList0.add("(");
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains("("));
      assertFalse(arrayList0.contains("<string-builder></sjring-bui+der>"));
      
      boolean boolean1 = new Boolean(true);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('G');
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getEscape());
      assertEquals('G', (char)cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat0);
      assertNotNull(cSVPrinter1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertEquals("<string-builder></sjring-bui+der>", stringBuilder0.toString());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "C";
      objectArray0[1] = (Object) cSVPrinter1;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat0.withQuotePolicy(quote0);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getEscape());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getNullString());
      assertEquals(Quote.ALL, cSVFormat2.getQuotePolicy());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringBuilder0, cSVFormat1);
      assertNotNull(cSVPrinter2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertEquals("<string-builder></sjring-bui+der>", stringBuilder0.toString());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getEscape());
      assertEquals('G', (char)cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      
      cSVPrinter2.printComment("");
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertEquals("<string-builder></sjring-bui+der>G \r\n", stringBuilder0.toString());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getEscape());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNull(cSVFormat1.getEscape());
      assertEquals('G', (char)cSVFormat1.getCommentStart());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVPrinter2, cSVPrinter0);
      assertNotSame(cSVPrinter2, cSVPrinter1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("<string-builder></sjring-bui+der>");
      assertNotNull(stringBuilder0);
      assertEquals("<string-builder></sjring-bui+der>", stringBuilder0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertEquals("<string-builder></sjring-bui+der>", stringBuilder0.toString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("<string-builder></sjring-bui+der>"));
      
      boolean boolean0 = arrayList0.add("(");
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains("("));
      assertFalse(arrayList0.contains("<string-builder></sjring-bui+der>"));
      
      boolean boolean1 = arrayList0.add("C");
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean1);
      assertTrue(arrayList0.contains("C"));
      assertFalse(arrayList0.contains("<string-builder></sjring-bui+der>"));
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('G');
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getEscape());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals('G', (char)cSVFormat1.getCommentStart());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat0);
      assertNotNull(cSVPrinter1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertEquals("<string-builder></sjring-bui+der>", stringBuilder0.toString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "C";
      objectArray0[1] = (Object) cSVPrinter1;
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('n');
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getEscape());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals('G', (char)cSVFormat1.getCommentStart());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getEscape());
      assertNull(cSVFormat2.getNullString());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals('G', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertEquals('n', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat3 = cSVFormat0.withQuotePolicy(quote0);
      assertNotNull(cSVFormat3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getCommentStart());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertNull(cSVFormat3.getEscape());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.isNullHandling());
      assertEquals(Quote.ALL, cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertNotSame(cSVFormat3, cSVFormat0);
      
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringBuilder0, cSVFormat2);
      assertNotNull(cSVPrinter2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertEquals("<string-builder></sjring-bui+der>", stringBuilder0.toString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getEscape());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals('G', (char)cSVFormat1.getCommentStart());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getEscape());
      assertNull(cSVFormat2.getNullString());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals('G', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertEquals('n', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      
      ValueLong valueLong0 = ValueLong.get('n');
      assertNotNull(valueLong0);
      assertEquals("110", valueLong0.getSQL());
      assertEquals(5, valueLong0.getType());
      assertEquals(0, valueLong0.getTableId());
      assertEquals("110", valueLong0.getString());
      assertEquals(1, valueLong0.getSignum());
      assertEquals(110L, valueLong0.getLong());
      assertFalse(valueLong0.isLinked());
      assertEquals(20, valueLong0.getDisplaySize());
      assertEquals(19L, valueLong0.getPrecision());
      assertEquals(9, Value.TIME);
      assertEquals(4, Value.INT);
      assertEquals(19, ValueLong.PRECISION);
      assertEquals(21, Value.STRING_FIXED);
      assertEquals(18, Value.RESULT_SET);
      assertEquals(19, Value.JAVA_OBJECT);
      assertEquals(22, Value.TYPE_COUNT);
      assertEquals(10, Value.DATE);
      assertEquals(5, Value.LONG);
      assertEquals(11, Value.TIMESTAMP);
      assertEquals((-1), Value.UNKNOWN);
      assertEquals(16, Value.CLOB);
      assertEquals(2, Value.BYTE);
      assertEquals(0, Value.NULL);
      assertEquals(17, Value.ARRAY);
      assertEquals(7, Value.DOUBLE);
      assertEquals(15, Value.BLOB);
      assertEquals(20, Value.UUID);
      assertEquals(3, Value.SHORT);
      assertEquals(6, Value.DECIMAL);
      assertEquals(13, Value.STRING);
      assertEquals(8, Value.FLOAT);
      assertEquals(14, Value.STRING_IGNORECASE);
      assertEquals(20, ValueLong.DISPLAY_SIZE);
      assertEquals(1, Value.BOOLEAN);
      assertEquals(12, Value.BYTES);
      
      SimpleResultSet simpleResultSet0 = (SimpleResultSet)valueLong0.getResultSet();
      assertNotNull(simpleResultSet0);
      assertEquals(0, simpleResultSet0.getFetchSize());
      assertEquals(1007, simpleResultSet0.getConcurrency());
      assertFalse(simpleResultSet0.isClosed());
      assertEquals(1, simpleResultSet0.getColumnCount());
      assertEquals(1, simpleResultSet0.getHoldability());
      assertTrue(simpleResultSet0.getAutoClose());
      assertFalse(simpleResultSet0.wasNull());
      assertEquals(0, simpleResultSet0.getRow());
      assertEquals(1000, simpleResultSet0.getFetchDirection());
      assertEquals(1003, simpleResultSet0.getType());
      assertEquals("110", valueLong0.getSQL());
      assertEquals(5, valueLong0.getType());
      assertEquals(0, valueLong0.getTableId());
      assertEquals("110", valueLong0.getString());
      assertEquals(1, valueLong0.getSignum());
      assertEquals(110L, valueLong0.getLong());
      assertFalse(valueLong0.isLinked());
      assertEquals(20, valueLong0.getDisplaySize());
      assertEquals(19L, valueLong0.getPrecision());
      assertEquals(9, Value.TIME);
      assertEquals(4, Value.INT);
      assertEquals(19, ValueLong.PRECISION);
      assertEquals(21, Value.STRING_FIXED);
      assertEquals(18, Value.RESULT_SET);
      assertEquals(19, Value.JAVA_OBJECT);
      assertEquals(22, Value.TYPE_COUNT);
      assertEquals(10, Value.DATE);
      assertEquals(5, Value.LONG);
      assertEquals(11, Value.TIMESTAMP);
      assertEquals((-1), Value.UNKNOWN);
      assertEquals(16, Value.CLOB);
      assertEquals(2, Value.BYTE);
      assertEquals(0, Value.NULL);
      assertEquals(17, Value.ARRAY);
      assertEquals(7, Value.DOUBLE);
      assertEquals(15, Value.BLOB);
      assertEquals(20, Value.UUID);
      assertEquals(3, Value.SHORT);
      assertEquals(6, Value.DECIMAL);
      assertEquals(13, Value.STRING);
      assertEquals(8, Value.FLOAT);
      assertEquals(14, Value.STRING_IGNORECASE);
      assertEquals(20, ValueLong.DISPLAY_SIZE);
      assertEquals(1, Value.BOOLEAN);
      assertEquals(12, Value.BYTES);
      
      cSVPrinter2.printRecords((ResultSet) simpleResultSet0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertEquals(0, simpleResultSet0.getFetchSize());
      assertEquals(1007, simpleResultSet0.getConcurrency());
      assertEquals(1, simpleResultSet0.getHoldability());
      assertTrue(simpleResultSet0.getAutoClose());
      assertTrue(simpleResultSet0.isClosed());
      assertFalse(simpleResultSet0.wasNull());
      assertEquals(0, simpleResultSet0.getRow());
      assertEquals(1000, simpleResultSet0.getFetchDirection());
      assertEquals(1003, simpleResultSet0.getType());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getEscape());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals('G', (char)cSVFormat1.getCommentStart());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getEscape());
      assertNull(cSVFormat2.getNullString());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertEquals('G', (char)cSVFormat2.getCommentStart());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isEscaping());
      assertNull(cSVFormat2.getQuotePolicy());
      assertEquals('n', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isCommentingEnabled());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertEquals("110", valueLong0.getSQL());
      assertEquals(5, valueLong0.getType());
      assertEquals(0, valueLong0.getTableId());
      assertEquals("110", valueLong0.getString());
      assertEquals(1, valueLong0.getSignum());
      assertEquals(110L, valueLong0.getLong());
      assertFalse(valueLong0.isLinked());
      assertEquals(20, valueLong0.getDisplaySize());
      assertEquals(19L, valueLong0.getPrecision());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVPrinter2, cSVPrinter0);
      assertNotSame(cSVPrinter2, cSVPrinter1);
      assertEquals(9, Value.TIME);
      assertEquals(4, Value.INT);
      assertEquals(19, ValueLong.PRECISION);
      assertEquals(21, Value.STRING_FIXED);
      assertEquals(18, Value.RESULT_SET);
      assertEquals(19, Value.JAVA_OBJECT);
      assertEquals(22, Value.TYPE_COUNT);
      assertEquals(10, Value.DATE);
      assertEquals(5, Value.LONG);
      assertEquals(11, Value.TIMESTAMP);
      assertEquals((-1), Value.UNKNOWN);
      assertEquals(16, Value.CLOB);
      assertEquals(2, Value.BYTE);
      assertEquals(0, Value.NULL);
      assertEquals(17, Value.ARRAY);
      assertEquals(7, Value.DOUBLE);
      assertEquals(15, Value.BLOB);
      assertEquals(20, Value.UUID);
      assertEquals(3, Value.SHORT);
      assertEquals(6, Value.DECIMAL);
      assertEquals(13, Value.STRING);
      assertEquals(8, Value.FLOAT);
      assertEquals(14, Value.STRING_IGNORECASE);
      assertEquals(20, ValueLong.DISPLAY_SIZE);
      assertEquals(1, Value.BOOLEAN);
      assertEquals(12, Value.BYTES);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertEquals("", stringBuilder0.toString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("<string-builder></string-builder>"));
      
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      assertEquals("\n", stringBuilder0.toString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("<string-builder></string-builder>"));
      
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringBuilder0);
      assertNotNull(cSVPrinter1);
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertEquals("\n", stringBuilder0.toString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertNotSame(cSVPrinter1, cSVPrinter0);
      
      StringBuilder stringBuilder1 = (StringBuilder)cSVPrinter1.getOut();
      assertNotNull(stringBuilder1);
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertEquals("\n", stringBuilder0.toString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\n", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      assertSame(stringBuilder1, stringBuilder0);
      
      CSVPrinter cSVPrinter2 = cSVFormat0.print(stringBuilder1);
      assertNotNull(cSVPrinter2);
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertEquals("\n", stringBuilder0.toString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\n", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      assertNotSame(cSVPrinter1, cSVPrinter2);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotSame(cSVPrinter2, cSVPrinter1);
      assertNotSame(cSVPrinter2, cSVPrinter0);
      
      cSVPrinter2.close();
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter2));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertEquals("\n", stringBuilder0.toString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\n", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      assertNotSame(cSVPrinter1, cSVPrinter2);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotSame(cSVPrinter2, cSVPrinter1);
      assertNotSame(cSVPrinter2, cSVPrinter0);
      
      ValueLong valueLong0 = ValueLong.get((-1L));
      assertNotNull(valueLong0);
      assertEquals(5, valueLong0.getType());
      assertFalse(valueLong0.isLinked());
      assertEquals("-1", valueLong0.getSQL());
      assertEquals(0, valueLong0.getTableId());
      assertEquals(19L, valueLong0.getPrecision());
      assertEquals((-1), valueLong0.getSignum());
      assertEquals(20, valueLong0.getDisplaySize());
      assertEquals("-1", valueLong0.getString());
      assertEquals((-1L), valueLong0.getLong());
      assertEquals(21, Value.STRING_FIXED);
      assertEquals(10, Value.DATE);
      assertEquals(1, Value.BOOLEAN);
      assertEquals(19, ValueLong.PRECISION);
      assertEquals(4, Value.INT);
      assertEquals(7, Value.DOUBLE);
      assertEquals(20, ValueLong.DISPLAY_SIZE);
      assertEquals(18, Value.RESULT_SET);
      assertEquals(9, Value.TIME);
      assertEquals(15, Value.BLOB);
      assertEquals(0, Value.NULL);
      assertEquals(13, Value.STRING);
      assertEquals(3, Value.SHORT);
      assertEquals(12, Value.BYTES);
      assertEquals(14, Value.STRING_IGNORECASE);
      assertEquals(17, Value.ARRAY);
      assertEquals(16, Value.CLOB);
      assertEquals(20, Value.UUID);
      assertEquals(2, Value.BYTE);
      assertEquals(11, Value.TIMESTAMP);
      assertEquals(8, Value.FLOAT);
      assertEquals((-1), Value.UNKNOWN);
      assertEquals(5, Value.LONG);
      assertEquals(6, Value.DECIMAL);
      assertEquals(22, Value.TYPE_COUNT);
      assertEquals(19, Value.JAVA_OBJECT);
      
      SimpleResultSet simpleResultSet0 = (SimpleResultSet)valueLong0.getResultSet();
      assertNotNull(simpleResultSet0);
      assertEquals(5, valueLong0.getType());
      assertFalse(valueLong0.isLinked());
      assertEquals("-1", valueLong0.getSQL());
      assertEquals(0, valueLong0.getTableId());
      assertEquals(19L, valueLong0.getPrecision());
      assertEquals((-1), valueLong0.getSignum());
      assertEquals(20, valueLong0.getDisplaySize());
      assertEquals("-1", valueLong0.getString());
      assertEquals((-1L), valueLong0.getLong());
      assertFalse(simpleResultSet0.wasNull());
      assertEquals(0, simpleResultSet0.getRow());
      assertEquals(1000, simpleResultSet0.getFetchDirection());
      assertEquals(1003, simpleResultSet0.getType());
      assertEquals(1007, simpleResultSet0.getConcurrency());
      assertEquals(0, simpleResultSet0.getFetchSize());
      assertFalse(simpleResultSet0.isClosed());
      assertEquals(1, simpleResultSet0.getColumnCount());
      assertEquals(1, simpleResultSet0.getHoldability());
      assertTrue(simpleResultSet0.getAutoClose());
      assertEquals(21, Value.STRING_FIXED);
      assertEquals(10, Value.DATE);
      assertEquals(1, Value.BOOLEAN);
      assertEquals(19, ValueLong.PRECISION);
      assertEquals(4, Value.INT);
      assertEquals(7, Value.DOUBLE);
      assertEquals(20, ValueLong.DISPLAY_SIZE);
      assertEquals(18, Value.RESULT_SET);
      assertEquals(9, Value.TIME);
      assertEquals(15, Value.BLOB);
      assertEquals(0, Value.NULL);
      assertEquals(13, Value.STRING);
      assertEquals(3, Value.SHORT);
      assertEquals(12, Value.BYTES);
      assertEquals(14, Value.STRING_IGNORECASE);
      assertEquals(17, Value.ARRAY);
      assertEquals(16, Value.CLOB);
      assertEquals(20, Value.UUID);
      assertEquals(2, Value.BYTE);
      assertEquals(11, Value.TIMESTAMP);
      assertEquals(8, Value.FLOAT);
      assertEquals((-1), Value.UNKNOWN);
      assertEquals(5, Value.LONG);
      assertEquals(6, Value.DECIMAL);
      assertEquals(22, Value.TYPE_COUNT);
      assertEquals(19, Value.JAVA_OBJECT);
      
      SimpleResultSet simpleResultSet1 = new SimpleResultSet();
      assertNotNull(simpleResultSet1);
      assertFalse(simpleResultSet1.equals((Object)simpleResultSet0));
      assertEquals(1003, simpleResultSet1.getType());
      assertEquals(1007, simpleResultSet1.getConcurrency());
      assertEquals(1, simpleResultSet1.getHoldability());
      assertEquals(0, simpleResultSet1.getFetchSize());
      assertEquals(0, simpleResultSet1.getColumnCount());
      assertTrue(simpleResultSet1.getAutoClose());
      assertFalse(simpleResultSet1.wasNull());
      assertEquals(1000, simpleResultSet1.getFetchDirection());
      assertFalse(simpleResultSet1.isClosed());
      assertEquals(0, simpleResultSet1.getRow());
      
      cSVPrinter2.printRecords((ResultSet) simpleResultSet1);
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter2));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertFalse(simpleResultSet1.equals((Object)simpleResultSet0));
      assertEquals("\n", stringBuilder0.toString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isNullHandling());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\n", stringBuilder1.toString());
      assertEquals(1003, simpleResultSet1.getType());
      assertEquals(1007, simpleResultSet1.getConcurrency());
      assertEquals(1, simpleResultSet1.getHoldability());
      assertEquals(0, simpleResultSet1.getFetchSize());
      assertTrue(simpleResultSet1.isClosed());
      assertTrue(simpleResultSet1.getAutoClose());
      assertFalse(simpleResultSet1.wasNull());
      assertEquals(1000, simpleResultSet1.getFetchDirection());
      assertEquals(0, simpleResultSet1.getRow());
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      assertNotSame(cSVPrinter1, cSVPrinter2);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotSame(cSVPrinter2, cSVPrinter1);
      assertNotSame(cSVPrinter2, cSVPrinter0);
      assertNotSame(simpleResultSet1, simpleResultSet0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      Vector<Delayed> vector0 = new Vector<Delayed>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<string-builder></string-builder>");
      assertFalse(boolean0);
      
      TreeSet<MockFileReader> treeSet0 = new TreeSet<MockFileReader>();
      assertNotNull(treeSet0);
      
      TreeSet<MockFileReader> treeSet1 = new TreeSet<MockFileReader>((SortedSet<MockFileReader>) treeSet0);
      assertNotNull(treeSet1);
      assertTrue(treeSet1.equals((Object)treeSet0));
      
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('m');
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentStart());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getEscape());
      assertEquals('m', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isNullHandling());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      assertNotNull(cSVFormat3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentStart());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getEscape());
      assertEquals('m', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertEquals(Quote.MINIMAL, cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals('m', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getEscape());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat3);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertEquals("", stringBuilder0.toString());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentStart());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getEscape());
      assertEquals('m', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertEquals(Quote.MINIMAL, cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals('m', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getEscape());
      
      ValueLong valueLong0 = ValueLong.get(0L);
      assertNotNull(valueLong0);
      assertEquals("0", valueLong0.getString());
      assertEquals(20, valueLong0.getDisplaySize());
      assertEquals(0, valueLong0.getSignum());
      assertEquals(5, valueLong0.getType());
      assertFalse(valueLong0.isLinked());
      assertEquals(0, valueLong0.getTableId());
      assertEquals(0L, valueLong0.getLong());
      assertEquals(19L, valueLong0.getPrecision());
      assertEquals("0", valueLong0.getSQL());
      assertEquals(5, Value.LONG);
      assertEquals(7, Value.DOUBLE);
      assertEquals(22, Value.TYPE_COUNT);
      assertEquals(1, Value.BOOLEAN);
      assertEquals(4, Value.INT);
      assertEquals(8, Value.FLOAT);
      assertEquals(20, ValueLong.DISPLAY_SIZE);
      assertEquals(14, Value.STRING_IGNORECASE);
      assertEquals(9, Value.TIME);
      assertEquals(18, Value.RESULT_SET);
      assertEquals(21, Value.STRING_FIXED);
      assertEquals(13, Value.STRING);
      assertEquals(10, Value.DATE);
      assertEquals(16, Value.CLOB);
      assertEquals(2, Value.BYTE);
      assertEquals(17, Value.ARRAY);
      assertEquals(0, Value.NULL);
      assertEquals(15, Value.BLOB);
      assertEquals(12, Value.BYTES);
      assertEquals(20, Value.UUID);
      assertEquals(6, Value.DECIMAL);
      assertEquals(3, Value.SHORT);
      assertEquals(19, ValueLong.PRECISION);
      assertEquals(19, Value.JAVA_OBJECT);
      assertEquals(11, Value.TIMESTAMP);
      assertEquals((-1), Value.UNKNOWN);
      
      SimpleResultSet simpleResultSet0 = (SimpleResultSet)valueLong0.getResultSet();
      assertNotNull(simpleResultSet0);
      assertEquals("0", valueLong0.getString());
      assertEquals(20, valueLong0.getDisplaySize());
      assertEquals(0, valueLong0.getSignum());
      assertEquals(5, valueLong0.getType());
      assertFalse(valueLong0.isLinked());
      assertEquals(0, valueLong0.getTableId());
      assertEquals(0L, valueLong0.getLong());
      assertEquals(19L, valueLong0.getPrecision());
      assertEquals("0", valueLong0.getSQL());
      assertFalse(simpleResultSet0.wasNull());
      assertEquals(1000, simpleResultSet0.getFetchDirection());
      assertTrue(simpleResultSet0.getAutoClose());
      assertEquals(1, simpleResultSet0.getColumnCount());
      assertEquals(0, simpleResultSet0.getFetchSize());
      assertEquals(1003, simpleResultSet0.getType());
      assertEquals(1, simpleResultSet0.getHoldability());
      assertEquals(1007, simpleResultSet0.getConcurrency());
      assertFalse(simpleResultSet0.isClosed());
      assertEquals(0, simpleResultSet0.getRow());
      assertEquals(5, Value.LONG);
      assertEquals(7, Value.DOUBLE);
      assertEquals(22, Value.TYPE_COUNT);
      assertEquals(1, Value.BOOLEAN);
      assertEquals(4, Value.INT);
      assertEquals(8, Value.FLOAT);
      assertEquals(20, ValueLong.DISPLAY_SIZE);
      assertEquals(14, Value.STRING_IGNORECASE);
      assertEquals(9, Value.TIME);
      assertEquals(18, Value.RESULT_SET);
      assertEquals(21, Value.STRING_FIXED);
      assertEquals(13, Value.STRING);
      assertEquals(10, Value.DATE);
      assertEquals(16, Value.CLOB);
      assertEquals(2, Value.BYTE);
      assertEquals(17, Value.ARRAY);
      assertEquals(0, Value.NULL);
      assertEquals(15, Value.BLOB);
      assertEquals(12, Value.BYTES);
      assertEquals(20, Value.UUID);
      assertEquals(6, Value.DECIMAL);
      assertEquals(3, Value.SHORT);
      assertEquals(19, ValueLong.PRECISION);
      assertEquals(19, Value.JAVA_OBJECT);
      assertEquals(11, Value.TIMESTAMP);
      assertEquals((-1), Value.UNKNOWN);
      
      cSVPrinter0.printRecords((ResultSet) simpleResultSet0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertTrue(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertNull(cSVFormat2.getCommentStart());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getEscape());
      assertEquals('m', cSVFormat2.getDelimiter());
      assertTrue(cSVFormat2.isQuoting());
      assertEquals('\"', (char)cSVFormat2.getQuoteChar());
      assertNull(cSVFormat2.getNullString());
      assertFalse(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getQuotePolicy());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.isNullHandling());
      assertTrue(cSVFormat3.isQuoting());
      assertEquals('\"', (char)cSVFormat3.getQuoteChar());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertEquals(Quote.MINIMAL, cSVFormat3.getQuotePolicy());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertFalse(cSVFormat3.isEscaping());
      assertNull(cSVFormat3.getCommentStart());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertEquals('m', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getSkipHeaderRecord());
      assertNull(cSVFormat3.getEscape());
      assertEquals("0", valueLong0.getString());
      assertEquals(20, valueLong0.getDisplaySize());
      assertEquals(0, valueLong0.getSignum());
      assertEquals(5, valueLong0.getType());
      assertFalse(valueLong0.isLinked());
      assertEquals(0, valueLong0.getTableId());
      assertEquals(0L, valueLong0.getLong());
      assertEquals(19L, valueLong0.getPrecision());
      assertEquals("0", valueLong0.getSQL());
      assertFalse(simpleResultSet0.wasNull());
      assertEquals(1000, simpleResultSet0.getFetchDirection());
      assertTrue(simpleResultSet0.getAutoClose());
      assertTrue(simpleResultSet0.isClosed());
      assertEquals(0, simpleResultSet0.getFetchSize());
      assertEquals(1003, simpleResultSet0.getType());
      assertEquals(1, simpleResultSet0.getHoldability());
      assertEquals(1007, simpleResultSet0.getConcurrency());
      assertEquals(0, simpleResultSet0.getRow());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat1);
      assertEquals(5, Value.LONG);
      assertEquals(7, Value.DOUBLE);
      assertEquals(22, Value.TYPE_COUNT);
      assertEquals(1, Value.BOOLEAN);
      assertEquals(4, Value.INT);
      assertEquals(8, Value.FLOAT);
      assertEquals(20, ValueLong.DISPLAY_SIZE);
      assertEquals(14, Value.STRING_IGNORECASE);
      assertEquals(9, Value.TIME);
      assertEquals(18, Value.RESULT_SET);
      assertEquals(21, Value.STRING_FIXED);
      assertEquals(13, Value.STRING);
      assertEquals(10, Value.DATE);
      assertEquals(16, Value.CLOB);
      assertEquals(2, Value.BYTE);
      assertEquals(17, Value.ARRAY);
      assertEquals(0, Value.NULL);
      assertEquals(15, Value.BLOB);
      assertEquals(12, Value.BYTES);
      assertEquals(20, Value.UUID);
      assertEquals(6, Value.DECIMAL);
      assertEquals(3, Value.SHORT);
      assertEquals(19, ValueLong.PRECISION);
      assertEquals(19, Value.JAVA_OBJECT);
      assertEquals(11, Value.TIMESTAMP);
      assertEquals((-1), Value.UNKNOWN);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertEquals("", stringBuilder0.toString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat0);
      assertNotNull(cSVPrinter1);
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertEquals("", stringBuilder0.toString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("<string-builder></string-builder>"));
      
      boolean boolean0 = arrayList0.add("<string-builder></string-builder>");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains("<string-builder></string-builder>"));
      
      boolean boolean1 = arrayList0.add("C");
      assertTrue(boolean1 == boolean0);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1);
      assertTrue(arrayList0.contains("<string-builder></string-builder>"));
      
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('G');
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('G', (char)cSVFormat1.getCommentStart());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getQuoteChar());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isNullHandling());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isQuoting());
      assertTrue(cSVFormat1.isCommentingEnabled());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringBuilder0, cSVFormat0);
      assertNotNull(cSVPrinter2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertEquals("", stringBuilder0.toString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      ValueLong valueLong0 = ValueLong.get(0L);
      assertNotNull(valueLong0);
      assertEquals(0, valueLong0.getSignum());
      assertEquals(0, valueLong0.getTableId());
      assertEquals(19L, valueLong0.getPrecision());
      assertFalse(valueLong0.isLinked());
      assertEquals(5, valueLong0.getType());
      assertEquals(0L, valueLong0.getLong());
      assertEquals("0", valueLong0.getSQL());
      assertEquals("0", valueLong0.getString());
      assertEquals(20, valueLong0.getDisplaySize());
      assertEquals(7, Value.DOUBLE);
      assertEquals(20, ValueLong.DISPLAY_SIZE);
      assertEquals(22, Value.TYPE_COUNT);
      assertEquals(5, Value.LONG);
      assertEquals(1, Value.BOOLEAN);
      assertEquals(4, Value.INT);
      assertEquals(9, Value.TIME);
      assertEquals(18, Value.RESULT_SET);
      assertEquals(0, Value.NULL);
      assertEquals(21, Value.STRING_FIXED);
      assertEquals(10, Value.DATE);
      assertEquals(12, Value.BYTES);
      assertEquals(2, Value.BYTE);
      assertEquals(13, Value.STRING);
      assertEquals(15, Value.BLOB);
      assertEquals(20, Value.UUID);
      assertEquals(17, Value.ARRAY);
      assertEquals(16, Value.CLOB);
      assertEquals(14, Value.STRING_IGNORECASE);
      assertEquals(19, Value.JAVA_OBJECT);
      assertEquals(8, Value.FLOAT);
      assertEquals(3, Value.SHORT);
      assertEquals(19, ValueLong.PRECISION);
      assertEquals(11, Value.TIMESTAMP);
      assertEquals((-1), Value.UNKNOWN);
      assertEquals(6, Value.DECIMAL);
      
      SimpleResultSet simpleResultSet0 = (SimpleResultSet)valueLong0.getResultSet();
      assertNotNull(simpleResultSet0);
      assertEquals(0, valueLong0.getSignum());
      assertEquals(0, valueLong0.getTableId());
      assertEquals(19L, valueLong0.getPrecision());
      assertFalse(valueLong0.isLinked());
      assertEquals(5, valueLong0.getType());
      assertEquals(0L, valueLong0.getLong());
      assertEquals("0", valueLong0.getSQL());
      assertEquals("0", valueLong0.getString());
      assertEquals(20, valueLong0.getDisplaySize());
      assertTrue(simpleResultSet0.getAutoClose());
      assertFalse(simpleResultSet0.isClosed());
      assertEquals(0, simpleResultSet0.getRow());
      assertEquals(0, simpleResultSet0.getFetchSize());
      assertEquals(1000, simpleResultSet0.getFetchDirection());
      assertEquals(1003, simpleResultSet0.getType());
      assertEquals(1, simpleResultSet0.getHoldability());
      assertEquals(1007, simpleResultSet0.getConcurrency());
      assertFalse(simpleResultSet0.wasNull());
      assertEquals(1, simpleResultSet0.getColumnCount());
      assertEquals(7, Value.DOUBLE);
      assertEquals(20, ValueLong.DISPLAY_SIZE);
      assertEquals(22, Value.TYPE_COUNT);
      assertEquals(5, Value.LONG);
      assertEquals(1, Value.BOOLEAN);
      assertEquals(4, Value.INT);
      assertEquals(9, Value.TIME);
      assertEquals(18, Value.RESULT_SET);
      assertEquals(0, Value.NULL);
      assertEquals(21, Value.STRING_FIXED);
      assertEquals(10, Value.DATE);
      assertEquals(12, Value.BYTES);
      assertEquals(2, Value.BYTE);
      assertEquals(13, Value.STRING);
      assertEquals(15, Value.BLOB);
      assertEquals(20, Value.UUID);
      assertEquals(17, Value.ARRAY);
      assertEquals(16, Value.CLOB);
      assertEquals(14, Value.STRING_IGNORECASE);
      assertEquals(19, Value.JAVA_OBJECT);
      assertEquals(8, Value.FLOAT);
      assertEquals(3, Value.SHORT);
      assertEquals(19, ValueLong.PRECISION);
      assertEquals(11, Value.TIMESTAMP);
      assertEquals((-1), Value.UNKNOWN);
      assertEquals(6, Value.DECIMAL);
      
      cSVPrinter1.printRecords((ResultSet) simpleResultSet0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter2));
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(0, valueLong0.getSignum());
      assertEquals(0, valueLong0.getTableId());
      assertEquals(19L, valueLong0.getPrecision());
      assertFalse(valueLong0.isLinked());
      assertEquals(5, valueLong0.getType());
      assertEquals(0L, valueLong0.getLong());
      assertEquals("0", valueLong0.getSQL());
      assertEquals("0", valueLong0.getString());
      assertEquals(20, valueLong0.getDisplaySize());
      assertTrue(simpleResultSet0.getAutoClose());
      assertEquals(0, simpleResultSet0.getRow());
      assertEquals(0, simpleResultSet0.getFetchSize());
      assertEquals(1000, simpleResultSet0.getFetchDirection());
      assertEquals(1003, simpleResultSet0.getType());
      assertEquals(1, simpleResultSet0.getHoldability());
      assertTrue(simpleResultSet0.isClosed());
      assertEquals(1007, simpleResultSet0.getConcurrency());
      assertFalse(simpleResultSet0.wasNull());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      assertNotSame(cSVPrinter1, cSVPrinter2);
      assertEquals(7, Value.DOUBLE);
      assertEquals(20, ValueLong.DISPLAY_SIZE);
      assertEquals(22, Value.TYPE_COUNT);
      assertEquals(5, Value.LONG);
      assertEquals(1, Value.BOOLEAN);
      assertEquals(4, Value.INT);
      assertEquals(9, Value.TIME);
      assertEquals(18, Value.RESULT_SET);
      assertEquals(0, Value.NULL);
      assertEquals(21, Value.STRING_FIXED);
      assertEquals(10, Value.DATE);
      assertEquals(12, Value.BYTES);
      assertEquals(2, Value.BYTE);
      assertEquals(13, Value.STRING);
      assertEquals(15, Value.BLOB);
      assertEquals(20, Value.UUID);
      assertEquals(17, Value.ARRAY);
      assertEquals(16, Value.CLOB);
      assertEquals(14, Value.STRING_IGNORECASE);
      assertEquals(19, Value.JAVA_OBJECT);
      assertEquals(8, Value.FLOAT);
      assertEquals(3, Value.SHORT);
      assertEquals(19, ValueLong.PRECISION);
      assertEquals(11, Value.TIMESTAMP);
      assertEquals((-1), Value.UNKNOWN);
      assertEquals(6, Value.DECIMAL);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      Vector<Delayed> vector0 = new Vector<Delayed>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      CSVFormat cSVFormat0 = CSVFormat.newFormat('c');
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('c', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getRecordSeparator());
      
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('c', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('c', cSVFormat1.getDelimiter());
      assertEquals(Quote.MINIMAL, cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(""));
      
      boolean boolean0 = arrayList0.add("`");
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertFalse(arrayList0.contains(""));
      assertTrue(arrayList0.contains("`"));
      
      boolean boolean1 = arrayList0.add("$");
      assertTrue(boolean1 == boolean0);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1);
      assertFalse(arrayList0.contains(""));
      assertTrue(arrayList0.contains("$"));
      
      boolean boolean2 = arrayList0.add("A");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(3, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean2);
      assertFalse(arrayList0.contains(""));
      assertTrue(arrayList0.contains("$"));
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertNotNull(arrayList1);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(arrayList1.contains(""));
      
      boolean boolean3 = arrayList1.add("&m\"_G<N@\"(R");
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertNotSame(arrayList1, arrayList0);
      assertTrue(boolean3);
      assertTrue(arrayList1.contains("&m\"_G<N@\"(R"));
      assertFalse(arrayList1.contains(""));
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat1);
      assertNotNull(cSVPrinter0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals("", stringBuilder0.toString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('c', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('c', cSVFormat1.getDelimiter());
      assertEquals(Quote.MINIMAL, cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('c', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('c', cSVFormat1.getDelimiter());
      assertEquals(Quote.MINIMAL, cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(3, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(arrayList0, arrayList1);
      assertFalse(arrayList0.contains(""));
      assertTrue(arrayList0.contains("$"));
      
      StringBuilder stringBuilder1 = new StringBuilder();
      assertNotNull(stringBuilder1);
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertEquals("", stringBuilder1.toString());
      
      cSVPrinter0.close();
      assertFalse(stringBuilder0.equals((Object)stringBuilder1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getEscape());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isEscaping());
      assertEquals('c', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.isQuoting());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertEquals('c', cSVFormat1.getDelimiter());
      assertEquals(Quote.MINIMAL, cSVFormat1.getQuotePolicy());
      assertNull(cSVFormat1.getEscape());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertNotSame(stringBuilder0, stringBuilder1);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertEquals("", stringBuilder0.toString());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("<string-builder></string-builder>"));
      
      boolean boolean0 = arrayList0.add("pBBvBUo]r=");
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains("pBBvBUo]r="));
      assertFalse(arrayList0.contains("<string-builder></string-builder>"));
      
      boolean boolean1 = arrayList0.add((String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean1);
      assertTrue(arrayList0.contains("pBBvBUo]r="));
      assertFalse(arrayList0.contains("<string-builder></string-builder>"));
      
      boolean boolean2 = arrayList0.add("pBBvBUo]r=");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(3, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean2);
      assertTrue(arrayList0.contains("pBBvBUo]r="));
      assertFalse(arrayList0.contains("<string-builder></string-builder>"));
      
      boolean boolean3 = arrayList0.add("mf,U=4V\tBkr");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(4, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean3);
      assertTrue(arrayList0.contains("pBBvBUo]r="));
      assertFalse(arrayList0.contains("<string-builder></string-builder>"));
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer(3);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) stringBuffer0);
      assertNotNull(stringWriter1);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("", stringWriter1.toString());
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      
      StringBuffer stringBuffer1 = stringWriter1.getBuffer();
      assertNotNull(stringBuffer1);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("", stringWriter1.toString());
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
      assertSame(stringWriter0, stringWriter1);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringWriter1, stringWriter0);
      assertNotSame(stringBuffer1, stringBuffer0);
      
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuffer1, cSVFormat0);
      assertNotNull(cSVPrinter1);
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("", stringWriter1.toString());
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
      
      cSVPrinter1.printRecord((Iterable<?>) arrayList0);
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(4, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(85, stringBuffer1.length());
      assertSame(stringWriter0, stringWriter1);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertSame(stringWriter1, stringWriter0);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      assertTrue(arrayList0.contains("pBBvBUo]r="));
      assertFalse(arrayList0.contains("<string-builder></string-builder>"));
      
      CSVPrinter cSVPrinter2 = cSVFormat0.print(stringWriter0);
      assertNotNull(cSVPrinter2);
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertSame(stringWriter0, stringWriter1);
      assertNotSame(cSVPrinter2, cSVPrinter0);
      assertNotSame(cSVPrinter2, cSVPrinter1);
      
      StringBuffer stringBuffer2 = (StringBuffer)cSVPrinter1.getOut();
      assertNotNull(stringBuffer2);
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter2));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertFalse(stringBuffer2.equals((Object)stringBuffer0));
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(85, stringBuffer1.length());
      assertEquals(85, stringBuffer2.length());
      assertSame(stringWriter0, stringWriter1);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertNotSame(stringBuffer0, stringBuffer2);
      assertSame(stringWriter1, stringWriter0);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuffer1, stringBuffer2);
      assertNotSame(cSVPrinter1, cSVPrinter2);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      assertNotSame(stringBuffer2, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer1);
      
      CSVPrinter cSVPrinter3 = cSVFormat0.print(stringBuffer2);
      assertNotNull(cSVPrinter3);
      assertFalse(cSVPrinter3.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter3.equals((Object)cSVPrinter2));
      assertFalse(cSVPrinter3.equals((Object)cSVPrinter1));
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertFalse(stringBuffer0.equals((Object)stringBuffer2));
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter2));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertFalse(stringBuffer2.equals((Object)stringBuffer0));
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(85, stringBuffer1.length());
      assertEquals(85, stringBuffer2.length());
      assertNotSame(cSVPrinter3, cSVPrinter0);
      assertNotSame(cSVPrinter3, cSVPrinter2);
      assertNotSame(cSVPrinter3, cSVPrinter1);
      assertSame(stringWriter0, stringWriter1);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertNotSame(stringBuffer0, stringBuffer2);
      assertSame(stringWriter1, stringWriter0);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuffer1, stringBuffer2);
      assertNotSame(cSVPrinter1, cSVPrinter2);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      assertNotSame(cSVPrinter1, cSVPrinter3);
      assertNotSame(stringBuffer2, stringBuffer0);
      assertSame(stringBuffer2, stringBuffer1);
      
      cSVPrinter2.close();
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter3));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertSame(stringWriter0, stringWriter1);
      assertNotSame(cSVPrinter2, cSVPrinter3);
      assertNotSame(cSVPrinter2, cSVPrinter0);
      assertNotSame(cSVPrinter2, cSVPrinter1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isEscaping());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertEquals("", stringBuilder0.toString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isEscaping());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getEscape());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNotSame(cSVFormat1, cSVFormat0);
      
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat0);
      assertNotNull(cSVPrinter1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertEquals("", stringBuilder0.toString());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isEscaping());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("<string-builder></string-builder>"));
      
      boolean boolean0 = arrayList0.add((String) null);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertFalse(arrayList0.contains("<string-builder></string-builder>"));
      
      boolean boolean1 = arrayList0.add("ON9'f");
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean1);
      assertTrue(arrayList0.contains("ON9'f"));
      assertFalse(arrayList0.contains("<string-builder></string-builder>"));
      
      boolean boolean2 = arrayList0.add((String) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertTrue(boolean2);
      assertTrue(arrayList0.contains("ON9'f"));
      assertFalse(arrayList0.contains("<string-builder></string-builder>"));
      
      boolean boolean3 = arrayList0.add("");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(4, arrayList0.size());
      assertTrue(boolean3);
      assertTrue(arrayList0.contains("ON9'f"));
      assertFalse(arrayList0.contains("<string-builder></string-builder>"));
      
      cSVPrinter1.printRecord((Iterable<?>) arrayList0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isEscaping());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(arrayList0.isEmpty());
      assertEquals(4, arrayList0.size());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      assertTrue(arrayList0.contains("ON9'f"));
      assertFalse(arrayList0.contains("<string-builder></string-builder>"));
      
      CSVPrinter cSVPrinter2 = cSVFormat1.print(stringBuilder0);
      assertNotNull(cSVPrinter2);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getEscape());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVPrinter2, cSVPrinter1);
      assertNotSame(cSVPrinter2, cSVPrinter0);
      
      CSVPrinter cSVPrinter3 = cSVFormat1.print(stringBuilder0);
      assertNotNull(cSVPrinter3);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVPrinter3.equals((Object)cSVPrinter1));
      assertFalse(cSVPrinter3.equals((Object)cSVPrinter2));
      assertFalse(cSVPrinter3.equals((Object)cSVPrinter0));
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscaping());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isQuoting());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertNull(cSVFormat1.getNullString());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getEscape());
      assertEquals('\"', (char)cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertFalse(cSVFormat1.isNullHandling());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVPrinter3, cSVPrinter1);
      assertNotSame(cSVPrinter3, cSVPrinter2);
      assertNotSame(cSVPrinter3, cSVPrinter0);
      
      cSVPrinter1.close();
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter3));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter2));
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertTrue(cSVFormat0.isEscaping());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      assertNotSame(cSVPrinter1, cSVPrinter3);
      assertNotSame(cSVPrinter1, cSVPrinter2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      Vector<Delayed> vector0 = new Vector<Delayed>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<string-builder></string-builder>");
      assertFalse(boolean0);
      
      TreeSet<MockFileReader> treeSet0 = new TreeSet<MockFileReader>();
      assertNotNull(treeSet0);
      
      TreeSet<MockFileReader> treeSet1 = new TreeSet<MockFileReader>((SortedSet<MockFileReader>) treeSet0);
      assertNotNull(treeSet1);
      assertTrue(treeSet1.equals((Object)treeSet0));
      
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertEquals("", stringBuilder0.toString());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) vector0;
      objectArray0[1] = (Object) treeSet1;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) stringBuilder0;
      objectArray0[5] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(6, objectArray0.length);
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      
      cSVPrinter0.flush();
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat0);
      assertNotNull(cSVPrinter1);
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringBuilder0, cSVFormat0);
      assertNotNull(cSVPrinter2);
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      
      cSVPrinter2.printRecords((Iterable<?>) treeSet0);
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertTrue(treeSet0.equals((Object)treeSet1));
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNotSame(cSVPrinter2, cSVPrinter0);
      assertNotSame(cSVPrinter2, cSVPrinter1);
      assertNotSame(treeSet0, treeSet1);
      
      cSVPrinter2.flush();
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNotSame(cSVPrinter2, cSVPrinter0);
      assertNotSame(cSVPrinter2, cSVPrinter1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertEquals("", stringBuilder0.toString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      
      Vector<Delayed> vector0 = new Vector<Delayed>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      assertNotNull(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuoteChar());
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat0);
      
      Character character0 = new Character('f');
      assertNotNull(character0);
      assertEquals('f', (char)character0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      assertNotNull(cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('f', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getQuotePolicy());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('+');
      assertNotNull(cSVFormat3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuoteChar());
      assertEquals("\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.isQuoting());
      assertNull(cSVFormat3.getQuoteChar());
      assertNull(cSVFormat3.getNullString());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals('\\', (char)cSVFormat3.getEscape());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertEquals('+', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertNull(cSVFormat3.getCommentStart());
      assertFalse(cSVFormat3.isCommentingEnabled());
      assertTrue(cSVFormat3.isEscaping());
      assertFalse(cSVFormat3.isNullHandling());
      assertNull(cSVFormat3.getQuotePolicy());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat3, cSVFormat0);
      assertNotSame(cSVFormat3, cSVFormat2);
      assertNotSame(cSVFormat3, cSVFormat1);
      
      CSVFormat cSVFormat4 = cSVFormat1.withDelimiter('f');
      assertNotNull(cSVFormat4);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getCommentStart());
      assertNull(cSVFormat4.getQuotePolicy());
      assertTrue(cSVFormat4.isEscaping());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.isQuoting());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.isNullHandling());
      assertEquals('\\', (char)cSVFormat4.getEscape());
      assertNull(cSVFormat4.getQuoteChar());
      assertEquals('f', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat2);
      
      CSVFormat cSVFormat5 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat5);
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat5.equals((Object)cSVFormat3));
      assertFalse(cSVFormat5.equals((Object)cSVFormat1));
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.isEscaping());
      assertNull(cSVFormat5.getCommentStart());
      assertNull(cSVFormat5.getNullString());
      assertEquals("\r\n", cSVFormat5.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat5.getQuoteChar());
      assertEquals(',', cSVFormat5.getDelimiter());
      assertTrue(cSVFormat5.isQuoting());
      assertFalse(cSVFormat5.isCommentingEnabled());
      assertNull(cSVFormat5.getEscape());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertFalse(cSVFormat5.isNullHandling());
      assertNull(cSVFormat5.getQuotePolicy());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertNotSame(cSVFormat5, cSVFormat2);
      assertNotSame(cSVFormat5, cSVFormat4);
      assertNotSame(cSVFormat5, cSVFormat0);
      assertNotSame(cSVFormat5, cSVFormat3);
      assertNotSame(cSVFormat5, cSVFormat1);
      
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat4);
      assertNotNull(cSVPrinter1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertEquals("", stringBuilder0.toString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getCommentStart());
      assertNull(cSVFormat4.getQuotePolicy());
      assertTrue(cSVFormat4.isEscaping());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.isQuoting());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.isNullHandling());
      assertEquals('\\', (char)cSVFormat4.getEscape());
      assertNull(cSVFormat4.getQuoteChar());
      assertEquals('f', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.isCommentingEnabled());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("<string-builder></string-builder>"));
      
      boolean boolean0 = arrayList0.add("");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertFalse(arrayList0.contains("<string-builder></string-builder>"));
      assertTrue(arrayList0.contains(""));
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertNotNull(arrayList1);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(arrayList1.contains("<string-builder></string-builder>"));
      
      boolean boolean1 = arrayList1.add("");
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertNotSame(arrayList1, arrayList0);
      assertTrue(boolean1);
      assertFalse(arrayList1.contains("<string-builder></string-builder>"));
      assertTrue(arrayList1.contains(""));
      
      boolean boolean2 = arrayList0.add("<string-builder></string-builder>");
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotSame(arrayList0, arrayList1);
      assertTrue(boolean2);
      assertTrue(arrayList0.contains(""));
      
      boolean boolean3 = arrayList0.add((String) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertEquals(3, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotSame(arrayList0, arrayList1);
      assertTrue(boolean3);
      assertTrue(arrayList0.contains(""));
      
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringBuilder0, cSVFormat1);
      assertNotNull(cSVPrinter2);
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertEquals("", stringBuilder0.toString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuoteChar());
      
      cSVPrinter1.printRecord((Iterable<?>) arrayList1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter2));
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuoteChar());
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertNull(cSVFormat4.getCommentStart());
      assertNull(cSVFormat4.getQuotePolicy());
      assertTrue(cSVFormat4.isEscaping());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      assertFalse(cSVFormat4.isQuoting());
      assertNull(cSVFormat4.getNullString());
      assertFalse(cSVFormat4.isNullHandling());
      assertEquals('\\', (char)cSVFormat4.getEscape());
      assertNull(cSVFormat4.getQuoteChar());
      assertEquals('f', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat4.getRecordSeparator());
      assertFalse(cSVFormat4.isCommentingEnabled());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat0);
      assertNotSame(cSVFormat4, cSVFormat1);
      assertNotSame(cSVFormat4, cSVFormat3);
      assertNotSame(cSVFormat4, cSVFormat5);
      assertNotSame(cSVFormat4, cSVFormat2);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      assertNotSame(cSVPrinter1, cSVPrinter2);
      assertNotSame(arrayList1, arrayList0);
      assertFalse(arrayList1.contains("<string-builder></string-builder>"));
      assertTrue(arrayList1.contains(""));
      
      CSVPrinter cSVPrinter3 = cSVFormat2.print(stringBuilder0);
      assertNotNull(cSVPrinter3);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVPrinter3.equals((Object)cSVPrinter1));
      assertFalse(cSVPrinter3.equals((Object)cSVPrinter2));
      assertFalse(cSVPrinter3.equals((Object)cSVPrinter0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertFalse(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuoteChar());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('f', (char)cSVFormat2.getEscape());
      assertFalse(cSVFormat2.isQuoting());
      assertFalse(cSVFormat2.isCommentingEnabled());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertNull(cSVFormat2.getQuoteChar());
      assertFalse(cSVFormat2.getSkipHeaderRecord());
      assertNull(cSVFormat2.getNullString());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertNull(cSVFormat2.getCommentStart());
      assertEquals("\n", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat2.isEscaping());
      assertFalse(cSVFormat2.isNullHandling());
      assertNull(cSVFormat2.getQuotePolicy());
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVPrinter3, cSVPrinter1);
      assertNotSame(cSVPrinter3, cSVPrinter2);
      assertNotSame(cSVPrinter3, cSVPrinter0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat1);
      assertNotSame(cSVFormat2, cSVFormat0);
      assertNotSame(cSVFormat2, cSVFormat3);
      assertNotSame(cSVFormat2, cSVFormat4);
      assertNotSame(cSVFormat2, cSVFormat5);
      
      StringBuilder stringBuilder1 = (StringBuilder)cSVPrinter2.getOut();
      assertNotNull(stringBuilder1);
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat4));
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertFalse(cSVFormat1.isCommentingEnabled());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullHandling());
      assertNull(cSVFormat1.getQuotePolicy());
      assertTrue(cSVFormat1.isEscaping());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.isQuoting());
      assertNull(cSVFormat1.getCommentStart());
      assertNull(cSVFormat1.getNullString());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('\\', (char)cSVFormat1.getEscape());
      assertNull(cSVFormat1.getQuoteChar());
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(cSVPrinter2, cSVPrinter1);
      assertNotSame(cSVPrinter2, cSVPrinter0);
      assertNotSame(cSVPrinter2, cSVPrinter3);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotSame(cSVFormat1, cSVFormat4);
      assertNotSame(cSVFormat1, cSVFormat2);
      assertNotSame(cSVFormat1, cSVFormat5);
      assertNotSame(cSVFormat1, cSVFormat0);
      assertNotSame(cSVFormat1, cSVFormat3);
      
      cSVPrinter0.close();
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter1));
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter3));
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter2));
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getNullString());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isQuoting());
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(cSVFormat0, cSVFormat2);
      assertNotSame(cSVFormat0, cSVFormat5);
      assertNotSame(cSVFormat0, cSVFormat3);
      assertNotSame(cSVFormat0, cSVFormat1);
      assertNotSame(cSVFormat0, cSVFormat4);
      assertNotSame(cSVPrinter0, cSVPrinter1);
      assertNotSame(cSVPrinter0, cSVPrinter3);
      assertNotSame(cSVPrinter0, cSVPrinter2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertEquals("", stringBuilder0.toString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat0);
      assertNotNull(cSVPrinter1);
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertEquals("", stringBuilder0.toString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("<string-builder></string-builder>"));
      
      boolean boolean0 = arrayList0.add("<string-builder></string-builder>");
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains("<string-builder></string-builder>"));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object[] objectArray0 = new Object[0];
      cSVPrinter1.printRecords(objectArray0);
      assertEquals(0, objectArray0.length);
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertEquals("", stringBuilder0.toString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNotSame(cSVPrinter1, cSVPrinter0);
      
      cSVPrinter1.flush();
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertEquals("", stringBuilder0.toString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertNotSame(cSVPrinter1, cSVPrinter0);
      
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringBuilder0, cSVFormat0);
      assertNotNull(cSVPrinter2);
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertEquals("", stringBuilder0.toString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      
      ArrayDeque<MockFileReader> arrayDeque0 = new ArrayDeque<MockFileReader>(474);
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      cSVPrinter2.printRecord((Iterable<?>) arrayDeque0);
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertEquals("\n", stringBuilder0.toString());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotSame(cSVPrinter2, cSVPrinter0);
      assertNotSame(cSVPrinter2, cSVPrinter1);
      
      cSVPrinter1.printRecords((Iterable<?>) arrayList0);
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter2));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat0.getDelimiter());
      assertEquals('\\', (char)cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\n", cSVFormat0.getRecordSeparator());
      assertNull(cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNotSame(cSVPrinter1, cSVPrinter2);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      assertTrue(arrayList0.contains("<string-builder></string-builder>"));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertEquals("", stringBuilder0.toString());
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("<string-builder></string-builder>"));
      
      boolean boolean0 = arrayList0.add((String) null);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertFalse(arrayList0.contains("<string-builder></string-builder>"));
      
      boolean boolean1 = arrayList0.add("A");
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean1);
      assertTrue(arrayList0.contains("A"));
      assertFalse(arrayList0.contains("<string-builder></string-builder>"));
      
      boolean boolean2 = arrayList0.add("B");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertTrue(boolean2);
      assertTrue(arrayList0.contains("B"));
      assertFalse(arrayList0.contains("<string-builder></string-builder>"));
      
      boolean boolean3 = arrayList0.add("NewValue");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(arrayList0.isEmpty());
      assertEquals(4, arrayList0.size());
      assertTrue(boolean3);
      assertTrue(arrayList0.contains("B"));
      assertFalse(arrayList0.contains("<string-builder></string-builder>"));
      
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(arrayList0.isEmpty());
      assertEquals(4, arrayList0.size());
      assertTrue(arrayList0.contains("B"));
      assertFalse(arrayList0.contains("<string-builder></string-builder>"));
      
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringBuilder0);
      assertNotNull(cSVPrinter1);
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNotSame(cSVPrinter1, cSVPrinter0);
      
      StringBuilder stringBuilder1 = (StringBuilder)cSVPrinter1.getOut();
      assertNotNull(stringBuilder1);
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      assertSame(stringBuilder1, stringBuilder0);
      
      CSVPrinter cSVPrinter2 = cSVFormat0.print(stringBuilder1);
      assertNotNull(cSVPrinter2);
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(cSVPrinter1, cSVPrinter2);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotSame(cSVPrinter2, cSVPrinter0);
      assertNotSame(cSVPrinter2, cSVPrinter1);
      
      cSVPrinter2.close();
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter2));
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
      assertNull(cSVFormat0.getQuotePolicy());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.isNullHandling());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getEscape());
      assertFalse(cSVFormat0.isEscaping());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertSame(stringBuilder0, stringBuilder1);
      assertNotSame(cSVPrinter1, cSVPrinter2);
      assertNotSame(cSVPrinter1, cSVPrinter0);
      assertSame(stringBuilder1, stringBuilder0);
      assertNotSame(cSVPrinter2, cSVPrinter0);
      assertNotSame(cSVPrinter2, cSVPrinter1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      assertNotNull(cSVPrinter0);
      assertEquals("", stringBuilder0.toString());
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("<string-builder></string-builder>"));
      
      boolean boolean0 = arrayList0.add((String) null);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertFalse(arrayList0.contains("<string-builder></string-builder>"));
      
      boolean boolean1 = arrayList0.add("A");
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean1);
      assertTrue(arrayList0.contains("A"));
      assertFalse(arrayList0.contains("<string-builder></string-builder>"));
      
      boolean boolean2 = arrayList0.add("<string-builder></string-builder>");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertTrue(boolean2);
      assertTrue(arrayList0.contains("A"));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "A";
      objectArray0[1] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(2, objectArray0.length);
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      cSVPrinter0.flush();
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat0);
      assertNotNull(cSVPrinter1);
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      cSVPrinter1.printRecords((Iterable<?>) arrayList0);
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
      assertFalse(cSVFormat0.isEscaping());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertNull(cSVFormat0.getNullString());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertNull(cSVFormat0.getEscape());
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertNull(cSVFormat0.getQuotePolicy());
      assertFalse(cSVFormat0.isNullHandling());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertNotSame(cSVPrinter1, cSVPrinter0);
      assertTrue(arrayList0.contains("A"));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      assertNotNull(cSVFormat0);
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add((String) null);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = arrayList0.add("A");
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean1);
      assertTrue(arrayList0.contains("A"));
      
      boolean boolean2 = arrayList0.add("<string-builder></string-builder>");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertTrue(boolean2);
      assertTrue(arrayList0.contains("<string-builder></string-builder>"));
      
      boolean boolean3 = arrayList0.add("<string-builder></string-builder>");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(arrayList0.isEmpty());
      assertEquals(4, arrayList0.size());
      assertTrue(boolean3);
      assertTrue(arrayList0.contains("<string-builder></string-builder>"));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "A";
      ValueRow valueRow0 = ValueRow.getEmpty();
      assertNotNull(valueRow0);
      assertEquals(0, valueRow0.getTableId());
      assertFalse(valueRow0.isLinked());
      assertEquals(39, valueRow0.getValueType());
      assertEquals(18, Value.RESULT_SET);
      assertEquals(11, Value.TIMESTAMP);
      assertEquals((-1), Value.UNKNOWN);
      assertEquals(5, Value.LONG);
      assertEquals(8, Value.FLOAT);
      assertEquals(9, Value.TIME);
      assertEquals(12, Value.BYTES);
      assertEquals(7, Value.DOUBLE);
      assertEquals(15, Value.BLOB);
      assertEquals(14, Value.STRING_IGNORECASE);
      assertEquals(17, Value.ARRAY);
      assertEquals(16, Value.CLOB);
      assertEquals(20, Value.UUID);
      assertEquals(13, Value.STRING);
      assertEquals(10, Value.DATE);
      assertEquals(1, Value.BOOLEAN);
      assertEquals(2, Value.BYTE);
      assertEquals(3, Value.SHORT);
      assertEquals(4, Value.INT);
      assertEquals(19, Value.JAVA_OBJECT);
      assertEquals(6, Value.DECIMAL);
      assertEquals(0, Value.NULL);
      assertEquals(21, Value.STRING_FIXED);
      assertEquals(22, Value.TYPE_COUNT);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = valueRow0.getSQL(stringBuilder0);
      assertNotNull(stringBuilder1);
      assertEquals(0, valueRow0.getTableId());
      assertFalse(valueRow0.isLinked());
      assertEquals(39, valueRow0.getValueType());
      assertEquals("ROW ()", stringBuilder0.toString());
      assertEquals("ROW ()", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals(18, Value.RESULT_SET);
      assertEquals(11, Value.TIMESTAMP);
      assertEquals((-1), Value.UNKNOWN);
      assertEquals(5, Value.LONG);
      assertEquals(8, Value.FLOAT);
      assertEquals(9, Value.TIME);
      assertEquals(12, Value.BYTES);
      assertEquals(7, Value.DOUBLE);
      assertEquals(15, Value.BLOB);
      assertEquals(14, Value.STRING_IGNORECASE);
      assertEquals(17, Value.ARRAY);
      assertEquals(16, Value.CLOB);
      assertEquals(20, Value.UUID);
      assertEquals(13, Value.STRING);
      assertEquals(10, Value.DATE);
      assertEquals(1, Value.BOOLEAN);
      assertEquals(2, Value.BYTE);
      assertEquals(3, Value.SHORT);
      assertEquals(4, Value.INT);
      assertEquals(19, Value.JAVA_OBJECT);
      assertEquals(6, Value.DECIMAL);
      assertEquals(0, Value.NULL);
      assertEquals(21, Value.STRING_FIXED);
      assertEquals(22, Value.TYPE_COUNT);
      
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringBuilder1);
      assertNotNull(cSVPrinter0);
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertEquals(0, valueRow0.getTableId());
      assertFalse(valueRow0.isLinked());
      assertEquals(39, valueRow0.getValueType());
      assertEquals("ROW ()", stringBuilder0.toString());
      assertEquals("ROW ()", stringBuilder1.toString());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals(18, Value.RESULT_SET);
      assertEquals(11, Value.TIMESTAMP);
      assertEquals((-1), Value.UNKNOWN);
      assertEquals(5, Value.LONG);
      assertEquals(8, Value.FLOAT);
      assertEquals(9, Value.TIME);
      assertEquals(12, Value.BYTES);
      assertEquals(7, Value.DOUBLE);
      assertEquals(15, Value.BLOB);
      assertEquals(14, Value.STRING_IGNORECASE);
      assertEquals(17, Value.ARRAY);
      assertEquals(16, Value.CLOB);
      assertEquals(20, Value.UUID);
      assertEquals(13, Value.STRING);
      assertEquals(10, Value.DATE);
      assertEquals(1, Value.BOOLEAN);
      assertEquals(2, Value.BYTE);
      assertEquals(3, Value.SHORT);
      assertEquals(4, Value.INT);
      assertEquals(19, Value.JAVA_OBJECT);
      assertEquals(6, Value.DECIMAL);
      assertEquals(0, Value.NULL);
      assertEquals(21, Value.STRING_FIXED);
      assertEquals(22, Value.TYPE_COUNT);
      
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(2, objectArray0.length);
      assertTrue(cSVFormat0.getIgnoreEmptyLines());
      assertNull(cSVFormat0.getCommentStart());
      assertNull(cSVFormat0.getQuotePolicy());
      assertEquals("\r\n", cSVFormat0.getRecordSeparator());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals(',', cSVFormat0.getDelimiter());
      assertTrue(cSVFormat0.isQuoting());
      assertFalse(cSVFormat0.isEscaping());
      assertNull(cSVFormat0.getNullString());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat0.getQuoteChar());
      assertFalse(cSVFormat0.isCommentingEnabled());
      assertFalse(cSVFormat0.isNullHandling());
      assertNull(cSVFormat0.getEscape());
      assertEquals(0, valueRow0.getTableId());
      assertFalse(valueRow0.isLinked());
      assertEquals(39, valueRow0.getValueType());
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals(18, Value.RESULT_SET);
      assertEquals(11, Value.TIMESTAMP);
      assertEquals((-1), Value.UNKNOWN);
      assertEquals(5, Value.LONG);
      assertEquals(8, Value.FLOAT);
      assertEquals(9, Value.TIME);
      assertEquals(12, Value.BYTES);
      assertEquals(7, Value.DOUBLE);
      assertEquals(15, Value.BLOB);
      assertEquals(14, Value.STRING_IGNORECASE);
      assertEquals(17, Value.ARRAY);
      assertEquals(16, Value.CLOB);
      assertEquals(20, Value.UUID);
      assertEquals(13, Value.STRING);
      assertEquals(10, Value.DATE);
      assertEquals(1, Value.BOOLEAN);
      assertEquals(2, Value.BYTE);
      assertEquals(3, Value.SHORT);
      assertEquals(4, Value.INT);
      assertEquals(19, Value.JAVA_OBJECT);
      assertEquals(6, Value.DECIMAL);
      assertEquals(0, Value.NULL);
      assertEquals(21, Value.STRING_FIXED);
      assertEquals(22, Value.TYPE_COUNT);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("A");
      arrayList0.add("(");
      arrayList0.add("C");
      arrayList0.add("NewValue");
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringBuilder0);
      StringBuilder stringBuilder1 = (StringBuilder)cSVPrinter1.getOut();
      CSVPrinter cSVPrinter2 = cSVFormat0.print(stringBuilder1);
      cSVPrinter2.close();
      cSVPrinter1.printComment("");
      assertEquals("\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add((String) null);
      arrayList0.add("A");
      arrayList0.add("<string-builder></string-builder>");
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVFormat0.print(stringBuilder0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringBuilder0);
      cSVPrinter1.close();
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringBuilder0);
      StringBuilder stringBuilder1 = (StringBuilder)cSVPrinter1.getOut();
      CSVPrinter cSVPrinter2 = cSVFormat0.print(stringBuilder1);
      cSVPrinter2.close();
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter2));
  }
}
