/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 23:59:12 GMT 2023
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thoughtworks.xstream.io.StreamException;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.testcarver.testcase.EvoSuiteXStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = new Fraction(500.22337173726106);
      Fraction fraction1 = new Fraction(1.7136120959548862E-5);
      // Undeclared exception!
      try { 
        fraction1.subtract(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: -2,831,530,283
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = new Fraction(2.077468476500144E-4);
      fraction0.percentageValue();
      Fraction fraction1 = new Fraction(2.077468476500144E-4);
      Fraction fraction2 = Fraction.getReducedFraction((-1823), (-1823));
      fraction2.equals(fraction0);
      fraction0.ONE_HALF.abs();
      Fraction fraction3 = fraction0.negate();
      fraction0.MINUS_ONE.percentageValue();
      fraction2.ONE_HALF.subtract(fraction3);
      Fraction.getReducedFraction(390827, (-1823));
      fraction2.ONE_THIRD.abs();
      fraction0.ZERO.getField();
      fraction2.toString();
      fraction0.compareTo(fraction2);
      Fraction.getReducedFraction(2, 6);
      Fraction fraction4 = new Fraction((-175.7566559));
      Fraction fraction5 = new Fraction(1.997844754509471E-9);
      Fraction fraction6 = new Fraction(541.8594519006974);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = new Fraction(500.93812945100865);
      Fraction fraction1 = new Fraction(2.1817577415816913E-6);
      fraction1.subtract(fraction0);
      fraction0.subtract(fraction1);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-335), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -335/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = new Fraction(2.077468476500144E-4);
      Fraction fraction1 = new Fraction((-1836));
      fraction0.abs();
      Fraction fraction2 = new Fraction(0.9);
      Fraction fraction3 = new Fraction(22.4697);
      Fraction fraction4 = null;
      try {
        fraction4 = new Fraction(Double.NEGATIVE_INFINITY);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -\u221E to fraction after 100 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, 2146175819);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = new Fraction((-15.997162751323286));
      fraction0.toString();
      fraction0.add(fraction0);
      Fraction fraction1 = new Fraction(554.7706429117892);
      assertEquals(554L, fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(4.503599627370496E15);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 4,503,599,627,370,496 to fraction (4,503,599,627,370,496/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = new Fraction(745);
      // Undeclared exception!
      try { 
        fraction0.TWO_QUARTERS.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = new Fraction(107.43118052304959);
      assertEquals(107.43118F, fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = new Fraction(1.7136120959548862E-5);
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertEquals((-1115927021), fraction2.getNumerator());
      
      Fraction fraction3 = fraction1.subtract(fraction0);
      Object object0 = new Object();
      fraction1.equals(fraction3);
      assertTrue(fraction3.equals((Object)fraction2));
      assertEquals((-107.43116263908239), fraction3.doubleValue(), 0.01);
      
      Fraction fraction4 = fraction0.negate();
      int int0 = fraction4.compareTo(fraction1);
      assertEquals((-1), int0);
      assertFalse(fraction4.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0.0111111111111111, 17445017);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0.011 to fraction (10,052,677,739,666/904,740,996,569,941)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = new Fraction(107.269);
      Fraction fraction1 = fraction0.TWO_QUARTERS.divide((-569));
      Fraction fraction2 = fraction1.TWO_QUARTERS.divide((-4041));
      Fraction fraction3 = new Fraction(107.269);
      Fraction fraction4 = new Fraction((double) (-569));
      Fraction fraction5 = new Fraction((-1.0));
      assertFalse(fraction5.equals((Object)fraction4));
      
      Fraction fraction6 = new Fraction(0.9081676556297833);
      assertEquals(98, fraction6.getDenominator());
      
      Fraction fraction7 = Fraction.ZERO;
      Fraction fraction8 = fraction7.TWO.multiply(fraction2);
      fraction8.MINUS_ONE.multiply((-569));
      boolean boolean0 = fraction8.equals(fraction1);
      assertTrue(fraction0.equals((Object)fraction3));
      assertEquals((-2.4746349913387774E-4), fraction8.doubleValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1099));
      Fraction fraction1 = fraction0.THREE_QUARTERS.add((-1099));
      Fraction fraction2 = fraction1.ZERO.add(fraction0);
      assertEquals((-1098.25F), fraction1.floatValue(), 0.01F);
      assertEquals((-1099), fraction2.intValue());
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      assertSame(fraction0, fraction2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(100.0);
      Fraction fraction2 = new Fraction(100.0);
      Fraction fraction3 = fraction0.multiply((-2097));
      Fraction fraction4 = fraction2.divide(2014);
      Fraction fraction5 = new Fraction((-46401));
      Fraction fraction6 = new Fraction(0.0);
      Fraction fraction7 = new Fraction(500.0);
      Fraction fraction8 = new Fraction((double) (-46401));
      Fraction fraction9 = new Fraction(9.755392680573412E-9);
      Fraction fraction10 = fraction6.abs();
      Fraction fraction11 = new Fraction((double) (-46401));
      Fraction fraction12 = new Fraction((double) (-46401));
      Fraction fraction13 = new Fraction((-1825.554170591));
      assertEquals(240, fraction13.getDenominator());
      
      fraction1.equals(fraction4);
      assertEquals(0.04965243F, fraction4.floatValue(), 0.01F);
      
      int int0 = fraction6.compareTo(fraction8);
      assertEquals(1, int0);
      assertFalse(fraction6.equals((Object)fraction3));
      assertTrue(fraction8.equals((Object)fraction5));
      assertSame(fraction6, fraction10);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction((-583), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -583/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.003698825000014949);
      Fraction fraction1 = fraction0.subtract(3410);
      Fraction fraction2 = fraction1.abs();
      Fraction fraction3 = fraction2.add(fraction1);
      Fraction fraction4 = fraction1.ONE_FIFTH.multiply(fraction3);
      fraction2.getField();
      int int0 = fraction2.compareTo(fraction3);
      assertEquals(1, int0);
      assertTrue(fraction3.equals((Object)fraction4));
      assertEquals((byte) (-81), fraction1.byteValue());
      
      Fraction fraction5 = Fraction.getReducedFraction(807, 807);
      assertEquals(1.0F, fraction5.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = new Fraction(147.52269676352478);
      Fraction fraction1 = new Fraction(147.52269676352478);
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
      
      double double0 = fraction0.MINUS_ONE.percentageValue();
      assertEquals((-100.0), double0, 0.01);
      assertEquals(727, fraction0.getDenominator());
      
      Fraction fraction2 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(1.0, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = new Fraction(107.26883698199765);
      Fraction fraction1 = new Fraction(4.653757457617758E-6);
      Fraction fraction2 = new Fraction((-1));
      Fraction fraction3 = new Fraction(0.08326265000005151);
      Fraction fraction4 = new Fraction((-1941.208));
      Fraction fraction5 = new Fraction((double) (-1));
      fraction4.toString();
      Fraction fraction6 = new Fraction((-1184.509));
      Fraction fraction7 = new Fraction(2.356194490192345);
      Fraction fraction8 = new Fraction(0.08326265000005151);
      Fraction fraction9 = new Fraction((-1138.8706326));
      fraction7.abs();
      Fraction fraction10 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction11 = new Fraction(3047.0);
      Fraction fraction12 = new Fraction((-1185.19401));
      Fraction fraction13 = new Fraction(0.8571428571428571);
      Fraction fraction14 = new Fraction(1.0E-5);
      Fraction fraction15 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        EvoSuiteXStream.fromString("-242651 / 125");
        fail("Expecting exception: StreamException");
      
      } catch(StreamException e) {
         //
         // 
         //
         verifyException("com.thoughtworks.xstream.io.xml.XppReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = new Fraction(82);
      Fraction fraction1 = Fraction.getReducedFraction(82, 82);
      Fraction fraction2 = fraction1.MINUS_ONE.add(fraction0);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(81, fraction2.intValue());
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = new Fraction(1591);
      // Undeclared exception!
      try { 
        fraction0.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.013009155776558146);
      Fraction fraction1 = new Fraction(0.013009155776558146);
      Fraction fraction2 = fraction0.ZERO.multiply(fraction0);
      fraction0.ONE_QUARTER.toString();
      fraction2.TWO_THIRDS.add(fraction0);
      int int0 = 629;
      Fraction fraction3 = new Fraction(629);
      Fraction fraction4 = new Fraction(629);
      // Undeclared exception!
      try { 
        fraction3.divide(fraction2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = new Fraction(97355);
      Fraction fraction1 = fraction0.MINUS_ONE.abs();
      assertEquals(1L, fraction1.longValue());
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(97355, fraction0.getNumerator());
      assertEquals(0, int0);
      assertEquals(97355.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      assertEquals((-2147483648L), fraction0.longValue());
      
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = new Fraction(708);
      Fraction fraction1 = fraction0.divide(708);
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = new Fraction(21.154115667300367);
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(5902, fraction0.getNumerator());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) 20);
      Fraction fraction1 = new Fraction(7.477686949641793E-7);
      Fraction fraction2 = fraction0.subtract(fraction1);
      String string0 = fraction2.toString();
      assertEquals("20", string0);
      assertSame(fraction2, fraction0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(100.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-0.1));
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction9 = fraction8.MINUS_ONE.subtract(fraction6);
      assertEquals(10, fraction9.getDenominator());
      assertEquals((-0.9), fraction9.doubleValue(), 0.01);
      
      Fraction fraction10 = new Fraction(332.0);
      Fraction fraction11 = new Fraction((-2323.0));
      Fraction fraction12 = new Fraction(44.0);
      Fraction fraction13 = new Fraction(0.9081676556297833);
      Fraction fraction14 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction14.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction14.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction14.equals(object2);
      fraction14.equals(object2);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Fraction fraction15 = fraction5.divide(fraction0);
      assertTrue(fraction15.equals((Object)fraction5));
      
      int int0 = fraction11.getDenominator();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(100.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction((double) Integer.MAX_VALUE);
      Fraction fraction6 = new Fraction((-0.1));
      assertEquals(10, fraction6.getDenominator());
      
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction9 = new Fraction(332.0);
      Fraction fraction10 = new Fraction((-2323.0));
      Fraction fraction11 = new Fraction(44.0);
      Fraction fraction12 = new Fraction(0.9081676556297833);
      Fraction fraction13 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object2);
      boolean boolean0 = fraction13.equals(object2);
      assertFalse(boolean0);
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Fraction fraction14 = fraction5.divide(fraction0);
      Fraction fraction15 = fraction14.subtract(Integer.MAX_VALUE);
      assertEquals((-2147483549), fraction15.getNumerator());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(100.0);
      Fraction fraction2 = new Fraction((-515.2625328216503));
      assertEquals((short) (-515), fraction2.shortValue());
      
      boolean boolean0 = fraction1.equals(fraction0);
      assertTrue(boolean0);
      assertEquals(100.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.0E-5);
      Fraction fraction1 = fraction0.ONE_QUARTER.reciprocal();
      assertEquals(99999, fraction0.getDenominator());
      
      Fraction fraction2 = fraction1.ZERO.divide(fraction0);
      assertEquals(0, fraction2.getNumerator());
      assertEquals(4, fraction1.getNumerator());
      
      String string0 = fraction0.toString();
      assertEquals("1 / 99999", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = new Fraction(2147483636, 2147483636);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      fraction0.TWO_FIFTHS.subtract(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) (-1));
      Fraction fraction1 = new Fraction((double) (-1));
      Fraction fraction2 = fraction1.subtract(fraction0);
      String string0 = fraction2.toString();
      assertEquals("0", string0);
      assertEquals((-1L), fraction1.longValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = new Fraction(107.43118052304959);
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(107.4311797752809, fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2146175801, 2146175801);
      Fraction fraction1 = fraction0.negate();
      int int0 = fraction1.compareTo(fraction0);
      assertEquals((-1), int0);
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void testRemovetestRemove_39()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(100.0);
      assertTrue(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, fraction3.intValue());
      
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.12879489361479102);
      Fraction fraction6 = new Fraction(0.5643536689183336);
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction9 = new Fraction(332.0);
      Fraction fraction10 = new Fraction((-2323.0));
      assertEquals(1, fraction10.getDenominator());
      
      Fraction fraction11 = new Fraction(44.0);
      Fraction fraction12 = new Fraction(0.9081676556297833);
      assertEquals(0.9081632653061225, fraction12.doubleValue(), 0.01);
      
      Fraction fraction13 = Fraction.ZERO;
      Fraction fraction14 = new Fraction(Integer.MIN_VALUE);
      fraction13.equals(fraction14);
      assertEquals((-2.147483648E9), fraction14.doubleValue(), 0.01);
      
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object2);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      float float0 = fraction2.floatValue();
      assertFalse(fraction2.equals((Object)fraction10));
      assertEquals(500.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      fraction0.TWO.abs();
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1), (-1));
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = new Fraction(745);
      Fraction fraction1 = fraction0.divide(fraction0);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      fraction0.TWO_FIFTHS.getField();
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction(0.0);
      Fraction fraction5 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction6 = new Fraction((-242343.0));
      Fraction fraction7 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction8 = new Fraction(332.0);
      Fraction fraction9 = new Fraction((-2323.0));
      Fraction fraction10 = new Fraction(44.0);
      Fraction fraction11 = new Fraction(0.9081676556297833);
      assertEquals(98, fraction11.getDenominator());
      
      Fraction fraction12 = Fraction.ZERO;
      Fraction fraction13 = new Fraction(0.0);
      fraction12.equals(fraction13);
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object0);
      Fraction fraction14 = new Fraction((double) Integer.MIN_VALUE);
      boolean boolean0 = fraction12.equals(fraction14);
      assertFalse(boolean0);
      assertTrue(fraction14.equals((Object)fraction7));
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Fraction fraction15 = Fraction.getReducedFraction(2778, Integer.MAX_VALUE);
      assertEquals(1.2936070567432824E-6, fraction15.doubleValue(), 0.01);
      
      int int0 = fraction3.intValue();
      assertTrue(fraction3.equals((Object)fraction5));
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(100.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-0.1));
      assertEquals(10, fraction6.getDenominator());
      
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction9 = new Fraction(332.0);
      Fraction fraction10 = new Fraction((double) Integer.MAX_VALUE);
      assertTrue(fraction10.equals((Object)fraction3));
      
      Fraction fraction11 = new Fraction(44.0);
      Fraction fraction12 = new Fraction(0.9081676556297833);
      Fraction fraction13 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object2);
      Object object3 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      boolean boolean0 = fraction13.equals(object3);
      assertFalse(boolean0);
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      int int0 = fraction8.getNumerator();
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-1432));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-1,432, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(20, 20);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = new Fraction(4);
      Fraction fraction1 = fraction0.negate();
      assertEquals((-4), fraction1.getNumerator());
      assertEquals(4L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.7136120959548862E-5);
      String string0 = fraction0.toString();
      assertEquals("1 / 58356", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = new Fraction(708);
      Fraction fraction1 = fraction0.divide(708);
      Fraction fraction2 = fraction0.divide(fraction1);
      assertEquals((byte) (-60), fraction2.byteValue());
      assertEquals((short)1, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = new Fraction(75.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction3 = new Fraction((-1.0));
      Fraction fraction4 = new Fraction(0.0);
      Fraction fraction5 = new Fraction((-0.1));
      Fraction fraction6 = new Fraction((-242343.0));
      Fraction fraction7 = new Fraction(Integer.MIN_VALUE);
      assertEquals((-2147483648L), fraction7.longValue());
      
      Fraction fraction8 = new Fraction(332.0);
      Fraction fraction9 = new Fraction((double) Integer.MAX_VALUE);
      assertTrue(fraction9.equals((Object)fraction2));
      
      Fraction fraction10 = new Fraction(44.0);
      Fraction fraction11 = new Fraction(0.9081676556297833);
      Fraction fraction12 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object0);
      fraction12.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      boolean boolean0 = fraction12.equals(object2);
      assertFalse(boolean0);
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      long long0 = fraction5.longValue();
      assertEquals(10, fraction5.getDenominator());
      assertEquals(0L, long0);
      
      String string0 = fraction8.toString();
      assertEquals("332", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(4, 4);
      String string0 = fraction0.toString();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.1257310342263016);
      double double0 = fraction0.percentageValue();
      assertEquals(12.573099415204679, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1));
      Fraction fraction1 = fraction0.ONE_THIRD.add((-1));
      assertEquals((-2), fraction1.getNumerator());
      
      Fraction fraction2 = fraction0.divide(fraction0);
      assertEquals(1, fraction2.intValue());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = fraction3.FOUR_FIFTHS.add(Integer.MAX_VALUE);
      assertEquals(4.294967294E8, fraction4.doubleValue(), 0.01);
      
      Fraction fraction5 = new Fraction((-1.0));
      Fraction fraction6 = new Fraction(100.0);
      Fraction fraction7 = new Fraction((-0.1));
      Fraction fraction8 = new Fraction((-242343.0));
      Fraction fraction9 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction10 = new Fraction(332.0);
      Fraction fraction11 = new Fraction((-2323.0));
      Fraction fraction12 = new Fraction(44.0);
      Fraction fraction13 = new Fraction(0.9081676556297833);
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction9.equals(object0);
      assertEquals(1, fraction9.getDenominator());
      
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction11.equals(object1);
      assertEquals((-2323.0F), fraction11.floatValue(), 0.01F);
      
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object2);
      Object object3 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object3);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.hashCode();
      assertEquals(0.90816325F, fraction13.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.7136120959548862E-5);
      FractionField fractionField0 = fraction0.TWO_QUARTERS.getField();
      Object object0 = new Object();
      boolean boolean0 = fraction0.equals(fractionField0);
      assertFalse(boolean0);
      assertEquals(1.713619850572349E-5, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) (-2137));
      assertEquals((-2137), fraction0.getNumerator());
      assertEquals((-2137L), fraction0.longValue());
  }
}
