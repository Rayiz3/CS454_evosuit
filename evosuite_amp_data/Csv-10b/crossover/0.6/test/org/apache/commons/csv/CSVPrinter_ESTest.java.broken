/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 13:32:06 GMT 2023
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.sql.ResultSet;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.concurrent.PriorityBlockingQueue;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.testcarver.testcase.EvoSuiteXStream;
import org.h2.tools.Csv;
import org.h2.tools.SimpleResultSet;
import org.h2.value.Value;
import org.h2.value.ValueLong;
import org.h2.value.ValueRow;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(true);
      Character character0 = Character.valueOf('[');
      cSVFormat1.withCommentStart(character0);
      cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat3.withIgnoreEmptyLines(true);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat2);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("<string-builder></string-builder>");
      arrayList0.add("<string-builder></string-builder>");
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.printComment("<string-builder></string-builder>");
      cSVPrinter0.printComment("-0.0");
      System.setCurrentTimeMillis(1774L);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      Character character0 = Character.valueOf('p');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      cSVFormat0.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat3);
      cSVPrinter0.print("<string-builder></string-builder>");
      cSVPrinter0.printComment("<string-builder></string-builder>");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) stringBuilder0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) character0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) cSVFormat1;
      objectArray0[8] = (Object) character0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("<string-builder></string-builder>");
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      Object[] objectArray0 = new Object[2];
      cSVPrinter0.printRecords(objectArray0);
      assertEquals("\n\n", stringBuilder0.toString());
      
      CSVFormat cSVFormat1 = CSVFormat.newFormat('+');
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat1);
      cSVPrinter1.println();
      cSVPrinter0.printRecord(objectArray0);
      assertEquals("\n\n\t\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      arrayList0.add("f1_Y0RdN");
      CSVFormat cSVFormat1 = CSVFormat.newFormat('#');
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add(">1F8B6WCl\"+=F<ta");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat1);
      cSVPrinter0.close();
      cSVPrinter0.printRecords((Iterable<?>) arrayList1);
      cSVPrinter0.printComment("org.h2.index.PageBtree");
      cSVPrinter0.printComment("BIT");
      Object object0 = new Object();
      cSVPrinter0.print("org.h2.schema.Constant");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) arrayList1;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("W/ahDkq{dX!|U8E");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("'YK=ei]3cjW*x7?B");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(9);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('P');
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append((CharSequence) "'YK=ei]3cjW*x7?B", 9, 9);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter2, cSVFormat0);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList1.add("w(*nY^*76");
      arrayList2.add("org.apache.commons.csv.CSVPrinter");
      arrayList2.add("w(*nY^*76");
      arrayList1.add("] key: ");
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringBuilder0, cSVFormat0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList2);
      cSVPrinter2.println();
      cSVPrinter1.flush();
      cSVPrinter0.printComment("W/ahDkq{dX!|U8E");
      Object object0 = new Object();
      Object object1 = new Object();
      cSVPrinter0.close();
      cSVPrinter0.close();
      cSVPrinter0.printRecords((Iterable<?>) arrayList1);
      cSVPrinter2.print("\\");
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      Object[] objectArray0 = new Object[2];
      cSVPrinter0.print("<string-builder></string-builder>");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("org.h2.schema.Constant");
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.printComment("<string-builder></string-builder>");
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      Character character0 = Character.valueOf('p');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat4 = cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat2.withDelimiter('\"');
      cSVFormat2.withDelimiter('v');
      CSVFormat cSVFormat5 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat3);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("dbNkB X^#7z&-");
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat4);
      CSVPrinter cSVPrinter2 = cSVFormat4.print(stringBuilder0);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(15);
      CSVPrinter cSVPrinter3 = cSVFormat1.print(charArrayWriter0);
      cSVPrinter3.getOut();
      cSVPrinter2.close();
      CSVPrinter cSVPrinter4 = new CSVPrinter(charArrayWriter0, cSVFormat4);
      cSVPrinter4.close();
      assertNotSame(cSVPrinter4, cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ValueLong valueLong0 = ValueLong.get(0L);
      SimpleResultSet simpleResultSet0 = (SimpleResultSet)valueLong0.getResultSet();
      cSVPrinter0.printRecords((ResultSet) simpleResultSet0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("NewValue");
      arrayList0.add("DROP VIEW IF EXISTS ");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("NewValue");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVPrinter0;
      cSVPrinter0.flush();
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList1);
      System.setCurrentTimeMillis(11);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      Character character0 = Character.valueOf('p');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      cSVFormat0.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat3);
      cSVPrinter0.printComment("unKpK4 1QupjEm");
      ArrayDeque<MockFileReader> arrayDeque0 = new ArrayDeque<MockFileReader>((-3154));
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
      cSVPrinter0.printRecords((Iterable<?>) arrayDeque0);
      assertEquals("p unKpK4 1QupjEm\r\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("Unexpected Quote value: ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList0.add("<string-builder></string-builder>");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) arrayList0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      assertEquals(2, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("NewValue");
      arrayList0.add("DROP VIEW IF EXISTS ");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("NewValue");
      Object[] objectArray0 = new Object[2];
      cSVFormat0.format(objectArray0);
      arrayList0.add("NewValue");
      cSVPrinter0.printRecord((Iterable<?>) arrayList1);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat2 = cSVFormat0.withQuotePolicy(quote0);
      cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('[');
      CSVFormat cSVFormat4 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreEmptyLines(false);
      cSVFormat1.withIgnoreEmptyLines(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat5);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("<string-builder></string-builder>");
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList2.add("<string-builder></string-builder>");
      cSVPrinter0.printRecords((Iterable<?>) arrayList1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat2);
      cSVPrinter1.printComment("");
      assertNotSame(cSVPrinter1, cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("<string-builder></string-builder>");
      arrayList0.add("<string-builder></string-builder>");
      arrayList0.add("");
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('.');
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      Value[] valueArray0 = new Value[0];
      ValueRow valueRow0 = ValueRow.get(valueArray0);
      StringBuilder stringBuilder1 = valueRow0.getSQL(stringBuilder0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringBuilder1, cSVFormat2);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList1.add("");
      CSVPrinter cSVPrinter3 = new CSVPrinter(stringBuilder0, cSVFormat1);
      cSVFormat2.print(stringBuilder0);
      cSVPrinter3.printRecord((Iterable<?>) arrayList0);
      cSVPrinter1.getOut();
      cSVPrinter2.close();
      CSVPrinter cSVPrinter4 = cSVFormat1.print(stringBuilder0);
      cSVPrinter4.close();
      assertNotSame(cSVPrinter4, cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('X');
      Character character0 = new Character('r');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat2);
      cSVFormat1.withIgnoreEmptyLines(true);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("<string-builder></string-builder>");
      arrayList0.add("B");
      arrayList0.add("B");
      arrayList0.add("C");
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "A";
      objectArray0[1] = (Object) "C";
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      assertFalse(arrayList0.contains("A"));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      cSVPrinter0.print("<string-builder></string-builder>");
      cSVPrinter0.println();
      PriorityBlockingQueue<MockFileReader> priorityBlockingQueue0 = new PriorityBlockingQueue<MockFileReader>();
      cSVPrinter0.printRecords((Iterable<?>) priorityBlockingQueue0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      Object[] objectArray0 = new Object[2];
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("org.h2.schema.Constant");
      cSVPrinter0.printRecords(objectArray0);
      Csv csv0 = new Csv();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet(csv0);
      cSVPrinter0.printRecords((ResultSet) simpleResultSet0);
      assertEquals("\"\"\r\n\"\"\r\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      Object[] objectArray0 = new Object[7];
      cSVFormat0.format(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringBuilder0);
      cSVPrinter1.println();
      cSVPrinter1.printRecord(objectArray0);
      assertEquals("\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\r\n\"\",,,,,,\r\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      cSVPrinter0.print("<string-builder></string-builder>");
      cSVPrinter0.printComment("<string-builder></string-builder>");
      cSVPrinter0.println();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      Object[] objectArray0 = new Object[2];
      cSVPrinter0.print("<string-builder></string-builder>");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      cSVPrinter0.flush();
      cSVPrinter0.printComment("org.h2.schema.Constant");
      Object object0 = new Object();
      Object object1 = new Object();
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      Object[] objectArray0 = new Object[2];
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("org.h2.schema.Constant");
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("?MA");
      arrayList0.add("?MA");
      cSVPrinter0.getOut();
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("A");
      arrayList0.add("");
      arrayList0.add("A");
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      Object[] objectArray0 = new Object[2];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.println();
      cSVPrinter0.printRecord(objectArray0);
      assertEquals("\n\n\n\t\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[9];
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals("\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n", stringBuilder0.toString());
  }
}
