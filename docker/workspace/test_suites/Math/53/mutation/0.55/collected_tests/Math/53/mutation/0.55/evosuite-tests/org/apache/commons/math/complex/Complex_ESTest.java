/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 17 09:08:21 GMT 2023
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(2109);
      List<Complex> list0 = complex0.nthRoot(2109);
      assertEquals(2109, list0.size());
      
      complex0.abs();
      Complex complex1 = complex0.multiply(16.0);
      Complex complex2 = new Complex(1022.33, Double.POSITIVE_INFINITY);
      complex0.multiply(complex2);
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = Complex.ONE;
      Complex complex5 = Complex.I;
      Object object0 = new Object();
      complex3.equals(object0);
      Complex complex6 = new Complex(1320.3007571221442, 1.4142136);
      complex5.add(complex3);
      Complex complex7 = Complex.INF;
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex5.asin();
      Complex complex10 = complex3.acos();
      Complex complex11 = complex9.asin();
      Complex complex12 = complex11.ONE.acos();
      Complex complex13 = Complex.ZERO;
      complex13.sqrt();
      assertTrue(complex13.equals((Object)complex12));
      
      complex2.getField();
      Complex complex14 = complex9.tan();
      assertEquals(0.7071067811865474, complex14.getImaginary(), 0.01);
      
      Complex complex15 = Complex.NaN;
      complex4.sqrt1z();
      Complex complex16 = (Complex)complex1.readResolve();
      assertEquals(0.0, complex16.getReal(), 0.01);
      
      Complex complex17 = complex7.multiply(complex8);
      assertSame(complex17, complex10);
      
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
      
      Complex complex18 = complex1.multiply(complex6);
      assertEquals(21124.812113954307, complex18.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.3131865265031044));
      Complex complex1 = new Complex((-1.414213562373095), (-1.3065629648763764));
      Complex complex2 = new Complex(1.2246467991473532E-16, (-1.414213562373095));
      Complex complex3 = new Complex((-1.3131865265031044), 0.5411961001461969);
      Complex complex4 = complex3.tanh();
      assertEquals(0.11905945266791268, complex4.getImaginary(), 0.01);
      assertEquals((-0.9269858420371428), complex4.getReal(), 0.01);
      
      Complex complex5 = complex0.add(complex2);
      Complex complex6 = complex0.subtract(complex1);
      complex2.hashCode();
      Complex complex7 = complex5.exp();
      assertEquals((-0.9154415719303517), complex7.getReal(), 0.01);
      
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex5.ONE.cosh();
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      
      complex2.multiply(complex0);
      complex0.multiply(complex8);
      Complex complex10 = Complex.I;
      complex6.equals(complex10);
      assertEquals((-0.006623561626728058), complex6.getImaginary(), 0.01);
      
      Complex complex11 = complex2.add(complex8);
      Complex complex12 = complex1.ONE.acos();
      Complex complex13 = complex2.ONE.asin();
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      
      Complex complex14 = Complex.NaN;
      complex14.ZERO.readResolve();
      Complex complex15 = complex0.ZERO.exp();
      assertFalse(complex15.equals((Object)complex12));
      
      List<Complex> list0 = complex14.nthRoot(208);
      assertTrue(list0.contains(complex14));
      assertFalse(complex14.equals((Object)complex15));
      
      complex11.nthRoot(2087);
      Complex complex16 = Complex.ZERO;
      complex0.ZERO.createComplex(0.097, (-4671.99020488));
      List<Complex> list1 = complex16.nthRoot(17);
      assertFalse(complex16.equals((Object)complex13));
      assertTrue(list1.contains(complex12));
      assertEquals(17, list1.size());
      assertFalse(list1.contains(complex14));
      
      Complex complex17 = complex0.sqrt();
      assertEquals((-0.8103044262815995), complex17.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract(complex0);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.sqrt();
      assertEquals(Double.POSITIVE_INFINITY, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      
      double double0 = complex1.abs();
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      Complex complex5 = complex3.multiply(Double.NaN);
      assertTrue(complex5.equals((Object)complex4));
      assertNotSame(complex5, complex1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-1.414213562373095), 1561.3185449);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.acos();
      assertEquals((-8.046433657669795), complex3.getImaginary(), 0.01);
      assertEquals(1.571702107931081, complex3.getReal(), 0.01);
      
      Complex complex4 = (Complex)complex1.I.readResolve();
      assertEquals(0.0, complex4.getReal(), 0.01);
      
      complex1.ZERO.subtract(complex0);
      Complex complex5 = complex1.multiply(Double.POSITIVE_INFINITY);
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex5.isNaN());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex((-1.414213562373095), 1561.3185449);
      Complex complex1 = new Complex(1.4142135623730951, (-1.414213562373095));
      Complex complex2 = new Complex(3416.0503, Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.subtract(complex1);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex2.sqrt();
      assertEquals(Double.POSITIVE_INFINITY, complex6.getReal(), 0.01);
      
      Complex complex7 = complex2.acos();
      assertTrue(complex7.equals((Object)complex6));
      
      Complex complex8 = complex5.multiply(2.4374138151939255);
      assertEquals(0.0, complex8.getReal(), 0.01);
      
      double double0 = complex4.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex4.getImaginary(), 0.01);
      assertTrue(complex4.equals((Object)complex3));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.nthRoot(2780);
      complex0.sqrt();
      complex0.equals(complex0);
      // Undeclared exception!
      complex0.nthRoot(2780);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.negate();
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.sqrt();
      assertEquals(0.7071067811865475, complex2.getImaginary(), 0.01);
      assertEquals(0.7071067811865476, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      List<Complex> list0 = complex0.nthRoot(1085);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(complex0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      complex0.I.divide(complex1);
      complex0.nthRoot(273);
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.I;
      Complex complex4 = Complex.NaN;
      complex3.NaN.cos();
      complex2.abs();
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex((-1.2246467991473532E-16), (-0.5411961001461971));
      Complex complex1 = new Complex((-1.414213562373095), (-1.3065629648763764));
      Complex complex2 = new Complex(1.2246467991473532E-16, (-1.414213562373095));
      Complex complex3 = new Complex((-0.5411961001461971), 0.5411961001461969);
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex4.ZERO.divide(complex1);
      Complex complex6 = complex1.add(complex3);
      complex0.subtract(complex2);
      Complex complex7 = new Complex(0.5411961001461969, (-1.3065629648763764));
      Complex complex8 = complex7.cos();
      assertEquals(0.8816238197074623, complex8.getImaginary(), 0.01);
      assertEquals(1.6988469793175094, complex8.getReal(), 0.01);
      
      complex7.add(complex2);
      Complex complex9 = Complex.I;
      Complex complex10 = complex6.add(complex9);
      Complex complex11 = complex10.subtract(complex5);
      Complex complex12 = complex2.subtract(complex7);
      assertEquals((-0.10765059749671857), complex12.getImaginary(), 0.01);
      
      complex11.hashCode();
      assertEquals((-1.955409662519292), complex10.getReal(), 0.01);
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex11.equals((Object)complex6));
      assertTrue(complex11.equals((Object)complex10));
      assertEquals(0.23463313526982055, complex11.getImaginary(), 0.01);
      
      Complex complex13 = Complex.ZERO;
      complex9.equals(complex13);
      Complex complex14 = complex7.log();
      assertFalse(complex7.equals((Object)complex1));
      assertEquals(0.3465735902799726, complex14.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      complex0.sqrt();
      complex0.acos();
      Complex complex2 = complex0.multiply((-7687.314264));
      Object object0 = new Object();
      complex1.equals(complex2);
      try { 
        complex0.nthRoot((-2723));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,723
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(complex0);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.I;
      Object object0 = complex3.readResolve();
      complex1.equals(object0);
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = Complex.I;
      complex3.asin();
      Complex complex6 = complex5.acos();
      assertEquals((-0.8813735870195429), complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex5.asin();
      assertEquals(0.8813735870195428, complex7.getImaginary(), 0.01);
      
      Complex complex8 = Complex.NaN;
      Object object1 = complex8.readResolve();
      Complex complex9 = complex1.exp();
      assertEquals(1.0, complex9.getReal(), 0.01);
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      
      List<Complex> list0 = complex8.nthRoot(17);
      assertTrue(complex8.equals((Object)object1));
      assertTrue(list0.contains(complex8));
      
      List<Complex> list1 = complex4.nthRoot(56);
      assertEquals(56, list1.size());
      assertTrue(complex3.equals((Object)object0));
      
      Complex complex10 = Complex.ZERO;
      assertFalse(complex10.equals((Object)complex9));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-1.414213562373095), (-1.3065629648763764));
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex3.acos();
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex5.getReal(), 0.01);
      
      complex2.multiply((-1.3065629648763764));
      Complex complex6 = complex2.multiply((-6.58066));
      assertEquals((-6.58066), complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex4.divide(complex3);
      assertTrue(complex7.isNaN());
      assertEquals(0.7071067811865475, complex4.getImaginary(), 0.01);
      
      double double0 = complex1.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cos();
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      
      List<Complex> list0 = complex0.nthRoot(2764);
      assertEquals(2764, list0.size());
      assertTrue(list0.contains(complex0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = Complex.ZERO;
      try { 
        complex1.nthRoot((-521));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -521
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.abs();
      assertEquals(0.0, double0, 0.01);
      
      Complex complex1 = complex0.NaN.sin();
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.multiply(1314.1477349);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.asin();
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.tanh();
      assertSame(complex3, complex1);
      
      double double0 = complex0.abs();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.add(complex0);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.NaN.cosh();
      assertSame(complex2, complex1);
      
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.acos();
      double double0 = complex4.abs();
      assertEquals(1.8011719796199461, double0, 0.01);
      assertEquals((-0.8813735870195429), complex4.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-1.2246467991473532E-16), 5.482218831320367);
      Complex complex1 = new Complex((-1.414213562373095), (-1.3065629648763764));
      Complex complex2 = new Complex((-3430.084138), (-4924.0));
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = new Complex(6.283185307179586, (-1.0));
      Complex complex5 = complex3.add(complex0);
      Complex complex6 = complex5.add(complex4);
      Complex complex7 = complex4.subtract(complex6);
      assertEquals(3431.498351562373, complex7.getReal(), 0.01);
      assertEquals(4919.824344133556, complex7.getImaginary(), 0.01);
      
      Complex complex8 = Complex.I;
      Complex complex9 = complex4.subtract(complex8);
      Complex complex10 = Complex.NaN;
      complex10.hashCode();
      assertFalse(complex10.equals((Object)complex0));
      
      Complex complex11 = Complex.I;
      complex9.equals(complex2);
      Complex complex12 = Complex.ONE;
      Complex complex13 = complex12.log();
      assertFalse(complex13.equals((Object)complex12));
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      assertEquals(0.0, complex13.getReal(), 0.01);
      assertFalse(complex13.isInfinite());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.atan();
      complex1.NaN.hashCode();
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      Complex complex1 = complex0.multiply(1314.1477349);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.cos();
      try { 
        complex0.nthRoot((-56));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -56
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.ZERO.sqrt1z();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
      
      Complex complex3 = complex0.multiply(complex0);
      assertNotSame(complex0, complex1);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      List<Complex> list0 = complex0.nthRoot(1544);
      assertTrue(list0.contains(complex0));
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.NaN.divide(complex2);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex1.multiply(complex3);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals((-1.0), complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      complex0.sqrt();
      Complex complex2 = complex0.acos();
      complex1.multiply((-7687.314264));
      Object object0 = new Object();
      Complex complex3 = Complex.NaN;
      complex1.equals(complex3);
      try { 
        complex2.nthRoot((-2723));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,723
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-1.414213562373095), (-1.3065629648763764));
      Complex complex1 = new Complex(1.2246467991473532E-16, 1.3065629648763764);
      Complex complex2 = new Complex(1.414213562373095, 0.5411961001461969);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex1.subtract(complex0);
      assertEquals(2.6131259297527527, complex4.getImaginary(), 0.01);
      assertEquals(1.4142135623730951, complex4.getReal(), 0.01);
      
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex6.acos();
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex7.getReal(), 0.01);
      
      Complex complex8 = complex1.multiply(1.2246467991473532E-16);
      assertEquals(1.60007815282033E-16, complex8.getImaginary(), 0.01);
      assertEquals(1.4997597826618576E-32, complex8.getReal(), 0.01);
      
      Complex complex9 = complex1.divide(complex3);
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      
      double double0 = complex3.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex0.subtract(complex3);
      Complex complex6 = complex3.sqrt();
      complex6.divide(complex4);
      complex1.multiply((-1980.7308426));
      try { 
        complex5.nthRoot((-256));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -256
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.exp();
      try { 
        complex0.nthRoot((-4037));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,037
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.tan();
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      
      Complex complex2 = complex0.multiply(complex0);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertTrue(complex2.equals((Object)complex0));
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-0.5411961001461971));
      Complex complex1 = new Complex((-1.414213562373095), (-1.3065629648763764));
      Complex complex2 = new Complex(1.2246467991473532E-16, 1.3065629648763764);
      Complex complex3 = new Complex(1.414213562373095, 0.5411961001461969);
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex0.subtract(complex2);
      assertEquals((-1.8477590650225735), complex6.getImaginary(), 0.01);
      assertEquals((-1.2246467991473532E-16), complex6.getReal(), 0.01);
      
      Complex complex7 = complex1.divide(complex0);
      assertEquals((-2.6131259297527523), complex7.getImaginary(), 0.01);
      assertEquals(2.414213562373094, complex7.getReal(), 0.01);
      
      Complex complex8 = complex5.subtract(complex4);
      Complex complex9 = complex3.conjugate();
      assertEquals((-0.5411961001461969), complex9.getImaginary(), 0.01);
      
      complex8.sinh();
      assertEquals(1.2246467991473532E-16, complex4.getReal(), 0.01);
      assertTrue(complex8.isInfinite());
      assertFalse(complex4.isInfinite());
      assertEquals(0.7653668647301792, complex4.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void testSinFunctiontestSinFunction_35()  throws Throwable  {
      Complex complex0 = new Complex((-1.2246467991473532E-16), (-0.5411961001461971));
      Complex complex1 = new Complex((-1.414213562373095), (-1.3065629648763764));
      Complex complex2 = new Complex(1.2246467991473532E-16, 1.3065629648763764);
      double double0 = complex0.NaN.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      Complex complex3 = new Complex(1.414213562373095, 0.5411961001461969);
      Complex complex4 = complex3.I.sinh();
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(0.8414709848078965, complex4.getImaginary(), 0.01);
      
      complex0.add(complex2);
      Complex complex5 = complex1.add(complex3);
      String string0 = complex5.INF.toString();
      assertEquals("(Infinity, Infinity)", string0);
      assertEquals((-0.7653668647301795), complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      
      complex0.subtract(complex2);
      Complex complex6 = complex1.subtract(complex3);
      assertEquals((-1.8477590650225733), complex6.getImaginary(), 0.01);
      assertEquals((-2.82842712474619), complex6.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.abs();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.toString();
      assertEquals("(0.0, 0.0)", string0);
      
      Complex complex1 = complex0.multiply((-1830.608407863));
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-1.414213562373095), (-1.414213562373095));
      Complex complex1 = new Complex(1561.3185449, 1939.8080803276364);
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(boolean0);
      
      List<Complex> list0 = complex1.nthRoot(1085);
      assertEquals(1939.8080803276364, complex1.getImaginary(), 0.01);
      assertEquals(1085, list0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex((-1.0281749580439823), 1561.3185449);
      Complex complex1 = complex0.ONE.sqrt();
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.sqrt();
      assertEquals(27.949481734014206, complex2.getImaginary(), 0.01);
      assertEquals(27.931082224682054, complex2.getReal(), 0.01);
      
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply((double) 1);
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.cosh();
      assertEquals(0.5403023058681398, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      
      double double0 = complex0.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-1634.198184));
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-1.414213562373095), 1561.6396910590206);
      Complex complex1 = complex0.ONE.sqrt();
      complex0.nthRoot(273);
      complex0.INF.atan();
      complex0.sqrt();
      Object object0 = new Object();
      Complex complex2 = complex1.divide(complex0);
      complex2.NaN.hashCode();
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.conjugate();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.multiply(2451.2970457038878);
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = (Complex)complex0.ONE.readResolve();
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = Complex.ONE;
      assertTrue(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sqrt();
      assertTrue(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      
      Complex complex2 = complex0.multiply(1314.1477349);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(complex0);
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      List<Complex> list0 = complex0.nthRoot(1085);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1085, list0.size());
      assertTrue(list0.contains(complex0));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.exp();
      assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex1.getReal(), 0.01);
      
      Complex complex2 = complex0.multiply(complex0);
      assertFalse(complex2.equals((Object)complex1));
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertTrue(complex2.equals((Object)complex0));
      assertFalse(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-1.2246467991473532E-16), (-0.5411961001461971));
      Complex complex1 = new Complex((-1.414213562373095), (-1.3065629648763764));
      Complex complex2 = new Complex(0.0, 1.3065629648763764);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.add(complex0);
      assertTrue(complex3.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex4.getReal(), 0.01);
      
      Complex complex5 = complex2.add(complex0);
      Complex complex6 = complex2.subtract(complex5);
      assertEquals(0.5411961001461971, complex6.getImaginary(), 0.01);
      assertEquals(1.2246467991473532E-16, complex6.getReal(), 0.01);
      
      boolean boolean0 = complex0.isNaN();
      assertFalse(complex0.isInfinite());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.pow(complex1);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.I.sin();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1.1752011936438014, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.multiply(2.0);
      assertEquals(4.0, complex2.getImaginary(), 0.01);
      assertEquals(4.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      assertTrue(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-843), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.ONE.sinh();
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(1.1752011936438014, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex0.multiply(Double.POSITIVE_INFINITY);
      assertTrue(complex3.isInfinite());
      assertTrue(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sinh();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.sqrt1z();
      try { 
        complex0.nthRoot((-4037));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,037
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      List<Complex> list0 = complex0.nthRoot(17);
      assertTrue(list0.contains(complex0));
      assertEquals(1, list0.size());
      
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex1.multiply(complex0);
      assertSame(complex3, complex2);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.NaN.subtract(complex0);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      
      double double0 = complex0.abs();
      assertTrue(complex0.equals((Object)complex1));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.asin();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      
      List<Complex> list0 = complex0.nthRoot(1085);
      assertEquals(1085, list0.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.ZERO.atan();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      
      Complex complex2 = complex0.multiply(2.0);
      complex2.multiply(2.0);
      assertEquals(2.0, complex0.getImaginary(), 0.01);
      assertEquals(4.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(1314.1477349);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.atan();
      assertTrue(complex1.isNaN());
      
      complex0.abs();
      double double0 = complex0.abs();
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.hashCode();
      complex0.abs();
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.nthRoot((-4037));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,037
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.multiply(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertSame(complex2, complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.acos();
  }
}
