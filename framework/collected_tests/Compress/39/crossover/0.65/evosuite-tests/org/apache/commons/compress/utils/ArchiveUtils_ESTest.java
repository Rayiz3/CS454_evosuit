/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 06:06:28 GMT 2023
 */

package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.net.URI;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArchiveUtils_ESTest extends ArchiveUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)1;
      ArchiveUtils.toAsciiString(byteArray0, (int) (byte)1, (int) (byte)0);
      MockFile mockFile0 = new MockFile("", "");
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry(mockFile0, "");
      ArchiveUtils.toString((ArchiveEntry) arArchiveEntry0);
      byte[] byteArray1 = new byte[21];
      mockFile0.setReadOnly();
      byteArray1[0] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)1;
      byteArray1[7] = (byte)1;
      arArchiveEntry0.getLastModifiedDate();
      String string0 = ArchiveUtils.sanitize("`\n");
      assertEquals("`?", string0);
      
      ArchiveUtils.isEqualWithNull(byteArray1, (byte)0, (byte)0, byteArray0, (byte)0, 0);
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray1, (byte)1, 0, byteArray1, (byte)0, (byte)1);
      boolean boolean1 = ArchiveUtils.isEqual(byteArray1, byteArray1, true);
      assertTrue(boolean1 == boolean0);
      
      ArchiveUtils.toAsciiString(byteArray0);
      arArchiveEntry0.getLastModifiedDate();
      ArchiveUtils.isArrayZero(byteArray0, (byte)0);
      String string1 = ArchiveUtils.toString((ArchiveEntry) arArchiveEntry0);
      assertEquals("-       0 ", string1);
      
      String string2 = ArchiveUtils.toAsciiString(byteArray1, (int) (byte)1, (int) (byte)0);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ArchiveUtils.isEqualWithNull(byteArray0, 0, 5, byteArray0, 5, 0);
      MockFile mockFile0 = new MockFile("0amaSYt]HuGv;+", "org.apache.commons.compress.utils.ArchiveUtils");
      String string0 = ArchiveUtils.sanitize("org.apache.commons.compress.utils.ArchiveUtils");
      assertEquals("org.apache.commons.compress.utils.ArchiveUtils", string0);
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)49;
      byteArray1[1] = (byte)19;
      byteArray1[2] = (byte)100;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)54;
      byteArray1[5] = (byte)49;
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray1, true);
      ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.isArrayZero(byteArray1, (byte)49);
      boolean boolean1 = ArchiveUtils.isEqual(byteArray0, byteArray0, false);
      assertFalse(boolean1 == boolean0);
      
      ArchiveUtils.toAsciiString(byteArray0);
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry((String) null, 9223372036854775807L);
      arArchiveEntry0.getLastModifiedDate();
      ArchiveUtils.isArrayZero(byteArray1, (byte)54);
      String string1 = ArchiveUtils.toString((ArchiveEntry) arArchiveEntry0);
      assertEquals("- 9223372036854775807 null", string1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      ArchiveUtils.toAsciiString(byteArray0, (int) (byte)1, (int) (byte)1);
      MockFile mockFile0 = new MockFile("\u0000");
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry(mockFile0, "\u0000");
      ArchiveUtils.toString((ArchiveEntry) arArchiveEntry0);
      byte[] byteArray1 = new byte[21];
      mockFile0.setReadOnly();
      byteArray0[1] = (byte)1;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)1;
      ArchiveUtils.sanitize("`\n");
      ArchiveUtils.isEqualWithNull(byteArray1, (byte)1, (byte)0, byteArray0, (byte)1, (-1));
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray1, (byte)1, (-1), byteArray1, (byte)0, (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      String string0 = ArchiveUtils.sanitize("}{g~eTKshg$");
      assertEquals("}{g~eTKshg$", string0);
      
      ArchiveUtils.toAsciiString(byteArray0, 4, 0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0, false);
      assertTrue(boolean0);
      
      boolean boolean1 = ArchiveUtils.isArrayZero(byteArray0, (byte)0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[17] = (byte) (-109);
      ArchiveUtils.isEqual(byteArray0, byteArray0);
      ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.sanitize("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\u0000");
      ArchiveUtils.isEqual(byteArray0, byteArray0);
      ArchiveUtils.sanitize("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\u0000");
      ArchiveUtils.sanitize("V^CdQk+V 0#k_,q!g[");
      ArchiveUtils.sanitize("??????????????????????");
      ArchiveUtils.isArrayZero(byteArray0, (byte) (-109));
      ArchiveUtils.sanitize("S><>/hE}sy[)#ri");
      ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      ArchiveUtils.toAsciiString(byteArray0);
      byte[] byteArray1 = new byte[0];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ArchiveUtils.isEqual(byteArray1, byteArray0, true);
      ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.isArrayZero(byteArray1, (byte)0);
      System.setCurrentTimeMillis((-15L));
      ArchiveUtils.sanitize("=O{Zz*{~*6=K3-E");
      ArchiveUtils.sanitize("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\u0000");
      ArchiveUtils.sanitize("unexpected end of stream");
      System.setCurrentTimeMillis(877L);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)98;
      byteArray2[1] = (byte)3;
      byteArray2[2] = (byte) (-109);
      byteArray2[3] = (byte)3;
      byteArray2[4] = (byte)3;
      byteArray2[5] = (byte) (-109);
      byteArray2[6] = (byte)3;
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqual(byteArray0, (int) (byte) (-109), 65, byteArray2, (int) (byte)3, (int) (byte) (-109), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -218
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)1;
      byteArray1[3] = (byte)1;
      byteArray1[4] = (byte)1;
      byteArray1[6] = (byte)1;
      byteArray1[7] = (byte)1;
      ArchiveUtils.isArrayZero(byteArray0, (byte)1);
      System.setCurrentTimeMillis(1487);
      ArchiveUtils.isEqualWithNull(byteArray1, (byte)1, 79, byteArray0, (-1774), 0);
      System.setCurrentTimeMillis(1749L);
      System.setCurrentTimeMillis(1487);
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString(byteArray0, (int) (byte)1, 1487);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte) (-106);
      byte byte0 = (byte)3;
      ArchiveUtils.isEqual(byteArray0, byteArray0);
      ArchiveUtils.isEqual(byteArray0, byteArray0);
      ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.sanitize("\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArchiveUtils.sanitize("??????????????????????");
      ArchiveUtils.isArrayZero(byteArray0, (byte) (-106));
      ArchiveUtils.sanitize("S><>/hE}sy[)#ri");
      ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      ArchiveUtils.toAsciiString(byteArray0);
      byte[] byteArray1 = new byte[0];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ArchiveUtils.isEqual(byteArray1, byteArray0, true);
      ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.isArrayZero(byteArray1, (byte) (-106));
      System.setCurrentTimeMillis((-15L));
      ArchiveUtils.sanitize("=O{Zz*{~*6=K3-E");
      ArchiveUtils.sanitize("\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      System.setCurrentTimeMillis((byte) (-106));
      ZipArchiveEntry zipArchiveEntry0 = null;
      try {
        zipArchiveEntry0 = new ZipArchiveEntry((File) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.ZipArchiveEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byte byte0 = (byte)1;
      ArchiveUtils.toAsciiString(byteArray0, (int) (byte)1, 0);
      int int0 = (-2649);
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqual(byteArray0, 1487, 648, byteArray0, 0, 577, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1487
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[6] = (byte)1;
      byteArray0[2] = (byte) (-21);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, (byte)0, (byte)1, byteArray0, 4, 0);
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile(".6*aJ$");
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry(mockFile0, "bla.tar");
      ArchiveUtils.toAsciiString(byteArray0);
      String string0 = ArchiveUtils.toString((ArchiveEntry) arArchiveEntry0);
      assertEquals("-       0 bla.tar", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("Tb");
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry(mockFile0, "file name");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      String string0 = ArchiveUtils.toAsciiString(byteArray0);
      String string1 = ArchiveUtils.toAsciiString(byteArray0, (int) (byte)0, (int) (byte)0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte) (-22);
      ArchiveUtils.matchAsciiBuffer(".6*aJ$", byteArray0, 1149, (int) (byte) (-22));
      ArchiveUtils.isEqualWithNull(byteArray0, (byte)1, (byte)1, byteArray0, (byte)1, 0);
      MockFile mockFile0 = new MockFile(".6*aJ$");
      File file0 = MockFile.createTempFile(".6*aJ$", ".6*aJ$", (File) mockFile0);
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry(file0, ".6*aJ$");
      mockFile0.getCanonicalPath();
      arArchiveEntry0.getLastModifiedDate();
      ArArchiveEntry arArchiveEntry1 = new ArArchiveEntry(file0, "KPwHq4b${[6C?39)k");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString((byte[]) null, (int) (byte) (-22), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)0;
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, (byte)0, (byte)0, byteArray0, 41, (byte)0);
      ArchiveUtils.toAsciiString(byteArray0);
      boolean boolean1 = ArchiveUtils.isEqual(byteArray0, (int) (byte)0, (-2828), byteArray0, 14, 250, false);
      assertFalse(boolean1);
      
      System.setCurrentTimeMillis(1492);
      boolean boolean2 = ArchiveUtils.isEqual(byteArray0, (int) (byte)0, 26, byteArray0, (-1956), 0, false);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-21);
      ArchiveUtils.matchAsciiBuffer(".6*aJ$", byteArray0, 1149, (int) (byte) (-21));
      ArchiveUtils.isEqualWithNull(byteArray0, (byte)1, (byte)1, byteArray0, 4, 0);
      byte[] byteArray1 = ArchiveUtils.toAsciiBytes("bla.tar");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "bla.tar");
      MockFile mockFile0 = new MockFile(".6*aJ$");
      File file0 = MockFile.createTempFile("bla.tar", ".6*aJ$", (File) mockFile0);
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry(file0, "bla.tar");
      arArchiveEntry0.getLastModifiedDate();
      ArchiveUtils.toString((ArchiveEntry) arArchiveEntry0);
      ArchiveUtils.isEqual(byteArray1, byteArray1, false);
      ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.isEqualWithNull(byteArray0, 0, 4, byteArray1, (byte)1, 7);
      System.setCurrentTimeMillis(7);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-22);
      boolean boolean0 = ArchiveUtils.matchAsciiBuffer(".6*aJ$", byteArray0, 1149, (int) (byte)0);
      assertFalse(boolean0);
      
      boolean boolean1 = ArchiveUtils.isEqualWithNull(byteArray0, (byte)0, (byte)1, byteArray0, 4, 0);
      byte[] byteArray1 = ArchiveUtils.toAsciiBytes("bla.tar");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "bla.tar");
      MockFile mockFile0 = new MockFile(".6*aJ$");
      File file0 = MockFile.createTempFile("bla.tar", ".6*aJ$", (File) mockFile0);
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry(file0, "bla.tar");
      arArchiveEntry0.getLastModifiedDate();
      String string0 = ArchiveUtils.toString((ArchiveEntry) arArchiveEntry0);
      assertEquals("-       0 bla.tar", string0);
      
      boolean boolean2 = ArchiveUtils.isEqual(byteArray1, byteArray1, false);
      assertTrue(boolean2 == boolean1);
      
      ArchiveUtils.toAsciiString(byteArray0);
      boolean boolean3 = ArchiveUtils.isEqualWithNull(byteArray0, 0, 4, byteArray1, (byte)0, 7);
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte) (-21);
      ArchiveUtils.matchAsciiBuffer(".6*aJ$", byteArray0, 1149, (int) (byte) (-21));
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, (byte)1, (byte)1, byteArray0, 4, 0);
      byte[] byteArray1 = ArchiveUtils.toAsciiBytes("bla.tar");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "bla.tar");
      MockFile mockFile0 = new MockFile(".6*aJ$");
      File file0 = MockFile.createTempFile("bla.tar", ".6*aJ$", (File) mockFile0);
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry(file0, "bla.tar");
      arArchiveEntry0.getLastModifiedDate();
      String string0 = ArchiveUtils.toString((ArchiveEntry) arArchiveEntry0);
      assertEquals("-       0 bla.tar", string0);
      
      boolean boolean1 = ArchiveUtils.isEqual(byteArray1, byteArray1, false);
      assertFalse(boolean1 == boolean0);
      
      ArchiveUtils.toAsciiString(byteArray0);
      boolean boolean2 = ArchiveUtils.isEqualWithNull(byteArray0, 0, 4, byteArray1, (byte)1, 7);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte) (-21);
      ArchiveUtils.matchAsciiBuffer(".6*aJ$", byteArray0, 1149, (int) (byte) (-21));
      ArchiveUtils.isEqualWithNull(byteArray0, (byte)1, (byte)1, byteArray0, 4, 0);
      ArchiveUtils.toAsciiBytes("bla.tar");
      MockFile mockFile0 = new MockFile(".6*aJ$");
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry(mockFile0, "bla.tar");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArchiveUtils.toAsciiString(byteArray0, 1, (int) (byte)1);
      System.setCurrentTimeMillis(1017);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-31);
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, 25, (byte)0, byteArray0, (byte)0, 25);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte) (-21);
      boolean boolean0 = ArchiveUtils.matchAsciiBuffer(".6*aJ$", byteArray0, 1149, (int) (byte) (-21));
      ArchiveUtils.toAsciiBytes("bla.tar");
      MockFile mockFile0 = new MockFile(".6*aJ$");
      boolean boolean1 = ArchiveUtils.isEqual(byteArray0, 45, (-1), byteArray0, (int) (byte)1, 16384, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte) (-21);
      ArchiveUtils.matchAsciiBuffer(".6*aJ$", byteArray0, 1149, (int) (byte) (-21));
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, (byte)1, (byte)1, byteArray0, 4, 0);
      MockFile mockFile0 = new MockFile(".6*aJ$");
      ArchiveUtils.isEqual(byteArray0, 7, 7, byteArray0, 0, (int) (byte) (-21), false);
      System.setCurrentTimeMillis((byte)1);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("");
      String string0 = ArchiveUtils.toString((ArchiveEntry) jarArchiveEntry0);
      assertEquals("-      -1 ", string0);
      
      boolean boolean1 = ArchiveUtils.isEqual(byteArray0, (-3072), (int) (byte) (-21), byteArray0, 1795, (int) (byte) (-21));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("6/.2zU", "6/.2zU");
      mockFile0.setLastModified(2336L);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("XB1!i\"m79-o_vJ");
      String string0 = ArchiveUtils.toString((ArchiveEntry) jarArchiveEntry0);
      assertEquals("-      -1 XB1!i\"m79-o_vJ", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "");
      String string0 = ArchiveUtils.toString((ArchiveEntry) tarArchiveEntry0);
      assertEquals("d       0 /", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      ArchiveUtils.toAsciiString(byteArray0, (int) (byte)1, (int) (byte)1);
      ArchiveUtils.isEqual(byteArray0, (int) (byte) (-41), (-5660), byteArray0, 492, 45, false);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-41);
      byteArray1[1] = (byte) (-41);
      byteArray1[2] = (byte)1;
      ArchiveUtils.isEqual(byteArray0, byteArray1, false);
      // Undeclared exception!
      try { 
        ArchiveUtils.isArrayZero((byte[]) null, 8805);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      String string0 = ArchiveUtils.toAsciiString(byteArray0, (int) (byte)1, (int) (byte)1);
      assertEquals("\u0000", string0);
      
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, (-2660), (-2800), byteArray0, 594, 594, false);
      boolean boolean1 = ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      assertTrue(boolean1);
      
      boolean boolean2 = ArchiveUtils.isArrayZero(byteArray0, (byte) (-41));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      // Undeclared exception!
      try { 
        ArchiveUtils.isArrayZero(byteArray0, 423);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte) (-21);
      boolean boolean0 = ArchiveUtils.matchAsciiBuffer(".6*aJ$", byteArray0, 1149, (int) (byte) (-21));
      boolean boolean1 = ArchiveUtils.isEqualWithNull(byteArray0, (byte)1, (byte)1, byteArray0, 4, 0);
      byte[] byteArray1 = ArchiveUtils.toAsciiBytes("ma=");
      ArchiveUtils.isEqual(byteArray0, 1149, (int) (byte) (-22), byteArray1, 492, (-3117), false);
      boolean boolean2 = ArchiveUtils.isEqual(byteArray1, byteArray1, false);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = ArchiveUtils.isArrayZero(byteArray0, (-3479));
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      String string0 = ArchiveUtils.toAsciiString(byteArray0, (int) (byte)1, (int) (byte)1);
      assertEquals("\u0000", string0);
      
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, 1, (-2660), byteArray0, 50, 492, false);
      boolean boolean1 = ArchiveUtils.isEqual(byteArray0, byteArray0, false);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArchiveUtils.isArrayZero(byteArray0, 1634);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArchiveUtils.sanitize("");
      ArchiveUtils.sanitize("");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)72;
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, (int) (byte)72, (int) (byte)32, byteArray0, (int) (byte)13, (int) (byte) (-61));
      assertFalse(boolean0);
      
      boolean boolean1 = ArchiveUtils.matchAsciiBuffer("", byteArray0, (int) (byte)32, 1);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)13;
      byteArray1[1] = (byte) (-33);
      byteArray1[2] = (byte)32;
      byteArray1[3] = (byte)3;
      byteArray1[4] = (byte) (-33);
      boolean boolean2 = ArchiveUtils.isArrayZero(byteArray1, 1);
      byte[] byteArray2 = ArchiveUtils.toAsciiBytes("");
      boolean boolean3 = ArchiveUtils.isEqual(byteArray1, byteArray2, false);
      assertTrue(boolean3 == boolean2);
      
      ArchiveUtils.matchAsciiBuffer("US-ASCII", byteArray0);
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte) (-61);
      byteArray3[1] = (byte) (-85);
      boolean boolean4 = ArchiveUtils.isArrayZero(byteArray3, (byte) (-85));
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      String string0 = ArchiveUtils.toAsciiString(byteArray0, (int) (byte)1, (int) (byte)1);
      assertEquals("\u0000", string0);
      
      MockFile mockFile0 = new MockFile("\u0000", "\u0000");
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry(mockFile0, "\u0000");
      byte[] byteArray1 = new byte[21];
      byteArray1[3] = (byte)1;
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray1, 1, 8734, byteArray0, 8734, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-22);
      byte byte1 = (byte) (-21);
      byteArray0[2] = (byte) (-21);
      ArchiveUtils.matchAsciiBuffer(".6*aJ$", byteArray0, 1149, (int) (byte) (-21));
      ArchiveUtils.isEqualWithNull(byteArray0, (byte)1, (byte)1, byteArray0, 4, 0);
      String string0 = "bla.tar";
      byte[] byteArray1 = ArchiveUtils.toAsciiBytes("bla.tar");
      ArchiveUtils.isEqual(byteArray0, byteArray1, true);
      String string1 = null;
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiBytes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = ArchiveUtils.isArrayZero(byteArray0, (byte)0);
      assertTrue(boolean0);
      
      String string0 = ArchiveUtils.sanitize(">v");
      assertEquals(">v", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      assertTrue(boolean0);
      
      boolean boolean1 = ArchiveUtils.isArrayZero(byteArray0, (-2865));
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-94);
      byteArray1[1] = (byte) (-24);
      boolean boolean2 = ArchiveUtils.isEqual(byteArray0, (-2865), (-2865), byteArray1, (int) (byte) (-94), (int) (byte) (-24));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[17] = (byte) (-106);
      ArchiveUtils.isEqual(byteArray0, byteArray0);
      ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.sanitize("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\u0000");
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString(byteArray0, (int) (byte) (-106), (int) (byte)3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-118);
      byte byte0 = (byte) (-87);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte)108;
      ArchiveUtils.isEqual(byteArray0, byteArray0);
      ArchiveUtils.isEqual(byteArray0, byteArray0);
      ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.isEqual(byteArray0, (-2099), (int) (byte) (-87), byteArray0, (-1350), (-1020), false);
      ArchiveUtils.sanitize("\uFFFD\uFFFD\uFFFD\r\u0002rl");
      ArchiveUtils.sanitize("j*?^P/[S/vniapv");
      ArchiveUtils.isEqual(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString(byteArray0, (-1350), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = ArchiveUtils.sanitize(":BDFyn9t~:u1SN");
      assertEquals(":BDFyn9t?~:u1SN", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, 5, 5, byteArray0, 5, 1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)3;
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      ArchiveUtils.matchAsciiBuffer("}", byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-29);
      byteArray1[1] = (byte)25;
      byteArray1[2] = (byte) (-34);
      byteArray1[3] = (byte) (-113);
      ArchiveUtils.isEqual(byteArray0, byteArray1);
      boolean boolean1 = ArchiveUtils.matchAsciiBuffer("", byteArray0);
      ArchiveUtils.isEqual(byteArray0, byteArray1, true);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-113);
      byteArray2[1] = (byte) (-34);
      byteArray2[2] = (byte)3;
      byteArray2[3] = (byte) (-113);
      byteArray2[4] = (byte) (-29);
      byteArray2[5] = (byte)25;
      boolean boolean2 = ArchiveUtils.isEqual(byteArray2, byteArray2, false);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockFile mockFile0 = new MockFile("6/.2zU", "6/.2zU");
      mockFile0.setLastModified(2336L);
      mockFile0.getAbsolutePath();
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry(mockFile0, "6/.2zU");
      mockFile0.getCanonicalFile();
      arArchiveEntry0.getLastModifiedDate();
      String string0 = ArchiveUtils.toString((ArchiveEntry) arArchiveEntry0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-24);
      ArchiveUtils.isEqual(byteArray0, byteArray0, false);
      String string1 = ArchiveUtils.toAsciiString(byteArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      String string0 = ArchiveUtils.toString((ArchiveEntry) sevenZArchiveEntry0);
      assertEquals("-       0 null", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[17] = (byte) (-106);
      ArchiveUtils.isEqual(byteArray0, byteArray0);
      ArchiveUtils.toAsciiString(byteArray0);
      // Undeclared exception!
      try { 
        ArchiveUtils.sanitize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      String string0 = ArchiveUtils.toAsciiString(byteArray0, 1, 1);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, 1, 0, byteArray0, 1, 1, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, (byte)1, (byte)1, byteArray0, (byte)1, 0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArchiveUtils.isEqualWithNull(byteArray0, (byte)1, (byte)1, byteArray0, 0, 358);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, 5, 5, byteArray0, 5, 5);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      String string0 = ArchiveUtils.toAsciiString(byteArray0, (int) (byte)1, (int) (byte)1);
      assertEquals("\u0000", string0);
      
      MockDate mockDate0 = new MockDate();
      ArchiveUtils.toAsciiString(byteArray0);
      boolean boolean0 = ArchiveUtils.isArrayZero(byteArray0, (byte)1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ArchiveUtils.sanitize("");
      ArchiveUtils.sanitize("");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)72;
      ArchiveUtils.isEqual(byteArray0, (int) (byte)72, (int) (byte)32, byteArray0, (int) (byte)13, (int) (byte) (-61));
      ArchiveUtils.matchAsciiBuffer("", byteArray0, (int) (byte)32, 1);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)13;
      byteArray1[1] = (byte) (-33);
      byteArray1[2] = (byte)32;
      byteArray1[3] = (byte)3;
      byteArray1[4] = (byte) (-33);
      ArchiveUtils.isArrayZero(byteArray1, 1);
      byte[] byteArray2 = ArchiveUtils.toAsciiBytes("");
      ArchiveUtils.isEqual(byteArray1, byteArray2, false);
      ArchiveUtils.matchAsciiBuffer("US-ASCII", byteArray0);
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte) (-61);
      byteArray3[1] = (byte) (-85);
      byteArray3[2] = (byte) (-112);
      byteArray3[3] = (byte)32;
      byteArray3[4] = (byte) (-61);
      byteArray3[5] = (byte)72;
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, (byte)32, 499, byteArray3, 423, (byte)72);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[28];
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      ArchiveUtils.isEqualWithNull(byteArray0, (byte)1, (byte)1, byteArray0, (byte)0, (byte)1);
      ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      MockDate mockDate0 = new MockDate();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = null;
      ArchiveUtils.isEqual((byte[]) null, 499, (-417), (byte[]) null, 344, (-207));
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString((byte[]) null, (-207), (-207));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, 0, 0, byteArray0, 0, 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, 0, 0, byteArray0, 0, 1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = ArchiveUtils.sanitize(".6*aJ$");
      assertEquals(".6*aJ$", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      // Undeclared exception!
      try { 
        ArchiveUtils.isArrayZero((byte[]) null, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte) (-2);
      boolean boolean0 = ArchiveUtils.matchAsciiBuffer("-a#|% saA6z", byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("");
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ArchiveUtils.matchAsciiBuffer(" : l3D  D!tzfFS", byteArray0, 1351, 915);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1351
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }
}
