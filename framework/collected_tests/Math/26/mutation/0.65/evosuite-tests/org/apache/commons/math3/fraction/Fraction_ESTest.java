/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 23:10:27 GMT 2023
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thoughtworks.xstream.io.StreamException;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.testcarver.testcase.EvoSuiteXStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = new Fraction(3898.2000194648126);
      int int0 = (-812);
      Fraction fraction1 = fraction0.divide((-812));
      // Undeclared exception!
      try { 
        fraction1.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: 32,480,636,777
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, (-748));
      assertEquals(0, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      assertEquals((byte)100, fraction0.byteValue());
      
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      Fraction fraction2 = Fraction.TWO_QUARTERS;
      Fraction fraction3 = new Fraction((double) Integer.MAX_VALUE);
      FractionField fractionField0 = fraction3.getField();
      Fraction fraction4 = new Fraction(500.0);
      Fraction fraction5 = new Fraction(805.0);
      Fraction fraction6 = fraction5.add(fraction0);
      Fraction fraction7 = Fraction.ONE;
      Fraction fraction8 = new Fraction((-2322.18352249798));
      Fraction fraction9 = new Fraction(805.0);
      Fraction fraction10 = new Fraction(323.8707402372);
      Fraction fraction11 = Fraction.MINUS_ONE;
      Fraction fraction12 = new Fraction(1714.810163);
      fraction10.equals(fractionField0);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction6.equals(fraction10);
      boolean boolean0 = fraction7.equals(fraction2);
      assertFalse(boolean0);
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction0.equals(fraction6);
      assertEquals(905.0F, fraction6.floatValue(), 0.01F);
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Fraction fraction13 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertFalse(fraction13.equals((Object)fraction11));
      assertTrue(fraction13.equals((Object)fraction7));
      assertFalse(fraction13.equals((Object)fraction5));
      
      String string0 = fraction11.toString();
      assertEquals("-1", string0);
      
      fraction8.equals(fraction1);
      assertEquals(267, fraction8.getDenominator());
      
      Fraction fraction14 = Fraction.TWO_THIRDS;
      int int0 = fraction2.compareTo(fraction14);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      // Undeclared exception!
      try { 
        fraction0.MINUS_ONE.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = Fraction.ONE_QUARTER;
      Fraction fraction2 = Fraction.ZERO;
      fraction0.ONE_THIRD.add(fraction1);
      Fraction fraction3 = new Fraction(288.36436);
      Fraction fraction4 = new Fraction(0.0);
      Fraction fraction5 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction6 = new Fraction((-529.7760959443543));
      Fraction fraction7 = new Fraction(1024.0);
      fraction6.toString();
      Fraction fraction8 = Fraction.TWO;
      fraction2.multiply(fraction5);
      Fraction fraction9 = Fraction.ZERO;
      Fraction fraction10 = Fraction.ONE;
      fraction10.negate();
      fraction8.equals(fraction0);
      // Undeclared exception!
      try { 
        EvoSuiteXStream.fromString("-314687 / 594");
        fail("Expecting exception: StreamException");
      
      } catch(StreamException e) {
         //
         // 
         //
         verifyException("com.thoughtworks.xstream.io.xml.XppReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-144.27482448), (-2147483643), (-2147483643));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -144.275 to fraction after -2,147,483,643 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.TWO;
      boolean boolean0 = fraction0.equals(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(2.1691754E9, 1207);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,169,175,400 to fraction (2,169,175,400/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.TWO.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = new Fraction(75.0);
      Fraction fraction1 = new Fraction(3019.1);
      Fraction fraction2 = new Fraction(0.0);
      Fraction fraction3 = new Fraction(1.0E-5);
      Fraction fraction4 = fraction1.multiply(fraction0);
      Fraction fraction5 = Fraction.TWO;
      Fraction fraction6 = Fraction.ZERO;
      Fraction fraction7 = Fraction.ONE;
      Fraction.getReducedFraction(100, 1);
      Object object0 = new Object();
      fraction0.equals(fraction1);
      Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      fraction3.equals(fraction4);
      // Undeclared exception!
      try { 
        EvoSuiteXStream.fromString("Vi'u6ht${BcCd");
        fail("Expecting exception: StreamException");
      
      } catch(StreamException e) {
         //
         // 
         //
         verifyException("com.thoughtworks.xstream.io.xml.XppReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction((-1.0));
      Fraction fraction2 = new Fraction(0.0);
      Fraction fraction3 = new Fraction((-0.1));
      Fraction fraction4 = new Fraction(0.0);
      Fraction fraction5 = Fraction.TWO;
      Fraction fraction6 = Fraction.ZERO;
      fraction3.TWO_QUARTERS.abs();
      Fraction fraction7 = Fraction.ONE;
      fraction6.equals(fraction7);
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction6.equals(object0);
      fraction0.equals(fraction1);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Fraction fraction8 = Fraction.TWO_FIFTHS;
      Fraction fraction9 = fraction6.add(fraction8);
      assertTrue(fraction6.equals((Object)fraction4));
      assertSame(fraction9, fraction8);
      
      Fraction fraction10 = Fraction.ONE_THIRD;
      Object object1 = new Object();
      fraction3.equals(fraction1);
      assertEquals(10, fraction3.getDenominator());
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction1.equals((Object)fraction7));
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Fraction fraction11 = fraction10.abs();
      assertEquals(33.33333333333333, fraction11.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.ONE;
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = new Fraction(4091.49);
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(100, fraction0.getDenominator());
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
      
      Fraction fraction2 = Fraction.getReducedFraction(100, 100);
      assertEquals(1.0, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      // Undeclared exception!
      try { 
        fraction0.TWO_FIFTHS.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1113.519237966288));
      Fraction fraction1 = new Fraction(500.0);
      Fraction fraction2 = Fraction.TWO_QUARTERS;
      Fraction fraction3 = Fraction.ZERO;
      Fraction fraction4 = new Fraction((-0.1));
      Fraction fraction5 = new Fraction((-242343.0));
      Fraction fraction6 = fraction5.TWO_QUARTERS.add(fraction0);
      assertEquals((-57877), fraction6.getNumerator());
      assertEquals((-111301.92307692308), fraction6.percentageValue(), 0.01);
      
      Fraction fraction7 = new Fraction(332.0);
      Fraction fraction8 = new Fraction((-2323.0));
      assertEquals(1, fraction8.getDenominator());
      
      Fraction fraction9 = new Fraction(500.0);
      Fraction fraction10 = new Fraction(0.6035686007372172);
      Fraction fraction11 = Fraction.ZERO;
      Fraction fraction12 = new Fraction((-1113.519237966288));
      fraction11.equals(fraction12);
      assertTrue(fraction12.equals((Object)fraction0));
      
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction11.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction11.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction11.equals(object2);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Fraction fraction13 = fraction3.abs();
      assertEquals((byte)0, fraction13.byteValue());
      assertFalse(fraction13.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-748));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-748, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction((-2147483632));
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction(500.0);
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = new Fraction((-2147483632));
      Fraction fraction9 = new Fraction(332.0);
      Fraction fraction10 = new Fraction((-2323.0));
      Fraction fraction11 = new Fraction((-2147483632), (-2147483632));
      Fraction fraction12 = Fraction.TWO;
      int int0 = fraction11.compareTo(fraction8);
      assertEquals(1, int0);
      
      fraction7.equals(fraction4);
      float float0 = fraction7.floatValue();
      assertEquals((-242343.0F), float0, 0.01F);
      
      Fraction fraction13 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object0);
      Fraction fraction14 = Fraction.ONE;
      boolean boolean0 = fraction13.equals(fraction14);
      assertTrue(fraction14.equals((Object)fraction11));
      assertFalse(fraction14.equals((Object)fraction4));
      assertFalse(boolean0);
      
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object2);
      Fraction fraction15 = new Fraction((-2147483632));
      assertTrue(fraction15.equals((Object)fraction8));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.TWO_FIFTHS.subtract(fraction1);
      assertEquals(2, fraction2.getNumerator());
      
      String string0 = fraction0.toString();
      assertEquals("1 / 4", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.ONE.abs();
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      
      Fraction fraction2 = new Fraction(Integer.MIN_VALUE, 2147483640);
      assertEquals(268435455, fraction2.getDenominator());
      assertEquals((-1.0000000037252903), fraction2.doubleValue(), 0.01);
      
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
      
      Fraction fraction3 = Fraction.ONE;
      assertSame(fraction3, fraction1);
      assertFalse(fraction3.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = new Fraction(329.063850813922);
      Fraction fraction2 = Fraction.ONE_HALF;
      boolean boolean0 = fraction0.equals(fraction2);
      Fraction fraction3 = new Fraction(99.98751968141995);
      boolean boolean1 = fraction0.equals(fraction3);
      assertFalse(boolean1 == boolean0);
      assertEquals(99.98752228163993, fraction3.doubleValue(), 0.01);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      
      Fraction fraction1 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.ZERO.divide(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (2,147,483,649/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(534, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 534/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.ONE_HALF;
      Fraction fraction2 = fraction0.MINUS_ONE.subtract(fraction1);
      assertEquals((-1.5F), fraction2.floatValue(), 0.01F);
      assertEquals(2, fraction2.getDenominator());
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.THREE_FIFTHS;
      Fraction fraction2 = fraction0.ONE_FIFTH.add(fraction1);
      assertEquals(5, fraction2.getDenominator());
      assertEquals(4, fraction2.getNumerator());
      
      String string0 = fraction0.toString();
      assertEquals("1 / 4", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(1105, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 1,105/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction((-2147483632));
      assertEquals((-2147483632), fraction1.getNumerator());
      
      Fraction fraction2 = new Fraction((-1.0));
      Fraction fraction3 = new Fraction(0.0);
      Fraction fraction4 = new Fraction((-0.1));
      Fraction fraction5 = new Fraction((-242343.0));
      Fraction fraction6 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction7 = new Fraction(332.0);
      Fraction fraction8 = new Fraction((-2323.0));
      Fraction fraction9 = fraction8.ONE.multiply(fraction3);
      assertEquals(1, fraction8.getDenominator());
      assertTrue(fraction9.equals((Object)fraction3));
      
      Fraction fraction10 = Fraction.TWO;
      Fraction fraction11 = Fraction.ZERO;
      Fraction fraction12 = Fraction.ONE;
      fraction11.equals(fraction12);
      assertFalse(fraction12.equals((Object)fraction2));
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      boolean boolean0 = fraction11.equals(object0);
      assertFalse(boolean0);
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      int int0 = fraction10.getDenominator();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = Fraction.THREE_FIFTHS;
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      String string0 = fraction0.toString();
      assertEquals("2", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(75.0);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-0.1));
      assertEquals(10, fraction6.getDenominator());
      
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction9 = new Fraction(332.0);
      Fraction fraction10 = new Fraction(75.0);
      Fraction fraction11 = new Fraction(0.6035686007372172);
      Fraction fraction12 = Fraction.ZERO;
      Fraction fraction13 = Fraction.getReducedFraction(Integer.MAX_VALUE, 1813);
      assertEquals(1184491.807501379, fraction13.doubleValue(), 0.01);
      
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object1);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      int int0 = fraction12.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) (-2147483594), (-2147483594));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,594 to fraction (2,147,483,595/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = new Fraction((-818.861349474), Integer.MIN_VALUE);
      assertEquals((-819), fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = Fraction.ONE_THIRD;
      fraction2.ONE_THIRD.add(5);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-0.1));
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = new Fraction(Integer.MAX_VALUE);
      fraction8.ONE_FIFTH.multiply(fraction5);
      Fraction fraction9 = new Fraction(332.0);
      Fraction fraction10 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction10.equals(object0);
      Fraction fraction11 = null;
      try {
        fraction11 = new Fraction(500.0, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 500 to fraction (-499/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      Fraction fraction2 = fraction0.ONE_QUARTER.subtract(fraction1);
      assertEquals((-0.5F), fraction2.floatValue(), 0.01F);
      
      Fraction fraction3 = fraction0.negate();
      assertEquals((-2), fraction3.getNumerator());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.MINUS_ONE.abs();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1L, fraction1.longValue());
      
      String string0 = fraction0.toString();
      assertEquals("1 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      fraction1.ONE.multiply(fraction0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction((-2147483637));
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-0.1));
      Fraction fraction7 = new Fraction((-242343.0));
      assertEquals(1, fraction7.getDenominator());
      
      Fraction fraction8 = new Fraction((-2147483637));
      Fraction fraction9 = new Fraction(332.0);
      Fraction fraction10 = new Fraction(0.6035686007372172);
      Fraction fraction11 = Fraction.ZERO;
      Fraction fraction12 = fraction11.TWO.multiply(fraction9);
      assertEquals(66400.0, fraction12.percentageValue(), 0.01);
      
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction11.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction11.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction11.equals(object2);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction1.percentageValue();
      Fraction fraction13 = Fraction.getReducedFraction((-2147483637), 500);
      assertEquals(500, fraction13.getDenominator());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-0.1));
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction9 = new Fraction(332.0);
      Fraction fraction10 = new Fraction((-2323.0));
      assertEquals((-2323), fraction10.getNumerator());
      
      Fraction fraction11 = new Fraction(500.0);
      Fraction fraction12 = new Fraction(0.6035686007372172);
      assertEquals(60.357142857142854, fraction12.percentageValue(), 0.01);
      
      Fraction fraction13 = Fraction.ZERO;
      Fraction fraction14 = new Fraction(75.0);
      boolean boolean0 = fraction13.equals(fraction14);
      assertFalse(boolean0);
      
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object1);
      assertTrue(fraction13.equals((Object)fraction5));
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction3.equals((Object) null);
      assertEquals(1, fraction3.getDenominator());
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      long long0 = fraction11.longValue();
      assertEquals(500L, long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.ONE_QUARTER;
      Fraction fraction2 = fraction0.ZERO.add(fraction1);
      assertSame(fraction2, fraction1);
      
      Fraction fraction3 = fraction0.negate();
      assertEquals((-1), fraction3.getNumerator());
      assertEquals((-33.33333333333333), fraction3.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.ONE_THIRD;
      Fraction fraction2 = fraction1.ZERO.subtract(fraction0);
      assertEquals(3, fraction2.getDenominator());
      assertEquals((-33.33333333333333), fraction2.percentageValue(), 0.01);
      
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = Fraction.TWO;
      Fraction fraction2 = fraction0.TWO_FIFTHS.add(fraction1);
      assertEquals(12, fraction2.getNumerator());
      assertEquals(2.4, fraction2.doubleValue(), 0.01);
      
      String string0 = fraction0.toString();
      assertEquals("1 / 2", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1280), (-1280));
      assertEquals(1, fraction0.getNumerator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.add(4);
      assertEquals(420.0, fraction1.percentageValue(), 0.01);
      
      Fraction fraction2 = fraction0.negate();
      assertEquals(5, fraction2.getDenominator());
      assertEquals((-1), fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-0.1));
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = fraction7.MINUS_ONE.negate();
      assertEquals(1, fraction8.getNumerator());
      
      Fraction fraction9 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction10 = new Fraction(332.0);
      Fraction fraction11 = new Fraction(0.6035686007372172);
      assertEquals(280, fraction11.getDenominator());
      
      Fraction fraction12 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      boolean boolean0 = fraction12.equals(object2);
      assertFalse(boolean0);
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction4.hashCode();
      assertEquals((-100.0), fraction4.percentageValue(), 0.01);
      
      Fraction fraction13 = fraction3.abs();
      assertEquals(2.14748365E9F, fraction13.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.negate();
      assertEquals(4, fraction1.getDenominator());
      assertEquals((-25.0), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-0.1));
      fraction0.MINUS_ONE.negate();
      Fraction fraction7 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction8 = new Fraction(0.6035686007372172);
      Fraction fraction9 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction9.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction9.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction9.equals(object2);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction4.hashCode();
      // Undeclared exception!
      try { 
        EvoSuiteXStream.fromString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      fraction0.reciprocal();
      Fraction fraction1 = Fraction.TWO;
      assertEquals(1, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2147483645, 2147483645);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-3506), (-3506));
      Fraction fraction1 = fraction0.TWO_FIFTHS.multiply((-3506));
      assertEquals((short) (-1402), fraction1.shortValue());
      
      Fraction fraction2 = fraction0.negate();
      assertEquals((-1), fraction2.getNumerator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
      assertEquals((-1), fraction2.intValue());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = fraction0.THREE_QUARTERS.subtract((-972));
      assertEquals(972.75F, fraction1.floatValue(), 0.01F);
      
      Fraction fraction2 = new Fraction(75.0);
      Fraction fraction3 = new Fraction(100.0);
      fraction3.ONE.getField();
      Fraction fraction4 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction5 = new Fraction((-1.0));
      Fraction fraction6 = new Fraction(100.0);
      Fraction fraction7 = new Fraction((-0.1));
      assertEquals((-1), fraction7.getNumerator());
      
      Fraction fraction8 = new Fraction((-242343.0));
      Fraction fraction9 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction10 = new Fraction(332.0);
      Fraction fraction11 = new Fraction((-2323.0));
      Fraction fraction12 = new Fraction(44.0);
      assertEquals(44.0F, fraction12.floatValue(), 0.01F);
      
      Fraction fraction13 = new Fraction(0.6035686007372172);
      Fraction fraction14 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction14.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction14.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction14.equals(object2);
      fraction14.equals(object1);
      assertFalse(fraction14.equals((Object)fraction13));
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      int int0 = fraction9.getNumerator();
      assertEquals((-2.147483648E11), fraction9.percentageValue(), 0.01);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      fraction0.ONE_QUARTER.subtract(Integer.MIN_VALUE);
      Fraction fraction1 = Fraction.THREE_FIFTHS;
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.ONE_QUARTER.multiply(fraction1);
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      
      String string0 = fraction0.toString();
      assertEquals("1 / 4", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      Fraction fraction2 = fraction0.ONE_HALF.divide(fraction1);
      assertEquals(1, fraction2.getNumerator());
      assertEquals(100.0, fraction2.percentageValue(), 0.01);
      
      String string0 = fraction0.toString();
      assertEquals("1 / 2", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.ZERO.multiply(fraction1);
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      
      String string0 = fraction0.toString();
      assertEquals("1 / 2", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.divide((-1));
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(100.0);
      fraction2.ONE.getField();
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, fraction3.getNumerator());
      
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(100.0);
      Fraction fraction6 = new Fraction((-0.1));
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction9 = new Fraction(332.0);
      Fraction fraction10 = new Fraction((-2323.0));
      assertEquals((-2323), fraction10.getNumerator());
      
      Fraction fraction11 = new Fraction(44.0);
      assertEquals(44.0, fraction11.doubleValue(), 0.01);
      
      Fraction fraction12 = new Fraction(0.6035686007372172);
      assertEquals(169, fraction12.getNumerator());
      
      Fraction fraction13 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object2);
      fraction13.equals(object1);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      int int0 = fraction8.getNumerator();
      assertEquals((-2.147483648E11), fraction8.percentageValue(), 0.01);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      fraction0.TWO.getField();
      String string0 = fraction0.toString();
      assertEquals("4 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = Fraction.FOUR_FIFTHS;
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
      
      Fraction fraction2 = Fraction.MINUS_ONE;
      assertFalse(fraction2.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = new Fraction(329.063850813922);
      assertEquals(319521, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      assertEquals((-2147483648L), fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Object object0 = new Object();
      boolean boolean0 = fraction0.equals(object0);
      assertFalse(boolean0);
      
      Fraction fraction1 = Fraction.ONE_THIRD;
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      String string0 = fraction0.toString();
      assertEquals("1 / 4", string0);
  }
}
