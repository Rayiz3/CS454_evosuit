/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 21:42:51 GMT 2023
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.1E-e00");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float[] floatArray0 = new float[1];
      NumberUtils.min(floatArray0);
      boolean boolean0 = NumberUtils.isNumber("..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E700F");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xf2\"9@;Nb");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-700");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      NumberUtils.isNumber("0xC968>bIpq0S*Oq2]#");
      boolean boolean0 = NumberUtils.isNumber("0xC968>bIpq0S*Oq2]#");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0~|8On2eHP|_kPu");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0en y-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0en y- is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.1L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      try { 
        NumberUtils.createNumber("oo*bleDoublK.MkN_)AUE) fa1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-1l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1l");
      assertEquals((-1L), number0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0.rPx%GFaPfHk/xHPX");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.rPx%GFaPfHk/xHPX is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234E5l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("2e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("5f");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      try { 
        NumberUtils.createNumber("toLong(Long.MAXVALUE) faied");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // toLong(Long.MAXVALUE) faied is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.7976931348623157E308");
      assertEquals(1.7976931348623157E308, number0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".12.3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-123E2.12");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("4d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("123.4EW");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1F");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("46d");
      assertEquals(46.0, number0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1234.5f");
      assertEquals(1234.5F, number0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-700F");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("123.4E5");
      assertEquals(1.234E7F, number0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xA blank string is not a valid number");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1l");
      assertEquals(1L, number0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      try { 
        NumberUtils.createNumber("bJ/O{x>vvjN3vF");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // bJ/O{x>vvjN3vF is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      try { 
        NumberUtils.createNumber("d");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // d is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      try { 
        NumberUtils.createNumber("r|.C<@L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // r|.C<@L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+-qh+.QYv");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.isNumber("5D|4zlX`7I(Y,o>nWs");
      NumberUtils.isNumber("-0x11d11");
      Number number0 = NumberUtils.createNumber("-0x11d11");
      assertEquals((-72977), number0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Qg[ $t^,YA0.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("123");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x7ia");
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-986.74F);
      floatArray0[1] = 342.4163F;
      floatArray0[2] = 1058.2686F;
      floatArray0[3] = Float.NaN;
      floatArray0[4] = (-1864.3F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      try { 
        NumberUtils.createNumber("!AGOlJ\"K=f");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // !AGOlJ\"K=f is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      try { 
        NumberUtils.createNumber("The");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
      
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      try { 
        NumberUtils.createNumber("123.4E-D");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 123.4E-D is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long long0 = NumberUtils.min(97L, 2183L, 2183L);
      assertEquals(97L, long0);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = NumberUtils.min(byteArray0);
      byte byte1 = NumberUtils.max(byteArray0);
      assertTrue(byte1 == byte0);
      
      short short0 = NumberUtils.max((short)1, (short)46, (short)3920);
      assertEquals((short)3920, short0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-1259);
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = 0.0F;
      floatArray0[2] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      boolean boolean0 = NumberUtils.isDigits("maximum(short,short,short) 1 failed");
      assertFalse(boolean0);
      
      double double0 = NumberUtils.toDouble("True result for (false, false)", 298.1880922852972);
      assertEquals(298.1880922852972, double0, 0.01);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) numberUtils0.LONG_MINUS_ONE;
      longArray0[1] = (long) (byte)numberUtils0.BYTE_ONE;
      longArray0[2] = (long) (byte)numberUtils0.BYTE_ONE;
      longArray0[3] = (long) (byte)numberUtils0.BYTE_ONE;
      longArray0[4] = (long) (byte)numberUtils0.BYTE_ONE;
      longArray0[5] = (long) (byte)numberUtils0.BYTE_ZERO;
      longArray0[6] = (long) (int)numberUtils0.INTEGER_ZERO;
      longArray0[7] = (long) (int)numberUtils0.INTEGER_ONE;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1L, long0);
      
      NumberUtils.isNumber("eA(e%8<$#gxn7`skXM-");
      short short0 = NumberUtils.max((short) numberUtils0.SHORT_MINUS_ONE, (short) numberUtils0.BYTE_MINUS_ONE, (short) (-7478));
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.isNumber("0x");
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      NumberUtils.max(doubleArray0);
      NumberUtils.max(doubleArray0);
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      NumberUtils.createLong((String) null);
      NumberUtils.min((-4690L), 0L, (-4690L));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte) (-35);
      NumberUtils.max(byteArray0);
      NumberUtils.min(byteArray0);
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E|`");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("4e>SKcq/A");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.toInt("java.endorsed.dirs", (int) numberUtils0.SHORT_MINUS_ONE);
      assertEquals((-1), int0);
      
      double double0 = NumberUtils.toDouble((String) null, (double) numberUtils0.INTEGER_ONE);
      assertEquals(1.0, double0, 0.01);
      
      long long0 = NumberUtils.toLong("Mac", 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.7F;
      float float0 = NumberUtils.min(1.7F, 1.7F, 1.7F);
      assertEquals(1.7F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x-0x11d11");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      try { 
        NumberUtils.createNumber(" is not a valid number.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  is not a valid number. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (long)numberUtils0.LONG_MINUS_ONE;
      double double0 = NumberUtils.toDouble("t>aO/cs", (double) numberUtils0.SHORT_ZERO);
      assertEquals(0.0, double0, 0.01);
      
      long long0 = NumberUtils.toLong((String) null, (-964L));
      assertEquals((-964L), long0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      try { 
        NumberUtils.createNumber(".");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (long)numberUtils0.LONG_MINUS_ONE;
      NumberUtils.createBigInteger((String) null);
      floatArray0[1] = (float) (short)numberUtils0.SHORT_ONE;
      floatArray0[2] = (float) (short)numberUtils0.SHORT_MINUS_ONE;
      floatArray0[3] = (float) (long)numberUtils0.LONG_ZERO;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)numberUtils0.SHORT_ONE;
      doubleArray0[1] = (double) (int)numberUtils0.INTEGER_ZERO;
      doubleArray0[2] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      doubleArray0[3] = (double) (int)numberUtils0.INTEGER_ONE;
      doubleArray0[4] = (-1415.709683182469);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[1] = (short) numberUtils0.SHORT_ZERO;
      NumberUtils.max(shortArray0);
      doubleArray0[5] = (double) (int)numberUtils0.INTEGER_ZERO;
      doubleArray0[6] = (double) (byte)numberUtils0.BYTE_MINUS_ONE;
      doubleArray0[7] = (double) (int)numberUtils0.INTEGER_ZERO;
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xThe Array must notBbe null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      boolean boolean0 = NumberUtils.isNumber("-0");
      int int0 = NumberUtils.toInt("e20?j#!Cd", (int) numberUtils0.BYTE_ZERO);
      assertEquals(0, int0);
      
      boolean boolean1 = NumberUtils.isNumber("0xorg.apache.commons.lang3.math.NumberUtils");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.max((double) numberUtils0.INTEGER_ONE, (-366.2372160178), 2631.0);
      assertEquals(2631.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (long)numberUtils0.LONG_MINUS_ONE;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) numberUtils0.SHORT_ONE;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_ZERO;
      NumberUtils.min(shortArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.2339999888423831E23;
      doubleArray0[1] = (double) (short)numberUtils0.SHORT_ZERO;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1.2339999888423831E23, double0, 0.01);
      
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
      
      byte byte0 = NumberUtils.min((byte)108, (byte)110, (byte)110);
      assertEquals((byte)108, byte0);
      
      byte byte1 = NumberUtils.min((byte)108, (byte)108, (byte) numberUtils0.BYTE_ONE);
      assertEquals((byte)1, byte1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.min((double) numberUtils0.SHORT_ONE, (double) numberUtils0.BYTE_ONE, (double) numberUtils0.FLOAT_ZERO);
      NumberUtils.isNumber((String) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte) numberUtils0.BYTE_ZERO;
      NumberUtils.max(byteArray0);
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("0xUW!8TBLkTSklup");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-200");
      assertEquals(1.1E-200, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-5.599999904632568);
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.min((byte) numberUtils0.BYTE_ZERO, (byte) numberUtils0.BYTE_ZERO, (byte)45);
      assertEquals((byte)0, byte0);
      
      long long0 = NumberUtils.toLong("71{#CYJ;/:V9", (-5279L));
      assertEquals((-5279L), long0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = NumberUtils.min((byte)84, (byte)3, (byte)3);
      assertEquals((byte)3, byte0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.min((double) numberUtils0.SHORT_ONE, (double) numberUtils0.BYTE_ONE, (double) numberUtils0.FLOAT_ZERO);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (int)numberUtils0.INTEGER_MINUS_ONE;
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_ZERO;
      NumberUtils.max(intArray0);
      NumberUtils.isNumber("-0x11d11");
      NumberUtils.max((byte) numberUtils0.BYTE_MINUS_ONE, (byte) numberUtils0.BYTE_MINUS_ONE, (byte)125);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[3] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[4] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[7] = (byte) numberUtils0.BYTE_ZERO;
      NumberUtils.min(byteArray0);
      float float0 = NumberUtils.toFloat("NastjWo`KfG_=jxwG5", (float) numberUtils0.BYTE_ONE);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      NumberUtils.isNumber("v4KiyRIKbwER6):qY");
      byte byte0 = NumberUtils.max((byte) (-100), (byte) (-100), (byte) (-16));
      assertEquals((byte) (-16), byte0);
      
      short short0 = NumberUtils.toShort("v4KiyRIKbwER6):qY", (short) (byte) (-100));
      assertEquals((short) (-100), short0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.isNumber("--@'AX EeiJY");
      byte byte0 = NumberUtils.max((byte) numberUtils0.BYTE_MINUS_ONE, (byte) numberUtils0.BYTE_ONE, (byte) (-23));
      assertEquals((byte)1, byte0);
      
      short short0 = NumberUtils.toShort("--@'AX EeiJY", (short) numberUtils0.SHORT_ZERO);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      try { 
        NumberUtils.createNumber("The Array must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      try { 
        NumberUtils.createNumber("3cL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 3cL is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      try { 
        NumberUtils.createNumber("\r7I-Q.Wo+m5V");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // \r7I-Q.Wo+m5V is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.min((byte)59, (byte)59, (byte)59);
      assertEquals((byte)59, byte0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      try { 
        NumberUtils.createNumber("4yd");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 4yd is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      try { 
        NumberUtils.createNumber(">t{wuz?s*Z6E2!");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // >t{wuz?s*Z6E2! is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[6];
      floatArray0[5] = (float) (long)numberUtils0.LONG_MINUS_ONE;
      double double0 = NumberUtils.toDouble("t>aO`/cs", (-1415.709683182469));
      assertEquals((-1415.709683182469), double0, 0.01);
      
      int int0 = NumberUtils.toInt((String) null, (int) numberUtils0.INTEGER_ZERO);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      long long0 = NumberUtils.max(longArray0);
      assertEquals((-1L), long0);
      
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)numberUtils0.BYTE_ONE;
      doubleArray0[1] = (double) (byte)numberUtils0.BYTE_ONE;
      long long0 = NumberUtils.min(843L, 12346L, (-2823L));
      assertEquals((-2823L), long0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--@'AX EeiJY");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--_Z?s");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      try { 
        NumberUtils.createNumber("`&\fpa~MJ`{eE-hQ<(");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // `&\fpa~MJ`{eE-hQ<( is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)106;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.min((double) numberUtils0.SHORT_ONE, (double) numberUtils0.BYTE_ONE, (double) numberUtils0.FLOAT_ZERO);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (int)numberUtils0.INTEGER_MINUS_ONE;
      floatArray0[1] = (float) (int)numberUtils0.INTEGER_MINUS_ONE;
      float float0 = NumberUtils.max(floatArray0);
      float float1 = NumberUtils.toFloat((String) null, (-1.0F));
      assertEquals(float1, float0, 0.01F);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[1] = (short) numberUtils0.SHORT_ONE;
      shortArray0[2] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[3] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[4] = (short) (byte)numberUtils0.BYTE_ONE;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0x12M");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"12M\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 2L;
      long long0 = NumberUtils.max(2L, 2L, 2L);
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int[] intArray0 = new int[16];
      intArray0[0] = 107;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[1] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[2] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[3] = (byte) numberUtils0.BYTE_ONE;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-1), byte0);
      
      int int0 = NumberUtils.min(57, 2, (int) numberUtils0.INTEGER_MINUS_ONE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.min((short)1483, (short) (-4082), (short) numberUtils0.BYTE_ONE);
      assertEquals((short) (-4082), short0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.max((int) numberUtils0.SHORT_ZERO, 2067, 1101);
      assertEquals(2067, int0);
      
      boolean boolean0 = NumberUtils.isNumber("");
      assertFalse(boolean0);
      
      byte byte0 = NumberUtils.max((byte)123, (byte) numberUtils0.BYTE_ONE, (byte)123);
      assertEquals((byte)123, byte0);
      
      short short0 = NumberUtils.toShort("-0xArray cannot be empty.", (short) numberUtils0.SHORT_ZERO);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("123");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("8~*QE018px_q\"^");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("123.4E-D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[7] = 9L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.isNumber("--@'AX EeiJY");
      byte byte0 = NumberUtils.max((byte) numberUtils0.BYTE_MINUS_ONE, (byte) numberUtils0.BYTE_ZERO, (byte) numberUtils0.BYTE_ZERO);
      assertEquals((byte)0, byte0);
      
      short short0 = NumberUtils.toShort((String) null, (short)819);
      assertEquals((short)819, short0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 132L;
      longArray0[1] = 132L;
      longArray0[2] = (-2043L);
      longArray0[3] = 132L;
      longArray0[4] = (-3239L);
      longArray0[5] = 132L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(132L, long0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 76;
      intArray0[1] = 123;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(123, int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 132L;
      floatArray0[1] = (float) 123;
      floatArray0[2] = (float) 123;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(123.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (long)numberUtils0.LONG_ONE;
      floatArray0[3] = 89.0F;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[1] = (byte) numberUtils0.BYTE_ZERO;
      long[] longArray0 = new long[6];
      longArray0[1] = (long) (byte)0;
      longArray0[2] = (-2715L);
      longArray0[3] = (long) numberUtils0.LONG_ONE;
      longArray0[5] = 0L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-2715L), long0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) numberUtils0.INTEGER_ONE;
      intArray0[1] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[2] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[3] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[4] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[5] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[6] = (int) (short)numberUtils0.SHORT_ONE;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1, int0);
      
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("Array cannot be empty.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-5322.8076F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0xhDkMDv@#b'+W");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-hDkMDv@#b'+W\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-x7.Zia");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.isNumber("-0x11d11");
      NumberUtils.max((byte) numberUtils0.BYTE_ONE, (byte) numberUtils0.BYTE_MINUS_ONE, (byte) numberUtils0.BYTE_MINUS_ONE);
      short short0 = NumberUtils.toShort("6;bZv{ TS<", (short) numberUtils0.SHORT_ZERO);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.createInteger((String) null);
      NumberUtils.toInt(";T");
      double[] doubleArray0 = new double[2];
      try { 
        NumberUtils.createNumber(" is not a valid number.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  is not a valid number. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_134()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (long)numberUtils0.LONG_MINUS_ONE;
      floatArray0[1] = (float) (short)numberUtils0.SHORT_ONE;
      floatArray0[2] = (float) (short)numberUtils0.SHORT_MINUS_ONE;
      floatArray0[3] = (float) (long)numberUtils0.LONG_ZERO;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)numberUtils0.SHORT_ONE;
      doubleArray0[1] = (double) (int)numberUtils0.INTEGER_ZERO;
      doubleArray0[2] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      doubleArray0[3] = (double) (int)numberUtils0.INTEGER_ONE;
      doubleArray0[4] = (-1416.5);
      doubleArray0[5] = (double) (int)numberUtils0.INTEGER_ZERO;
      doubleArray0[6] = (double) (byte)numberUtils0.BYTE_MINUS_ONE;
      doubleArray0[7] = (double) (int)numberUtils0.INTEGER_MINUS_ONE;
      doubleArray0[8] = (double) (byte)numberUtils0.BYTE_ONE;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1416.5), double0, 0.01);
      
      floatArray0[4] = (float) numberUtils0.FLOAT_MINUS_ONE;
      floatArray0[5] = (float) numberUtils0.FLOAT_ONE;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1.0F), float0, 0.01F);
      
      byte byte0 = NumberUtils.toByte((String) null);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[2] = (-2152L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-2152L), long0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long[] longArray0 = new long[6];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.max((int) numberUtils0.SHORT_ONE, (int) numberUtils0.SHORT_ZERO, (int) numberUtils0.SHORT_ONE);
      assertEquals(1, int0);
      
      long long0 = NumberUtils.max((long) numberUtils0.INTEGER_MINUS_ONE, 2147483648L, (long) numberUtils0.LONG_MINUS_ONE);
      assertEquals(2147483648L, long0);
      
      float float0 = NumberUtils.toFloat("-0x123.4ED", 2848.1567F);
      assertEquals(2848.1567F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.min((short) numberUtils0.SHORT_ONE, (short) numberUtils0.SHORT_ONE, (short)2812);
      assertEquals((short)1, short0);
      
      NumberUtils.max((long) numberUtils0.INTEGER_MINUS_ONE, 10L, 12347L);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.max((byte) numberUtils0.BYTE_ONE, (byte) numberUtils0.BYTE_MINUS_ONE, (byte) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((byte)1, byte0);
      
      boolean boolean0 = NumberUtils.isNumber("0x11a");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)7;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createDouble("OD{,Br");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.toDouble("", (double) numberUtils0.LONG_ZERO);
      assertEquals(0.0, double0, 0.01);
      
      long long0 = NumberUtils.min((long) numberUtils0.SHORT_ZERO, (long) numberUtils0.INTEGER_MINUS_ONE, (long) numberUtils0.INTEGER_ZERO);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.min((long) numberUtils0.LONG_ZERO, 12322L, (long) numberUtils0.BYTE_ONE);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1547);
      short short0 = NumberUtils.max((short) (-1547), (short) (-1547), (short) (-1547));
      assertEquals((short) (-1547), short0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      short[] shortArray0 = new short[11];
      shortArray0[1] = (short)100;
      short short0 = NumberUtils.max((short)0, (short)100, (short)100);
      assertEquals((short)100, short0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("gqE\";");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x11a");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[14];
      doubleArray0[1] = (double) (int)numberUtils0.INTEGER_ZERO;
      NumberUtils.min(doubleArray0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (int)numberUtils0.INTEGER_MINUS_ONE;
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1906.8517813674312;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_156()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[1] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[2] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[3] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[4] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[5] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[6] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[7] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_159()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[1] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[2] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[3] = (short) numberUtils0.SHORT_ONE;
      shortArray0[4] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1, short0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 132L;
      longArray0[1] = (long) (byte)numberUtils0.BYTE_MINUS_ONE;
      longArray0[2] = (-2043L);
      longArray0[3] = (long) (short)0;
      longArray0[4] = (long) (int)numberUtils0.INTEGER_ONE;
      longArray0[5] = (long) numberUtils0.LONG_ONE;
      longArray0[6] = (long) (byte)numberUtils0.BYTE_ONE;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(132L, long0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)68;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)68, short0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      long[] longArray0 = new long[5];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.min((short) (-651), (short) numberUtils0.SHORT_ZERO, (short) (-21845));
      assertEquals((short) (-21845), short0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (byte)numberUtils0.BYTE_MINUS_ONE;
      doubleArray0[1] = (double) (byte)numberUtils0.BYTE_MINUS_ONE;
      doubleArray0[2] = (-5.599999904632568);
      doubleArray0[3] = (double) (byte)numberUtils0.BYTE_MINUS_ONE;
      doubleArray0[4] = (double) (int)numberUtils0.INTEGER_ONE;
      doubleArray0[5] = (double) (int)numberUtils0.INTEGER_MINUS_ONE;
      doubleArray0[6] = (double) (long)numberUtils0.LONG_MINUS_ONE;
      doubleArray0[7] = (double) (long)numberUtils0.LONG_ONE;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1.0, double0, 0.01);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_ONE;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 10.78;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(10.78, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_171()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.min((-1), 1752, (int) numberUtils0.BYTE_ZERO);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.min((int) numberUtils0.BYTE_ZERO, (int) numberUtils0.SHORT_MINUS_ONE, 97);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.min((-2099.45640437), (double) numberUtils0.BYTE_ONE, (double) numberUtils0.DOUBLE_MINUS_ONE);
      assertEquals((-2099.45640437), double0, 0.01);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)numberUtils0.BYTE_ONE;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float float0 = NumberUtils.toFloat("ToG|S{");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_177()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.toLong("0x1111 ");
      assertEquals(0L, long0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) numberUtils0.DOUBLE_ONE;
      doubleArray0[1] = (double) (byte)numberUtils0.BYTE_ZERO;
      doubleArray0[2] = (double) (int)numberUtils0.INTEGER_MINUS_ONE;
      doubleArray0[3] = (double) (short)numberUtils0.SHORT_ONE;
      doubleArray0[4] = (double) (short)numberUtils0.SHORT_MINUS_ONE;
      doubleArray0[5] = (double) (long)numberUtils0.LONG_ONE;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.toDouble("", (double) numberUtils0.LONG_ZERO);
      assertEquals(0.0, double0, 0.01);
      
      long long0 = NumberUtils.toLong("J:tY8]]", (long) numberUtils0.LONG_ONE);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.toLong("0x1111 ");
      NumberUtils.max((byte) numberUtils0.BYTE_ONE, (byte) (-128), (byte) numberUtils0.BYTE_ONE);
      boolean boolean0 = NumberUtils.isNumber("@'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (long)numberUtils0.LONG_ONE;
      floatArray0[1] = 89.0F;
      floatArray0[2] = (float) (long)numberUtils0.LONG_MINUS_ONE;
      floatArray0[3] = (float) (byte)numberUtils0.BYTE_MINUS_ONE;
      floatArray0[4] = 0.01234F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1.0F), float0, 0.01F);
      
      short short0 = NumberUtils.toShort(" 1");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 2294.6F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      float[] floatArray0 = new float[2];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      short short0 = NumberUtils.toShort(" 1");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_186()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.toDouble("lxr??Eo#}]NuA9]w4M3");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[9];
      intArray0[0] = (int) numberUtils0.INTEGER_ZERO;
      intArray0[1] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[2] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[3] = (int) (short)numberUtils0.SHORT_ZERO;
      intArray0[4] = (int) (byte)numberUtils0.BYTE_ZERO;
      intArray0[5] = (int) numberUtils0.INTEGER_MINUS_ONE;
      intArray0[6] = (int) numberUtils0.INTEGER_MINUS_ONE;
      intArray0[7] = (int) numberUtils0.INTEGER_ZERO;
      intArray0[8] = (int) (byte)numberUtils0.BYTE_ONE;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 98;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(98, int0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)108, (byte)86, (byte)89);
      assertEquals((byte)108, byte0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)108;
      floatArray0[1] = (float) (byte)89;
      floatArray0[2] = (float) (byte)89;
      floatArray0[3] = (float) (byte)108;
      floatArray0[4] = (float) (byte)86;
      floatArray0[5] = (float) (byte)108;
      floatArray0[6] = (float) (byte)108;
      floatArray0[7] = (float) (byte)108;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(108.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      float[] floatArray0 = new float[12];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[1] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[2] = 3493;
      intArray0[3] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      int[] intArray0 = new int[12];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      boolean boolean0 = NumberUtils.isNumber("-0x11d11");
      assertTrue(boolean0);
      
      byte byte0 = NumberUtils.toByte("-0x11d11");
      assertEquals((byte)0, byte0);
      
      short short0 = NumberUtils.toShort("-0x11d11", (short) numberUtils0.SHORT_ZERO);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      try { 
        NumberUtils.createNumber("i8");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"i8\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      int int0 = NumberUtils.toInt("@J");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.toShort("isNumber(String) 1 Neg failed", (short) numberUtils0.BYTE_ONE);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      float float0 = NumberUtils.max(1482.9307F, 1482.9307F, (-1.0F));
      assertEquals(1482.9307F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      try { 
        NumberUtils.createNumber("^XqN;I|:t&qLW:sW");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ^XqN;I|:t&qLW:sW is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      try { 
        NumberUtils.createNumber("*(EjzQ_C4h ^wN29h62");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }
}
