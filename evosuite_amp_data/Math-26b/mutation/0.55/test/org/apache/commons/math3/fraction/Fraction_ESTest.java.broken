/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 23:25:24 GMT 2023
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.testcarver.testcase.EvoSuiteXStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2147483636), (-2147483608));
      Fraction fraction1 = Fraction.getReducedFraction((-723), 40);
      // Undeclared exception!
      try { 
        fraction0.subtract(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: 204,816,249,253
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) Integer.MIN_VALUE);
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01);
      
      // Undeclared exception!
      try { 
        fraction0.THREE_FIFTHS.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = Fraction.ONE_FIFTH;
      Fraction fraction2 = fraction0.add(fraction1);
      assertEquals(3, fraction2.getNumerator());
      assertEquals(100.0, fraction2.percentageValue(), 0.01);
      
      String string0 = fraction0.toString();
      assertEquals("2 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, Integer.MIN_VALUE);
      assertEquals(0, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      fraction0.compareTo(fraction0);
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      // Undeclared exception!
      try { 
        fraction0.ONE_HALF.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(737, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 737/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction1 = fraction0.add(Integer.MAX_VALUE);
      Fraction fraction2 = new Fraction((double) Integer.MAX_VALUE);
      Fraction fraction3 = new Fraction(0.0);
      Fraction fraction4 = new Fraction(0.6931470632553101);
      Fraction fraction5 = new Fraction(0.008848667291603052);
      Fraction fraction6 = new Fraction(0.27800399999978254);
      Fraction fraction7 = Fraction.ZERO;
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction9 = Fraction.ONE_FIFTH;
      fraction9.equals(fraction5);
      fraction8.toString();
      fraction3.abs();
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Fraction fraction10 = Fraction.ONE_HALF;
      fraction4.equals(fraction10);
      Fraction fraction11 = Fraction.ONE;
      // Undeclared exception!
      try { 
        fraction1.multiply(fraction8);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-1));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        fraction0.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction2 = fraction1.add(Integer.MAX_VALUE);
      Fraction fraction3 = new Fraction((double) Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction(0.0);
      Fraction fraction5 = new Fraction((-242343.0));
      Fraction fraction6 = Fraction.ONE_HALF;
      Fraction fraction7 = fraction5.ONE_THIRD.subtract(fraction6);
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction9 = new Fraction((-2323.0));
      Fraction fraction10 = new Fraction((double) Integer.MIN_VALUE);
      Fraction fraction11 = fraction9.TWO.divide((-78));
      assertEquals((-2.564102564102564), fraction11.percentageValue(), 0.01);
      
      Fraction fraction12 = new Fraction(0.49115133270839695);
      Fraction fraction13 = fraction1.divide((-78));
      Fraction fraction14 = new Fraction((-4780.0));
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Fraction fraction15 = fraction13.abs();
      assertEquals(27531841, fraction15.intValue());
      
      fraction4.equals(fraction2);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Fraction fraction16 = Fraction.ONE_FIFTH;
      fraction2.equals(fraction16);
      assertEquals((short) (-2), fraction2.shortValue());
      
      Fraction fraction17 = fraction5.multiply(fraction7);
      assertEquals(40390.5, fraction17.doubleValue(), 0.01);
      
      fraction10.compareTo(fraction3);
      assertTrue(fraction10.equals((Object)fraction8));
      assertFalse(fraction3.equals((Object)fraction15));
      
      Fraction fraction18 = Fraction.ONE_HALF;
      fraction16.equals(fraction6);
      assertFalse(fraction6.equals((Object)fraction16));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = new Fraction(0.0);
      Fraction fraction2 = fraction0.ZERO.subtract(fraction1);
      assertEquals(0.0, fraction2.percentageValue(), 0.01);
      
      Fraction fraction3 = fraction0.divide(fraction0);
      assertEquals(100.0, fraction3.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(31, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 31/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = null;
      try {
        fraction1 = new Fraction(1.7976931348623157E308);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-2911.0240877312904), (-2911.0240877312904), Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -2,911.024 to fraction after -2,147,483,648 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      Fraction fraction2 = fraction1.FOUR_FIFTHS.subtract(fraction0);
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-1), int0);
      assertTrue(fraction0.equals((Object)fraction2));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction3 = fraction2.add(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((double) Integer.MAX_VALUE);
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction(1.0E-5);
      Fraction fraction7 = new Fraction(358.3);
      Fraction fraction8 = fraction5.abs();
      Fraction fraction9 = new Fraction(5.185185184473085E-4);
      Fraction fraction10 = new Fraction(332.0);
      Fraction fraction11 = new Fraction((double) Integer.MIN_VALUE);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction2.equals("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Fraction fraction12 = Fraction.ONE_THIRD;
      fraction11.equals("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Fraction fraction13 = new Fraction(0.6726118280000719, Integer.MIN_VALUE);
      assertTrue(fraction13.equals((Object)fraction8));
      
      Fraction fraction14 = Fraction.ONE;
      int int0 = fraction7.compareTo(fraction11);
      assertEquals(1, int0);
      assertEquals(3583, fraction7.getNumerator());
      
      fraction3.negate();
      assertEquals((-2), fraction3.getNumerator());
      assertEquals(2.14748365E9F, fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction3 = new Fraction((double) Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction(0.0);
      Fraction fraction5 = new Fraction((-242343.0));
      Fraction fraction6 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction7 = new Fraction((double) Integer.MAX_VALUE);
      Fraction fraction8 = new Fraction(100.0);
      Fraction fraction9 = Fraction.FOUR_FIFTHS;
      Fraction fraction10 = new Fraction((double) Integer.MAX_VALUE);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction7.equals(fraction4);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Object object0 = new Object();
      Fraction fraction11 = Fraction.TWO_THIRDS;
      fraction9.equals(fraction11);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      boolean boolean0 = fraction8.equals(fraction10);
      assertFalse(boolean0);
      assertTrue(fraction10.equals((Object)fraction2));
      
      Fraction fraction12 = fraction4.divide(fraction8);
      assertEquals(0.0, fraction12.percentageValue(), 0.01);
      
      fraction0.hashCode();
      Fraction fraction13 = fraction11.negate();
      String string0 = fraction13.toString();
      assertEquals("-2 / 3", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = new Fraction(500.0);
      Fraction fraction2 = fraction1.TWO_QUARTERS.reciprocal();
      Fraction fraction3 = new Fraction(2147483625);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction.getReducedFraction(2147483625, (-4857));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction(0.8);
      Fraction fraction7 = new Fraction(915.7589986404378);
      Fraction fraction8 = new Fraction((-485.9));
      Fraction fraction9 = new Fraction(1954.38202475);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction0.equals(fraction8);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Object object0 = new Object();
      fraction8.equals(object0);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      boolean boolean0 = fraction2.equals(object0);
      assertFalse(boolean0);
      assertEquals(2.0, fraction2.doubleValue(), 0.01);
      
      Fraction fraction10 = fraction4.divide(fraction6);
      assertEquals((-125.0), fraction10.percentageValue(), 0.01);
      
      fraction0.hashCode();
      assertFalse(fraction0.equals((Object)fraction6));
      
      fraction6.getNumerator();
      assertFalse(fraction6.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      double double0 = 500.0;
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction(0.0);
      int int0 = Integer.MIN_VALUE;
      Fraction fraction5 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction6 = new Fraction((-1.0));
      Fraction fraction7 = new Fraction((double) Integer.MIN_VALUE);
      Fraction fraction8 = new Fraction(1.0E-5);
      Fraction fraction9 = new Fraction(0.8414709568023682, 500.0, Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction1.subtract(fraction7);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in subtraction: 75 - -2,147,483,648
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.ONE_THIRD;
      Fraction fraction2 = fraction0.divide(fraction1);
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.abs();
      fraction0.getField();
      boolean boolean0 = fraction1.equals(fraction0);
      assertTrue(boolean0);
      
      Fraction fraction2 = fraction0.subtract(fraction0);
      int int0 = fraction2.compareTo(fraction0);
      assertEquals((-1), int0);
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      
      String string0 = fraction0.toString();
      assertEquals("1 / 2", string0);
      assertFalse(fraction0.equals((Object)fraction2));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = Fraction.ONE_THIRD;
      Fraction fraction2 = fraction1.MINUS_ONE.abs();
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1, fraction2.getDenominator());
      
      Fraction fraction3 = fraction1.divide(fraction0);
      assertEquals(0.5, fraction3.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      Fraction fraction2 = fraction0.ZERO.add(fraction1);
      assertSame(fraction2, fraction1);
      
      String string0 = fraction0.toString();
      assertEquals("-1", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = Fraction.ONE_FIFTH;
      fraction0.equals(fraction1);
      Fraction fraction2 = fraction1.subtract(fraction0);
      int int0 = fraction2.compareTo(fraction1);
      assertEquals((-1), int0);
      
      Fraction fraction3 = fraction0.divide(fraction2);
      assertEquals((-166.66666666666669), fraction3.percentageValue(), 0.01);
      
      String string0 = fraction0.toString();
      assertEquals("1 / 2", string0);
      
      Fraction fraction4 = Fraction.getReducedFraction(73, (-1));
      assertEquals((-73.0F), fraction4.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.5479196832193338, Integer.MIN_VALUE);
      fraction0.getField();
      Fraction fraction1 = Fraction.getReducedFraction(0, 2);
      fraction0.equals(fraction1);
      Fraction fraction2 = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);
      int int0 = fraction2.compareTo(fraction1);
      assertEquals((-1), int0);
      
      Fraction fraction3 = fraction0.divide(fraction2);
      assertSame(fraction3, fraction1);
      assertTrue(fraction3.equals((Object)fraction0));
      
      String string0 = fraction2.toString();
      assertEquals("-1073741824", string0);
      
      Fraction fraction4 = Fraction.getReducedFraction(1394, 2);
      assertEquals(69700.0, fraction4.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.ONE_THIRD.subtract(fraction1);
      assertEquals(0.3333333333333333, fraction2.doubleValue(), 0.01);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction(100.0);
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-0.1));
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction9 = new Fraction(332.0);
      Fraction fraction10 = new Fraction((-2323.0));
      Fraction fraction11 = new Fraction(44.0);
      Fraction fraction12 = new Fraction(0.49115133270839695);
      Fraction fraction13 = Fraction.ZERO;
      Fraction fraction14 = new Fraction(Integer.MIN_VALUE);
      boolean boolean0 = fraction13.equals(fraction14);
      assertEquals((byte)0, fraction14.byteValue());
      
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      boolean boolean1 = fraction13.equals(object0);
      assertTrue(boolean1 == boolean0);
      
      Fraction fraction15 = new Fraction((double) Integer.MAX_VALUE);
      fraction13.equals(fraction15);
      assertTrue(fraction15.equals((Object)fraction3));
      
      fraction11.equals(fraction0);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Fraction fraction16 = Fraction.ONE;
      int int0 = fraction16.compareTo(fraction5);
      assertEquals(1, int0);
      
      int int1 = fraction1.hashCode();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction((-0.7064007668307535));
      Fraction fraction6 = new Fraction((-242343.0));
      Fraction fraction7 = new Fraction(Integer.MIN_VALUE);
      fraction7.ONE.getField();
      Fraction fraction8 = new Fraction(332.0);
      Fraction fraction9 = new Fraction((-0.7064007668307535));
      Fraction fraction10 = new Fraction(44.0);
      Fraction fraction11 = new Fraction(0.49115133270839695);
      Fraction fraction12 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object2);
      assertFalse(fraction12.equals((Object)fraction11));
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Fraction fraction13 = fraction2.negate();
      assertEquals(1, fraction13.getDenominator());
      assertEquals((short) (-500), fraction13.shortValue());
      
      long long0 = fraction6.longValue();
      assertEquals((-242343L), long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.divide(4282);
      assertEquals(3, fraction1.getNumerator());
      assertEquals(1.751518E-4F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void testRemovetestRemove_31()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction(100.0);
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-0.1));
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction9 = new Fraction(332.0);
      Fraction fraction10 = new Fraction((-2323.0));
      Fraction fraction11 = new Fraction(44.0);
      Fraction fraction12 = new Fraction(0.49115133270839695);
      Fraction fraction13 = Fraction.ZERO;
      Fraction fraction14 = new Fraction(Integer.MIN_VALUE);
      fraction13.equals(fraction14);
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object0);
      Fraction fraction15 = new Fraction((double) Integer.MAX_VALUE);
      fraction13.equals(fraction15);
      fraction11.equals(fraction0);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Fraction fraction16 = Fraction.ONE;
      fraction16.compareTo(fraction5);
      fraction0.percentageValue();
      // Undeclared exception!
      try { 
        fraction12.divide(fraction15);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction(0.0);
      Fraction fraction5 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction6 = new Fraction(332.0);
      Fraction fraction7 = new Fraction((-2323.0));
      Fraction fraction8 = new Fraction(44.0);
      Fraction fraction9 = new Fraction(1282.419317, 1282.419317, Integer.MIN_VALUE);
      Fraction fraction10 = fraction8.TWO_FIFTHS.subtract(fraction9);
      assertEquals((-1281.6), fraction10.doubleValue(), 0.01);
      
      Fraction fraction11 = new Fraction(0.49115133270839695);
      Fraction fraction12 = Fraction.ZERO;
      Fraction fraction13 = new Fraction(Integer.MIN_VALUE);
      fraction12.equals(fraction13);
      Fraction fraction14 = new Fraction((-1.0));
      boolean boolean0 = fraction12.equals(fraction14);
      assertFalse(boolean0);
      
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object0);
      assertFalse(fraction12.equals((Object)fraction11));
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.hashCode();
      assertTrue(fraction13.equals((Object)fraction5));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(100.0);
      Fraction fraction2 = Fraction.ONE_QUARTER;
      Fraction fraction3 = new Fraction((-0.7064007668307535));
      Fraction fraction4 = new Fraction((-242343.0));
      Fraction fraction5 = new Fraction(332.0);
      Fraction fraction6 = new Fraction((-0.7064007668307535));
      Fraction fraction7 = fraction6.ZERO.add(fraction4);
      Fraction fraction8 = new Fraction(100.0);
      Fraction fraction9 = new Fraction(0.49115133270839695);
      Fraction fraction10 = fraction9.THREE_FIFTHS.negate();
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction3.hashCode();
      Fraction fraction11 = fraction8.multiply(fraction2);
      assertEquals((byte)25, fraction11.byteValue());
      assertTrue(fraction8.equals((Object)fraction1));
      
      int int0 = fraction2.compareTo(fraction4);
      assertSame(fraction4, fraction7);
      assertEquals(1, int0);
      
      Fraction fraction12 = Fraction.ONE_HALF;
      fraction10.equals(fraction12);
      assertEquals((-3), fraction10.getNumerator());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.divide(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (2,147,483,649/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2748.4637), 292);
      Fraction fraction1 = fraction0.negate();
      assertEquals(179, fraction1.getDenominator());
      assertEquals(2748.4636F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      String string0 = fraction0.toString();
      assertEquals("1 / 2", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      String string0 = fraction0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(3, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 3/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2147483617), (-2147483617));
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void testRemovetestRemovetestRemovetestRemove_42()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-0.1));
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction9 = new Fraction(332.0);
      Fraction fraction10 = new Fraction((-2323.0));
      Fraction fraction11 = new Fraction(44.0);
      Fraction fraction12 = new Fraction(0.49115133270839695);
      Fraction fraction13 = fraction12.TWO_THIRDS.multiply(fraction5);
      assertTrue(fraction13.equals((Object)fraction5));
      
      Fraction fraction14 = Fraction.ZERO;
      Fraction fraction15 = new Fraction(Integer.MIN_VALUE);
      fraction14.equals(fraction15);
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction14.equals(object0);
      Fraction fraction16 = new Fraction((-1.0));
      boolean boolean0 = fraction14.equals(fraction16);
      assertFalse(boolean0);
      assertTrue(fraction16.equals((Object)fraction4));
      
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction14.equals(object1);
      assertFalse(fraction14.equals((Object)fraction12));
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      int int0 = fraction15.intValue();
      assertEquals((-2147483648L), fraction15.longValue());
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void testRemovetestRemovetestRemovetestRemove_43()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((-1.0));
      fraction4.ONE_QUARTER.subtract((-1149));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-0.1));
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction9 = new Fraction(332.0);
      Fraction fraction10 = new Fraction((-2323.0));
      Fraction fraction11 = new Fraction(44.0);
      Fraction fraction12 = new Fraction(0.49115133270839695);
      fraction12.TWO_THIRDS.multiply(fraction5);
      Fraction fraction13 = Fraction.ZERO;
      Fraction fraction14 = new Fraction(Integer.MIN_VALUE);
      fraction13.equals(fraction14);
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object0);
      Fraction fraction15 = new Fraction((-1.0));
      fraction13.equals(fraction15);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object1);
      org.apache.commons.math3.fraction.Fraction fraction16 = (org.apache.commons.math3.fraction.Fraction)EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      assertEquals(0.0, fraction16.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = Fraction.ONE_THIRD;
      Fraction fraction2 = fraction0.ONE_QUARTER.add(fraction1);
      assertEquals(0.5833333333333334, fraction2.doubleValue(), 0.01);
      
      Fraction fraction3 = fraction0.divide(fraction0);
      assertEquals(1.0F, fraction3.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.divide(fraction0);
      int int0 = fraction1.compareTo(fraction0);
      assertEquals(1, int0);
      assertEquals(100.0, fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      FractionField fractionField0 = fraction0.TWO_THIRDS.getField();
      assertNotNull(fractionField0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      Fraction fraction2 = fraction0.THREE_FIFTHS.subtract(fraction1);
      assertEquals(1, fraction2.getNumerator());
      assertEquals(0.1, fraction2.doubleValue(), 0.01);
      
      String string0 = fraction0.toString();
      assertEquals("1 / 2", string0);
  }

  @Test(timeout = 4000)
  public void testRemovetestRemovetestRemovetestRemove_50()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-0.1));
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction9 = new Fraction(332.0);
      Fraction fraction10 = new Fraction((-2323.0));
      Fraction fraction11 = new Fraction(44.0);
      Fraction fraction12 = new Fraction(0.49115133270839695);
      assertEquals(226, fraction12.getDenominator());
      
      Fraction fraction13 = Fraction.ZERO;
      Fraction fraction14 = new Fraction(Integer.MIN_VALUE);
      fraction13.equals(fraction14);
      assertEquals((-2.14748365E9F), fraction14.floatValue(), 0.01F);
      
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object0);
      Fraction fraction15 = new Fraction((-1.0));
      fraction13.equals(fraction15);
      assertTrue(fraction15.equals((Object)fraction4));
      
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object1);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      int int0 = fraction0.getDenominator();
      assertFalse(fraction0.equals((Object)fraction9));
      assertEquals(100.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.divide(fraction0);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-1), int0);
      assertEquals(1, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.FOUR_FIFTHS.abs();
      assertEquals(0.8, fraction1.doubleValue(), 0.01);
      
      Fraction fraction2 = fraction0.divide(fraction0);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1.0, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.ONE_HALF.multiply(fraction1);
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      
      Fraction fraction3 = fraction0.divide(fraction0);
      assertEquals(1.0, fraction3.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.ONE_THIRD.subtract(15);
      assertEquals((-1466.6666666666665), fraction1.percentageValue(), 0.01);
      assertEquals(3, fraction1.getDenominator());
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(100.0);
      assertTrue(fraction2.equals((Object)fraction0));
      
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      assertEquals((byte) (-1), fraction3.byteValue());
      
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-0.1));
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction9 = new Fraction(332.0);
      Fraction fraction10 = new Fraction((-2323.0));
      Fraction fraction11 = new Fraction(44.0);
      Fraction fraction12 = new Fraction(0.49115133270839695);
      Fraction fraction13 = Fraction.ZERO;
      Fraction fraction14 = new Fraction(Integer.MIN_VALUE);
      fraction13.equals(fraction14);
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object0);
      Fraction fraction15 = new Fraction((-1.0));
      boolean boolean0 = fraction13.equals(fraction15);
      assertFalse(boolean0);
      assertEquals((-1), fraction15.getNumerator());
      
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object1);
      assertFalse(fraction13.equals((Object)fraction12));
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      float float0 = fraction14.floatValue();
      assertEquals((-2.14748365E9F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.TWO_QUARTERS.add(293);
      assertEquals(2, fraction1.getDenominator());
      assertEquals(293.5F, fraction1.floatValue(), 0.01F);
      
      String string0 = fraction0.toString();
      assertEquals("1 / 2", string0);
  }

  @Test(timeout = 4000)
  public void testRemovetestRemovetestRemovetestRemove_57()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      fraction0.THREE_QUARTERS.add(16779186);
      Fraction fraction1 = Fraction.ONE;
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-0.1));
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction9 = new Fraction(332.0);
      Fraction fraction10 = new Fraction((-2323.0));
      Fraction fraction11 = new Fraction(44.0);
      Fraction fraction12 = new Fraction(0.49115133270839695);
      Fraction fraction13 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object1);
      Fraction fraction14 = new Fraction(Integer.MAX_VALUE);
      fraction13.equals(fraction14);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object2);
      org.apache.commons.math3.fraction.Fraction fraction15 = (org.apache.commons.math3.fraction.Fraction)EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      assertEquals(0L, fraction15.longValue());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(100.0, 3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 100 to fraction (-99/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.FOUR_FIFTHS.multiply(7);
      assertEquals(5L, fraction1.longValue());
      
      Fraction fraction2 = fraction0.divide(fraction0);
      assertEquals(1, fraction2.intValue());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = new Fraction(500.0);
      Fraction fraction1 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction2 = new Fraction(0.0);
      Fraction fraction3 = new Fraction((-0.1));
      Fraction fraction4 = new Fraction((-242343.0));
      Fraction fraction5 = new Fraction(Integer.MIN_VALUE);
      assertEquals((-2147483648L), fraction5.longValue());
      
      Fraction fraction6 = new Fraction(500.0);
      Fraction fraction7 = new Fraction(0.0);
      Fraction fraction8 = new Fraction(44.0);
      Fraction fraction9 = new Fraction(0.49115133270839695);
      assertEquals(0.49115044F, fraction9.floatValue(), 0.01F);
      
      Fraction fraction10 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction10.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction10.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      boolean boolean0 = fraction10.equals(object2);
      assertFalse(boolean0);
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      double double0 = fraction6.doubleValue();
      assertEquals(500.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = new Fraction((-252), (-252));
      fraction0.equals(fraction1);
      Fraction fraction2 = null;
      try {
        fraction2 = new Fraction((double) (-252), (-75));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -252 to fraction (253/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      fraction0.toString();
      fraction0.equals("3 / 4");
      Fraction fraction1 = new Fraction((-1207.20758832033), Integer.MIN_VALUE);
      Fraction fraction2 = Fraction.ONE_FIFTH;
      Fraction fraction3 = fraction0.divide(fraction1);
      assertEquals(4832, fraction3.getDenominator());
      assertEquals((-6.208609271523179E-4), fraction3.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = new Fraction((-242359.13308179652));
      assertEquals(263, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.negate();
      assertEquals((-25.0), fraction1.percentageValue(), 0.01);
      assertEquals((-1), fraction1.getNumerator());
  }
}
