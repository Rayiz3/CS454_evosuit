/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 19:19:00 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Comment_ESTest extends Comment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Comment comment0 = new Comment(" /:N49A2W&HO'\"");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(false);
      // Undeclared exception!
      try { 
        comment0.outerHtmlHead((Appendable) null, (-1500), document_OutputSettings2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Comment", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comment comment0 = new Comment("!?xml version=\"1.0\" encoding=\"ISO-8859-1\"?", "!?xml version=\"1.0\" encoding=\"ISO-8859-1\"?");
      boolean boolean0 = comment0.isXmlDeclaration();
      assertTrue(boolean0);
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "(%!#d'_~VX";
      Comment comment0 = new Comment("!?xml version=\"1.0\" encoding=\"ISO-8859-1\"?", "(%!#d'_~VX");
      comment0.toString();
      comment0.isXmlDeclaration();
      // Undeclared exception!
      try { 
        comment0.asXmlDeclaration();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comment comment0 = new Comment("<");
      boolean boolean0 = comment0.isXmlDeclaration();
      assertEquals("#comment", comment0.nodeName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comment comment0 = new Comment("!?xml version=\"1.0\" encoding=\"ISO-8859-1\"?", "!?xml version=\"1.0\" encoding=\"ISO-8859-1\"?");
      // Undeclared exception!
      try { 
        comment0.asXmlDeclaration();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comment comment0 = new Comment("h");
      comment0.siblingNodes();
      comment0.getData();
      comment0.getData();
      comment0.getData();
      boolean boolean0 = comment0.isXmlDeclaration();
      assertFalse(boolean0);
      
      String string0 = comment0.toString();
      assertEquals("#comment", comment0.nodeName());
      assertEquals("\n<!--h-->", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comment comment0 = new Comment("1].");
      assertEquals(0, comment0.siblingIndex());
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      comment0.traverse(nodeVisitor0);
      boolean boolean0 = comment0.isXmlDeclaration();
      assertEquals("#comment", comment0.nodeName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comment comment0 = new Comment("1].");
      boolean boolean0 = comment0.isXmlDeclaration();
      assertFalse(boolean0);
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comment comment0 = new Comment("3-;]AmM", "3-;]AmM");
      String string0 = comment0.toString();
      assertEquals("\n<!--3-;]AmM-->", string0);
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comment comment0 = new Comment("<p>Hello");
      comment0.asXmlDeclaration();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comment comment0 = new Comment("!?xml version=\"1.0\" encoding=\"IGO-8859-1\"?", "!?xml version=\"1.0\" encoding=\"IGO-8859-1\"?");
      assertFalse(comment0.hasParent());
  }
}
