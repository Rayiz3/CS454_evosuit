/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 23:21:30 GMT 2023
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thoughtworks.xstream.io.StreamException;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.testcarver.testcase.EvoSuiteXStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(1.633123935319537E16, (-2090));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 16,331,239,353,195,370 to fraction (16,331,239,353,195,370/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = new Fraction((-242390.6463242062));
      Fraction fraction1 = Fraction.getReducedFraction((-928), 179910);
      Fraction fraction2 = Fraction.ONE_QUARTER;
      // Undeclared exception!
      try { 
        fraction1.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: -1,548,101,824,829
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = new Fraction(167, 171);
      assertEquals(167, fraction0.getNumerator());
      assertEquals(0.9766081871345029, fraction0.doubleValue(), 0.01);
      
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      Fraction fraction2 = Fraction.TWO_THIRDS;
      boolean boolean0 = fraction1.equals(fraction1);
      assertTrue(boolean0);
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      fraction0.compareTo(fraction0);
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = new Fraction(3);
      Fraction fraction2 = new Fraction(0.0010813043478047624);
      fraction2.equals(fraction0);
      Fraction fraction3 = new Fraction((-1));
      fraction2.equals(fraction0);
      Fraction fraction4 = fraction1.divide(fraction2);
      assertEquals(2772, fraction4.intValue());
      assertEquals(0.0010822510822510823, fraction2.doubleValue(), 0.01);
      
      Fraction fraction5 = Fraction.ONE_FIFTH;
      fraction1.floatValue();
      Fraction fraction6 = fraction0.negate();
      assertEquals(2, fraction6.getDenominator());
      
      String string0 = fraction1.toString();
      assertEquals("3", string0);
      
      Fraction fraction7 = Fraction.getReducedFraction(Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertFalse(fraction7.equals((Object)fraction3));
      
      int int0 = fraction3.compareTo(fraction1);
      assertEquals((-1), int0);
      assertFalse(fraction1.equals((Object)fraction3));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = new Fraction((-3450), (-3450));
      Fraction fraction1 = null;
      try {
        fraction1 = new Fraction(0.014068304482975691, (-3450), (-3450));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 0.014 to fraction after -3,450 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(451.2538969989998);
      Fraction fraction2 = new Fraction(100.0);
      assertTrue(fraction2.equals((Object)fraction0));
      
      Fraction fraction3 = new Fraction((-2199));
      assertFalse(fraction3.equals((Object)fraction2));
      
      Fraction fraction4 = Fraction.THREE_QUARTERS;
      Fraction fraction5 = Fraction.THREE_FIFTHS;
      Fraction fraction6 = new Fraction((-2199), 1068966896);
      assertEquals((-2199), fraction6.getNumerator());
      assertEquals((-2.057126378963189E-4), fraction6.percentageValue(), 0.01);
      
      Object object0 = new Object();
      boolean boolean0 = fraction4.equals(fraction5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      // Undeclared exception!
      try { 
        fraction0.FOUR_FIFTHS.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, (-6123));
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction3 = new Fraction((-1.0));
      Fraction fraction4 = new Fraction(100.0);
      Fraction fraction5 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction6 = new Fraction(75.0);
      Fraction fraction7 = new Fraction(44.0);
      Fraction fraction8 = new Fraction(0.14679827500159015);
      Fraction fraction9 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      boolean boolean0 = fraction9.equals(object0);
      assertFalse(boolean0);
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Fraction.getReducedFraction(1000, Integer.MAX_VALUE);
      Fraction fraction10 = fraction8.negate();
      Fraction fraction11 = fraction4.multiply(fraction9);
      Fraction fraction12 = Fraction.getReducedFraction(1000, (-968));
      assertEquals((-1.0330578F), fraction12.floatValue(), 0.01F);
      
      String string0 = fraction10.toString();
      assertEquals("-16 / 109", string0);
      
      fraction9.toString();
      String string1 = fraction9.toString();
      assertEquals("0", string1);
      assertSame(fraction9, fraction11);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.TWO_FIFTHS.multiply(fraction0);
      assertEquals(20.0, fraction1.percentageValue(), 0.01);
      
      Fraction fraction2 = fraction0.add(fraction0);
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        fraction0.ONE_HALF.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.ONE_HALF.multiply(fraction1);
      Fraction fraction3 = fraction2.ONE_HALF.multiply(fraction1);
      assertEquals(0.0F, fraction3.floatValue(), 0.01F);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.MINUS_ONE.abs();
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction((-2133), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,133/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = new Fraction((-242390.6463242062));
      Fraction fraction1 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.TWO_FIFTHS.divide(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(36.92682969845391);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction((-1.0));
      Fraction fraction4 = new Fraction(0.0);
      Fraction fraction5 = new Fraction((-0.1));
      Fraction fraction6 = new Fraction((-0.1));
      Fraction fraction7 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction8 = new Fraction(1.0E-5);
      Fraction fraction9 = new Fraction(220);
      Fraction.getReducedFraction(252, 3);
      Fraction fraction10 = new Fraction(549.3020949939);
      Fraction fraction11 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        EvoSuiteXStream.fromString("");
        fail("Expecting exception: StreamException");
      
      } catch(StreamException e) {
         //
         // 
         //
         verifyException("com.thoughtworks.xstream.io.xml.XppReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      String string0 = fraction0.toString();
      assertEquals("2 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-763));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-763, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) Integer.MIN_VALUE);
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.add(fraction1);
      assertSame(fraction2, fraction0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = Fraction.ONE_THIRD;
      Fraction fraction2 = fraction0.TWO_THIRDS.subtract(fraction1);
      assertEquals(33.33333333333333, fraction2.percentageValue(), 0.01);
      
      String string0 = fraction0.toString();
      assertEquals("1 / 2", string0);
  }

  @Test(timeout = 4000)
  public void testRemovetestRemove_21()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(100.0);
      fraction0.ONE_THIRD.divide(fraction1);
      Fraction fraction2 = new Fraction(75.0);
      Fraction fraction3 = new Fraction(500.1424343440665);
      fraction3.TWO_THIRDS.getField();
      int int0 = 2;
      Fraction fraction4 = new Fraction(2);
      fraction4.ONE_QUARTER.add((-1));
      Fraction fraction5 = null;
      try {
        fraction5 = new Fraction(75.0, 2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 75 to fraction (9,223,372,036,854,775,734/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = new Fraction(75.0);
      Fraction fraction1 = new Fraction(500.0);
      Fraction fraction2 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction3 = new Fraction((-1.0));
      Fraction fraction4 = fraction3.ONE_HALF.multiply(fraction0);
      assertEquals(3750.0, fraction4.percentageValue(), 0.01);
      assertEquals((-1), fraction3.intValue());
      
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((double) Integer.MAX_VALUE);
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction9 = new Fraction(332.0);
      Fraction fraction10 = new Fraction((-2323.0));
      Fraction fraction11 = new Fraction(44.0);
      Fraction fraction12 = new Fraction(0.14679827500159015);
      Fraction fraction13 = Fraction.ZERO;
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object2);
      fraction11.intValue();
      Fraction fraction14 = fraction9.add(Integer.MIN_VALUE);
      assertEquals((-2147483316), fraction14.getNumerator());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = new Fraction(0.0);
      Fraction fraction2 = fraction1.add(fraction0);
      assertSame(fraction2, fraction0);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.ONE_THIRD;
      Fraction fraction2 = fraction0.ZERO.subtract(fraction1);
      assertEquals((-33.33333333333333), fraction2.percentageValue(), 0.01);
      assertEquals((-1), fraction2.getNumerator());
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.ONE.add(13);
      assertEquals(14, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void testRemovetestRemove_26()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction((-1.0));
      Fraction fraction4 = new Fraction(0.0);
      Fraction fraction5 = new Fraction((-0.1));
      Fraction fraction6 = new Fraction((-242354.61196262174));
      Fraction fraction7 = fraction6.TWO_QUARTERS.negate();
      assertEquals((-50.0), fraction7.percentageValue(), 0.01);
      
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction9 = new Fraction(332.0);
      Fraction fraction10 = new Fraction((-2323.0));
      Fraction fraction11 = new Fraction(44.0);
      Fraction fraction12 = new Fraction(0.14679827500159015);
      assertEquals(16, fraction12.getNumerator());
      
      Fraction fraction13 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object2);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      int int0 = fraction11.getNumerator();
      assertEquals(44, fraction11.intValue());
      assertEquals(44, int0);
  }

  @Test(timeout = 4000)
  public void testRemovetestRemove_27()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(36.92682969845391);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction((-1.0));
      Fraction fraction4 = new Fraction(0.0);
      Fraction fraction5 = new Fraction((-0.1));
      Fraction fraction6 = new Fraction((-242343.0));
      Fraction fraction7 = new Fraction(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, fraction7.intValue());
      
      Fraction fraction8 = new Fraction(332.0);
      Fraction fraction9 = new Fraction(44.0);
      assertEquals(44L, fraction9.longValue());
      
      Fraction fraction10 = new Fraction(0.14679827500159015);
      Fraction fraction11 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction11.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction11.equals(object1);
      Fraction fraction12 = fraction11.abs();
      Fraction fraction13 = new Fraction(0.0);
      fraction11.equals(fraction13);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      boolean boolean0 = fraction11.equals(object2);
      assertFalse(boolean0);
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction11.hashCode();
      assertSame(fraction11, fraction12);
      
      int int0 = fraction5.compareTo(fraction4);
      assertTrue(fraction4.equals((Object)fraction12));
      assertEquals((-1), int0);
      assertFalse(fraction4.equals((Object)fraction8));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.FOUR_FIFTHS;
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      // Undeclared exception!
      try { 
        fraction0.MINUS_ONE.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = Fraction.ONE_HALF;
      Fraction fraction2 = fraction0.ZERO.multiply(fraction1);
      assertEquals(0.0, fraction2.percentageValue(), 0.01);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (2,147,483,649/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void testRemovetestRemovetestRemovetestRemove_32()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction((-2147483640));
      Fraction fraction4 = new Fraction((-1.0));
      fraction4.THREE_QUARTERS.subtract(195208039);
      Fraction fraction5 = null;
      try {
        fraction5 = new Fraction(0.0, (-2147483640));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void testRemovetestRemove_33()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      assertEquals(2147483647L, fraction3.longValue());
      
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction((-0.1));
      Fraction fraction6 = new Fraction((-242343.0));
      Fraction fraction7 = new Fraction(Integer.MIN_VALUE);
      assertEquals((-2.14748365E9F), fraction7.floatValue(), 0.01F);
      
      Fraction fraction8 = new Fraction(332.0);
      Fraction fraction9 = new Fraction((-2323.0));
      assertEquals(1, fraction9.getDenominator());
      
      Fraction fraction10 = new Fraction(44.0);
      Fraction fraction11 = new Fraction(0.14679827500159015);
      assertEquals(0, fraction11.intValue());
      
      Fraction fraction12 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object2);
      Object object3 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      boolean boolean0 = fraction12.equals(object3);
      assertFalse(boolean0);
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.hashCode();
      long long0 = fraction10.longValue();
      assertEquals(44L, long0);
  }

  @Test(timeout = 4000)
  public void testRemovetestRemove_34()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = Fraction.TWO_FIFTHS;
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction9 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(100.0, fraction9.percentageValue(), 0.01);
      
      Fraction fraction10 = new Fraction((-2323.0));
      Fraction fraction11 = new Fraction(44.0);
      Fraction fraction12 = new Fraction(0.14679827500159015);
      Fraction fraction13 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object2);
      Object object3 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      boolean boolean0 = fraction13.equals(object3);
      assertTrue(fraction13.equals((Object)fraction5));
      assertFalse(fraction13.equals((Object)fraction12));
      assertFalse(boolean0);
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      int int0 = fraction8.getDenominator();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      FractionField fractionField0 = fraction0.getField();
      assertNotNull(fractionField0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      String string0 = fraction0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.ZERO.subtract(153719);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-153719), fraction1.getNumerator());
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction1 = fraction0.multiply(Integer.MIN_VALUE);
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.divide(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.intValue());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(100, 100);
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(37, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 37/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2147483643), (-2147483643));
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.ZERO;
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.TWO_THIRDS.abs();
      assertEquals(66.66666666666666, fraction1.percentageValue(), 0.01);
      
      String string0 = fraction0.toString();
      assertEquals("1 / 2", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = Fraction.MINUS_ONE;
      Fraction fraction2 = fraction0.ONE_HALF.subtract(fraction1);
      assertEquals(150.0, fraction2.percentageValue(), 0.01);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void testRemovetestRemove_49()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((double) Integer.MAX_VALUE);
      assertTrue(fraction6.equals((Object)fraction3));
      
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      assertEquals((-2.147483648E11), fraction8.percentageValue(), 0.01);
      
      Fraction fraction9 = new Fraction(332.0);
      Fraction fraction10 = new Fraction((-2323.0));
      Fraction fraction11 = new Fraction(44.0);
      Fraction fraction12 = new Fraction(0.14679827500159015);
      assertEquals(0.14678898F, fraction12.floatValue(), 0.01F);
      
      Fraction fraction13 = Fraction.ZERO;
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      boolean boolean0 = fraction13.equals(object2);
      assertFalse(boolean0);
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      double double0 = fraction7.percentageValue();
      assertEquals((-242343), fraction7.getNumerator());
      assertEquals((-2.42343E7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = new Fraction((double) Integer.MAX_VALUE);
      Fraction fraction2 = fraction0.ONE.divide(Integer.MAX_VALUE);
      Fraction fraction3 = new Fraction((-1.0));
      fraction3.equals(fraction0);
      Fraction fraction4 = fraction3.abs();
      assertFalse(fraction4.equals((Object)fraction1));
      assertEquals((byte)1, fraction4.byteValue());
      
      Fraction fraction5 = fraction3.FOUR_FIFTHS.add(fraction0);
      assertEquals((-1), fraction3.getNumerator());
      assertEquals(140.0, fraction5.percentageValue(), 0.01);
      
      fraction0.floatValue();
      Fraction fraction6 = fraction2.negate();
      assertFalse(fraction0.equals((Object)fraction5));
      assertFalse(fraction6.equals((Object)fraction2));
      assertEquals(Integer.MAX_VALUE, fraction6.getDenominator());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.FOUR_FIFTHS.divide(3086);
      assertEquals(2, fraction1.getNumerator());
      assertEquals(2.5923527E-4F, fraction1.floatValue(), 0.01F);
      
      String string0 = fraction0.toString();
      assertEquals("1 / 2", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.ONE_FIFTH;
      Fraction fraction2 = fraction0.add(fraction1);
      assertEquals(9, fraction2.getNumerator());
      assertEquals(45.0, fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = new Fraction((-242390.6463242062));
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals(639, fraction1.getDenominator());
      assertEquals((-4.847812926447574E7), fraction1.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = fraction0.TWO_FIFTHS.abs();
      Fraction fraction2 = Fraction.THREE_QUARTERS;
      Fraction fraction3 = fraction0.FOUR_FIFTHS.subtract(fraction2);
      assertEquals(0.05F, fraction3.floatValue(), 0.01F);
      
      Fraction fraction4 = new Fraction(75.0);
      Fraction fraction5 = new Fraction(500.0);
      Fraction fraction6 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction7 = new Fraction((-1.0));
      Fraction fraction8 = new Fraction(0.0);
      Fraction fraction9 = new Fraction((double) Integer.MAX_VALUE);
      Fraction fraction10 = new Fraction((-242343.0));
      Fraction fraction11 = Fraction.TWO_FIFTHS;
      Fraction fraction12 = fraction10.subtract(fraction11);
      assertSame(fraction11, fraction1);
      assertEquals((-242343L), fraction12.longValue());
      assertEquals(5, fraction12.getDenominator());
      
      Fraction fraction13 = new Fraction(Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals((byte)1, fraction13.byteValue());
      
      Fraction fraction14 = new Fraction(75.0);
      Fraction fraction15 = new Fraction(2147483636);
      Fraction fraction16 = new Fraction(1206.22);
      Fraction fraction17 = new Fraction(739.1058629198313, Integer.MAX_VALUE);
      fraction7.hashCode();
      Object object0 = new Object();
      boolean boolean0 = fraction17.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) 2147440030, 2147440030);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,440,030 to fraction (-2,147,440,029/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.008336750013465571, Integer.MIN_VALUE);
      assertEquals((short)0, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.negate();
      assertEquals((-50.0), fraction1.percentageValue(), 0.01);
      assertEquals((-1), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = new Fraction((double) Integer.MAX_VALUE);
      Fraction fraction2 = new Fraction((-1.0));
      boolean boolean0 = fraction2.equals(fraction0);
      assertFalse(fraction2.equals((Object)fraction1));
      assertTrue(boolean0);
      
      Fraction fraction3 = Fraction.getReducedFraction(Integer.MAX_VALUE, 1383);
      assertEquals(1.552771979031092E8, fraction3.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = new Fraction(167, 167);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      
      Fraction fraction1 = Fraction.FOUR_FIFTHS;
      Fraction fraction2 = Fraction.ONE;
      Fraction fraction3 = Fraction.ONE_HALF;
      boolean boolean0 = fraction3.equals(fraction0);
      assertFalse(boolean0);
      
      boolean boolean1 = fraction0.equals(fraction1);
      assertFalse(fraction0.equals((Object)fraction3));
      assertTrue(fraction0.equals((Object)fraction2));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = Fraction.THREE_FIFTHS;
      Fraction fraction2 = new Fraction(2, 2);
      Object object0 = new Object();
      boolean boolean0 = fraction2.equals(object0);
      assertEquals(100.0, fraction2.percentageValue(), 0.01);
      assertEquals(1, fraction2.getDenominator());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = new Fraction((-242370.3509916305));
      assertEquals(151, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2147483639));
      assertEquals((-2147483639), fraction0.getNumerator());
      assertEquals((-2.147483639E9), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
      
      Fraction fraction1 = Fraction.ONE_THIRD;
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(boolean0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
  }
}
