/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 05:34:03 GMT 2023
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class X7875_NewUnix_ESTest extends X7875_NewUnix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      x7875_NewUnix0.parseFromLocalFileData(byteArray0, 0, 0);
      assertEquals(12, byteArray0.length);
      
      X7875_NewUnix x7875_NewUnix1 = new X7875_NewUnix();
      x7875_NewUnix0.equals(x7875_NewUnix1);
      boolean boolean0 = x7875_NewUnix1.equals(x7875_NewUnix0);
      assertFalse(boolean0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      x7875_NewUnix1.hashCode();
      assertFalse(x7875_NewUnix1.equals((Object)x7875_NewUnix0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      X7875_NewUnix x7875_NewUnix1 = new X7875_NewUnix();
      x7875_NewUnix1.getCentralDirectoryLength();
      X7875_NewUnix x7875_NewUnix2 = (X7875_NewUnix)x7875_NewUnix1.clone();
      x7875_NewUnix0.equals(x7875_NewUnix1);
      x7875_NewUnix1.setUID(0L);
      ZipShort zipShort0 = x7875_NewUnix1.getLocalFileDataLength();
      x7875_NewUnix0.getCentralDirectoryLength();
      x7875_NewUnix0.getCentralDirectoryLength();
      byte[] byteArray0 = x7875_NewUnix1.getLocalFileDataData();
      x7875_NewUnix2.setUID((byte) (-70));
      x7875_NewUnix2.equals(zipShort0);
      x7875_NewUnix0.parseFromLocalFileData(byteArray0, (byte)1, 51966);
      X7875_NewUnix x7875_NewUnix3 = (X7875_NewUnix)x7875_NewUnix0.clone();
      Object object0 = new Object();
      x7875_NewUnix1.equals(object0);
      x7875_NewUnix2.clone();
      X7875_NewUnix x7875_NewUnix4 = (X7875_NewUnix)x7875_NewUnix2.clone();
      x7875_NewUnix2.equals(x7875_NewUnix4);
      X7875_NewUnix.trimLeadingZeroesForceMinLength(byteArray0);
      X7875_NewUnix x7875_NewUnix5 = new X7875_NewUnix();
      x7875_NewUnix5.getLocalFileDataData();
      boolean boolean0 = x7875_NewUnix2.equals(x7875_NewUnix3);
      assertFalse(boolean0);
      
      x7875_NewUnix1.getGID();
      x7875_NewUnix2.getLocalFileDataLength();
      assertTrue(x7875_NewUnix1.equals((Object)x7875_NewUnix0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      x7875_NewUnix0.setGID((-294L));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      x7875_NewUnix0.clone();
      X7875_NewUnix x7875_NewUnix1 = new X7875_NewUnix();
      String string0 = x7875_NewUnix1.toString();
      assertEquals("0x7875 Zip Extra Field: UID=1000 GID=1000", string0);
      
      Object object0 = x7875_NewUnix1.clone();
      boolean boolean0 = x7875_NewUnix1.equals(object0);
      assertTrue(boolean0);
      assertFalse(object0.equals((Object)x7875_NewUnix0));
      
      x7875_NewUnix0.parseFromLocalFileData(byteArray0, (byte)1, 9);
      assertArrayEquals(new byte[] {(byte)116, (byte)1, (byte)1, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = X7875_NewUnix.trimLeadingZeroesForceMinLength((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      x7875_NewUnix0.setGID(0L);
      X7875_NewUnix x7875_NewUnix1 = new X7875_NewUnix();
      X7875_NewUnix x7875_NewUnix2 = new X7875_NewUnix();
      boolean boolean0 = x7875_NewUnix0.equals(x7875_NewUnix2);
      assertFalse(boolean0);
      assertTrue(x7875_NewUnix2.equals((Object)x7875_NewUnix1));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      x7875_NewUnix0.parseFromLocalFileData(byteArray0, 0, (-3103));
      X7875_NewUnix x7875_NewUnix1 = new X7875_NewUnix();
      Object object0 = x7875_NewUnix1.clone();
      boolean boolean0 = x7875_NewUnix0.equals(x7875_NewUnix1);
      assertFalse(boolean0);
      assertTrue(x7875_NewUnix1.equals((Object)object0));
      
      x7875_NewUnix0.hashCode();
      assertFalse(x7875_NewUnix0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      X7875_NewUnix x7875_NewUnix1 = new X7875_NewUnix();
      X7875_NewUnix x7875_NewUnix2 = (X7875_NewUnix)x7875_NewUnix1.clone();
      x7875_NewUnix0.setUID(0L);
      boolean boolean0 = x7875_NewUnix0.equals(x7875_NewUnix1);
      assertFalse(boolean0);
      
      x7875_NewUnix1.setUID(0L);
      x7875_NewUnix1.getLocalFileDataLength();
      byte[] byteArray0 = x7875_NewUnix2.getLocalFileDataData();
      assertTrue(x7875_NewUnix1.equals((Object)x7875_NewUnix0));
      assertArrayEquals(new byte[] {(byte)1, (byte)2, (byte) (-24), (byte)3, (byte)2, (byte) (-24), (byte)3}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      X7875_NewUnix x7875_NewUnix1 = new X7875_NewUnix();
      x7875_NewUnix1.getCentralDirectoryLength();
      x7875_NewUnix1.clone();
      x7875_NewUnix0.equals(x7875_NewUnix1);
      assertTrue(x7875_NewUnix1.equals((Object)x7875_NewUnix0));
      
      x7875_NewUnix1.setUID(0L);
      x7875_NewUnix1.getLocalFileDataLength();
      x7875_NewUnix0.getCentralDirectoryLength();
      x7875_NewUnix1.getCentralDirectoryData();
      x7875_NewUnix0.hashCode();
      x7875_NewUnix0.getCentralDirectoryLength();
      x7875_NewUnix0.getHeaderId();
      x7875_NewUnix1.getCentralDirectoryLength();
      x7875_NewUnix0.getGID();
      assertFalse(x7875_NewUnix0.equals((Object)x7875_NewUnix1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      Object object0 = x7875_NewUnix0.clone();
      assertNotSame(object0, x7875_NewUnix0);
      
      x7875_NewUnix0.equals(object0);
      x7875_NewUnix0.getCentralDirectoryLength();
      x7875_NewUnix0.hashCode();
      x7875_NewUnix0.getLocalFileDataData();
      byte[] byteArray0 = x7875_NewUnix0.getCentralDirectoryData();
      int int0 = (-330);
      x7875_NewUnix0.setGID((-330));
      Object object1 = new Object();
      x7875_NewUnix0.equals(object1);
      x7875_NewUnix0.getCentralDirectoryLength();
      x7875_NewUnix0.parseFromCentralDirectoryData(byteArray0, (-330), 4);
      x7875_NewUnix0.getUID();
      x7875_NewUnix0.toString();
      // Undeclared exception!
      try { 
        x7875_NewUnix0.parseFromLocalFileData(byteArray0, 4, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.compress.archivers.zip.X7875_NewUnix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = X7875_NewUnix.trimLeadingZeroesForceMinLength(byteArray0);
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      Object object0 = new Object();
      x7875_NewUnix0.equals(object0);
      x7875_NewUnix0.setGID((-1L));
      x7875_NewUnix0.setUID(320L);
      x7875_NewUnix0.getCentralDirectoryLength();
      x7875_NewUnix0.clone();
      x7875_NewUnix0.getUID();
      Object object1 = new Object();
      x7875_NewUnix0.getLocalFileDataLength();
      x7875_NewUnix0.equals(object1);
      x7875_NewUnix0.getGID();
      byte[] byteArray0 = x7875_NewUnix0.getLocalFileDataData();
      x7875_NewUnix0.setUID(1480L);
      byte[] byteArray1 = new byte[0];
      byte[] byteArray2 = X7875_NewUnix.trimLeadingZeroesForceMinLength(byteArray1);
      x7875_NewUnix0.equals((Object) null);
      x7875_NewUnix0.parseFromCentralDirectoryData(byteArray0, 440, 440);
      x7875_NewUnix0.setGID(440);
      // Undeclared exception!
      try { 
        x7875_NewUnix0.parseFromLocalFileData(byteArray2, 440, 440);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 440
         //
         verifyException("org.apache.commons.compress.archivers.zip.X7875_NewUnix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      boolean boolean0 = x7875_NewUnix0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      X7875_NewUnix x7875_NewUnix1 = new X7875_NewUnix();
      x7875_NewUnix0.hashCode();
      x7875_NewUnix0.equals(x7875_NewUnix1);
      Object object0 = x7875_NewUnix0.clone();
      x7875_NewUnix1.equals(object0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte)3;
      // Undeclared exception!
      try { 
        x7875_NewUnix1.parseFromLocalFileData(byteArray0, (byte) (-106), (-1170));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -106
         //
         verifyException("org.apache.commons.compress.archivers.zip.X7875_NewUnix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      boolean boolean0 = x7875_NewUnix0.equals(x7875_NewUnix0);
      assertTrue(boolean0);
      
      ZipShort zipShort0 = x7875_NewUnix0.getCentralDirectoryLength();
      assertEquals(7, zipShort0.getValue());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      long long0 = x7875_NewUnix0.getUID();
      assertEquals(1000L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      long long0 = x7875_NewUnix0.getGID();
      assertEquals(1000L, long0);
      
      x7875_NewUnix0.setGID(1L);
      x7875_NewUnix0.getUID();
      x7875_NewUnix0.getGID();
      x7875_NewUnix0.getGID();
      x7875_NewUnix0.setGID(891L);
      x7875_NewUnix0.clone();
      byte[] byteArray0 = x7875_NewUnix0.getCentralDirectoryData();
      x7875_NewUnix0.clone();
      x7875_NewUnix0.toString();
      byte[] byteArray1 = X7875_NewUnix.trimLeadingZeroesForceMinLength(byteArray0);
      x7875_NewUnix0.hashCode();
      x7875_NewUnix0.getLocalFileDataData();
      x7875_NewUnix0.getUID();
      x7875_NewUnix0.toString();
      x7875_NewUnix0.getUID();
      int int0 = 9557;
      // Undeclared exception!
      try { 
        x7875_NewUnix0.parseFromLocalFileData(byteArray1, (-4158), 9557);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4158
         //
         verifyException("org.apache.commons.compress.archivers.zip.X7875_NewUnix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      x7875_NewUnix0.hashCode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      byte[] byteArray0 = x7875_NewUnix0.getCentralDirectoryData();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = X7875_NewUnix.trimLeadingZeroesForceMinLength(byteArray0);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      x7875_NewUnix0.setGID((-294L));
      x7875_NewUnix0.hashCode();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      x7875_NewUnix0.setUID((-606L));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      X7875_NewUnix x7875_NewUnix1 = new X7875_NewUnix();
      x7875_NewUnix1.getCentralDirectoryLength();
      x7875_NewUnix1.clone();
      x7875_NewUnix0.equals(x7875_NewUnix1);
      assertTrue(x7875_NewUnix1.equals((Object)x7875_NewUnix0));
      
      x7875_NewUnix1.setUID(0L);
      x7875_NewUnix1.parseFromCentralDirectoryData((byte[]) null, 1325, 1657);
      boolean boolean0 = x7875_NewUnix0.equals(x7875_NewUnix1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      ZipShort zipShort0 = x7875_NewUnix0.getCentralDirectoryLength();
      assertEquals(7, zipShort0.getValue());
      
      String string0 = x7875_NewUnix0.toString();
      assertEquals("0x7875 Zip Extra Field: UID=1000 GID=1000", string0);
      
      x7875_NewUnix0.getGID();
      x7875_NewUnix0.getHeaderId();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)1;
      byte[] byteArray1 = X7875_NewUnix.trimLeadingZeroesForceMinLength(byteArray0);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-116), (byte)6, (byte)64, (byte)33, (byte)117, (byte)1, (byte)1}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      X7875_NewUnix x7875_NewUnix1 = new X7875_NewUnix();
      ZipShort zipShort0 = x7875_NewUnix0.getLocalFileDataLength();
      assertEquals(7, zipShort0.getValue());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      x7875_NewUnix0.getHeaderId();
      byte[] byteArray0 = new byte[1];
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      byte[] byteArray0 = x7875_NewUnix0.getLocalFileDataData();
      assertArrayEquals(new byte[] {(byte)1, (byte)2, (byte) (-24), (byte)3, (byte)2, (byte) (-24), (byte)3}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      String string0 = x7875_NewUnix0.toString();
      assertEquals("0x7875 Zip Extra Field: UID=1000 GID=1000", string0);
  }
}
