/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 01:30:21 GMT 2023
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Properties;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultParser_ESTest extends DefaultParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      options0.addOption("a", "a", true, "a");
      DefaultParser defaultParser1 = new DefaultParser();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "a";
      stringArray0[1] = "a";
      stringArray0[2] = "-ab";
      defaultParser1.parse(options0, stringArray0);
      defaultParser1.handleConcatenatedOptions("Faa$");
      assertFalse(defaultParser1.equals((Object)defaultParser0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-M=";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -M=
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = new Options();
      Options options2 = options0.addRequiredOption("k", "-Dparam4=value4", true, "-,");
      options2.addRequiredOption("k", "--=", true, "oX");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "k";
      stringArray0[1] = "k";
      stringArray0[2] = "--=";
      stringArray0[3] = "k";
      stringArray0[4] = "k";
      stringArray0[5] = "oX";
      stringArray0[6] = "k";
      stringArray0[7] = "-Dparam4=value4";
      stringArray0[8] = "-Dparam4=value4";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Ambiguous option: '--'  (could be: '-Dparam4=value4', '--=')
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      boolean boolean0 = defaultParser0.skipParsing;
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("a", "a", false, "a");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-a";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.builder("");
      Option.builder("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("", "");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      stringArray0[1] = "VM";
      stringArray0[2] = "VM";
      defaultParser0.handleConcatenatedOptions("");
      Properties properties0 = new Properties();
      defaultParser0.parse(options0, stringArray0, properties0, true);
      defaultParser0.handleConcatenatedOptions("--=");
      defaultParser0.handleConcatenatedOptions("-org.apache.commonscli.DefaultParser");
      CommandLine commandLine0 = defaultParser0.parse(options1, stringArray0, properties0);
      DefaultParser defaultParser1 = new DefaultParser();
      optionGroup0.addOption(option0);
      defaultParser1.parse(options1, stringArray0, true);
      DefaultParser defaultParser2 = new DefaultParser();
      CommandLine commandLine1 = defaultParser2.parse(options1, stringArray0);
      assertFalse(commandLine1.equals((Object)commandLine0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      Options options1 = options0.addOption("Y", "Y", true, "Y");
      options1.addOption("Y", "Y");
      String[] stringArray0 = new String[1];
      String string0 = "--=";
      stringArray0[0] = "--=";
      Properties properties0 = new Properties();
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: --=
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      options0.addOption("Y", "Y", true, "Y");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--=";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      option_Builder0.hasArg();
      Option option0 = new Option("t1_paTh", "t1", true, "t1");
      FileSystemHandling.shouldAllThrowIOExceptions();
      option0.clone();
      Option.builder();
      options0.addOption(option0);
      Class<Object> class0 = Object.class;
      option0.setType(class0);
      option_Builder0.hasArg(true);
      option0.setDescription(".j:9%ojH~o5V1L");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      DefaultParser defaultParser1 = new DefaultParser();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-t1";
      stringArray0[1] = "-";
      stringArray0[2] = "t1";
      stringArray0[3] = "-t1";
      stringArray0[4] = "80pXMP18?";
      defaultParser1.parse(options1, stringArray0);
      // Undeclared exception!
      try { 
        defaultParser0.handleConcatenatedOptions("/]D!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("", "", true, "");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      optionGroup1.setRequired(true);
      options0.getOptions();
      stringArray0[1] = "";
      stringArray0[2] = "";
      defaultParser0.handleConcatenatedOptions("");
      Properties properties0 = new Properties();
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, properties0, true);
      defaultParser0.handleConcatenatedOptions("--=");
      CommandLine commandLine1 = defaultParser0.parse(options0, stringArray0);
      assertFalse(commandLine1.equals((Object)commandLine0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[52];
      stringArray0[0] = "---=";
      DefaultParser defaultParser1 = new DefaultParser();
      Properties properties0 = new Properties();
      try { 
        defaultParser0.parse(options0, stringArray0, properties0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: ---=
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-))hPJ=)s0C@4!LR";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -))hPJ=)s0C@4!LR
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      options0.toString();
      options0.addOption("a", "a");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-ab";
      Properties properties0 = new Properties();
      defaultParser0.parse(options0, stringArray0, properties0, true);
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -ab
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Properties properties0 = new Properties();
      properties0.put("j{", "j{");
      try { 
        defaultParser0.parse(options0, (String[]) null, properties0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Default option wasn't defined
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("");
      option_Builder0.hasArg();
      Option option0 = option_Builder0.build();
      options0.addOption(option0);
      defaultParser0.parse(options0, (String[]) null);
      defaultParser0.handleConcatenatedOptions("--");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      options0.addOption("a", "a", true, "a");
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("a", "property 4");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-ab";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -ab
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      option_Builder0.argName("-1_pth");
      Option.Builder option_Builder1 = Option.builder("a");
      option_Builder0.hasArg(true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "t1";
      stringArray0[1] = "t1";
      stringArray0[2] = "a";
      stringArray0[3] = "t1_path";
      stringArray0[4] = "QD";
      stringArray0[5] = "t1";
      defaultParser0.parse(options0, stringArray0, true);
      option_Builder1.hasArg(false);
      Option.builder("a");
      defaultParser0.handleConcatenatedOptions("-b");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      Option option0 = new Option("t1_path", "t1", true, "t1");
      Option option1 = new Option("t1_path", "t1", true, "t1_path");
      options0.addOption(option0);
      option_Builder0.hasArg(true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-t1";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--last";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: --last
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      Properties properties0 = new Properties();
      defaultParser0.parse(options0, (String[]) null, properties0, true);
      defaultParser0.handleConcatenatedOptions("J$QIK.`::p");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("", "", true, "");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "--last";
      defaultParser0.parse(options0, stringArray0, true);
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: --last
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Options options1 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-,";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -,
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      CommandLine commandLine0 = defaultParser0.parse(options0, (String[]) null);
      assertNotNull(commandLine0);
      
      defaultParser0.handleConcatenatedOptions("Confirm -b is set");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      option_Builder0.hasArg();
      Option.Builder option_Builder1 = option_Builder0.numberOfArgs(1);
      Option.Builder option_Builder2 = option_Builder0.optionalArg(true);
      Option.Builder option_Builder3 = option_Builder0.argName("t1_path");
      Option.Builder option_Builder4 = Option.builder("a");
      Option.Builder option_Builder5 = option_Builder4.hasArg(false);
      option_Builder4.build();
      option_Builder2.build();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "a";
      stringArray0[1] = "t1";
      defaultParser0.parse(options0, stringArray0, true);
      option_Builder1.hasArg(true);
      option_Builder5.build();
      Option.Builder option_Builder6 = Option.builder("t1");
      option_Builder6.hasArg(true);
      option_Builder3.build();
      defaultParser0.handleConcatenatedOptions("t1_path");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("");
      option_Builder0.hasArg();
      Option.builder();
      Option option0 = option_Builder0.build();
      Option.builder("a");
      Options options1 = options0.addOption(option0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "--";
      stringArray0[1] = "";
      defaultParser0.parse(options1, stringArray0, false);
      Option.Builder option_Builder1 = Option.builder("");
      option_Builder1.build();
      Option.builder("");
      Option option1 = option_Builder0.build();
      Options options2 = new Options();
      options2.addOption(option1);
      defaultParser0.parse(options2, stringArray0);
      defaultParser0.handleConcatenatedOptions("--");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      defaultParser0.handleConcatenatedOptions("[");
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Properties properties0 = new Properties();
      CommandLine commandLine0 = defaultParser0.parse(options0, (String[]) null, properties0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      CommandLine commandLine0 = defaultParser0.parse(options0, (String[]) null, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void shouldParseShortOptionWithoutValueshouldParseConcatenatedShortOptions_30()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      option_Builder0.hasArg();
      option_Builder0.numberOfArgs(1);
      option_Builder0.optionalArg(true);
      option_Builder0.argName("t1_path");
      Option option0 = option_Builder0.build();
      Options options1 = options0.addOption(option0);
      Option.Builder option_Builder1 = Option.builder("a");
      option_Builder1.hasArg(false);
      Option option1 = option_Builder1.build();
      Options options2 = options1.addOption(option1);
      Option.Builder option_Builder2 = Option.builder("b");
      option_Builder2.hasArg(false);
      Option option2 = option_Builder2.build();
      Options options3 = options2.addOption(option2);
      Option.Builder option_Builder3 = Option.builder("last");
      options0.hasOption("Default option wasn't defined");
      option_Builder3.hasArg(false);
      Option option3 = option_Builder3.build();
      Options options4 = options3.addOption(option3);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-t1";
      stringArray0[1] = "-last";
      defaultParser0.parse(options4, stringArray0);
      defaultParser0.handleConcatenatedOptions("Default option wasn't defined");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      // Undeclared exception!
      try { 
        defaultParser0.handleConcatenatedOptions("-t");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption((String) null, (String) null, true, (String) null);
      try { 
        defaultParser0.parse(options1, (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing required option: null
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ",{*O";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("");
      Option.builder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("", "", true, "");
      Option.builder("");
      option_Builder0.build();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      options0.addOption("", "", true, "");
      stringArray0[1] = "M";
      defaultParser0.handleConcatenatedOptions("");
      Properties properties0 = new Properties();
      defaultParser0.parse(options0, stringArray0, properties0, true);
      defaultParser0.handleConcatenatedOptions("--=");
      defaultParser0.handleConcatenatedOptions("--=");
      DefaultParser defaultParser1 = new DefaultParser();
      // Undeclared exception!
      try { 
        defaultParser1.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option option0 = new Option("t1", "a[", true, "a[");
      options0.addOption(option0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-t1";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option: t1
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option option0 = new Option("t1", "t1", true, "t1");
      Options options1 = options0.addOption(option0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-t1";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      options0.addRequiredOption("a", "a", true, "a");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-a";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Options options1 = options0.addOption("a", "a");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-ab";
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -ab
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-last";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -last
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option option0 = new Option("t1", "a[", true, "a[");
      options0.addOption(option0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-t1";
      stringArray0[1] = "t1";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options0 = new Options();
      options0.addRequiredOption("a", "a", true, "a");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-ab";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option option0 = new Option("t1", "t1", true, "t1");
      Options options1 = options0.addOption(option0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-t1";
      stringArray0[1] = "-t1";
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option: t1
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[0];
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      option_Builder0.hasArg();
      Option option0 = option_Builder0.build();
      options0.addOption(option0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-t1";
      stringArray0[1] = "-t1";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option: t1
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }
}
