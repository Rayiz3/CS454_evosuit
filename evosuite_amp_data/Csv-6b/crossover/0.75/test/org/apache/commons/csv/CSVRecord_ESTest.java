/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 11:51:56 GMT 2023
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVRecord;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVRecord_ESTest extends CSVRecord_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[7];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(2874);
      hashMap0.put("org.h2.value.ValueByte", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "org.h2.value.ValueByte", 0L);
      boolean boolean0 = cSVRecord0.isSet("org.h2.value.ValueByte");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "<org.apache.commons.csv.CSVRecord>\n  <recordNumber>0</recordNumber>\n  <values>\n    <tring>A</string>\n    <stringB</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[1] = "<org.apache.commons.csv.CSVRecord>\n  <recordNumber>0</recordNumber>\n  <values>\n    <tring>A</string>\n    <stringB</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[3] = "<org.apache.commons.csv.CSVRecord>\n  <recordNumber>0</recordNumber>\n  <values>\n    <tring>A</string>\n    <stringB</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(2552);
      hashMap0.put("<org.apache.commons.csv.CSVRecord>\n  <recordNumber>0</recordNumber>\n  <values>\n    <tring>A</string>\n    <stringB</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>", integer0);
      Integer integer1 = new Integer((-1510));
      Integer integer2 = hashMap0.put("<org.apache.commons.csv.CSVRecord>\n  <recordNumber>0</recordNumber>\n  <values>\n    <tring>A</string>\n    <stringB</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>", integer1);
      Integer integer3 = new Integer(2552);
      hashMap0.put("<org.apache.commons.csv.CSVRecord>\n  <recordNumber>0</recordNumber>\n  <values>\n    <tring>A</string>\n    <stringB</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>", integer3);
      Integer integer4 = new Integer((-4359));
      hashMap0.put("b)40\"j6z$", integer2);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 1L);
      boolean boolean0 = cSVRecord0.isSet("<org.apache.commons.csv.CSVRecord>\n  <recordNumber>0</recordNumber>\n  <values>\n    <tring>A</string>\n    <stringB</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>");
      assertFalse(boolean0);
      assertEquals(1L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[10];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "TRIGGER_CATALOG", 1007L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertTrue(boolean0);
      assertEquals(1007L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[1];
      String string0 = "Ibamf^uI=$?1~_[sN7";
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "Ibamf^uI=$?1~_[sN7", 255L);
      // Undeclared exception!
      try { 
        cSVRecord0.get("Ibamf^uI=$?1~_[sN7");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No header mapping was specified, the record values can't be accessed by name
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[3];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "7YcN5w.", (-47L));
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals((-47L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "NUMBERS", 0L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[4];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "No header mapping was specified, the record values can't be accessed by name", (-1438L));
      boolean boolean0 = cSVRecord0.isSet("No header mapping was specified, the record values can't be accessed by name");
      assertFalse(boolean0);
      
      cSVRecord0.values();
      assertEquals((-1438L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[7];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("*-K3_O5", (Integer) null);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "*-K3_O5", 0L);
      // Undeclared exception!
      try { 
        cSVRecord0.isSet("*-K3_O5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[7];
      Integer integer0 = new Integer((-1840700268));
      hashMap0.put((String) null, integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[4], 951L);
      // Undeclared exception!
      try { 
        cSVRecord0.get((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index for header 'null' is -1840700268 but CSVRecord only has 7 values!
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-2045222520));
      hashMap0.put("nZ1$u&'<i{j%cU_4", integer0);
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "nZ1$u&'<i{j%cU_4", 1L);
      assertEquals("[]", cSVRecord0.toString());
      
      boolean boolean0 = cSVRecord0.isSet("nZ1$u&'<i{j%cU_4");
      assertTrue(boolean0);
      assertEquals(1L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[4];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("WISy33u~m}34l)nw$", (Integer) null);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "WISy33u~m}34l)nw$", (-1399L));
      boolean boolean0 = cSVRecord0.isMapped("WISy33u~m}34l)nw$");
      assertEquals((-1399L), cSVRecord0.getRecordNumber());
      assertTrue(boolean0);
      assertEquals(4, cSVRecord0.size());
  }

  @Test
  public void test11() {}
// Defects4J: flaky method
//   @Test(timeout = 4000)
//   public void test11()  throws Throwable  {
//       Object object0 = new Object();
//       String[] stringArray0 = new String[5];
//       stringArray0[0] = "<org.apache.commons.csv.CSVRecord>\n  <recordNumber>0</recordNumber>\n  <values>\n    <tring>A</string>\n    <stringB</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
//       stringArray0[1] = "<org.apache.commons.csv.CSVRecord>\n  <recordNumber>0</recordNumber>\n  <values>\n    <tring>A</string>\n    <stringB</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
//       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
//       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "<org.apache.commons.csv.CSVRecord>\n  <recordNumber>0</recordNumber>\n  <values>\n    <tring>A</string>\n    <stringB</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>", 0L);
//       Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
//       cSVRecord0.forEach(consumer0);
//       CSVRecord cSVRecord1 = new CSVRecord(stringArray0, hashMap0, "<org.apache.commons.csv.CSVRecord>\n  <recordNumber>0</recordNumber>\n  <values>\n    <tring>A</string>\n    <stringB</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>", 32767L);
//       cSVRecord0.isConsistent();
//       cSVRecord0.isMapped("A");
//       cSVRecord1.isConsistent();
//       cSVRecord1.getComment();
//       // Undeclared exception!
//       try { 
//         cSVRecord0.get(180);
//         fail("Expecting exception: ArrayIndexOutOfBoundsException");
//       
//       } catch(ArrayIndexOutOfBoundsException e) {
//          //
//          // 180
//          //
//          verifyException("org.apache.commons.csv.CSVRecord", e);
//       }
//   }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[2];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "No header mapping was specified, the record values can't be accessed by name", (-1438L));
      cSVRecord0.size();
      String string0 = cSVRecord0.toString();
      assertEquals((-1438L), cSVRecord0.getRecordNumber());
      assertEquals("[null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "On5M;Q{N:Gd _:-*(EE", (-677L));
      assertEquals((-677L), cSVRecord0.getRecordNumber());
      assertEquals("[]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[3];
      String string0 = "aF|m0Pgw2.1Z";
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "aF|m0Pgw2.1Z", 0L);
      hashMap0.put("aF|m0Pgw2.1Z", (Integer) null);
      // Undeclared exception!
      try { 
        cSVRecord0.toMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[4];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "bgJhl=hT!|0y", 1348L);
      boolean boolean0 = cSVRecord0.isMapped("bgJhl=hT!|0y");
      assertFalse(boolean0);
      assertEquals(1348L, cSVRecord0.getRecordNumber());
      assertEquals(4, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[15];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[4], 981L);
      cSVRecord0.toMap();
      cSVRecord0.isMapped(stringArray0[1]);
      assertEquals(981L, cSVRecord0.getRecordNumber());
      assertFalse(cSVRecord0.isConsistent());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[4];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "WISy33u~m}34l$nw@", (-1399L));
      // Undeclared exception!
      try { 
        cSVRecord0.get("WISy33u~m}34l$nw@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mapping for WISy33u~m}34l$nw@ not found, expected one of []
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test
  public void test18() {}
// Defects4J: flaky method
//   @Test(timeout = 4000)
//   public void test18()  throws Throwable  {
//       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
//       String[] stringArray0 = new String[12];
//       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[4], 981L);
//       cSVRecord0.spliterator();
//       cSVRecord0.isMapped(stringArray0[1]);
//       assertEquals(981L, cSVRecord0.getRecordNumber());
//       assertEquals("[null, null, null, null, null, null, null, null, null, null, null, null]", cSVRecord0.toString());
//   }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[4];
      stringArray0[2] = "<org.apache.commons.csv.CSVRecord>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[3] = "<org.apache.commons.csv.CSVRecord>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, (String) null, 15L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertFalse(boolean0);
      
      cSVRecord0.isMapped("<org.apache.commons.csv.CSVRecord>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>");
      assertEquals(15L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[15];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[4], 981L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertFalse(boolean0);
      assertEquals(981L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[4];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[1], 0L);
      assertFalse(cSVRecord0.isConsistent());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[6];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[1], 959L);
      boolean boolean0 = cSVRecord0.isSet(stringArray0[1]);
      assertEquals(959L, cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
      assertEquals("[null, null, null, null, null, null]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[9];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[4], 981L);
      boolean boolean0 = cSVRecord0.isMapped(stringArray0[1]);
      assertFalse(boolean0);
      assertEquals(981L, cSVRecord0.getRecordNumber());
      assertEquals(9, cSVRecord0.size());
  }
}
