/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 17 00:49:41 GMT 2023
 */

package org.apache.commons.math.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.8679031654755818E-9, 1.8679031654755818E-9, 3385);
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      BigFraction.getReducedFraction(3385, 3385);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      assertEquals((byte)0, bigFraction0.byteValue());
      
      // Undeclared exception!
      try { 
        bigFraction0.THREE_QUARTERS.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 2147483646;
      BigFraction bigFraction0 = new BigFraction(2147483646, 2147483646, 2147483646);
      // Undeclared exception!
      try { 
        bigFraction0.FOUR_FIFTHS.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3863));
      BigFraction bigFraction1 = new BigFraction((-1.0));
      bigFraction1.bigDecimalValue();
      BigFraction bigFraction2 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction3 = bigFraction0.add(bigFraction2);
      float float0 = bigFraction2.floatValue();
      assertEquals(0.4F, float0, 0.01F);
      
      bigFraction2.hashCode();
      bigFraction3.pow((-1703.81734400578));
      String string0 = bigFraction3.toString();
      assertEquals("-19313 / 5", string0);
      
      BigFraction bigFraction4 = bigFraction1.pow(1263);
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertTrue(bigFraction4.equals((Object)bigFraction1));
      assertEquals((short) (-1), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(1513, (-1837.7774255564732), 1513);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1,513 to fraction (9,223,372,036,854,774,296/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-3493.5540895), (-1.0), 2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -3,493.554 to fraction after 2 iterations
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4395513236313604102L, 4395513236313604096L);
      BigFraction bigFraction1 = bigFraction0.ZERO.abs();
      BigFraction bigFraction2 = bigFraction1.subtract(0);
      bigFraction0.ONE.multiply(bigFraction2);
      // Undeclared exception!
      try { 
        bigFraction1.divide(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      // Undeclared exception!
      try { 
        bigFraction0.TWO.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(3.0465278560980536E188, 3.0465278560980536E188, 1488);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 304,652,785,609,805,360,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.0));
      assertEquals((short) (-1), bigFraction0.shortValue());
      
      bigFraction0.ZERO.pow(100L);
      assertEquals((short) (-1), bigFraction0.shortValue());
      
      BigFraction bigFraction1 = BigFraction.ONE;
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1341.784560961, 1341.784560961, (byte) (-24));
      BigFraction bigFraction1 = new BigFraction((long) (byte) (-24), (long) (byte) (-24));
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      BigFraction bigFraction3 = new BigFraction((int) (byte) (-24));
      bigFraction2.ONE_FIFTH.add(bigFraction3);
      Random.setNextRandom((byte) (-24));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1465.0);
      assertEquals((short)1465, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.divide(bigFraction0);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      BigFraction bigFraction3 = bigFraction1.reciprocal();
      BigFraction bigFraction4 = bigFraction3.ZERO.reduce();
      bigFraction0.hashCode();
      BigFraction bigFraction5 = bigFraction4.multiply(bigFraction2);
      assertTrue(bigFraction3.equals((Object)bigFraction1));
      assertNotSame(bigFraction2, bigFraction0);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction2.shortValue());
      assertFalse(bigFraction5.equals((Object)bigFraction2));
      assertTrue(bigFraction5.equals((Object)bigFraction4));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4395513236313604096L, (-302L));
      BigFraction bigFraction1 = bigFraction0.ZERO.abs();
      bigFraction0.add((-1364));
      BigFraction bigFraction2 = bigFraction0.subtract((-15));
      bigFraction1.divide(2147483341);
      bigFraction2.getDenominatorAsInt();
      bigFraction1.getNumeratorAsLong();
      bigFraction0.abs();
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger(2147483341, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      int int0 = 21;
      BigFraction bigFraction1 = bigFraction0.pow(21);
      bigFraction1.bigDecimalValue();
      bigFraction1.equals(bigFraction0);
      Object object0 = new Object();
      bigFraction0.equals(object0);
      bigFraction0.toString();
      bigFraction0.hashCode();
      long long0 = 90L;
      BigFraction bigFraction2 = bigFraction1.multiply(90L);
      bigFraction0.intValue();
      bigFraction1.compareTo(bigFraction0);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction0.add(bigInteger0);
      bigFraction3.equals((Object) null);
      bigFraction1.compareTo(bigFraction2);
      bigFraction2.percentageValue();
      BigFraction bigFraction4 = BigFraction.TWO_FIFTHS;
      bigFraction4.add(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction2.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.ONE.add(bigFraction1);
      float float0 = bigFraction2.floatValue();
      assertEquals(1.4F, float0, 0.01F);
      
      bigFraction0.hashCode();
      double double0 = bigFraction1.pow((-1.0));
      assertEquals(2.5, double0, 0.01);
      assertFalse(bigFraction1.equals((Object)bigFraction2));
      
      String string0 = bigFraction0.toString();
      assertEquals("0", string0);
      
      BigFraction bigFraction3 = bigFraction0.pow(1277);
      assertTrue(bigFraction3.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.subtract(bigFraction0);
      assertEquals((short)1, bigFraction1.shortValue());
      
      BigFraction bigFraction2 = bigFraction0.pow((long) (-3113));
      bigFraction0.getDenominatorAsLong();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction4 = bigFraction3.subtract(bigInteger0);
      BigFraction bigFraction5 = bigFraction0.pow(bigInteger0);
      bigFraction5.floatValue();
      assertTrue(bigFraction5.equals((Object)bigFraction2));
      
      float float0 = bigFraction4.floatValue();
      assertEquals((-0.4F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.MINUS_ONE.doubleValue();
      BigFraction bigFraction1 = bigFraction0.ZERO.multiply(1487);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)97;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction1.ONE_HALF.divide(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.ONE_QUARTER.add(bigFraction0);
      BigFraction bigFraction3 = BigFraction.THREE_FIFTHS;
      bigFraction3.subtract(4342);
      bigFraction2.hashCode();
      BigFraction bigFraction4 = BigFraction.getReducedFraction(0, (byte) (-1));
      // Undeclared exception!
      try { 
        bigFraction4.pow((int) (byte) (-48));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 24);
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1553.9142367163), 1164);
      BigFraction bigFraction1 = bigFraction0.multiply((-2045L));
      assertEquals((short)32026, bigFraction1.shortValue());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction0.divide(bigInteger0);
      assertTrue(bigFraction2.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      int int0 = (-663);
      bigFraction0.THREE_FIFTHS.toString();
      BigFraction.getReducedFraction(3190, (-663));
      bigFraction0.TWO_FIFTHS.floatValue();
      bigFraction0.doubleValue();
      bigFraction0.longValue();
      int int1 = 196;
      BigFraction bigFraction1 = BigFraction.getReducedFraction(196, 98);
      bigFraction1.ONE_THIRD.pow(196);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-116);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      // Undeclared exception!
      try { 
        bigFraction1.ZERO.pow(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 24);
      BigFraction bigFraction1 = bigFraction0.subtract(bigFraction0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertEquals((short)24, bigFraction2.shortValue());
      assertSame(bigFraction2, bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      
      BigFraction bigFraction3 = BigFraction.THREE_QUARTERS;
      assertFalse(bigFraction3.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = new BigFraction((-1788.7), 0.0, 1496);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = new BigFraction(bigInteger0);
      bigFraction1.ONE_HALF.equals(bigFraction2);
      bigFraction1.subtract(bigFraction0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction3 = BigFraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = new BigFraction(0.25995755195617676, 402.13, 59);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction3 = BigFraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        bigFraction2.divide(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4615.56);
      BigFraction bigFraction1 = BigFraction.ZERO;
      bigFraction0.ZERO.equals(bigFraction1);
      Random.setNextRandom((-1974));
      Random.setNextRandom((-1974));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = new BigFraction((-585051L));
      BigFraction bigFraction2 = BigFraction.MINUS_ONE;
      // Undeclared exception!
      try { 
        bigFraction2.ONE.divide(bigFraction0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1322);
      bigFraction0.TWO_FIFTHS.abs();
      bigFraction0.toString();
      bigFraction0.getDenominatorAsInt();
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.getField();
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.pow(355);
      BigFraction bigFraction2 = bigFraction1.TWO_THIRDS.add((long) 355);
      bigFraction0.ONE_QUARTER.longValue();
      bigInteger0.toByteArray();
      bigFraction2.FOUR_FIFTHS.divide(bigFraction0);
      BigFraction bigFraction3 = bigFraction0.pow(0);
      Object object0 = new Object();
      bigFraction3.TWO_FIFTHS.equals(object0);
      bigFraction1.ONE.longValue();
      BigFraction bigFraction4 = bigFraction3.pow(bigInteger0);
      float float0 = bigFraction4.TWO_QUARTERS.floatValue();
      assertEquals(0.5F, float0, 0.01F);
      
      BigFraction bigFraction5 = bigFraction4.ONE_THIRD.divide(355);
      double double0 = bigFraction5.THREE_FIFTHS.percentageValue();
      assertEquals(60.0, double0, 0.01);
      
      bigFraction4.getDenominatorAsInt();
      BigFraction bigFraction6 = bigFraction2.abs();
      bigFraction6.MINUS_ONE.percentageValue();
      BigFraction bigFraction7 = bigFraction6.add(bigFraction3);
      String string0 = bigFraction7.ONE_FIFTH.toString();
      assertEquals("1 / 5", string0);
      
      BigFraction bigFraction8 = bigFraction7.TWO_THIRDS.divide(bigFraction3);
      assertEquals((byte)100, bigFraction7.byteValue());
      
      BigFraction bigFraction9 = bigFraction3.TWO_THIRDS.multiply(1);
      bigFraction9.TWO.hashCode();
      assertTrue(bigFraction9.equals((Object)bigFraction8));
      
      BigFraction bigFraction10 = bigFraction3.negate();
      bigFraction4.FOUR_FIFTHS.multiply((long) 0);
      bigFraction10.THREE_FIFTHS.hashCode();
      bigFraction10.TWO_FIFTHS.add(bigInteger0);
      bigFraction3.ONE_THIRD.intValue();
      BigFraction bigFraction11 = BigFraction.getReducedFraction(21, 21);
      BigFraction bigFraction12 = bigFraction10.subtract((-2147483648L));
      bigFraction12.ZERO.hashCode();
      bigFraction10.pow((long) 355);
      assertTrue(bigFraction3.equals((Object)bigFraction11));
      
      bigFraction0.bigDecimalValue(1);
      BigFraction bigFraction13 = bigFraction6.divide(355);
      assertFalse(bigFraction13.equals((Object)bigFraction2));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((long) 1478);
      bigFraction0.FOUR_FIFTHS.negate();
      Random.setNextRandom(1478);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.ONE_FIFTH.subtract(bigFraction0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.multiply((-3303));
      bigFraction1.ONE_FIFTH.longValue();
      BigFraction.getReducedFraction((-3303), 1707);
      bigFraction1.THREE_FIFTHS.getDenominatorAsLong();
      bigFraction1.THREE_QUARTERS.floatValue();
      BigFraction bigFraction2 = bigFraction1.TWO.divide(bigFraction0);
      bigFraction2.TWO_QUARTERS.getDenominatorAsInt();
      bigFraction0.doubleValue();
      bigFraction0.ONE_HALF.pow((-1089.8776503313218));
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction2.ONE_FIFTH.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      long long0 = 6765L;
      BigFraction bigFraction0 = new BigFraction(6765L, (-488L));
      int int0 = (-2394);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction0.TWO_FIFTHS.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.ONE_QUARTER.getDenominatorAsLong();
      Random.setNextRandom(17);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      Object object0 = new Object();
      bigFraction0.TWO_FIFTHS.equals(object0);
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9007199254740990L);
      BigFraction bigFraction1 = bigFraction0.divide(1);
      BigFraction bigFraction2 = bigFraction0.subtract((long) 1);
      bigFraction0.percentageValue();
      BigFraction bigFraction3 = bigFraction2.abs();
      assertEquals((short) (-3), bigFraction3.shortValue());
      
      double double0 = bigFraction1.doubleValue();
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals(9.00719925474099E15, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(406.5382);
      bigFraction0.ZERO.toString();
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.add(bigInteger0);
      boolean boolean0 = bigFraction1.equals(bigInteger0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertFalse(boolean0);
      
      BigFraction bigFraction2 = bigFraction0.divide((-640L));
      String string0 = bigFraction2.toString();
      assertEquals("-1 / 1280", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      long long0 = (-302L);
      BigFraction bigFraction0 = new BigFraction(4395513236313604096L, (-302L));
      bigFraction0.ZERO.abs();
      BigFraction bigFraction1 = bigFraction0.add((-1364));
      bigFraction1.getNumerator();
      bigFraction1.subtract(bigFraction0);
      bigFraction1.subtract(1109);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-1364), 2050);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.doubleValue();
      bigFraction0.hashCode();
      Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483646, 2147483646, 2147483646);
      bigFraction0.ONE_FIFTH.longValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      assertEquals((short) (-2), bigFraction1.shortValue());
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.TWO_THIRDS.toString();
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      bigFraction0.ONE.compareTo(bigFraction1);
      BigFraction bigFraction2 = bigFraction0.TWO_THIRDS.reciprocal();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction3 = bigFraction1.TWO_FIFTHS.multiply(bigInteger0);
      bigFraction0.THREE_QUARTERS.pow((-260));
      bigFraction1.getNumeratorAsInt();
      bigFraction1.ONE_HALF.getNumeratorAsInt();
      BigFraction bigFraction4 = bigFraction1.add(1554);
      bigFraction4.THREE_FIFTHS.getNumeratorAsLong();
      bigFraction1.ONE.floatValue();
      bigFraction4.TWO_THIRDS.toString();
      bigFraction0.MINUS_ONE.floatValue();
      BigInteger bigInteger1 = BigInteger.TEN;
      bigFraction0.TWO_FIFTHS.longValue();
      BigFraction bigFraction5 = bigFraction4.pow(bigInteger1);
      BigFraction bigFraction6 = bigFraction4.abs();
      bigFraction4.doubleValue();
      bigFraction0.compareTo(bigFraction4);
      bigFraction4.intValue();
      bigFraction5.hashCode();
      bigFraction2.getNumerator();
      bigFraction6.floatValue();
      bigFraction0.getDenominatorAsInt();
      bigFraction3.compareTo(bigFraction4);
      bigFraction0.intValue();
      bigFraction6.getNumeratorAsInt();
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue(3277);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2956L);
      bigFraction0.getField();
      BigFraction bigFraction1 = BigFraction.ONE;
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0842021724855044E-19);
      assertEquals((short)0, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(7.771561172376096E-16);
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2819561105158720014L);
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction2 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction3 = bigFraction0.multiply(bigFraction2);
      assertEquals((byte)11, bigFraction3.byteValue());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow(773);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.multiply((-1));
      int int0 = bigFraction3.getNumeratorAsInt();
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertEquals((-9), int0);
      assertEquals((short)0, bigFraction3.shortValue());
      
      String string0 = bigFraction1.toString();
      assertEquals("2 / 5", string0);
      
      BigFraction bigFraction4 = bigFraction1.pow((-9));
      assertEquals((short)3814, bigFraction4.shortValue());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((long) 1487);
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((short)1487, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.divide(bigFraction0);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction0);
      assertEquals((short)0, bigFraction2.shortValue());
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      
      BigFraction bigFraction3 = bigFraction1.reciprocal();
      BigFraction bigFraction4 = bigFraction3.reduce();
      assertTrue(bigFraction3.equals((Object)bigFraction1));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      
      bigFraction0.hashCode();
      assertNotSame(bigFraction0, bigFraction2);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction3));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.ONE_HALF.bigDecimalValue();
      BigFraction bigFraction1 = BigFraction.ONE;
      assertEquals((short)1, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.ZERO.multiply((-1562));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.FOUR_FIFTHS.divide(629);
      Random.setNextRandom(1139);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483646, 2147483646, 2147483646);
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.multiply((long) 2147483646);
      assertEquals((byte)84, bigFraction1.byteValue());
      
      BigFraction bigFraction2 = new BigFraction((double) 2147483646);
      assertTrue(bigFraction2.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 1488);
      bigFraction0.THREE_FIFTHS.floatValue();
      BigFraction bigFraction1 = BigFraction.ONE;
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0038986406289041042, 0.0038986406289041042, 2147483474);
      assertEquals((short)0, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-326.852), 427);
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      assertEquals((short) (-327), bigFraction2.shortValue());
      
      bigFraction0.hashCode();
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertEquals((byte) (-70), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      // Undeclared exception!
      try { 
        bigFraction0.FOUR_FIFTHS.bigDecimalValue((-587));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BigFraction.getReducedFraction((-313), (-313));
      BigFraction bigFraction0 = new BigFraction((double) (-313));
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      assertFalse(bigFraction1.equals((Object)bigFraction2));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      bigFraction0.ONE_QUARTER.pow((-1));
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.0));
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.abs();
      BigFraction bigFraction2 = bigFraction0.THREE_QUARTERS.reduce();
      assertEquals((short) (-1), bigFraction0.shortValue());
      assertEquals((byte)0, bigFraction2.byteValue());
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      
      BigFraction bigFraction3 = BigFraction.ONE;
      assertFalse(bigFraction3.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4395513236313604096L, (-302L));
      BigFraction bigFraction1 = bigFraction0.ZERO.abs();
      BigFraction bigFraction2 = bigFraction0.add((-1364));
      BigFraction bigFraction3 = bigFraction2.subtract(0);
      assertEquals((byte)15, bigFraction3.byteValue());
      
      bigFraction2.hashCode();
      assertTrue(bigFraction2.equals((Object)bigFraction3));
      
      BigFraction bigFraction4 = bigFraction0.pow((-2029));
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertEquals((short)10851, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(772.563);
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.reciprocal();
      assertEquals((short)772, bigFraction0.shortValue());
      assertEquals((short)4, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1326.465222));
      bigFraction0.ONE.add(352L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.subtract(2146365749);
      bigFraction1.ZERO.abs();
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.FOUR_FIFTHS.pow(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.MINUS_ONE.hashCode();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.pow(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.subtract(888);
      BigFraction bigFraction2 = bigFraction0.add(75025L);
      BigFraction bigFraction3 = bigFraction2.subtract(2581);
      bigFraction3.ONE.divide(bigInteger0);
      bigFraction3.FOUR_FIFTHS.reciprocal();
      bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction4 = bigFraction2.subtract(bigInteger0);
      bigFraction4.FOUR_FIFTHS.pow(0.08192320648511571);
      BigFraction bigFraction5 = bigFraction0.add((long) 888);
      bigFraction1.getDenominatorAsInt();
      // Undeclared exception!
      try { 
        bigFraction5.bigDecimalValue(1719, (-996));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(2147483646, 2147483646);
      assertEquals((short)1, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483646, 2147483646, 2147483646);
      bigFraction0.FOUR_FIFTHS.pow((double) 2147483646);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.subtract(bigFraction0);
      assertEquals((short)0, bigFraction1.shortValue());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.hashCode();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1513, 1513);
      bigFraction0.MINUS_ONE.getDenominatorAsInt();
      Random.setNextRandom(55);
      Random.setNextRandom(55);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.MINUS_ONE.subtract(6236930048L);
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483646, 2147483646, 2147483646);
      bigFraction0.THREE_FIFTHS.add(2147483646);
      Random.setNextRandom(2147483646);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483646, 2147483646, 2147483646);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(2147414572, 355);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1471);
      assertEquals((byte) (-65), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      assertEquals((byte)0, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-1.9878895701599342), (-1.9878895701599342), 116);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -1.988 to fraction (-5,106,700,315/2,568,905,432)
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1488, 1488, 1488);
      assertEquals((byte) (-48), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.TWO_THIRDS.getNumeratorAsLong();
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = BigFraction.TWO;
      bigFraction0.ONE_FIFTH.compareTo(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(2147483648L, (long) 1510);
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.subtract(bigFraction0);
      BigFraction bigFraction2 = BigFraction.FOUR_FIFTHS;
      bigFraction2.TWO_QUARTERS.intValue();
      BigFraction bigFraction3 = bigFraction0.add(bigFraction1);
      assertNotSame(bigFraction3, bigFraction0);
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte)0, bigFraction3.byteValue());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      assertEquals((byte)1, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((long) 1488);
      assertEquals((byte) (-48), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0L);
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-24);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigInteger bigInteger1 = bigFraction0.getDenominator();
      assertEquals((short)1, bigInteger1.shortValue());
      assertEquals((byte) (-24), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }
}
