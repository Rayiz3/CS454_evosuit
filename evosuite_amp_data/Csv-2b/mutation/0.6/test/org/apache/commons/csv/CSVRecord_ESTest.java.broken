/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 11:14:25 GMT 2023
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thoughtworks.xstream.security.ForbiddenClassException;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.csv.CSVRecord;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.testcarver.testcase.EvoSuiteXStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVRecord_ESTest extends CSVRecord_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, (String) null, 0L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[1];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "UPDATES", (-2365L));
      boolean boolean0 = cSVRecord0.isMapped("UPDATES");
      assertFalse(boolean0);
      assertEquals((-2365L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[11];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String string0 = "`#@U0$VP. #?|F";
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "`#@U0$VP. #?|F", 3298L);
      // Undeclared exception!
      try { 
        cSVRecord0.get("`#@U0$VP. #?|F");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No header mapping was specified, the record values can't be accessed by name
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[11];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-5193));
      hashMap0.put("}C*rs-dV,&?$`*?q", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "}C*rs-dV,&?$`*?q", 3162L);
      boolean boolean0 = cSVRecord0.isSet("}C*rs-dV,&?$`*?q");
      assertTrue(boolean0);
      assertEquals(3162L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "y|2Zhdjy", 3270L);
      cSVRecord0.get("w");
      cSVRecord0.isMapped("P,.CUDX}w`~eEJ^3");
      cSVRecord0.isMapped("y|2Zhdjy");
      boolean boolean0 = cSVRecord0.isSet("P,.CUDX}w`~eEJ^3");
      assertFalse(boolean0);
      
      cSVRecord0.iterator();
      cSVRecord0.isMapped("P,.CUDX}w`~eEJ^3");
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals(3270L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[7];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(1);
      hashMap0.put("q_8bKMdaj*Y!'tsw", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "q_8bKMdaj*Y!'tsw", 0L);
      cSVRecord0.get("q_8bKMdaj*Y!'tsw");
      boolean boolean0 = cSVRecord0.isSet("q_8bKMdaj*Y!'tsw");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>(2799);
      Integer integer0 = new Integer(3156);
      hashMap1.put("", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap1, "", 123L);
      boolean boolean0 = cSVRecord0.isConsistent();
      cSVRecord0.iterator();
      cSVRecord0.spliterator();
      boolean boolean1 = cSVRecord0.isSet("");
      assertFalse(boolean1 == boolean0);
      
      HashMap<String, Integer> hashMap2 = new HashMap<String, Integer>();
      CSVRecord cSVRecord1 = new CSVRecord(stringArray0, hashMap2, "v!AE;RI0&r[f#A-v", 3156);
      cSVRecord1.isSet("temp table");
      cSVRecord1.isMapped("org.h2.expression.FunctionInfo");
      cSVRecord1.get("");
      assertFalse(cSVRecord1.isConsistent());
      assertEquals(3156L, cSVRecord1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(22012);
      hashMap0.put((String) null, integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, (String) null, 3270L);
      boolean boolean0 = cSVRecord0.isSet((String) null);
      assertFalse(boolean0);
      assertEquals(3270L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[2];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("A  3)ZA", (Integer) null);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "A  3)ZA", (-423L));
      // Undeclared exception!
      try { 
        cSVRecord0.isSet("A  3)ZA");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "6mYd(bmk0Ye(KUW", (-832L));
      String[] stringArray1 = new String[0];
      cSVRecord0.getComment();
      assertEquals((-832L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "+!>IV", (-306L));
      cSVRecord0.size();
      boolean boolean0 = cSVRecord0.isSet("+!>IV");
      assertFalse(boolean0);
      assertEquals((-306L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "INDEX", (-2398L));
      hashMap0.put("INDEX", (Integer) null);
      cSVRecord0.isConsistent();
      cSVRecord0.spliterator();
      Object object0 = new Object();
      cSVRecord0.isMapped("org.apache.commons.csv.CSVRecord");
      cSVRecord0.isMapped("org.apache.commons.csv.CSVRecord");
      // Undeclared exception!
      try { 
        cSVRecord0.get((-3437));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3437
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, (String) null, (-7L));
      assertEquals("[]", cSVRecord0.toString());
      
      boolean boolean0 = cSVRecord0.isConsistent();
      assertEquals((-7L), cSVRecord0.getRecordNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[6];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[4], 105L);
      cSVRecord0.get(stringArray0[4]);
      assertEquals(105L, cSVRecord0.getRecordNumber());
      assertEquals(6, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "h(a{=TV", 5000L);
      assertEquals(5000L, cSVRecord0.getRecordNumber());
      assertEquals("[]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "y|2Zhdjy", 3270L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertFalse(boolean0);
      
      CSVRecord cSVRecord1 = new CSVRecord((String[]) null, hashMap0, "A", 1627L);
      cSVRecord1.toString();
      assertEquals(1627L, cSVRecord1.getRecordNumber());
      assertTrue(cSVRecord1.isConsistent());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "B", 3270L);
      String[] stringArray1 = cSVRecord0.values();
      assertEquals(3270L, cSVRecord0.getRecordNumber());
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[6];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[4], (-374L));
      boolean boolean0 = cSVRecord0.isSet(stringArray0[1]);
      assertEquals((-374L), cSVRecord0.getRecordNumber());
      assertFalse(cSVRecord0.isConsistent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[2];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[0], (-323L));
      cSVRecord0.iterator();
      boolean boolean0 = cSVRecord0.isSet(stringArray0[0]);
      assertFalse(boolean0);
      assertEquals((-323L), cSVRecord0.getRecordNumber());
      assertEquals(2, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[1] = "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[2] = "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[3] = "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      long long0 = (-435L);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>", (-435L));
      cSVRecord0.isConsistent();
      // Undeclared exception!
      try { 
        EvoSuiteXStream.fromString("<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>");
        fail("Expecting exception: ForbiddenClassException");
      
      } catch(ForbiddenClassException e) {
         //
         // org.apache.commons.csv.CSVRecord
         //
         verifyException("com.thoughtworks.xstream.security.NoTypePermission", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[6];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[4], (-374L));
      boolean boolean0 = cSVRecord0.isConsistent();
      assertFalse(boolean0);
      assertEquals((-374L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[1];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[0], (-1519L));
      assertEquals((-1519L), cSVRecord0.getRecordNumber());
      assertEquals(1, cSVRecord0.size());
  }
}
