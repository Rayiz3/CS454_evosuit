/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 21:56:06 GMT 2023
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-123E2.12");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".12.3");
      boolean boolean1 = NumberUtils.isDigits(".12.3");
      assertTrue(boolean1 == boolean0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 2184L;
      long long0 = NumberUtils.max(longArray0);
      long[] longArray1 = new long[1];
      longArray1[0] = 2184L;
      long long1 = NumberUtils.min(longArray1);
      assertTrue(long1 == long0);
      assertEquals(2184L, long1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0e!O");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0e!O is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0e9");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E700F");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)46;
      shortArray0[2] = (short)46;
      NumberUtils.max(shortArray0);
      Number number0 = NumberUtils.createNumber("-0x0");
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.9");
      assertNotNull(number0);
      assertEquals(0.9F, number0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2184.8F;
      floatArray0[1] = 3398.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-1.0F);
      floatArray0[4] = 132.0F;
      floatArray0[5] = 2615.04F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-700F");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("123.3f");
      assertEquals(123.3F, number0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0e");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0e is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E700");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      NumberUtils.createNumber("1234.5d");
      boolean boolean0 = NumberUtils.isNumber("1234E5l");
      assertFalse(boolean0);
      
      NumberUtils.isDigits("9");
      int[] intArray0 = new int[5];
      intArray0[0] = 2352;
      intArray0[1] = 110;
      intArray0[2] = (-649);
      intArray0[3] = 520;
      intArray0[4] = (-261);
      int int0 = NumberUtils.max(intArray0);
      assertEquals(2352, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      try { 
        NumberUtils.createNumber("14E2e}1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"14E2e}1\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234.5d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("123.4E2721D");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-zl");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -zl is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-700");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-200");
      assertEquals(1.1E-200, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+esg>U:0aB^QMc>Y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      try { 
        NumberUtils.createNumber("4u_^:6.3ipa%s~o~LL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 4u_^:6.3ipa%s~o~LL is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".1l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1l");
      assertEquals((-1L), number0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("13.4E2e}1D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0eF");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-1234E5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0e");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -0e is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x9UY");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.4E-45");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      try { 
        NumberUtils.createNumber("13.4E2e}1D");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 13.4E2e}1D is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      try { 
        NumberUtils.createNumber("S&YeJ|3`E3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // S&YeJ|3`E3 is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("13.");
      assertEquals(13.0F, number0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xf");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0.0F;
      byte byte0 = NumberUtils.toByte((String) null, (byte)64);
      assertEquals((byte)64, byte0);
      
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = (-1.2);
      doubleArray0[5] = (double) 0.0F;
      doubleArray0[6] = (double) 0.0F;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.2), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("12345l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.1E-700F");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      try { 
        NumberUtils.createNumber("12H^[5L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 12H^[5L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      try { 
        NumberUtils.createNumber("path.separator");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // path.separator is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("123.4E21D");
      assertEquals(1.234E23, number0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      try { 
        NumberUtils.createNumber("The Array must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e/,^004");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Aay cannot be empy.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Aay cannot be empy. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      long[] longArray0 = new long[1];
      NumberUtils.min(longArray0);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (byte)0;
      doubleArray0[2] = (double) (byte)0;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = 4232.0;
      doubleArray0[6] = (double) (byte)0;
      doubleArray0[7] = (double) 0L;
      doubleArray0[8] = (-62.927066945);
      NumberUtils.min(doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = 926;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
      
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-62.927066945), double0, 0.01);
      
      long long0 = NumberUtils.toLong((String) null, 5166L);
      assertEquals(5166L, long0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      try { 
        NumberUtils.createNumber("{LrSAQ\">2eaiD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // {LrSAQ\">2eaiD is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.createNumber("-0");
      NumberUtils.max((int) numberUtils0.INTEGER_ONE, (-1141), 894);
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (long)numberUtils0.LONG_ZERO;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[1] = (int) numberUtils0.INTEGER_ONE;
      intArray0[2] = (-118);
      intArray0[3] = (int) numberUtils0.INTEGER_ZERO;
      intArray0[4] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[5] = (-1323);
      intArray0[6] = (int) (short)numberUtils0.SHORT_ZERO;
      intArray0[7] = (int) numberUtils0.INTEGER_ZERO;
      NumberUtils.min(intArray0);
      boolean boolean0 = NumberUtils.isNumber("0xy(@");
      assertFalse(boolean0);
      
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1323), int0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[1] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[2] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[3] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[4] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[5] = (short) numberUtils0.SHORT_ONE;
      shortArray0[6] = (short) numberUtils0.SHORT_ONE;
      shortArray0[7] = (short)3272;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x0w");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) numberUtils0.BYTE_ZERO;
      NumberUtils.createInteger((String) null);
      byteArray0[1] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[3] = (byte) numberUtils0.BYTE_ONE;
      int[] intArray0 = new int[4];
      intArray0[0] = (int) numberUtils0.INTEGER_ONE;
      intArray0[1] = (int) numberUtils0.INTEGER_ONE;
      intArray0[2] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[3] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      NumberUtils.min(intArray0);
      byteArray0[4] = (byte) numberUtils0.BYTE_ONE;
      NumberUtils.min(byteArray0);
      NumberUtils.isNumber("0x");
      try { 
        NumberUtils.createNumber("vY'j@s@p0|4dsxp");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // vY'j@s@p0|4dsxp is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2013.0F);
      floatArray0[1] = (-1234.5F);
      floatArray0[2] = Float.NaN;
      floatArray0[3] = (-5.5F);
      floatArray0[4] = (-10.5F);
      floatArray0[5] = 10.3F;
      floatArray0[6] = 946.85F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
      
      boolean boolean0 = NumberUtils.isDigits((String) null);
      NumberUtils.createNumber((String) null);
      boolean boolean1 = NumberUtils.isNumber((String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      try { 
        NumberUtils.createNumber("|X]u83bFRs|A+G-eF");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // |X]u83bFRs|A+G-eF is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      NumberUtils.createNumber((String) null);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-2013.0F);
      floatArray0[1] = (-1234.5F);
      floatArray0[2] = Float.NaN;
      floatArray0[3] = (-5.5F);
      floatArray0[4] = (-10.5F);
      floatArray0[5] = 10.3F;
      floatArray0[6] = 946.85F;
      NumberUtils.min(floatArray0);
      String string0 = null;
      NumberUtils.isDigits((String) null);
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.max((int) numberUtils0.BYTE_ZERO, 101, 2575);
      assertEquals(2575, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("123.4E21D");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("Ev:dh8FO-j");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = NumberUtils.toInt((String) null, 102);
      assertEquals(102, int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      NumberUtils.createNumber((String) null);
      boolean boolean0 = NumberUtils.isDigits("");
      assertFalse(boolean0);
      
      short short0 = NumberUtils.max((short)1253, (short)1253, (short)68);
      assertEquals((short)1253, short0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)numberUtils0.SHORT_ONE;
      longArray0[1] = (long) numberUtils0.LONG_ZERO;
      longArray0[2] = (long) (byte)numberUtils0.BYTE_MINUS_ONE;
      longArray0[3] = (long) (short)numberUtils0.SHORT_ONE;
      longArray0[4] = (long) (byte)numberUtils0.BYTE_MINUS_ONE;
      longArray0[5] = (long) (short)numberUtils0.SHORT_ONE;
      longArray0[6] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      NumberUtils.min(longArray0);
      NumberUtils.createBigDecimal((String) null);
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      int int0 = NumberUtils.max(12345, 2575, 12345);
      assertEquals(12345, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[1] = (int) numberUtils0.INTEGER_MINUS_ONE;
      intArray0[2] = 1325;
      intArray0[3] = 3740;
      intArray0[4] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (long)numberUtils0.LONG_MINUS_ONE;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (int)numberUtils0.INTEGER_ONE;
      doubleArray0[3] = (double) numberUtils0.DOUBLE_ZERO;
      doubleArray0[4] = (double) (short)numberUtils0.SHORT_MINUS_ONE;
      doubleArray0[5] = (double) (short)numberUtils0.SHORT_MINUS_ONE;
      doubleArray0[6] = (double) 1325;
      doubleArray0[7] = (double) (int)numberUtils0.INTEGER_ONE;
      doubleArray0[8] = (double) (long)numberUtils0.LONG_MINUS_ONE;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
      
      intArray0[5] = (int) (byte)numberUtils0.BYTE_ZERO;
      intArray0[6] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[7] = (int) (short)numberUtils0.SHORT_ZERO;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = NumberUtils.isNumber("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short) numberUtils0.SHORT_MINUS_ONE, (short) (-345), (short) numberUtils0.BYTE_ZERO);
      assertEquals((short)0, short0);
      
      short short1 = NumberUtils.toShort((String) null, (short) (-108));
      assertEquals((short) (-108), short1);
      
      long long0 = NumberUtils.toLong("]hB\"D(", 12347L);
      assertEquals(12347L, long0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0xY#");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-Y#\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.min((byte) numberUtils0.BYTE_ONE, (byte)47, (byte) (-85));
      assertEquals((byte) (-85), byte0);
      
      long long0 = NumberUtils.max(123L, 1089L, 12344L);
      assertEquals(12344L, long0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte) (-85);
      shortArray0[1] = (short) (byte) (-85);
      shortArray0[2] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[4] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[5] = (short) (byte)47;
      shortArray0[6] = (short) (byte) (-85);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)47, short0);
      
      double double0 = NumberUtils.min((double) (short) (-85), (double) numberUtils0.LONG_ONE, 1.2339999888423831E23);
      assertEquals((-85.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0zOpen~SD");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.max((byte) numberUtils0.BYTE_ONE, (byte)35, (byte) numberUtils0.BYTE_ZERO);
      assertEquals((byte)35, byte0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)11, (byte) (-7), (byte) (-7));
      assertEquals((byte) (-7), byte0);
      
      long long0 = NumberUtils.max(3441L, 12344L, 12344L);
      NumberUtils.createNumber("--0JR|zi^");
      double double0 = NumberUtils.min((-1.2), (double) (byte) (-7), (double) 3441L);
      assertEquals((-7.0), double0, 0.01);
      
      float float0 = NumberUtils.toFloat((String) null, (float) (byte)11);
      assertEquals(11.0F, float0, 0.01F);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 12344L;
      longArray0[1] = (long) (byte)11;
      longArray0[2] = 12344L;
      long long1 = NumberUtils.max(longArray0);
      assertTrue(long1 == long0);
      
      short short0 = NumberUtils.toShort("--0JR|zi^", (short) (byte) (-7));
      assertEquals((short) (-7), short0);
      
      byte byte1 = NumberUtils.max((byte) (-78), (byte) (-78), (byte) (-29));
      assertEquals((byte) (-29), byte1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)11, (byte) (-7), (byte) (-7));
      assertEquals((byte) (-7), byte0);
      
      long long0 = NumberUtils.max(3441L, 12344L, 12344L);
      NumberUtils.createNumber("--0JR|zi^");
      double double0 = NumberUtils.min((-1.2), (double) (byte) (-7), (double) 3441L);
      assertEquals((-7.0), double0, 0.01);
      
      float float0 = NumberUtils.toFloat((String) null, (float) (byte)11);
      assertEquals(11.0F, float0, 0.01F);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 12344L;
      longArray0[1] = (long) (byte)11;
      longArray0[2] = 12344L;
      long long1 = NumberUtils.max(longArray0);
      assertTrue(long1 == long0);
      
      short short0 = NumberUtils.toShort("--0JR|zi^", (short) (byte) (-7));
      assertEquals((short) (-7), short0);
      
      byte byte1 = NumberUtils.max((byte)11, (byte)11, (byte) (-29));
      assertEquals((byte)11, byte1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-50);
      byte byte0 = NumberUtils.max((byte) (-83), (byte) (-112), (byte) (-83));
      assertEquals((byte) (-83), byte0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("----");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[15];
      floatArray0[0] = (float) numberUtils0.FLOAT_MINUS_ONE;
      floatArray0[1] = (float) (int)numberUtils0.INTEGER_MINUS_ONE;
      Float float0 = new Float((float) numberUtils0.BYTE_ONE);
      floatArray0[2] = (float) (int)numberUtils0.INTEGER_MINUS_ONE;
      float float1 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float1, 0.01F);
      
      short short0 = NumberUtils.min((short) numberUtils0.SHORT_MINUS_ONE, (short) (-1079), (short) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((short) (-1079), short0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[15];
      floatArray0[0] = (float) numberUtils0.FLOAT_MINUS_ONE;
      floatArray0[1] = (float) (int)numberUtils0.INTEGER_MINUS_ONE;
      Float float0 = new Float((float) numberUtils0.BYTE_ONE);
      floatArray0[2] = (float) (int)numberUtils0.INTEGER_MINUS_ONE;
      float float1 = NumberUtils.min(floatArray0);
      assertEquals((-1.0F), float1, 0.01F);
      
      boolean boolean0 = NumberUtils.isNumber("0x1a");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xeF");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.toDouble((String) null, 1.0);
      boolean boolean0 = NumberUtils.isNumber("Y#<{VFN$4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("----");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".gn");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      try { 
        NumberUtils.createNumber(", Length: 0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      Number number0 = NumberUtils.createNumber("-0");
      assertNotNull(number0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (long)numberUtils0.LONG_ONE;
      floatArray0[1] = (float) (byte)numberUtils0.BYTE_ONE;
      floatArray0[2] = (float) (int)numberUtils0.INTEGER_ONE;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
      
      boolean boolean0 = NumberUtils.isNumber("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      try { 
        NumberUtils.createNumber("f");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // f is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.min((double) numberUtils0.DOUBLE_ONE, (double) numberUtils0.LONG_ZERO, 2184.6);
      assertEquals(0.0, double0, 0.01);
      
      float float0 = NumberUtils.toFloat("<9b", (-951.2F));
      assertEquals((-951.2F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("1234E-5");
      assertNotNull(bigDecimal0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_ZERO;
      intArray0[1] = (int) numberUtils0.INTEGER_ZERO;
      intArray0[2] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[3] = (int) (short)numberUtils0.SHORT_ONE;
      intArray0[4] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[5] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[6] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[7] = 97;
      intArray0[8] = (int) numberUtils0.INTEGER_ONE;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(97, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.min((byte)83, (byte)48, (byte) numberUtils0.BYTE_ONE);
      NumberUtils.max((long) numberUtils0.BYTE_ONE, (long) numberUtils0.INTEGER_ONE, (-2571L));
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x12");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xOpenBSD");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x-b3&JEup_254$Wn+L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)11;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[1];
      byte byte0 = NumberUtils.toByte("??FG>$Ly*?6c");
      assertEquals((byte)0, byte0);
      
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[1] = (int) numberUtils0.INTEGER_ZERO;
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (byte)numberUtils0.BYTE_ZERO;
      longArray0[2] = (long) numberUtils0.LONG_ZERO;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) (byte)numberUtils0.BYTE_MINUS_ONE;
      longArray0[5] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      longArray0[6] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      longArray0[7] = (long) (short)numberUtils0.SHORT_ONE;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1L, long0);
      
      intArray0[2] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1), int0);
      
      float float0 = NumberUtils.toFloat("??FG>$Ly*?6c", 5.0F);
      assertEquals(5.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      NumberUtils.createNumber((String) null);
      byte byte0 = NumberUtils.min((byte) (-7), (byte) (-11), (byte) (-124));
      assertEquals((byte) (-124), byte0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      float[] floatArray0 = new float[16];
      floatArray0[1] = (-5.5F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-5.5F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) numberUtils0.BYTE_ZERO;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (int)numberUtils0.INTEGER_ONE;
      doubleArray0[1] = (double) (float)numberUtils0.FLOAT_ONE;
      doubleArray0[2] = (double) (short)numberUtils0.SHORT_ONE;
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)numberUtils0.BYTE_ZERO;
      doubleArray0[5] = (double) (byte)numberUtils0.BYTE_ONE;
      doubleArray0[6] = 1621.062936487641;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1621.062936487641, double0, 0.01);
      
      NumberUtils.createBigInteger((String) null);
      short short0 = NumberUtils.min((short) numberUtils0.BYTE_MINUS_ONE, (short) (-243), (short) (-724));
      assertEquals((short) (-724), short0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = 3124;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(3124, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1019L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.max((short) numberUtils0.SHORT_MINUS_ONE, (short) numberUtils0.SHORT_ZERO, (short)450);
      NumberUtils.toShort("w_ybpAm(", (short) numberUtils0.SHORT_ZERO);
      long long0 = NumberUtils.toLong("w_ybpAm(", (long) numberUtils0.INTEGER_ZERO);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_120()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.toByte(".");
      assertEquals((byte)0, byte0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (int)numberUtils0.INTEGER_ZERO;
      doubleArray0[1] = (double) (short)numberUtils0.SHORT_ONE;
      doubleArray0[2] = (double) (byte)numberUtils0.BYTE_ZERO;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1.0, double0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) numberUtils0.INTEGER_ZERO;
      intArray0[1] = (int) numberUtils0.INTEGER_ZERO;
      intArray0[2] = (int) (short)numberUtils0.SHORT_ONE;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)numberUtils0.SHORT_ONE;
      doubleArray0[1] = (double) (float)numberUtils0.FLOAT_ONE;
      doubleArray0[2] = (double) (float)numberUtils0.FLOAT_MINUS_ONE;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (long)numberUtils0.LONG_MINUS_ONE;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1.0F), float0, 0.01F);
      
      doubleArray0[4] = (double) (byte)numberUtils0.BYTE_MINUS_ONE;
      doubleArray0[5] = (double) (long)numberUtils0.LONG_ZERO;
      doubleArray0[6] = (double) (float)numberUtils0.FLOAT_ZERO;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
      
      short short0 = NumberUtils.min((short) (-1562), (short) numberUtils0.BYTE_ZERO, (short)108);
      assertEquals((short) (-1562), short0);
      
      int int0 = NumberUtils.min((int) numberUtils0.BYTE_MINUS_ONE, (int) numberUtils0.BYTE_ZERO, (int) (short) (-1562));
      assertEquals((-1562), int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 9.199999809265137;
      doubleArray0[1] = (double) (float)numberUtils0.FLOAT_ONE;
      doubleArray0[2] = (double) (float)numberUtils0.FLOAT_MINUS_ONE;
      doubleArray0[3] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      doubleArray0[4] = (double) (byte)numberUtils0.BYTE_MINUS_ONE;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
      
      short short0 = NumberUtils.min((short)3346, (short)3346, (short) numberUtils0.SHORT_MINUS_ONE);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[7] = 2185.0F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(2185.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      float[] floatArray0 = new float[37];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (double) 0.0F;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
      
      float float1 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[3] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[4] = (byte) numberUtils0.BYTE_ZERO;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      try { 
        NumberUtils.createNumber("O234");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"O234\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_ZERO;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)numberUtils0.BYTE_ONE;
      longArray0[1] = (long) (byte)numberUtils0.BYTE_ONE;
      longArray0[2] = (long) numberUtils0.LONG_ONE;
      longArray0[3] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      longArray0[4] = 291L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1L), long0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2420.4;
      doubleArray0[1] = (double) numberUtils0.DOUBLE_ONE;
      doubleArray0[2] = (double) (short)0;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(2420.4, double0, 0.01);
      
      int int0 = NumberUtils.toInt("", 89);
      assertEquals(89, int0);
      
      byte byte0 = NumberUtils.toByte("", (byte)82);
      assertEquals((byte)82, byte0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 12344L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 83;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1083.8659476;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1083.8659476, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1a");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("12345L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("8");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      long[] longArray0 = new long[8];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("[?D{10|eQ7I");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      boolean boolean0 = NumberUtils.isDigits("0x11 11");
      assertFalse(boolean0);
      
      short short0 = NumberUtils.min((short)43, (short) (-300), (short) (-26315));
      assertEquals((short) (-26315), short0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 9.199999809265137;
      doubleArray0[1] = (double) (float)numberUtils0.FLOAT_ONE;
      doubleArray0[2] = (double) (float)numberUtils0.FLOAT_MINUS_ONE;
      doubleArray0[3] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      doubleArray0[4] = (double) (byte)numberUtils0.BYTE_MINUS_ONE;
      doubleArray0[5] = (double) (long)numberUtils0.LONG_ZERO;
      doubleArray0[6] = (double) (float)numberUtils0.FLOAT_ZERO;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
      
      short short0 = NumberUtils.min((short) (-1562), (short) numberUtils0.BYTE_ZERO, (short)108);
      assertEquals((short) (-1562), short0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (-62.927066945);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-62.927066945), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      try { 
        NumberUtils.createNumber("TrUe");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // TrUe is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      try { 
        NumberUtils.createNumber("e1G=N}`hvT>9{%bi");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // e1G=N}`hvT>9{%bi is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      try { 
        NumberUtils.createNumber(".");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[1] = (short) numberUtils0.SHORT_ONE;
      shortArray0[2] = (short) (-1562);
      shortArray0[3] = (short) numberUtils0.SHORT_ONE;
      shortArray0[4] = (short) numberUtils0.SHORT_ONE;
      shortArray0[5] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[6] = (short) (-1562);
      shortArray0[7] = (short) (byte)numberUtils0.BYTE_ONE;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1562), short0);
      
      float float0 = NumberUtils.toFloat("", (float) numberUtils0.FLOAT_ONE);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[1] = (short) numberUtils0.SHORT_MINUS_ONE;
      short short0 = NumberUtils.min((short) numberUtils0.SHORT_ZERO, (short) (-1), (short) numberUtils0.BYTE_ONE);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("8");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)117;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)117, short0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1128.3005049260917;
      doubleArray0[2] = 1746.0549;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 968.742471;
      doubleArray0[5] = (-118.48043559645436);
      doubleArray0[6] = 2111.1699274467637;
      double double0 = NumberUtils.max(968.742471, 1128.3005049260917, 0.0);
      assertEquals(1128.3005049260917, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[1] = 686L;
      longArray0[2] = 686L;
      longArray0[3] = (-1392L);
      long long0 = NumberUtils.min(686L, (-1392L), 686L);
      assertEquals((-1392L), long0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 2422L;
      longArray0[1] = 377L;
      long long0 = NumberUtils.min(377L, 2422L, 377L);
      assertEquals(377L, long0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 639;
      int int0 = NumberUtils.min(639, 639, 639);
      assertEquals(639, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.min(1775, (-1912), (int) numberUtils0.SHORT_ZERO);
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("ara2zXhquO");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_167()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.toInt("QIFTDe9Fp%y");
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) numberUtils0.SHORT_ONE;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[2] = (short) (-1454);
      shortArray0[3] = (short) numberUtils0.SHORT_ONE;
      shortArray0[4] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[5] = (short) numberUtils0.SHORT_ONE;
      shortArray0[6] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[7] = (short) numberUtils0.SHORT_MINUS_ONE;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.toInt("0x", (int) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      short[] shortArray0 = new short[20];
      shortArray0[0] = (short)44;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-146.0F);
      float float0 = NumberUtils.max((-146.0F), (-146.0F), (-146.0F));
      assertEquals((-146.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      float float0 = NumberUtils.max((-3.4028235E38F), (-3.4028235E38F), (-3.4028235E38F));
      assertEquals((-3.4028235E38F), float0, 0.01F);
      
      short short0 = NumberUtils.max((short)1587, (short)48, (short)48);
      assertEquals((short)1587, short0);
      
      double double0 = NumberUtils.toDouble("0Fq");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1083;
      shortArray0[1] = (short)1083;
      short short0 = NumberUtils.max((short)1083, (short)1083, (short)1083);
      assertEquals((short)1083, short0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double double0 = NumberUtils.toDouble("Y#<{VF[4g", 1.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.toByte("createNumber(String) 9b failed", (byte) numberUtils0.BYTE_ZERO);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_179()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.min((byte) numberUtils0.BYTE_MINUS_ONE, (byte) numberUtils0.BYTE_MINUS_ONE, (byte) numberUtils0.BYTE_ZERO);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      long[] longArray0 = new long[18];
      longArray0[0] = (-1058L);
      longArray0[1] = 0L;
      long long0 = NumberUtils.max((-1058L), 0L, (-1058L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("12345L");
      assertEquals(12345L, number0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)11, (byte) (-7), (byte) (-7));
      assertEquals((byte) (-7), byte0);
      
      long long0 = NumberUtils.max(3441L, (long) (byte)11, (long) (byte)11);
      assertEquals(3441L, long0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.min((byte) numberUtils0.BYTE_MINUS_ONE, (byte) (-87), (byte) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((byte) (-87), byte0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      long long0 = NumberUtils.min((-2846L), (-2846L), (-4612L));
      assertEquals((-4612L), long0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.min(Float.NaN, (float) numberUtils0.INTEGER_ONE, Float.NaN);
      short short0 = NumberUtils.toShort("Ls vEZ$Pf,o\";OVZ");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.toShort("0x1a", (short) numberUtils0.SHORT_ONE);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_187()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.min((short) (-1562), (short) numberUtils0.BYTE_ZERO, (short)108);
      assertEquals((short) (-1562), short0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)107;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float float0 = NumberUtils.toFloat("X}j\"v");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      long[] longArray0 = new long[6];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      try { 
        NumberUtils.createNumber("xwN{\rh{>");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // xwN{\rh{> is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      try { 
        NumberUtils.createNumber("CRa!>Nd");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // CRa!>Nd is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_196()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.toLong("cV^^");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_ONE;
      NumberUtils.min(byteArray0);
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_200()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short) numberUtils0.BYTE_ONE, (short)462, (short)102);
      assertEquals((short)462, short0);
  }
}
