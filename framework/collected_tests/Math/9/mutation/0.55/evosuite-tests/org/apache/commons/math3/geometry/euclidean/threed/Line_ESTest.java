/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 22:24:26 GMT 2023
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Locale;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 1.0, 1.0);
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      Vector1D vector1D0 = line0.toSubSpace(vector3D0);
      Vector1D vector1D1 = Vector1D.POSITIVE_INFINITY;
      Line line1 = new Line(vector3D0, vector3D1);
      line1.isSimilarTo(line0);
      Vector3D vector3D2 = Vector3D.ZERO;
      line0.toSpace(vector1D0);
      Line line2 = new Line(line0);
      line1.intersection(line2);
      line2.distance(line1);
      Line line3 = null;
      try {
        line3 = new Line(vector3D1, vector3D2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = Vector3D.PLUS_I;
      Line line0 = new Line(vector3D1, vector3D0);
      Line line1 = new Line(line0);
      line0.intersection(line1);
      Vector3D vector3D2 = Vector3D.MINUS_I;
      Vector3D vector3D3 = Vector3D.PLUS_K;
      Line line2 = new Line(vector3D2, vector3D3);
      line0.isSimilarTo(line1);
      line2.isSimilarTo(line0);
      line0.distance(line1);
      Vector3D vector3D4 = Vector3D.NEGATIVE_INFINITY;
      vector3D3.toString();
      line1.distance(vector3D1);
      line1.reset(vector3D2, vector3D3);
      line0.contains(vector3D2);
      Vector3D vector3D5 = Vector3D.PLUS_J;
      Vector3D.dotProduct(vector3D3, vector3D5);
      Line line3 = null;
      try {
        line3 = new Line(vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Line line0 = new Line(vector3D0, vector3D1);
      boolean boolean0 = line0.isSimilarTo(line0);
      assertTrue(boolean0);
      
      Line line1 = new Line(vector3D1, vector3D0);
      boolean boolean1 = line0.isSimilarTo(line1);
      assertTrue(boolean1);
      
      boolean boolean2 = line0.contains(vector3D0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 1.0, 1.0);
      Vector3D vector3D1 = new Vector3D(1.5, 1.0, 1.0);
      Line line0 = new Line(vector3D0, vector3D1);
      line0.toSubSpace(vector3D0);
      line0.toSubSpace(vector3D1);
      Vector3D vector3D2 = new Vector3D(1.0, 1.0, 1.0);
      Vector3D vector3D3 = new Vector3D(3.141592653489793, 1.0, (-1187.465871639));
      Line line1 = new Line(vector3D3, vector3D2);
      Vector3D vector3D4 = Vector3D.crossProduct(vector3D3, vector3D2);
      Line line2 = new Line(vector3D4, vector3D0);
      line0.toSubSpace(vector3D3);
      line2.toSubSpace(vector3D1);
      Vector3D vector3D5 = line0.intersection(line1);
      Vector3D vector3D6 = line0.intersection(line2);
      assertNotNull(vector3D6);
      
      Line line3 = new Line(line2);
      line1.toSubSpace(vector3D3);
      Vector1D vector1D0 = line0.toSubSpace(vector3D6);
      assertEquals(1.0000000000000002, vector1D0.getX(), 0.01);
      
      Vector3D vector3D7 = line1.closestPoint(line2);
      assertTrue(vector3D7.equals((Object)vector3D5));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 1.2138431553085143, 1.0);
      Vector3D vector3D1 = new Vector3D(20.09279494939946, 1.0, 1.0);
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(vector3D0, vector3D1);
      line1.toSubSpace(vector3D0);
      line1.toSubSpace(vector3D1);
      Vector3D vector3D2 = new Vector3D(2.0, 0.0, 0.0);
      Vector3D vector3D3 = new Vector3D(1.0, 0.9999997099253146, 0.0);
      Line line2 = new Line(vector3D2, vector3D3);
      Vector3D vector3D4 = Vector3D.MINUS_K;
      Line line3 = new Line(vector3D0, vector3D4);
      Locale locale0 = Locale.ENGLISH;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      vector3D3.toString(numberFormat0);
      Line line4 = new Line(line1);
      line4.toSubSpace(vector3D0);
      line2.toSubSpace(vector3D4);
      Line line5 = new Line(vector3D1, vector3D0);
      Vector3D vector3D5 = line0.intersection(line5);
      assertEquals(2.238608713124403, vector3D5.getNorm1(), 0.01);
      assertNotNull(vector3D5);
      
      line1.toSubSpace(vector3D1);
      line3.toSubSpace(vector3D1);
      line0.intersection(line4);
      Vector3D vector3D6 = Vector3D.PLUS_I;
      line0.toSubSpace(vector3D6);
      Vector1D vector1D0 = line2.toSubSpace(vector3D4);
      assertEquals(1.5123941151287515E-16, vector1D0.getX(), 0.01);
      
      Vector3D vector3D7 = line5.getOrigin();
      assertEquals(1.5595965933493243, vector3D7.getAlpha(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      double double0 = line0.distance(line0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 1.0, 1.0);
      Vector3D vector3D1 = new Vector3D(1.5, (-58.152686460583155), 1.0);
      Line line0 = new Line(vector3D0, vector3D1);
      Vector1D vector1D0 = line0.toSubSpace(vector3D0);
      Vector3D vector3D2 = new Vector3D((-58.152686460583155), vector3D1);
      Vector3D vector3D3 = new Vector3D(3.563411983140173, 0.5, 560.1);
      Line line1 = new Line(vector3D2, vector3D1);
      Vector3D vector3D4 = Vector3D.NEGATIVE_INFINITY;
      Line line2 = new Line(vector3D3, vector3D4);
      Vector1D vector1D1 = new Vector1D(1.0, vector1D0, 1.5, vector1D0, (-58.152686460583155), vector1D0);
      Vector3D vector3D5 = Vector3D.NEGATIVE_INFINITY;
      line0.toSubSpace(vector3D5);
      line2.intersection(line0);
      vector3D5.add(3.563411983140173, (Vector<Euclidean3D>) vector3D4);
      Vector3D vector3D6 = line0.intersection(line1);
      assertNotNull(vector3D6);
      
      line2.toSubSpace(vector3D5);
      Vector1D vector1D2 = Vector1D.NaN;
      Line line3 = new Line(line0);
      Vector3D vector3D7 = line2.intersection(line3);
      assertNull(vector3D7);
      
      line2.toSubSpace(vector3D6);
      Vector1D vector1D3 = line0.toSubSpace(vector3D6);
      assertEquals(58.16328771988153, vector1D3.getX(), 0.01);
      
      boolean boolean0 = line3.isSimilarTo(line0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 1.0, 1.0);
      Vector3D vector3D1 = new Vector3D(1.5, 1.0, 1.0);
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(vector3D0, vector3D1);
      line1.toSubSpace(vector3D0);
      line1.toSubSpace(vector3D1);
      Vector3D vector3D2 = new Vector3D(2.0, 0.0, 0.0);
      Vector3D vector3D3 = new Vector3D(2.0, 0.5, 0.5);
      Line line2 = new Line(vector3D2, vector3D3);
      Line line3 = new Line(vector3D2, vector3D3);
      line3.toSubSpace(vector3D2);
      line3.toSubSpace(vector3D3);
      line0.toSubSpace(vector3D3);
      Line line4 = new Line(line1);
      line4.toSubSpace(vector3D2);
      Vector3D vector3D4 = line1.intersection(line0);
      assertNotNull(vector3D4);
      
      line4.toSubSpace(vector3D0);
      Vector1D vector1D0 = line4.toSubSpace(vector3D1);
      assertEquals(1.5, vector1D0.getX(), 0.01);
      
      Vector3D vector3D5 = line3.closestPoint(line2);
      assertTrue(vector3D5.equals((Object)vector3D2));
      
      Vector3D vector3D6 = line0.getDirection();
      assertFalse(vector3D6.equals((Object)vector3D5));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      line0.wholeLine();
      Vector3D vector3D1 = line0.closestPoint(line0);
      assertEquals(Double.NaN, vector3D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector1D vector1D0 = Vector1D.ZERO;
      line0.toSpace(vector1D0);
      boolean boolean0 = line0.contains(vector3D0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      boolean boolean0 = line0.isSimilarTo(line0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      line0.pointAt(2653.215089078081);
      Vector3D vector3D1 = line0.closestPoint(line0);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      Vector3D vector3D1 = Vector3D.ZERO;
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(vector3D0, vector3D1);
      double double0 = line0.distance(line1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Line line1 = line0.revert();
      boolean boolean0 = line0.contains(vector3D0);
      assertFalse(boolean0);
      assertNotSame(line0, line1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Line line1 = new Line(line0);
      assertFalse(line1.equals((Object)line0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 1.0, 1.0);
      Vector3D vector3D1 = new Vector3D(1.5, 1.0, 1.0);
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(vector3D0, vector3D1);
      line1.toSubSpace(vector3D0);
      line1.toSubSpace(vector3D1);
      Vector3D vector3D2 = new Vector3D(2.0, 0.0, 1.0);
      Vector3D vector3D3 = new Vector3D(2072.950652192503, 0.4775996728026846, 0.5);
      Line line2 = new Line(vector3D2, vector3D3);
      Line line3 = new Line(vector3D0, vector3D2);
      Line line4 = new Line(vector3D1, vector3D0);
      line4.toSubSpace(vector3D2);
      line1.toSubSpace(vector3D3);
      Line line5 = new Line(line2);
      line5.intersection(line0);
      line5.toSubSpace(vector3D2);
      line0.toSubSpace(vector3D3);
      Vector3D vector3D4 = line1.intersection(line5);
      assertNull(vector3D4);
      
      line2.toSubSpace(vector3D1);
      Vector1D vector1D0 = line1.toSubSpace(vector3D1);
      assertEquals(1.5, vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(line0);
      Vector3D vector3D2 = line0.closestPoint(line1);
      assertEquals(0.0, vector3D2.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      Line line1 = new Line(line0);
      line0.intersection(line1);
      boolean boolean0 = line0.contains(vector3D0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testIntersectionOutsideOutsidetestIntersectionOutsideOutside_18()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 1.0, 1.0);
      Vector3D vector3D1 = new Vector3D(1.5, 1.0, 1.0);
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(vector3D0, vector3D1);
      line1.toSubSpace(vector3D0);
      Vector1D vector1D0 = Vector1D.POSITIVE_INFINITY;
      Vector3D vector3D2 = new Vector3D(2.0, (-0.6483398753817898), 0.0);
      Vector3D vector3D3 = new Vector3D(2.0, 0.5, 0.5);
      Vector3D vector3D4 = line0.intersection(line1);
      Line line2 = new Line(vector3D2, vector3D3);
      Line line3 = new Line(vector3D2, vector3D3);
      line3.toSubSpace(vector3D2);
      line3.toSubSpace(vector3D3);
      Vector3D vector3D5 = Vector3D.POSITIVE_INFINITY;
      Vector3D.dotProduct(vector3D4, vector3D5);
      line0.intersection(line2);
      // Undeclared exception!
      try { 
        line0.toSubSpace((Vector<Euclidean3D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Line line0 = null;
      try {
        line0 = new Line(vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(line0);
      Vector3D vector3D2 = line0.intersection(line1);
      assertNotNull(vector3D2);
      
      boolean boolean0 = line0.isSimilarTo(line0);
      assertTrue(boolean0);
      
      Line line2 = new Line(line0);
      Vector3D vector3D3 = line0.closestPoint(line2);
      assertNotSame(vector3D3, vector3D2);
      assertEquals(0.5, vector3D3.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      line0.toSubSpace(vector3D0);
      Line line1 = new Line(vector3D0, vector3D0);
      assertFalse(line1.equals((Object)line0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      boolean boolean0 = line0.contains(vector3D0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = Vector3D.PLUS_I;
      Line line0 = new Line(vector3D0, vector3D1);
      boolean boolean0 = line0.contains(vector3D1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      double double0 = line0.getAbscissa(vector3D0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.closestPoint(line0);
      assertEquals(Double.NaN, vector3D1.getX(), 0.01);
  }
}
