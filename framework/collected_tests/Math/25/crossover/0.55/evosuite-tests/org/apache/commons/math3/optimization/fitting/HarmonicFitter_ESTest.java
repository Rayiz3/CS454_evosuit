/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 22:44:57 GMT 2023
 */

package org.apache.commons.math3.optimization.fitting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.optimization.fitting.HarmonicFitter;
import org.apache.commons.math3.optimization.fitting.WeightedObservedPoint;
import org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer;
import org.apache.commons.math3.random.GaussianRandomGenerator;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomAdaptorTest;
import org.apache.commons.math3.random.UncorrelatedRandomVectorGenerator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HarmonicFitter_ESTest extends HarmonicFitter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(levenbergMarquardtOptimizer0);
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(1522.328, 1522.328, 2567.0227284109);
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint((-1763.5009221304144), (-406.0), 1224.3341128226532);
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(1224.5501, (-1763.5009221304144), (-1763.5009221304144));
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(1522.328, 1224.5501, 1522.328);
      WeightedObservedPoint weightedObservedPoint4 = new WeightedObservedPoint(3973.142470177164, 1522.328, 556.30045605289);
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[4];
      weightedObservedPointArray0[0] = weightedObservedPoint2;
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      weightedObservedPointArray0[2] = weightedObservedPoint4;
      weightedObservedPointArray0[3] = weightedObservedPoint1;
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      harmonicFitter_ParameterGuesser0.guess();
      System.setCurrentTimeMillis((-2047L));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(levenbergMarquardtOptimizer0);
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(1224.5501, 1224.5501, 1224.5501);
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(6.283185307179586, Double.NEGATIVE_INFINITY, 1224.5501);
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(419.970859507974, (-1923.7804), 0.5);
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[7];
      weightedObservedPointArray0[0] = weightedObservedPoint1;
      weightedObservedPointArray0[1] = weightedObservedPoint2;
      weightedObservedPointArray0[2] = weightedObservedPoint2;
      weightedObservedPointArray0[3] = weightedObservedPoint2;
      weightedObservedPointArray0[4] = weightedObservedPoint1;
      weightedObservedPointArray0[5] = weightedObservedPoint1;
      weightedObservedPointArray0[6] = weightedObservedPoint0;
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(469.5220094, 78.4492362738837, 2279.38872562429);
      WeightedObservedPoint weightedObservedPoint4 = new WeightedObservedPoint(2567.0227284109, (-20.0), 0.5);
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser1 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      harmonicFitter_ParameterGuesser1.guess();
      harmonicFitter_ParameterGuesser0.guess();
      harmonicFitter_ParameterGuesser1.guess();
      System.setCurrentTimeMillis(45314260L);
      System.setCurrentTimeMillis(294L);
      System.setCurrentTimeMillis(45314260L);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(levenbergMarquardtOptimizer0);
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(1522.328, 1522.328, 2567.0227284109);
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(458.6950880120705, 458.6950880120705, 2567.0227284109);
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint((-88.77), 458.6950880120705, (-581.053));
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(1522.328, (-1763.5009221304144), 2205.0);
      WeightedObservedPoint weightedObservedPoint4 = new WeightedObservedPoint(1522.328, 2205.0, 1224.5501);
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[4];
      weightedObservedPointArray0[0] = weightedObservedPoint4;
      weightedObservedPointArray0[1] = weightedObservedPoint2;
      weightedObservedPointArray0[2] = weightedObservedPoint0;
      weightedObservedPointArray0[3] = weightedObservedPoint3;
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      harmonicFitter_ParameterGuesser0.guess();
      System.setCurrentTimeMillis((-774L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(levenbergMarquardtOptimizer0);
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(1522.328, 1522.328, 2567.0227284109);
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(458.6950880120705, 458.6950880120705, 2567.0227284109);
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint((-88.77), 458.6950880120705, (-581.053));
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(1522.328, (-1763.5009221304144), (-88.77));
      WeightedObservedPoint weightedObservedPoint4 = new WeightedObservedPoint(1522.328, 2567.0227284109, 1224.5501);
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[4];
      weightedObservedPointArray0[0] = weightedObservedPoint4;
      weightedObservedPointArray0[1] = weightedObservedPoint2;
      weightedObservedPointArray0[2] = weightedObservedPoint0;
      weightedObservedPointArray0[3] = weightedObservedPoint3;
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      harmonicFitter_ParameterGuesser0.guess();
      System.setCurrentTimeMillis((-774L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(levenbergMarquardtOptimizer0);
      harmonicFitter0.addObservedPoint(1.260000000000001, (-698.97041627698), 1.260000000000001);
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint((-698.97041627698), (-2302.28494), 1.260000000000001);
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(1.2500000000000009, 469.5220094, 1.260000000000001);
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint((-581.053), 2279.38872562429, 98.68);
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(330.4932515983, (-2667.257159), 479.96023066);
      WeightedObservedPoint weightedObservedPoint4 = new WeightedObservedPoint(7599660.764082801, 6.283185307179586, 7599660.764082801);
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[7];
      weightedObservedPointArray0[0] = weightedObservedPoint2;
      weightedObservedPointArray0[1] = weightedObservedPoint3;
      weightedObservedPointArray0[2] = weightedObservedPoint2;
      weightedObservedPointArray0[3] = weightedObservedPoint0;
      weightedObservedPointArray0[4] = weightedObservedPoint2;
      weightedObservedPointArray0[5] = weightedObservedPoint3;
      weightedObservedPointArray0[6] = weightedObservedPoint1;
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      harmonicFitter_ParameterGuesser0.guess();
      System.setCurrentTimeMillis(1696L);
      System.setCurrentTimeMillis((-774L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1696L);
      System.setCurrentTimeMillis((-774L));
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(levenbergMarquardtOptimizer0);
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(1224.5501, 1224.5501, 1224.5501);
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(4772.507092475107, 4772.507092475107, 6.283185307179586);
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint((-988.1484324940387), 1.1600000000000008, (-1923.7804));
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(6.283185307179586, 5.6663987595230925, 469.5220094);
      WeightedObservedPoint weightedObservedPoint4 = new WeightedObservedPoint(1.1735072441358972E7, 469.5220094, (-421.3));
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[5];
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint5 = new WeightedObservedPoint((-444.49), 4772.507092475107, 2550.49803622);
      weightedObservedPointArray0[1] = weightedObservedPoint5;
      weightedObservedPointArray0[2] = weightedObservedPoint2;
      weightedObservedPointArray0[3] = weightedObservedPoint4;
      weightedObservedPointArray0[4] = weightedObservedPoint0;
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      harmonicFitter_ParameterGuesser0.guess();
      System.setCurrentTimeMillis((-1443L));
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(levenbergMarquardtOptimizer0);
      harmonicFitter0.addObservedPoint(1.260000000000001, (-698.97041627698), 1.260000000000001);
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[8];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint((-4772.507092475107), 839.9744582, 839.9744582);
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      weightedObservedPointArray0[1] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint((-287.8990064), (-698.97041627698), 1648.767321);
      weightedObservedPointArray0[2] = weightedObservedPoint1;
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(839.9744582, (-287.8990064), (-4772.507092475107));
      weightedObservedPointArray0[3] = weightedObservedPoint2;
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(1.986821492305628E-8, (-4772.507092475107), (-87.9153704458));
      weightedObservedPointArray0[4] = weightedObservedPoint3;
      WeightedObservedPoint weightedObservedPoint4 = new WeightedObservedPoint((-287.8990064), (-1.7168146928204135), 839.9744582);
      weightedObservedPointArray0[5] = weightedObservedPoint4;
      WeightedObservedPoint weightedObservedPoint5 = new WeightedObservedPoint((-649.0), (-87.9153704458), (-2574.627));
      weightedObservedPointArray0[6] = weightedObservedPoint5;
      WeightedObservedPoint weightedObservedPoint6 = new WeightedObservedPoint((-2574.627), 0.0, 1.986821492305628E-8);
      weightedObservedPointArray0[7] = weightedObservedPoint6;
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      harmonicFitter_ParameterGuesser0.guess();
      System.setCurrentTimeMillis(45314242L);
      System.setCurrentTimeMillis(45314242L);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(levenbergMarquardtOptimizer0);
      harmonicFitter0.addObservedPoint(1.260000000000001, (-698.97041627698), 1.260000000000001);
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[8];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint((-4772.507092475107), 839.9744582, 839.9744582);
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint((-4772.507092475107), 462.76471563154, 1.986821492305628E-8);
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint((-287.8990064), 462.76471563154, 1648.767321);
      weightedObservedPointArray0[2] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(839.9744582, (-287.8990064), (-4772.507092475107));
      weightedObservedPointArray0[3] = weightedObservedPoint3;
      WeightedObservedPoint weightedObservedPoint4 = new WeightedObservedPoint(1.986821492305628E-8, 462.76471563154, (-87.9153704458));
      weightedObservedPointArray0[4] = weightedObservedPoint4;
      WeightedObservedPoint weightedObservedPoint5 = new WeightedObservedPoint((-287.8990064), (-1.7168146928204135), 839.9744582);
      weightedObservedPointArray0[5] = weightedObservedPoint5;
      WeightedObservedPoint weightedObservedPoint6 = new WeightedObservedPoint((-649.0), (-87.9153704458), (-2574.627));
      weightedObservedPointArray0[6] = weightedObservedPoint6;
      WeightedObservedPoint weightedObservedPoint7 = new WeightedObservedPoint(1.0, 0.0, 1.986821492305628E-8);
      weightedObservedPointArray0[7] = weightedObservedPoint7;
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      harmonicFitter_ParameterGuesser0.guess();
      System.setCurrentTimeMillis(1696L);
      System.setCurrentTimeMillis(1L);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(levenbergMarquardtOptimizer0);
      harmonicFitter0.addObservedPoint(1.260000000000001, (-698.97041627698), 1.260000000000001);
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[8];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint((-4772.507092475107), 839.9744582, 839.9744582);
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      weightedObservedPointArray0[1] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint((-287.8990064), 462.76471563154, 1648.767321);
      weightedObservedPointArray0[2] = weightedObservedPoint1;
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(839.9744582, (-287.8990064), (-4772.507092475107));
      weightedObservedPointArray0[3] = weightedObservedPoint2;
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(1.986821492305628E-8, 462.76471563154, (-87.9153704458));
      weightedObservedPointArray0[4] = weightedObservedPoint3;
      WeightedObservedPoint weightedObservedPoint4 = new WeightedObservedPoint((-287.8990064), (-1.7168146928204135), 839.9744582);
      weightedObservedPointArray0[5] = weightedObservedPoint4;
      WeightedObservedPoint weightedObservedPoint5 = new WeightedObservedPoint((-649.0), (-87.9153704458), (-2574.627));
      weightedObservedPointArray0[6] = weightedObservedPoint5;
      WeightedObservedPoint weightedObservedPoint6 = new WeightedObservedPoint(1.0, 0.0, 1.986821492305628E-8);
      weightedObservedPointArray0[7] = weightedObservedPoint6;
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      harmonicFitter_ParameterGuesser0.guess();
      System.setCurrentTimeMillis(45314242L);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(levenbergMarquardtOptimizer0);
      harmonicFitter0.addObservedPoint(1.260000000000001, (-698.97041627698), 1.260000000000001);
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[8];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint((-4772.507092475107), 839.9744582, 839.9744582);
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint((-4772.507092475107), 462.76471563154, 1.986821492305628E-8);
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint((-287.8990064), 462.76471563154, 1648.767321);
      weightedObservedPointArray0[2] = weightedObservedPoint2;
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(839.9744582, (-287.8990064), (-4772.507092475107));
      weightedObservedPointArray0[3] = weightedObservedPoint3;
      WeightedObservedPoint weightedObservedPoint4 = new WeightedObservedPoint(1.986821492305628E-8, 462.76471563154, (-87.9153704458));
      weightedObservedPointArray0[4] = weightedObservedPoint4;
      WeightedObservedPoint weightedObservedPoint5 = new WeightedObservedPoint((-287.8990064), (-1.7168146928204135), 839.9744582);
      weightedObservedPointArray0[5] = weightedObservedPoint5;
      WeightedObservedPoint weightedObservedPoint6 = new WeightedObservedPoint((-649.0), (-87.9153704458), (-2574.627));
      weightedObservedPointArray0[6] = weightedObservedPoint6;
      WeightedObservedPoint weightedObservedPoint7 = new WeightedObservedPoint(1.0, 0.0, 1.986821492305628E-8);
      weightedObservedPointArray0[7] = weightedObservedPoint7;
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      double[] doubleArray0 = harmonicFitter_ParameterGuesser0.guess();
      assertArrayEquals(new double[] {Double.NaN, Double.NaN, Double.NaN}, doubleArray0, 0.01);
      
      System.setCurrentTimeMillis(1608L);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(levenbergMarquardtOptimizer0);
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[4];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(1224.5501, 1224.5501, 1224.5501);
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(1224.5501, 1224.5501, 1224.5501);
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      // Undeclared exception!
      try { 
        harmonicFitter_ParameterGuesser0.guess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(levenbergMarquardtOptimizer0);
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[4];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(1224.5501, 1224.5501, 1224.5501);
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(1224.5501, 469.5220094, 1224.5501);
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      // Undeclared exception!
      try { 
        harmonicFitter_ParameterGuesser0.guess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(levenbergMarquardtOptimizer0);
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[5];
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      // Undeclared exception!
      try { 
        harmonicFitter_ParameterGuesser0.guess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(levenbergMarquardtOptimizer0);
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(1648.767321, 1648.767321, 1522.328);
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(1648.767321, (-1763.5009221304144), 1648.767321);
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(1648.767321, 1522.328, 1648.767321);
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(1648.767321, 1522.328, 1648.767321);
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[7];
      weightedObservedPointArray0[0] = weightedObservedPoint2;
      weightedObservedPointArray0[1] = weightedObservedPoint2;
      weightedObservedPointArray0[2] = weightedObservedPoint1;
      weightedObservedPointArray0[3] = weightedObservedPoint0;
      weightedObservedPointArray0[4] = weightedObservedPoint2;
      weightedObservedPointArray0[5] = weightedObservedPoint3;
      weightedObservedPointArray0[6] = weightedObservedPoint1;
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      harmonicFitter_ParameterGuesser0.guess();
      System.setCurrentTimeMillis((-774L));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(levenbergMarquardtOptimizer0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.1300000000000008;
      doubleArray0[1] = 0.9800000000000006;
      doubleArray0[2] = 0.9;
      doubleArray0[3] = (-1825.31716);
      doubleArray0[4] = 1.1600000000000008;
      doubleArray0[5] = (-969.892891);
      double[] doubleArray1 = harmonicFitter0.fit(doubleArray0);
      assertEquals(6, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void testPreconditions1_15()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(levenbergMarquardtOptimizer0);
      // Undeclared exception!
      try { 
        harmonicFitter0.fit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample contains 0 observed points, at least 4 are required
         //
         verifyException("org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser", e);
      }
  }
}
