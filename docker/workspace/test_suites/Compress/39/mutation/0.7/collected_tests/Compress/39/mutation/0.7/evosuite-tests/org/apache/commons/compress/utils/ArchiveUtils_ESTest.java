/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 06:03:09 GMT 2023
 */

package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.memory.MemoryArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArchiveUtils_ESTest extends ArchiveUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("A3li=E?Eh'{X{3^5J");
      String string0 = ArchiveUtils.toAsciiString(byteArray0, 6, 6);
      String string1 = ArchiveUtils.sanitize("?Eh'{X");
      assertTrue(string1.equals((Object)string0));
      
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setHasCrc(false);
      String string2 = ArchiveUtils.toString((ArchiveEntry) sevenZArchiveEntry0);
      assertEquals("-       0 null", string2);
      
      ArchiveUtils.isArrayZero(byteArray0, 6);
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0, false);
      ArchiveUtils.toAsciiString(byteArray0, 0, 0);
      boolean boolean1 = ArchiveUtils.isEqualWithNull(byteArray0, 0, 0, byteArray0, 0, 6);
      assertFalse(boolean1);
      
      boolean boolean2 = ArchiveUtils.isEqualWithNull(byteArray0, 0, 6, byteArray0, 6, 0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("A3li=E?Eh'{X{3^5J");
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      sevenZArchiveEntry0.setCrcValue(6);
      sevenZArchiveEntry0.setHasCrc(false);
      String string0 = ArchiveUtils.toString((ArchiveEntry) sevenZArchiveEntry0);
      assertEquals("-       0 null", string0);
      
      boolean boolean0 = ArchiveUtils.isArrayZero(byteArray0, 6);
      boolean boolean1 = ArchiveUtils.isEqual(byteArray0, byteArray0, false);
      assertFalse(boolean1 == boolean0);
      
      String string1 = ArchiveUtils.toAsciiString(byteArray0, 0, 0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("US-ASCII", 8589934591L, (byte)0, 100, (-2869), 0L);
      arArchiveEntry0.getLastModifiedDate();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ":KR.a");
      String string0 = ArchiveUtils.toString((ArchiveEntry) arArchiveEntry0);
      assertEquals("- 8589934591 US-ASCII", string0);
      
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "oDW/2;_[gn|;Dy,");
      String string0 = ArchiveUtils.toString((ArchiveEntry) cpioArchiveEntry0);
      assertEquals("d       0 oDW/2;_[gn|;Dy,", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("A3li=E?Eh'{X{3^5J");
      ArchiveUtils.isArrayZero(byteArray0, 6);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = ArchiveUtils.toAsciiString(byteArray0, 6, 6);
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      ArchiveUtils.sanitize("");
      sevenZArchiveEntry0.setHasAccessDate(true);
      sevenZArchiveEntry0.setAntiItem(false);
      String string1 = ArchiveUtils.toString((ArchiveEntry) sevenZArchiveEntry0);
      assertEquals("-       0 null", string1);
      
      String string2 = ArchiveUtils.sanitize("?Eh'{X");
      assertTrue(string2.equals((Object)string0));
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = ArchiveUtils.isArrayZero(byteArray0, 6);
      assertFalse(boolean0);
      
      boolean boolean1 = ArchiveUtils.isEqual(byteArray0, byteArray0, false);
      boolean boolean2 = ArchiveUtils.isEqualWithNull(byteArray0, 13, (-2), byteArray0, 6, (-1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-82);
      ArchiveUtils.isEqualWithNull(byteArray0, (byte) (-82), (byte) (-82), byteArray0, 1, (byte) (-82));
      boolean boolean0 = ArchiveUtils.isArrayZero(byteArray0, 4672);
      String string0 = ArchiveUtils.sanitize("[>55H,F~*M)~!");
      assertEquals("[>55H,F~*M)~!", string0);
      
      boolean boolean1 = ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      assertTrue(boolean1);
      
      boolean boolean2 = ArchiveUtils.isEqualWithNull(byteArray0, 0, 0, byteArray0, 1, 1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MemoryArchiveEntry memoryArchiveEntry0 = new MemoryArchiveEntry("b6A@S M7hDEB<8");
      memoryArchiveEntry0.getLastModifiedDate();
      memoryArchiveEntry0.getLastModifiedDate();
      memoryArchiveEntry0.getLastModifiedDate();
      memoryArchiveEntry0.getLastModifiedDate();
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[9];
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, 9616, (-1785), byteArray1, 2764, (-1785));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ArchiveUtils.isArrayZero(byteArray0, (-1));
      String string0 = ArchiveUtils.sanitize("(500>,NwP~");
      assertEquals("(500>,NwP~", string0);
      
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0, false);
      assertTrue(boolean0);
      
      boolean boolean1 = ArchiveUtils.isEqualWithNull(byteArray0, 549, 0, byteArray0, (-639), 0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byte byte1 = (byte)26;
      byte[] byteArray1 = new byte[9];
      byte[] byteArray2 = new byte[0];
      ArchiveUtils.isEqual(byteArray1, byteArray2);
      ArchiveUtils.isEqual(byteArray2, byteArray1, true);
      ArchiveUtils.isEqual(byteArray0, byteArray2, true);
      ArchiveUtils.toAsciiString(byteArray1);
      ArchiveUtils.sanitize("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      ArchiveUtils.isEqual(byteArray0, byteArray1, true);
      int int0 = (-956);
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray2, (-956), 5937, byteArray2, (byte)0, (-956));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1912
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("");
      byte[] byteArray1 = new byte[3];
      byteArray1[1] = (byte)27;
      byteArray1[2] = (byte)106;
      ArchiveUtils.isEqual(byteArray0, 63, 37, byteArray1, 0, 0, false);
      ArchiveUtils.isArrayZero(byteArray1, (byte)106);
      ArchiveUtils.sanitize("[>55H,F~*M)~!");
      ArchiveUtils.isEqual(byteArray0, byteArray1, true);
      int int0 = 7;
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray1, 7, 3352, byteArray1, (-3640), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("A3li=E?Eh'{X{3^5J");
      boolean boolean0 = ArchiveUtils.isArrayZero(byteArray0, 6);
      assertFalse(boolean0);
      
      boolean boolean1 = ArchiveUtils.isArrayZero(byteArray0, 109);
      boolean boolean2 = ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      assertFalse(boolean2 == boolean1);
      
      ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.toAsciiString(byteArray0, 6, 6);
      String string0 = ArchiveUtils.toAsciiString(byteArray0, 6, 7);
      assertEquals("?Eh'{X{", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("A3li=E?Eh'{X{3^5J");
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      String string0 = ArchiveUtils.toString((ArchiveEntry) sevenZArchiveEntry0);
      assertEquals("-       0 null", string0);
      
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, 0, 0, byteArray0, 0, 9553);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte byte0 = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byte[] byteArray1 = new byte[0];
      ArchiveUtils.isEqual(byteArray0, byteArray1);
      ArchiveUtils.isEqual(byteArray1, byteArray0, true);
      ArchiveUtils.toAsciiString(byteArray1);
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString(byteArray1, (-1844), (-2267));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("A3li=E?Eh'{X{3^5J");
      boolean boolean0 = ArchiveUtils.isArrayZero(byteArray0, 6);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArchiveUtils.isArrayZero(byteArray0, 109);
      boolean boolean1 = ArchiveUtils.isEqual(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      
      ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.toAsciiString(byteArray0, 6, 6);
      boolean boolean2 = ArchiveUtils.isEqualWithNull(byteArray0, 7, 3077, byteArray0, 6, 26);
      assertFalse(boolean2);
      
      boolean boolean3 = ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byte[] byteArray1 = new byte[11];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray1, byteArray0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-108);
      byte[] byteArray1 = new byte[9];
      ArchiveUtils.isEqual(byteArray1, byteArray1);
      ArchiveUtils.isEqual(byteArray1, byteArray0, true);
      ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.toAsciiString(byteArray1, 1, (int) (byte)0);
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, (byte)26, 1, byteArray0, 39, (-1473));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1447
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArchiveUtils.sanitize("After putArchive should follow closeArchive");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-16);
      byte byte0 = (byte) (-31);
      ArchiveUtils.sanitize("After putArchive should follow closeArchive");
      ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      ArchiveUtils.isArrayZero(byteArray0, (-1095));
      ArchiveUtils.isEqual(byteArray0, byteArray0);
      ArchiveUtils.isEqual(byteArray0, byteArray0, false);
      ArchiveUtils.toAsciiString(byteArray0);
      int int0 = 32;
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString(byteArray0, (int) (byte) (-31), 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)26;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)46;
      byteArray1[1] = (byte)26;
      byte[] byteArray2 = new byte[4];
      byteArray2[0] = (byte) (-108);
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte) (-105);
      byteArray3[1] = (byte)46;
      byteArray3[2] = (byte)46;
      byteArray3[3] = (byte)26;
      byteArray3[4] = (byte)26;
      byteArray3[5] = (byte)46;
      byteArray3[6] = (byte) (-108);
      byteArray3[7] = (byte) (-108);
      ArchiveUtils.isEqual(byteArray2, byteArray3, true);
      ArchiveUtils.toAsciiString(byteArray0);
      boolean boolean0 = ArchiveUtils.isEqual((byte[]) null, 661, (int) (byte)46, byteArray1, 66, (int) (byte) (-108));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        ArchiveUtils.isArrayZero(byteArray0, 1863);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("A3li=E?Eh'{X{3^5J");
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray1, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MemoryArchiveEntry memoryArchiveEntry0 = new MemoryArchiveEntry("");
      memoryArchiveEntry0.getLastModifiedDate();
      memoryArchiveEntry0.getLastModifiedDate();
      memoryArchiveEntry0.getLastModifiedDate();
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[9];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray1, byteArray0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("");
      int int0 = 6;
      byte[] byteArray1 = new byte[3];
      byte byte0 = (byte)0;
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)100;
      byteArray1[2] = (byte)106;
      ArchiveUtils.isArrayZero(byteArray1, 1863);
      ArchiveUtils.sanitize("");
      ArchiveUtils.isEqual(byteArray1, byteArray0, true);
      // Undeclared exception!
      try { 
        ArchiveUtils.isArrayZero(byteArray0, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("A3li=E?Eh'{X{3^5J");
      ArchiveUtils.isArrayZero(byteArray0, 6);
      ArchiveUtils.sanitize("");
      ArchiveUtils.isEqual(byteArray0, byteArray0, false);
      ArchiveUtils.isArrayZero(byteArray0, 109);
      ArchiveUtils.isEqual(byteArray0, byteArray0);
      ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.toAsciiString(byteArray0, 6, 6);
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, (-1065), (-234), byteArray0, 1, 109);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -233
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = ArchiveUtils.sanitize("HV)hu}(X)OI]\"Hqo+");
      assertEquals("HV?)hu}(X)OI]\"Hqo+", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-108);
      ArchiveUtils.toAsciiString(byteArray0);
      String string0 = ArchiveUtils.sanitize(".\uFFFD\u0000");
      assertEquals(".??", string0);
      
      ArchiveUtils.sanitize(".??");
      String string1 = ArchiveUtils.sanitize("7P(hj|:_=");
      assertEquals("7P(hj|:_=", string1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-77);
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, 1593, (byte) (-77), byteArray0, 1, (byte) (-77));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte)0;
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, (int) (byte) (-25), (int) (byte) (-65), byteArray0, (-2775), (int) (byte) (-65));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-14);
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-29);
      ArchiveUtils.isEqual(byteArray0, byteArray0);
      ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.matchAsciiBuffer("\uFFFD\uFFFD\uFFFD\uFFFD", byteArray0);
      byte[] byteArray1 = ArchiveUtils.toAsciiBytes("\uFFFD\uFFFD\uFFFD\uFFFD");
      ArchiveUtils.isEqual(byteArray0, byteArray1);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-68);
      byteArray2[1] = (byte) (-29);
      byteArray2[2] = (byte) (-14);
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString(byteArray2, 497, (-1692));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)100;
      boolean boolean0 = ArchiveUtils.isArrayZero(byteArray0, (-314));
      boolean boolean1 = ArchiveUtils.isEqual(byteArray0, (int) (byte) (-6), (-6611), byteArray0, (int) (byte) (-6), 3837);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("A3li=}EcEh'{K{f3^5");
      assertEquals(18, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("A3li=E?Eh'{X{3^5J");
      boolean boolean0 = ArchiveUtils.isArrayZero(byteArray0, 6);
      assertFalse(boolean0);
      
      String string0 = ArchiveUtils.sanitize("A3li=E?Eh'{X{3^5J");
      assertEquals("A3li=E?Eh'{X{3^5J", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqual((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-76);
      boolean boolean0 = ArchiveUtils.isArrayZero(byteArray0, (byte) (-76));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-125);
      int int0 = (-5);
      ArchiveUtils.isEqual(byteArray0, 2, (-505), byteArray0, (-505), (-5));
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)118);
      String string0 = null;
      tarArchiveEntry0.setGroupId((long) (-505));
      tarArchiveEntry0.setGroupName("SCHILY.devmajor");
      tarArchiveEntry0.setGroupId((int) (byte)118);
      tarArchiveEntry0.setGroupName((String) null);
      tarArchiveEntry0.setMode((-2544));
      tarArchiveEntry0.setDevMajor((byte)118);
      tarArchiveEntry0.getModTime();
      ArchiveUtils.toString((ArchiveEntry) tarArchiveEntry0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)118;
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqual(byteArray0, 45, 511, byteArray1, 5, 6, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 45
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = ArchiveUtils.sanitize("V`>PSif>");
      assertEquals("V`>PSif>", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-82);
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, (byte) (-82), (byte) (-82), byteArray0, 1, (byte) (-82));
      assertTrue(boolean0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry(" g%]]*))yqd[</ch/");
      String string0 = ArchiveUtils.toString((ArchiveEntry) jarArchiveEntry0);
      assertEquals("d      -1  g%]]*))yqd[</ch/", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MemoryArchiveEntry memoryArchiveEntry0 = new MemoryArchiveEntry("");
      memoryArchiveEntry0.getLastModifiedDate();
      memoryArchiveEntry0.getLastModifiedDate();
      memoryArchiveEntry0.getLastModifiedDate();
      ArchiveUtils.toString((ArchiveEntry) memoryArchiveEntry0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqual(byteArray0, (-1633), (-1633), (byte[]) null, 321, 321, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      String string0 = ArchiveUtils.toString((ArchiveEntry) dumpArchiveEntry0);
      assertEquals("-       0 null", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, (-3913), (-3913), byteArray0, 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3913
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString(byteArray0, 33, 33);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, (-1083), (-1083), byteArray0, (-1083), (-1083));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("{3Wa$P~,;#CR");
      boolean boolean0 = ArchiveUtils.matchAsciiBuffer("", byteArray0, (-2481), 49152);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte) (-89);
      boolean boolean0 = ArchiveUtils.matchAsciiBuffer("US-ASCII", byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)74;
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray1, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[9];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray1, byteArray0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[9];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray1, byteArray0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)46;
      ArchiveUtils.toAsciiString(byteArray0);
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, 86, (int) (byte) (-108), byteArray0, 770, (-2539));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte) (-38);
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, 2248, (int) (byte)43, byteArray0, (int) (byte)67, (int) (byte) (-38));
      assertFalse(boolean0);
  }
}
