/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 19:31:22 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.XmlDeclaration;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Comment_ESTest extends Comment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comment comment0 = new Comment("!!!2]u;LHs<1;:g^#$d1s");
      boolean boolean0 = comment0.isXmlDeclaration();
      assertEquals("#comment", comment0.nodeName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comment comment0 = new Comment("!?xml version=\"1.0\" encoding=\"ISO-8859-1\"?");
      comment0.childNodesCopy();
      comment0.childNodesAsArray();
      comment0.toString();
      comment0.toString();
      comment0.isXmlDeclaration();
      MockPrintStream mockPrintStream0 = new MockPrintStream("\n<!--!?xml version=\"1.0\" encoding=\"ISO-8859-1\"?-->");
      int int0 = 97;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      // Undeclared exception!
      try { 
        document_OutputSettings0.charset("!?xml version=\"1.0\" encoding=\"ISO-8859-1\"?");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // !?xml version=\"1.0\" encoding=\"ISO-8859-1\"?
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comment comment0 = new Comment("??xml version=\"1.0\" encoding=\"ISO-8859-1");
      // Undeclared exception!
      try { 
        comment0.asXmlDeclaration();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comment comment0 = new Comment("IENMz#vBO(Ci0Q8bS.");
      comment0.isXmlDeclaration();
      boolean boolean0 = comment0.isXmlDeclaration();
      assertFalse(boolean0);
      
      comment0.getData();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Comment comment1 = new Comment("<", "!");
      comment1.isXmlDeclaration();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("!", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      document_OutputSettings0.prettyPrint(false);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      comment0.outerHtmlHead(mockPrintStream0, 12, document_OutputSettings1);
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comment comment0 = new Comment("pACWA]LK");
      boolean boolean0 = comment0.isXmlDeclaration();
      assertEquals("#comment", comment0.nodeName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comment comment0 = new Comment("IENMz#vBO(Ci0Q8bS.");
      comment0.childNodesCopy();
      comment0.childNodesAsArray();
      comment0.asXmlDeclaration();
      comment0.clearAttributes();
      comment0.isXmlDeclaration();
      comment0.getData();
      comment0.getData();
      // Undeclared exception!
      try { 
        comment0.asXmlDeclaration();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comment comment0 = new Comment("");
      boolean boolean0 = comment0.isXmlDeclaration();
      assertEquals("#comment", comment0.nodeName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comment comment0 = new Comment(",:HBkQx\"");
      // Undeclared exception!
      try { 
        comment0.asXmlDeclaration();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comment comment0 = new Comment("@G(w|hD");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "@G(w|hD");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(false);
      comment0.previousSibling();
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.prettyPrint(false);
      comment0.outerHtmlHead(stringBuffer0, (-1537), document_OutputSettings4);
      assertEquals("@G(w|hD<!--@G(w|hD-->", stringBuffer0.toString());
      
      comment0.isXmlDeclaration();
      boolean boolean0 = comment0.isXmlDeclaration();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comment comment0 = new Comment("<textare>hello world</?fake</textarea>");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      assertEquals("#comment", comment0.nodeName());
      assertNotNull(xmlDeclaration0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comment comment0 = new Comment("@-s{RJ\u0004 W", "@-s{RJ\u0004 W");
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comment comment0 = new Comment("}BT`k>uxhqGvA\"", "}BT`k>uxhqGvA\"");
      String string0 = comment0.toString();
      assertEquals("\n<!--}BT`k>uxhqGvA\"-->", string0);
      assertEquals("#comment", comment0.nodeName());
  }
}
