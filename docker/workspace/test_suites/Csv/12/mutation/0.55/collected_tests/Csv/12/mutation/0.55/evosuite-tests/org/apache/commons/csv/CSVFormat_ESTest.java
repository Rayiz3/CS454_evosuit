/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 17:57:49 GMT 2023
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.StringWriter;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVFormat_ESTest extends CSVFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      // Undeclared exception!
      try { 
        cSVFormat0.withDelimiter('\r');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The delimiter cannot be a line break
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('\r');
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start marker character cannot be a line break
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        CSVFormat.newFormat('\n');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The delimiter cannot be a line break
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      // Undeclared exception!
      try { 
        cSVFormat0.withEscape('\r');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character cannot be a line break
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('\r');
      // Undeclared exception!
      try { 
        cSVFormat0.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar cannot be a line break
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        CSVFormat.newFormat('\r');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The delimiter cannot be a line break
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('z');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("652hN");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator("/$h");
      boolean boolean0 = cSVFormat4.equals(cSVFormat5);
      assertFalse(boolean0);
      assertTrue(cSVFormat4.getAllowMissingColumnNames());
      
      CSVFormat cSVFormat6 = cSVFormat3.withRecordSeparator("/$h");
      assertTrue(cSVFormat6.equals((Object)cSVFormat5));
      assertEquals('z', (char)cSVFormat6.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      
      CSVFormat cSVFormat7 = CSVFormat.newFormat('>');
      assertFalse(cSVFormat7.getSkipHeaderRecord());
      assertEquals('>', cSVFormat7.getDelimiter());
      assertFalse(cSVFormat7.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("5]tCJFs");
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals("5]tCJFs", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      
      cSVFormat1.equals(cSVFormat0);
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      
      cSVFormat1.hashCode();
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("5]tCJFs", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      boolean boolean0 = cSVFormat1.equals(cSVFormat0);
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote((Character) null);
      boolean boolean0 = cSVFormat1.equals(cSVFormat0);
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(boolean0);
      
      boolean boolean1 = cSVFormat0.equals((Object) null);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object object0 = new Object();
      cSVFormat0.equals(object0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "T";
      stringArray0[1] = "";
      stringArray0[2] = "'>sI";
      stringArray0[3] = "R";
      stringArray0[4] = "MaVkN7\"Ip(O}p%";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("(!Aj!=IZ[L+5?.");
      cSVFormat2.hashCode();
      Character character0 = Character.valueOf('#');
      cSVFormat1.withQuote(character0);
      Character character1 = new Character('#');
      CSVFormat cSVFormat3 = cSVFormat1.withEscape(character1);
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\\');
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('\\', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<\\> SkipHeaderRecord:false", string0);
      
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertTrue(boolean0);
      
      cSVFormat1.hashCode();
      cSVFormat1.EXCEL.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("8");
      cSVFormat1.equals(cSVFormat2);
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "u`w+yF'[";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat1.format(stringArray0);
      Character character0 = new Character(',');
      // Undeclared exception!
      try { 
        cSVFormat0.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      boolean boolean0 = cSVFormat0.equals(cSVFormat0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(stringArray0);
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(boolean0);
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.hashCode();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("ymMf%$");
      cSVFormat1.equals(cSVFormat0);
      String string0 = cSVFormat1.toString();
      assertEquals("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<ymMf%$> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", string0);
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("5]tCJFs");
      cSVFormat0.equals(cSVFormat1);
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals("5]tCJFs", cSVFormat1.getNullString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(stringArray0);
      String string0 = cSVFormat1.toString();
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[null]", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('0');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);
      cSVFormat1.equals(cSVFormat2);
      Character character0 = Character.valueOf('0');
      // Undeclared exception!
      try { 
        cSVFormat2.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('0')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      boolean boolean0 = cSVFormat1.equals(cSVFormat2);
      assertFalse(boolean0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat0.TDF.print(stringWriter0);
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('\\');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('#');
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('#');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat4 = cSVFormat3.EXCEL.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat5 = cSVFormat1.withCommentMarker((Character) null);
      cSVFormat2.getDelimiter();
      cSVFormat2.getDelimiter();
      cSVFormat5.getEscapeCharacter();
      cSVFormat3.getCommentMarker();
      CSVFormat cSVFormat6 = cSVFormat3.withSkipHeaderRecord(false);
      boolean boolean0 = cSVFormat1.equals(cSVFormat5);
      assertEquals('\\', cSVFormat5.getDelimiter());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertTrue(boolean0);
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      
      cSVFormat6.getNullString();
      cSVFormat4.getHeader();
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.isNullStringSet());
      assertTrue(cSVFormat3.equals((Object)cSVFormat6));
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\\');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker((Character) null);
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\\', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertTrue(boolean0);
      assertFalse(cSVFormat1.getSkipHeaderRecord());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker('\"');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('\"')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      boolean boolean0 = cSVFormat1.equals(cSVFormat2);
      assertFalse(boolean0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat1.hashCode();
      cSVFormat0.withCommentMarker('*');
      cSVFormat2.hashCode();
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      cSVFormat0.equals(cSVFormat1);
      cSVFormat1.hashCode();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.getEscapeCharacter();
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      boolean boolean0 = cSVFormat1.equals(cSVFormat2);
      assertTrue(boolean0);
      
      String string0 = cSVFormat2.toString();
      assertEquals("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", string0);
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = cSVFormat0.getHeader();
      assertNull(stringArray0);
      
      cSVFormat0.getEscapeCharacter();
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("The delimiter cannot be a line break");
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('f');
      assertEquals('f', cSVFormat3.getDelimiter());
      
      cSVFormat0.equals(cSVFormat2);
      assertFalse(cSVFormat2.isNullStringSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.equals((Object)cSVFormat3));
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertEquals('\t', cSVFormat1.getDelimiter());
      
      CSVFormat cSVFormat4 = CSVFormat.RFC4180;
      cSVFormat4.DEFAULT.toString();
      String string0 = cSVFormat4.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\\');
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<\\> SkipHeaderRecord:false", string0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('(');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('#');
      Character character0 = Character.valueOf('6');
      cSVFormat1.withCommentMarker(character0);
      cSVFormat1.getDelimiter();
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);
      cSVFormat4.getDelimiter();
      cSVFormat0.getEscapeCharacter();
      cSVFormat1.getIgnoreSurroundingSpaces();
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker('u');
      cSVFormat5.getIgnoreEmptyLines();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "FU_Y3";
      stringArray0[1] = "')";
      CSVFormat cSVFormat6 = cSVFormat1.withHeader(stringArray0);
      cSVFormat0.equals(cSVFormat6);
      String string0 = cSVFormat5.toString();
      assertEquals("Delimiter=<,> Escape=<\\> QuoteChar=<\"> CommentStart=<u> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
      
      cSVFormat4.getSkipHeaderRecord();
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertTrue(cSVFormat4.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.equals((Object)cSVFormat5));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.getHeader();
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('P');
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('P', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      
      Object object0 = new Object();
      boolean boolean0 = cSVFormat0.equals(object0);
      assertFalse(boolean0);
      
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", string0);
      
      boolean boolean1 = cSVFormat0.getSkipHeaderRecord();
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('x');
      boolean boolean0 = cSVFormat1.equals(cSVFormat0);
      assertFalse(boolean0);
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('x', (char)cSVFormat1.getCommentMarker());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.getIgnoreEmptyLines();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("%c:`7");
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
      cSVFormat0.getEscapeCharacter();
      Object object0 = new Object();
      boolean boolean0 = cSVFormat1.equals(object0);
      assertFalse(boolean0);
      
      String string0 = cSVFormat1.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> NullString=<%c:`7> RecordSeparator=<\r\n> SkipHeaderRecord:false", string0);
      
      cSVFormat2.getHeader();
      Character character0 = new Character('=');
      Character character1 = new Character('u');
      CSVFormat cSVFormat3 = cSVFormat0.withQuote(character1);
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.RFC4180.withSkipHeaderRecord(false);
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      cSVFormat0.withCommentMarker('#');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('#');
      cSVFormat1.hashCode();
      cSVFormat2.getDelimiter();
      cSVFormat2.getEscapeCharacter();
      cSVFormat1.getQuoteCharacter();
      cSVFormat1.getIgnoreSurroundingSpaces();
      cSVFormat1.getIgnoreEmptyLines();
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      
      cSVFormat2.equals((Object) null);
      String string0 = cSVFormat2.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> CommentStart=<#> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.TDF.format(objectArray0);
      cSVFormat0.hashCode();
      assertTrue(cSVFormat0.isQuoteCharacterSet());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      String string0 = cSVFormat1.DEFAULT.format(stringArray0);
      assertEquals("\"\"", string0);
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      
      cSVFormat0.hashCode();
      assertTrue(cSVFormat0.isQuoteCharacterSet());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('%');
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertFalse(boolean0);
      
      cSVFormat1.equals(cSVFormat0);
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('%', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\u000E');
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker('\u000E');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('\u000E')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('W');
      cSVFormat0.getHeader();
      String string0 = cSVFormat1.toString();
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("Delimiter=<,> QuoteChar=<\"> CommentStart=<W> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('*');
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      
      CSVFormat cSVFormat3 = CSVFormat.newFormat('|');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('\\');
      assertEquals('\\', (char)cSVFormat4.getCommentMarker());
      
      char char0 = cSVFormat3.getDelimiter();
      assertEquals('|', char0);
      
      cSVFormat0.getEscapeCharacter();
      cSVFormat0.getQuoteCharacter();
      cSVFormat0.getCommentMarker();
      cSVFormat3.getIgnoreEmptyLines();
      Object object0 = new Object();
      cSVFormat3.equals(object0);
      cSVFormat3.hashCode();
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\\');
      cSVFormat0.hashCode();
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('\\', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        cSVFormat0.TDF.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'null' in [null, null, null, null, null, null, null, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\\');
      // Undeclared exception!
      try { 
        cSVFormat0.withQuote('\\');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('\\')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        cSVFormat0.withDelimiter('\\');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('\\')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuoteMode(quoteMode0);
      boolean boolean0 = cSVFormat0.isNullStringSet();
      boolean boolean1 = cSVFormat1.equals(cSVFormat0);
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(boolean1 == boolean0);
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withDelimiter('\\');
      assertEquals('\\', cSVFormat2.getDelimiter());
      
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('#');
      CSVFormat cSVFormat4 = cSVFormat0.withCommentMarker('#');
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker((Character) null);
      cSVFormat3.getDelimiter();
      cSVFormat5.getDelimiter();
      cSVFormat5.getEscapeCharacter();
      cSVFormat5.getCommentMarker();
      boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
      assertFalse(boolean0);
      
      boolean boolean1 = cSVFormat4.getIgnoreEmptyLines();
      boolean boolean2 = cSVFormat5.equals(cSVFormat4);
      assertTrue(cSVFormat5.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(boolean2 == boolean1);
      assertFalse(cSVFormat5.equals((Object)cSVFormat2));
      assertFalse(cSVFormat4.equals((Object)cSVFormat5));
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('P');
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('P', (char)cSVFormat1.getCommentMarker());
      assertFalse(boolean0);
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.getIgnoreEmptyLines();
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
      Character character0 = new Character('2');
      cSVFormat3.withEscape(character0);
      cSVFormat3.hashCode();
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.equals((Object)cSVFormat1));
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertTrue(cSVFormat3.getSkipHeaderRecord());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('#');
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker('#');
      cSVFormat2.getDelimiter();
      Character character0 = cSVFormat1.getEscapeCharacter();
      assertEquals('\\', (char)character0);
      
      Character character1 = cSVFormat3.getQuoteCharacter();
      assertEquals('\"', (char)character1);
      
      CSVFormat cSVFormat4 = cSVFormat2.withQuote(character1);
      cSVFormat4.getCommentMarker();
      cSVFormat0.getIgnoreSurroundingSpaces();
      cSVFormat0.getIgnoreEmptyLines();
      boolean boolean0 = cSVFormat4.getAllowMissingColumnNames();
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(boolean0);
      assertTrue(cSVFormat4.equals((Object)cSVFormat3));
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('!');
      CSVFormat cSVFormat3 = cSVFormat2.DEFAULT.withNullString((String) null);
      CSVFormat cSVFormat4 = cSVFormat3.TDF.withCommentMarker('\\');
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      
      CSVFormat cSVFormat5 = cSVFormat0.withEscape('!');
      cSVFormat5.getDelimiter();
      Character character0 = cSVFormat2.getEscapeCharacter();
      assertEquals('!', (char)character0);
      
      cSVFormat0.getQuoteCharacter();
      cSVFormat5.getCommentMarker();
      cSVFormat1.getIgnoreSurroundingSpaces();
      cSVFormat5.getIgnoreEmptyLines();
      boolean boolean0 = cSVFormat0.isNullStringSet();
      assertFalse(boolean0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      boolean boolean0 = cSVFormat0.isNullStringSet();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('P');
      cSVFormat1.hashCode();
      assertEquals('P', (char)cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withEscape('\\');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('#');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('#');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker((Character) null);
      cSVFormat1.getDelimiter();
      cSVFormat0.getEscapeCharacter();
      cSVFormat0.getQuoteCharacter();
      Character character0 = cSVFormat1.getCommentMarker();
      assertEquals('#', (char)character0);
      
      boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
      cSVFormat2.getIgnoreEmptyLines();
      boolean boolean1 = cSVFormat0.isQuoteCharacterSet();
      assertFalse(boolean1 == boolean0);
      
      cSVFormat2.hashCode();
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[0];
      cSVFormat0.EXCEL.format(objectArray0);
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.hashCode();
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat0.DEFAULT.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('U');
      assertEquals('U', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullStringSet());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      boolean boolean0 = cSVFormat0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", string0);
      
      boolean boolean0 = cSVFormat0.equals("Delimiter=<\t> Escape=<> RecordSeparator=<\n> SkipHeaderRecord:false");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void testEscapedControlCharactertestEscapedControlCharacter_64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('!');
      CSVFormat cSVFormat3 = cSVFormat0.withEscape('!');
      char char0 = cSVFormat3.getDelimiter();
      assertEquals(',', char0);
      
      Character character0 = cSVFormat3.getEscapeCharacter();
      assertEquals('!', (char)character0);
      
      Character character1 = cSVFormat3.getQuoteCharacter();
      assertEquals('\"', (char)character1);
      
      cSVFormat3.getCommentMarker();
      boolean boolean0 = cSVFormat3.getIgnoreSurroundingSpaces();
      boolean boolean1 = cSVFormat3.getIgnoreEmptyLines();
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertTrue(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(boolean1 == boolean0);
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertTrue(boolean1);
      
      boolean boolean2 = cSVFormat1.equals((Object) null);
      assertFalse(boolean2 == boolean1);
      
      cSVFormat1.hashCode();
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker('\\');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('\\')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat1.hashCode();
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullStringSet());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader(stringArray0);
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('#');
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.getEscapeCharacter();
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedReader pipedReader0 = new PipedReader();
      CSVParser cSVParser0 = cSVFormat0.RFC4180.parse(pipedReader0);
      assertEquals(0L, cSVParser0.getCurrentLineNumber());
  }
}
