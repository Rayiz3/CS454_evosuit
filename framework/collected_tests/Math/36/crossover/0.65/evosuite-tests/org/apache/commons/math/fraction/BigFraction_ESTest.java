/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 17 00:30:22 GMT 2023
 */

package org.apache.commons.math.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0012644892673496777, 2);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.TWO.pow(1996L);
      BigFraction bigFraction2 = bigFraction0.negate();
      bigFraction2.ONE_QUARTER.toString();
      bigFraction0.intValue();
      bigFraction2.hashCode();
      BigFraction bigFraction3 = new BigFraction(0.0012644892673497332);
      String string0 = bigFraction3.ONE.toString();
      assertEquals("1", string0);
      
      int int0 = bigFraction3.getDenominatorAsInt();
      assertEquals(0, int0);
      
      double double0 = bigFraction0.percentageValue();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = bigFraction1.percentageValue();
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      
      BigFraction bigFraction4 = new BigFraction(0.0);
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertTrue(bigFraction4.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1454.6860796));
      // Undeclared exception!
      try { 
        bigFraction0.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.ONE;
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0);
      assertEquals((short)1, bigFraction0.shortValue());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-96);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.pow(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.FOUR_FIFTHS.divide(1500L);
      bigFraction0.THREE_FIFTHS.pow((long) (byte) (-96));
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction0.subtract(bigInteger1);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertEquals((byte)1, bigFraction0.byteValue());
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      
      BigFraction bigFraction4 = BigFraction.THREE_FIFTHS;
      assertFalse(bigFraction4.equals((Object)bigFraction2));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(Integer.MAX_VALUE, 9007198788124672L);
      bigFraction0.toString();
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(9007198788124663L, 9007198788124663L, (-1719));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 9,007,198,788,124,663 to fraction (9,007,198,788,124,663/1)
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.pow(2147483647L);
      BigFraction bigFraction3 = bigFraction0.subtract(bigFraction2);
      assertEquals((short)0, bigFraction3.shortValue());
      
      BigFraction bigFraction4 = BigFraction.TWO_QUARTERS;
      int int0 = bigFraction4.intValue();
      int int1 = bigFraction4.hashCode();
      assertFalse(int1 == int0);
      
      bigFraction1.getDenominatorAsInt();
      bigFraction0.percentageValue();
      BigFraction bigFraction5 = bigFraction2.add(bigFraction1);
      assertEquals((short)2, bigFraction5.shortValue());
      
      BigFraction bigFraction6 = BigFraction.ONE_QUARTER;
      bigFraction6.getDenominatorAsLong();
      bigFraction2.pow((long) 0);
      BigFraction bigFraction7 = BigFraction.ONE_FIFTH;
      bigFraction7.pow(bigInteger0);
      boolean boolean0 = bigFraction4.equals(bigFraction0);
      assertTrue(bigFraction0.equals((Object)bigFraction2));
      assertFalse(bigFraction0.equals((Object)bigFraction5));
      assertFalse(boolean0);
      assertFalse(bigFraction0.equals((Object)bigFraction6));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(Integer.MAX_VALUE, 9007198788124672L);
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertSame(bigFraction2, bigFraction0);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((short)0, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = new BigFraction(0.0012644892673496777, 2729);
      bigFraction0.intValue();
      double double0 = bigFraction0.pow((-2352.32611613));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      BigFraction bigFraction2 = new BigFraction(bigInteger0);
      BigFraction bigFraction3 = bigFraction0.subtract(bigFraction2);
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertSame(bigFraction3, bigFraction0);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0);
      // Undeclared exception!
      try { 
        bigFraction0.TWO_FIFTHS.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.bigDecimalValue();
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.multiply(355L);
      BigFraction bigFraction2 = bigFraction0.multiply(7205759403792974L);
      BigFraction bigFraction3 = bigFraction0.subtract(7205759403792974L);
      bigFraction0.TWO_FIFTHS.getDenominatorAsLong();
      BigFraction bigFraction4 = bigFraction2.pow(572);
      BigFraction bigFraction5 = bigFraction3.pow(bigInteger0);
      bigFraction0.intValue();
      bigFraction0.subtract(355L);
      BigFraction bigFraction6 = bigFraction0.ZERO.abs();
      bigFraction2.getField();
      BigFraction bigFraction7 = bigFraction5.divide(bigFraction4);
      assertEquals((short)0, bigFraction7.shortValue());
      
      BigFraction bigFraction8 = bigFraction2.ONE_HALF.subtract(2);
      assertEquals((byte) (-1), bigFraction8.byteValue());
      
      bigFraction0.toString();
      bigFraction1.divide(7205759403792974L);
      BigFraction bigFraction9 = bigFraction0.divide(bigFraction4);
      assertFalse(bigFraction9.equals((Object)bigFraction6));
      assertNotSame(bigFraction9, bigFraction6);
      
      BigFraction bigFraction10 = bigFraction1.subtract(bigFraction3);
      assertEquals((byte)33, bigFraction10.byteValue());
      
      int int0 = bigFraction1.getNumeratorAsInt();
      assertEquals(213, int0);
      
      bigFraction1.subtract(bigInteger0);
      assertFalse(bigFraction0.equals((Object)bigFraction6));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)15;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction0 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = BigFraction.ZERO;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertSame(bigFraction2, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = bigFraction0.TWO.pow((-1573L));
      BigFraction bigFraction2 = bigFraction1.reduce();
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483646, (-437));
      BigFraction bigFraction1 = new BigFraction((double) (-437));
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.FOUR_FIFTHS.subtract(bigInteger0);
      int int0 = bigFraction0.TWO_QUARTERS.compareTo(bigFraction1);
      assertEquals((short) (-437), bigFraction1.shortValue());
      assertEquals(1, int0);
      
      double double0 = bigFraction0.pow((double) 2147483646);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = bigFraction0.pow(0.09090909090909094);
      assertEquals((byte)26, bigFraction0.byteValue());
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      bigInteger0.shortValueExact();
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.THREE_FIFTHS.bigDecimalValue();
      bigFraction0.pow((double) (short)10);
      BigFraction bigFraction1 = BigFraction.ZERO;
      bigFraction1.TWO_QUARTERS.pow((-1.0));
      BigFraction bigFraction2 = null;
      bigFraction0.TWO.intValue();
      // Undeclared exception!
      try { 
        bigFraction1.ONE_FIFTH.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      bigInteger0.clearBit(17691);
      bigFraction0.ONE_QUARTER.divide(bigInteger0);
      bigFraction1.TWO.floatValue();
      bigFraction1.TWO_QUARTERS.floatValue();
      bigFraction1.getDenominator();
      bigFraction1.getDenominatorAsInt();
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue(2630, (-3996));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(1870L);
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((byte)77, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      String string0 = bigFraction0.toString();
      assertEquals("-1", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4.590717870289751E-7, 4.590717870289751E-7, 385);
      bigFraction0.ZERO.multiply(385);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_FIFTH.bigDecimalValue(11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.9292498999998315);
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.3282890219894906E230));
      assertEquals((short)0, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      BigFraction bigFraction2 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction3 = bigFraction1.ZERO.pow(9193070505571053912L);
      BigFraction bigFraction4 = bigFraction1.TWO_FIFTHS.subtract(bigFraction3);
      bigFraction1.ONE_THIRD.intValue();
      bigFraction1.TWO_FIFTHS.hashCode();
      bigFraction2.FOUR_FIFTHS.getDenominatorAsInt();
      bigFraction3.THREE_FIFTHS.percentageValue();
      bigFraction1.percentageValue();
      bigFraction1.getDenominatorAsInt();
      bigFraction0.multiply(bigFraction3);
      bigFraction4.floatValue();
      // Undeclared exception!
      try { 
        bigFraction4.bigDecimalValue(0, (-1268));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(7L, (-1483L));
      assertEquals((short)0, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-4391), (-2858));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)23;
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      bigFraction0.TWO.divide(bigFraction1);
      bigFraction1.THREE_QUARTERS.getNumeratorAsLong();
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte) (-22);
      byteArray0[6] = (byte) (-33);
      byteArray0[7] = (byte)31;
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((-2858), byteArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid signum value
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.divide((long) (-1250));
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(2337.5563552, (-1250), (-1250));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 2,337.556 to fraction after -1,250 iterations
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.MINUS_ONE.pow(2114445438);
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(9007198788124663L, 9007198788124663L, (-1719));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 9,007,198,788,124,663 to fraction (9,007,198,788,124,663/1)
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9007198788124669L, 9007198788124669L);
      assertEquals((short)1, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0);
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.subtract(2075);
      assertEquals((short) (-2074), bigFraction1.shortValue());
      assertEquals((short)1, bigFraction0.shortValue());
      
      BigFraction bigFraction2 = BigFraction.ONE_HALF;
      assertFalse(bigFraction2.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.THREE_QUARTERS.getDenominatorAsInt();
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      double double0 = bigFraction0.percentageValue();
      assertEquals(75.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.ONE;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_QUARTER.bigDecimalValue(629);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.TWO_FIFTHS.getNumeratorAsLong();
      bigFraction0.TWO_QUARTERS.getField();
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.ONE_HALF.subtract(bigFraction1);
      bigFraction0.add(15L);
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction3 = bigFraction0.add(2L);
      BigFraction bigFraction4 = bigFraction3.divide(bigFraction0);
      BigInteger bigInteger1 = bigFraction4.getNumerator();
      bigFraction4.ONE_THIRD.toString();
      bigFraction4.TWO_FIFTHS.pow((double) 2L);
      int int0 = 402;
      bigFraction3.ONE_FIFTH.divide(402);
      bigFraction1.add(13L);
      bigFraction0.THREE_QUARTERS.multiply(bigInteger1);
      BigFraction bigFraction5 = bigFraction4.add(13L);
      bigFraction5.THREE_QUARTERS.reduce();
      BigFraction bigFraction6 = bigFraction5.TWO_FIFTHS.divide(402);
      bigFraction6.FOUR_FIFTHS.divide(bigInteger1);
      bigFraction6.multiply(757);
      bigFraction6.THREE_QUARTERS.longValue();
      int int1 = (-427);
      bigFraction1.pow((-427));
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue(402, 402);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-5107));
      BigFraction bigFraction1 = bigFraction0.divide(1241);
      assertEquals((short) (-4), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      bigFraction0.TWO.getNumeratorAsInt();
      BigFraction bigFraction1 = bigFraction0.reduce();
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.9190849000001435, (-1437));
      boolean boolean0 = bigFraction0.ONE_HALF.equals(bigFraction0);
      assertFalse(boolean0);
      
      double double0 = bigFraction0.pow(0.9190849000001435);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      bigFraction1.MINUS_ONE.longValue();
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertEquals((byte)0, bigFraction2.byteValue());
      
      String string0 = bigFraction0.toString();
      assertEquals("2 / 3", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(6374522, 6374522);
      String string0 = bigFraction0.toString();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.14159265358979312, Integer.MAX_VALUE);
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.TWO_QUARTERS.add(233);
      bigFraction0.toString();
      Random.setNextRandom(233);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.abs();
      BigFraction bigFraction2 = bigFraction1.negate();
      assertEquals((byte)0, bigFraction2.byteValue());
      
      bigFraction1.getDenominatorAsLong();
      assertFalse(bigFraction0.equals((Object)bigFraction2));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.negate();
      bigFraction0.ONE_HALF.floatValue();
      BigFraction bigFraction2 = bigFraction0.ZERO.subtract(4222124650659868L);
      bigFraction1.ONE_HALF.bigDecimalValue();
      BigFraction bigFraction3 = bigFraction0.reciprocal();
      bigFraction3.TWO_FIFTHS.bigDecimalValue();
      bigFraction3.add((-3276));
      bigFraction3.ZERO.intValue();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-70);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction4 = bigFraction2.add(bigInteger0);
      float float0 = bigFraction4.ONE_QUARTER.floatValue();
      assertEquals(0.25F, float0, 0.01F);
      
      BigFraction bigFraction5 = bigFraction3.add(bigFraction2);
      BigFraction bigFraction6 = bigFraction5.TWO_QUARTERS.add((int) (byte) (-70));
      BigFraction bigFraction7 = bigFraction3.add(bigFraction2);
      bigFraction6.getDenominatorAsLong();
      assertTrue(bigFraction5.equals((Object)bigFraction7));
      assertEquals((short) (-24), bigFraction5.shortValue());
      assertEquals((byte) (-69), bigFraction6.byteValue());
      
      BigFraction bigFraction8 = bigFraction3.add(4222124650659868L);
      bigFraction8.FOUR_FIFTHS.abs();
      BigFraction bigFraction9 = bigFraction2.abs();
      assertEquals((byte)28, bigFraction9.byteValue());
      
      double double0 = bigFraction3.pow(1875.9);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.14159265358979312, Integer.MAX_VALUE);
      bigFraction0.ONE_THIRD.intValue();
      double double0 = bigFraction0.ONE.pow((double) 0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.add(769L);
      assertEquals((short)769, bigFraction1.shortValue());
      
      BigFraction bigFraction2 = BigFraction.TWO_QUARTERS;
      assertFalse(bigFraction2.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.multiply(bigInteger0);
      assertEquals((short)4, bigFraction1.shortValue());
      
      BigFraction bigFraction2 = bigFraction0.add(bigFraction0);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((byte)1, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      float float0 = bigFraction0.THREE_QUARTERS.floatValue();
      assertEquals(0.75F, float0, 0.01F);
      
      String string0 = bigFraction0.toString();
      assertEquals("2 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.multiply(1L);
      Object object0 = new Object();
      boolean boolean0 = bigFraction1.ONE_QUARTER.equals(object0);
      assertFalse(boolean0);
      
      String string0 = bigFraction1.ONE_QUARTER.toString();
      assertEquals("1 / 4", string0);
      
      BigFraction bigFraction2 = bigFraction1.subtract(1L);
      BigFraction bigFraction3 = bigFraction2.add(40320L);
      bigFraction3.FOUR_FIFTHS.negate();
      BigFraction bigFraction4 = bigFraction2.abs();
      assertEquals((short)0, bigFraction4.shortValue());
      assertNotSame(bigFraction4, bigFraction2);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      
      BigFraction bigFraction5 = new BigFraction(40320L, (-4040L));
      BigFraction bigFraction6 = bigFraction5.add((-30L));
      assertEquals((short) (-9), bigFraction5.shortValue());
      assertEquals((byte) (-39), bigFraction6.byteValue());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      bigFraction0.TWO_QUARTERS.compareTo(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.bigDecimalValue();
      BigInteger bigInteger0 = bigFraction0.getNumerator();
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.multiply(355L);
      assertEquals((byte) (-43), bigFraction1.byteValue());
      
      BigFraction bigFraction2 = bigFraction0.multiply(7205759403792974L);
      BigFraction bigFraction3 = bigFraction0.subtract(7205759403792974L);
      bigFraction0.TWO_FIFTHS.getDenominatorAsLong();
      BigFraction bigFraction4 = bigFraction3.THREE_FIFTHS.abs();
      BigFraction bigFraction5 = bigFraction3.ZERO.subtract(bigFraction2);
      BigFraction bigFraction6 = bigFraction3.TWO_THIRDS.multiply(bigFraction4);
      assertEquals((byte)0, bigFraction6.byteValue());
      
      BigFraction bigFraction7 = bigFraction5.ONE_QUARTER.subtract(7205759403792974L);
      int int0 = bigFraction7.THREE_FIFTHS.compareTo(bigFraction4);
      assertEquals(0, int0);
      
      bigFraction0.hashCode();
      bigFraction5.ONE_THIRD.doubleValue();
      bigFraction4.ONE.divide(bigInteger0);
      BigFraction bigFraction8 = bigFraction2.add(bigFraction4);
      BigFraction bigFraction9 = bigFraction8.ONE_THIRD.multiply(0);
      assertFalse(bigFraction9.equals((Object)bigFraction6));
      
      Object object0 = new Object();
      bigFraction8.TWO_THIRDS.equals(object0);
      assertEquals((byte) (-100), bigFraction8.byteValue());
      
      BigFraction bigFraction10 = bigFraction5.reduce();
      assertTrue(bigFraction10.equals((Object)bigFraction5));
      assertEquals((byte)100, bigFraction5.byteValue());
      assertFalse(bigFraction2.equals((Object)bigFraction8));
      assertNotSame(bigFraction2, bigFraction8);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.ZERO.multiply(4503599627370495L);
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      assertEquals((byte)0, bigFraction2.byteValue());
      assertNotSame(bigFraction2, bigFraction1);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue((-1925), (-1925));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) (-2147483647), (-2147483647));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,647 to fraction (-9,223,372,034,707,292,160/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,647 to fraction (9,223,372,034,707,292,162/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0, 1.0, 2147483265);
      String string0 = bigFraction0.toString();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.9190849000001435, (-1437));
      BigFraction bigFraction1 = BigFraction.ZERO;
      boolean boolean0 = bigFraction0.ONE_HALF.equals(bigFraction1);
      assertFalse(boolean0);
      
      BigFraction bigFraction2 = bigFraction1.ZERO.multiply(bigFraction0);
      double double0 = bigFraction0.ONE_THIRD.doubleValue();
      assertEquals(0.3333333333333333, double0, 0.01);
      
      bigFraction0.intValue();
      BigFraction bigFraction3 = bigFraction1.add(bigFraction0);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.divide(bigInteger0);
      BigFraction bigFraction4 = bigFraction1.add(bigFraction3);
      assertSame(bigFraction4, bigFraction2);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction0.ONE_HALF.multiply(bigFraction1);
      assertEquals((byte)1, bigFraction2.byteValue());
      
      String string0 = bigFraction0.toString();
      assertEquals("1", string0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertTrue(bigFraction0.equals((Object)bigFraction2));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.reduce();
      assertEquals((byte)0, bigFraction1.byteValue());
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction1.pow(bigInteger0);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.abs();
      BigFraction bigFraction2 = bigFraction1.ONE_THIRD.multiply((-2145051615));
      assertEquals((short) (-19445), bigFraction2.shortValue());
      
      double double0 = bigFraction0.percentageValue();
      assertEquals(20.0, double0, 0.01);
      
      String string0 = bigFraction1.toString();
      assertEquals("1 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.ONE_HALF.doubleValue();
      bigFraction0.ONE_FIFTH.floatValue();
      // Undeclared exception!
      try { 
        bigFraction0.pow((-2147483645));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.TWO.bigDecimalValue();
      bigFraction0.intValue();
      BigFraction bigFraction1 = BigFraction.getReducedFraction(0, 0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertNotSame(bigFraction1, bigFraction0);
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      boolean boolean0 = bigFraction0.MINUS_ONE.equals((Object) null);
      assertFalse(boolean0);
      
      String string0 = bigFraction0.toString();
      assertEquals("3 / 4", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      String string0 = bigFraction0.toString();
      assertEquals("3 / 4", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.multiply((-802));
      BigFraction bigFraction2 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction3 = bigFraction0.TWO.abs();
      Object object0 = new Object();
      bigFraction3.ONE_FIFTH.equals(object0);
      BigFraction bigFraction4 = bigFraction2.ONE_FIFTH.pow((-802));
      bigFraction4.TWO_FIFTHS.pow(bigInteger0);
      bigFraction0.intValue();
      BigFraction bigFraction5 = bigFraction0.subtract((long) (-802));
      bigFraction5.THREE_FIFTHS.getField();
      bigFraction2.divide(bigFraction5);
      bigFraction4.FOUR_FIFTHS.toString();
      BigFraction bigFraction6 = bigFraction1.divide((long) (-802));
      // Undeclared exception!
      try { 
        bigFraction5.divide(bigFraction6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      double double0 = bigFraction0.percentageValue();
      assertEquals((-100.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.abs();
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.divide(100L);
      double double0 = bigFraction0.percentageValue();
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertEquals(75.0, double0, 0.01);
      assertSame(bigFraction0, bigFraction1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.abs();
      double double0 = bigFraction0.percentageValue();
      assertEquals(75.0, double0, 0.01);
      assertSame(bigFraction0, bigFraction1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      bigFraction0.reduce();
      String string0 = bigFraction2.toString();
      assertEquals("4 / 3", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((byte)1, bigFraction2.byteValue());
      assertFalse(bigFraction2.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.add(769L);
      assertEquals((short)769, bigFraction1.shortValue());
      
      BigFraction bigFraction2 = bigFraction0.subtract((-331L));
      assertEquals((byte)76, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      assertNotSame(bigFraction2, bigFraction1);
      assertEquals((byte)0, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.subtract(bigFraction0);
      assertNotSame(bigFraction1, bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.ONE.getField();
      bigFraction0.getField();
      bigFraction0.TWO_QUARTERS.hashCode();
      BigFraction bigFraction1 = bigFraction0.subtract((-1719L));
      BigFraction bigFraction2 = BigFraction.THREE_QUARTERS;
      bigFraction2.ONE_THIRD.add(bigFraction1);
      bigFraction0.FOUR_FIFTHS.getField();
      BigFraction bigFraction3 = bigFraction2.ZERO.add(bigFraction1);
      BigFraction bigFraction4 = bigFraction1.ZERO.subtract(bigFraction2);
      assertEquals((short)0, bigFraction4.shortValue());
      
      bigFraction0.getDenominatorAsLong();
      bigFraction3.pow(1597L);
      assertNotSame(bigFraction3, bigFraction4);
      assertTrue(bigFraction3.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.abs();
      bigFraction1.pow(54L);
      BigFraction bigFraction2 = bigFraction1.reduce();
      assertEquals((byte)1, bigFraction2.byteValue());
      assertTrue(bigFraction2.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.abs();
      bigFraction1.ONE_FIFTH.hashCode();
      double double0 = bigFraction0.percentageValue();
      assertSame(bigFraction0, bigFraction1);
      assertEquals(80.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.subtract(bigInteger0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.THREE_FIFTHS.getDenominatorAsLong();
      String string0 = bigFraction0.toString();
      assertEquals("1 / 4", string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.ONE.getField();
      bigFraction0.getField();
      bigFraction0.TWO_QUARTERS.hashCode();
      BigFraction bigFraction1 = bigFraction0.reduce();
      assertEquals((short)0, bigFraction1.shortValue());
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }
}
