/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 23:55:33 GMT 2023
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thoughtworks.xstream.io.StreamException;
import org.apache.commons.math3.fraction.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.testcarver.testcase.EvoSuiteXStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-2025.8463739400274), (-2025.8463739400274), (-2610));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -2,025.846 to fraction after -2,610 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = Fraction.ZERO;
      fraction1.intValue();
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-1), int0);
      
      boolean boolean0 = fraction1.equals((Object) null);
      Fraction fraction2 = Fraction.MINUS_ONE;
      boolean boolean1 = fraction0.equals(fraction2);
      assertFalse(boolean1 == boolean0);
      assertEquals((-1.0), fraction2.doubleValue(), 0.01);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      Fraction fraction2 = fraction1.multiply(fraction0);
      String string0 = fraction2.toString();
      assertEquals("1 / 6", string0);
      
      boolean boolean0 = fraction0.equals(fraction2);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, 43);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = Fraction.getReducedFraction(Integer.MAX_VALUE, 598);
      // Undeclared exception!
      try { 
        fraction0.ONE_QUARTER.subtract(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: -4,294,966,995
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(362999721, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 362,999,721/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      // Undeclared exception!
      try { 
        fraction0.THREE_QUARTERS.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      
      Fraction fraction1 = Fraction.FOUR_FIFTHS;
      Fraction fraction2 = Fraction.ONE_THIRD;
      fraction0.equals(fraction2);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      
      int int0 = fraction2.compareTo(fraction1);
      assertEquals((-1), int0);
      assertFalse(fraction2.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      assertEquals((byte)100, fraction0.byteValue());
      
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = Fraction.ONE_HALF;
      Fraction fraction5 = new Fraction(75.0);
      Fraction fraction6 = new Fraction(100.0);
      String string0 = fraction5.toString();
      assertEquals("75", string0);
      
      Fraction fraction7 = new Fraction(0.021999999999934516);
      Fraction fraction8 = new Fraction(100.0);
      Fraction fraction9 = new Fraction(5.67579687469788E-4);
      Fraction fraction10 = fraction9.multiply(fraction3);
      Fraction fraction11 = new Fraction(500.0);
      Fraction fraction12 = fraction8.multiply(fraction0);
      Fraction fraction13 = fraction10.abs();
      assertEquals(1219468.2F, fraction13.floatValue(), 0.01F);
      
      Fraction fraction14 = Fraction.ONE;
      Fraction fraction15 = fraction7.divide(fraction12);
      fraction14.getNumerator();
      int int0 = fraction1.compareTo(fraction3);
      assertEquals((-1), int0);
      
      Fraction fraction16 = fraction12.multiply(fraction15);
      assertTrue(fraction16.equals((Object)fraction7));
      assertEquals(10000.0F, fraction12.floatValue(), 0.01F);
      
      fraction9.equals(fraction14);
      assertFalse(fraction14.equals((Object)fraction4));
      assertFalse(fraction9.equals((Object)fraction10));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-3688));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-3,688, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      // Undeclared exception!
      try { 
        fraction0.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      Fraction fraction2 = fraction0.ONE_QUARTER.subtract(fraction1);
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      
      Fraction fraction3 = fraction2.negate();
      assertEquals((-1), fraction2.getNumerator());
      assertEquals(0.25, fraction3.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      Fraction fraction2 = fraction0.ONE_HALF.add(fraction1);
      assertEquals(1.25F, fraction2.floatValue(), 0.01F);
      
      String string0 = fraction0.toString();
      assertEquals("1 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Fraction fraction2 = Fraction.ONE_FIFTH;
      Fraction fraction3 = fraction1.subtract(fraction0);
      Fraction fraction4 = fraction3.TWO_FIFTHS.multiply(fraction0);
      Fraction fraction5 = fraction2.divide(fraction3);
      assertEquals((-0.008F), fraction5.floatValue(), 0.01F);
      
      Fraction fraction6 = Fraction.THREE_QUARTERS;
      double double0 = fraction3.percentageValue();
      assertEquals((-2500.0), double0, 0.01);
      
      fraction2.getNumerator();
      Fraction fraction7 = new Fraction((-2666.0142), 1);
      fraction4.hashCode();
      assertEquals((-25), fraction3.getNumerator());
      assertEquals(40, fraction4.intValue());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(362999721, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 362,999,721/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void testRemovetestRemove_17()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction3 = new Fraction(0.0);
      Fraction fraction4 = new Fraction((-0.1));
      Fraction fraction5 = new Fraction((-242343.0));
      Fraction fraction6 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction7 = fraction6.THREE_FIFTHS.add(fraction4);
      assertEquals(1, fraction6.getDenominator());
      assertEquals(0.5, fraction7.doubleValue(), 0.01);
      
      Fraction fraction8 = new Fraction(332.0);
      Fraction fraction9 = new Fraction((-2323.0));
      Fraction fraction10 = new Fraction(44.0);
      Fraction fraction11 = new Fraction(0.2913812391255076);
      Fraction fraction12 = Fraction.TWO_THIRDS;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object0);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      boolean boolean0 = fraction10.equals(fraction0);
      assertFalse(boolean0);
      
      Object object1 = new Object();
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      int int0 = fraction2.compareTo(fraction1);
      int int1 = fraction0.getDenominator();
      assertTrue(int1 == int0);
      assertEquals((byte)100, fraction0.byteValue());
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = (-2404);
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(1.8014398509481984E16, (-2404));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 18,014,398,509,481,984 to fraction (18,014,398,509,481,984/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(1812);
      Fraction fraction2 = new Fraction(0.0);
      Fraction fraction3 = new Fraction((double) 1812);
      Fraction fraction4 = new Fraction(0.0);
      Fraction fraction5 = new Fraction((-3970));
      Fraction fraction6 = fraction3.add(fraction5);
      assertEquals((-3970), fraction5.getNumerator());
      assertEquals((-2158.0), fraction6.doubleValue(), 0.01);
      
      Fraction fraction7 = new Fraction(0.0);
      Fraction fraction8 = new Fraction((-205.36793385));
      Fraction fraction9 = new Fraction(3976.1171291252);
      assertEquals(3976.117130307467, fraction9.doubleValue(), 0.01);
      
      Fraction fraction10 = new Fraction((double) 1812);
      Fraction fraction11 = fraction7.abs();
      assertSame(fraction11, fraction7);
      
      Fraction fraction12 = Fraction.ZERO;
      Fraction fraction13 = new Fraction((double) 1812);
      Fraction fraction14 = new Fraction(0.008333333333329196, (-3970));
      Fraction fraction15 = Fraction.ONE_FIFTH;
      Fraction fraction16 = fraction0.multiply(fraction15);
      assertEquals(20, fraction16.getNumerator());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.ONE.subtract(fraction1);
      assertEquals(1L, fraction2.longValue());
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.ONE_HALF.divide(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.MINUS_ONE.abs();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1L, fraction1.longValue());
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.multiply(fraction1);
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      assertEquals((-2147483648L), fraction0.longValue());
      
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.multiply(fraction0);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
      
      Fraction fraction2 = Fraction.ONE_THIRD;
      assertNotSame(fraction2, fraction1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2, (-1370));
      Fraction fraction1 = Fraction.ONE;
      Fraction fraction2 = fraction0.divide(fraction1);
      int int0 = (-888);
      Fraction fraction3 = new Fraction((-888));
      fraction2.toString();
      Fraction fraction4 = new Fraction(2127.444794992149);
      Fraction fraction5 = new Fraction((double) 2);
      Fraction fraction6 = new Fraction(0.07490822288864472);
      Fraction fraction7 = Fraction.ZERO;
      Fraction fraction8 = new Fraction(304134222);
      fraction5.equals(fraction2);
      // Undeclared exception!
      try { 
        EvoSuiteXStream.fromString("");
        fail("Expecting exception: StreamException");
      
      } catch(StreamException e) {
         //
         // 
         //
         verifyException("com.thoughtworks.xstream.io.xml.XppReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(1.0E-5);
      Fraction fraction3 = new Fraction(500.0);
      Fraction fraction4 = null;
      try {
        fraction4 = new Fraction(0.0, 1305380);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.MINUS_ONE.add(3085);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((byte)12, fraction1.byteValue());
      
      String string0 = fraction0.ONE_QUARTER.toString();
      assertEquals("1 / 4", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = new Fraction(126.92793204356187);
      Fraction fraction1 = new Fraction(2);
      fraction0.ONE_THIRD.toString();
      Fraction fraction2 = fraction0.ZERO.subtract(fraction1);
      double double0 = fraction0.ONE_FIFTH.percentageValue();
      assertEquals(20.0, double0, 0.01);
      
      Fraction fraction3 = new Fraction(75.0);
      assertEquals((short)75, fraction3.shortValue());
      
      fraction2.getNumerator();
      Fraction fraction4 = new Fraction(126.92793204356187, 1238);
      Fraction fraction5 = fraction0.multiply(fraction2);
      Fraction fraction6 = Fraction.getReducedFraction((-268), (-1));
      assertEquals(268L, fraction6.longValue());
      
      fraction2.floatValue();
      Fraction fraction7 = fraction5.add(699);
      assertEquals(2L, fraction1.longValue());
      assertEquals(445.14413F, fraction7.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = fraction0.ONE.abs();
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      assertSame(fraction0, fraction1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = new Fraction((-986.367528), 1);
      assertEquals((-987), fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((double) Integer.MAX_VALUE);
      assertTrue(fraction4.equals((Object)fraction3));
      
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-0.1));
      Fraction fraction7 = fraction6.TWO_QUARTERS.subtract(Integer.MAX_VALUE);
      assertEquals(1L, fraction7.longValue());
      assertEquals(10, fraction6.getDenominator());
      
      Fraction fraction8 = new Fraction((-242343.0));
      Fraction fraction9 = new Fraction((-2323.0));
      Fraction fraction10 = new Fraction(44.0);
      Fraction fraction11 = new Fraction(0.2913812391255076);
      Fraction fraction12 = Fraction.ZERO;
      Fraction fraction13 = new Fraction(Integer.MIN_VALUE);
      fraction12.equals(fraction13);
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      boolean boolean0 = fraction12.equals(object2);
      assertFalse(boolean0);
      
      Fraction fraction14 = new Fraction(44.0);
      String string0 = fraction0.toString();
      assertEquals("100", string0);
      assertFalse(fraction0.equals((Object)fraction2));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction3 = new Fraction((double) Integer.MAX_VALUE);
      assertTrue(fraction3.equals((Object)fraction2));
      
      Fraction fraction4 = new Fraction(0.0);
      Fraction fraction5 = new Fraction((-0.1));
      Fraction fraction6 = new Fraction((-242343.0));
      Fraction fraction7 = new Fraction((-2323.0));
      assertEquals((-2323), fraction7.getNumerator());
      
      Fraction fraction8 = new Fraction(44.0);
      Fraction fraction9 = new Fraction(0.2913812391255076);
      assertEquals(0.2913907284768212, fraction9.doubleValue(), 0.01);
      
      Fraction fraction10 = Fraction.ZERO;
      Fraction fraction11 = new Fraction(Integer.MIN_VALUE);
      boolean boolean0 = fraction10.equals(fraction11);
      assertEquals(1, fraction11.getDenominator());
      
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction10.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction10.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      boolean boolean1 = fraction10.equals(object2);
      assertTrue(boolean1 == boolean0);
      
      Fraction fraction12 = new Fraction(44.0);
      long long0 = fraction4.longValue();
      assertFalse(fraction4.equals((Object)fraction0));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = Fraction.MINUS_ONE;
      // Undeclared exception!
      try { 
        fraction0.ONE_HALF.divide(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.negate();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1L, fraction1.longValue());
      
      int int0 = fraction1.compareTo(fraction0);
      assertEquals(1, int0);
      assertEquals(1L, fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = Fraction.TWO;
      Fraction fraction2 = fraction1.TWO_FIFTHS.add(fraction0);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1.0, fraction2.doubleValue(), 0.01);
      
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      String string0 = fraction0.toString();
      assertEquals("2", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.ONE_FIFTH.subtract((-1));
      assertEquals(5, fraction1.getDenominator());
      assertEquals(1.2F, fraction1.floatValue(), 0.01F);
      
      String string0 = fraction0.toString();
      assertEquals("4 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = Fraction.TWO_FIFTHS;
      Fraction fraction2 = fraction0.ONE_QUARTER.add(fraction1);
      assertEquals(0.65, fraction2.doubleValue(), 0.01);
      assertEquals(20, fraction2.getDenominator());
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      // Undeclared exception!
      try { 
        fraction0.THREE_FIFTHS.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.TWO_THIRDS;
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2147483623), (-2147483623));
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.THREE_FIFTHS;
      Fraction fraction2 = fraction0.TWO_QUARTERS.divide(fraction1);
      assertEquals(0.8333333F, fraction2.floatValue(), 0.01F);
      
      fraction0.negate();
      assertFalse(fraction0.equals((Object)fraction2));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.multiply(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((byte)1, fraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      fraction0.getNumerator();
      Fraction fraction1 = fraction0.divide(1);
      Fraction fraction2 = fraction1.subtract(fraction0);
      fraction2.compareTo(fraction1);
      fraction0.toString();
      Fraction.getReducedFraction(2, 2);
      Fraction fraction3 = null;
      try {
        fraction3 = new Fraction((double) 1, 11533);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1 to fraction (-9,223,372,036,854,775,808/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      String string0 = fraction0.ONE_QUARTER.toString();
      assertEquals("1 / 4", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = new Fraction(1106.6275);
      int int0 = fraction0.intValue();
      assertEquals(1106.6276F, fraction0.floatValue(), 0.01F);
      assertEquals(1106, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      fraction0.TWO.getField();
      Fraction fraction1 = fraction0.negate();
      assertEquals((-0.5F), fraction1.floatValue(), 0.01F);
      assertEquals((-1), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-2652), (-2652), (-2652));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,652 to fraction (2,653/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.ONE_FIFTH;
      Fraction fraction2 = fraction0.ZERO.subtract(fraction1);
      assertEquals((-0.2), fraction2.doubleValue(), 0.01);
      assertEquals(5, fraction2.getDenominator());
      
      String string0 = fraction0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = Fraction.ONE_QUARTER;
      Fraction fraction2 = fraction0.ZERO.add(fraction1);
      assertSame(fraction2, fraction1);
      
      Fraction fraction3 = fraction0.negate();
      assertEquals((-1), fraction3.getNumerator());
      assertEquals((-0.5F), fraction3.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = Fraction.ONE_HALF;
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertEquals(0.16666667F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1264, 1264);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.ONE_FIFTH.reciprocal();
      assertEquals(5, fraction1.getNumerator());
      assertEquals(5L, fraction1.longValue());
      
      String string0 = fraction0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      double double0 = fraction0.MINUS_ONE.percentageValue();
      assertEquals((-100.0), double0, 0.01);
      
      String string0 = fraction0.ONE_QUARTER.toString();
      assertEquals("1 / 4", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (2,147,483,649/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = new Fraction((-936.01938), 362999721);
      assertEquals((-46800969), fraction0.getNumerator());
      assertEquals((-936.0194F), fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      double double0 = fraction0.TWO_THIRDS.percentageValue();
      assertEquals(66.66666666666667, double0, 0.01);
      
      Fraction fraction1 = Fraction.ONE_HALF;
      boolean boolean0 = fraction1.equals(fraction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      Fraction fraction1 = Fraction.TWO;
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(boolean0);
      
      Fraction fraction2 = new Fraction((-1342.0790730398));
      assertEquals((short) (-1342), fraction2.shortValue());
      
      int int0 = fraction0.intValue();
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2882.98898981064));
      assertEquals((-1308877), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Object object0 = new Object();
      boolean boolean0 = fraction0.equals(object0);
      assertFalse(boolean0);
      assertEquals(100.0, fraction0.doubleValue(), 0.01);
  }
}
