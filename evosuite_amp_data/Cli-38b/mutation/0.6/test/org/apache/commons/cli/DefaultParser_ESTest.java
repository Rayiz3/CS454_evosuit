/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 01:34:40 GMT 2023
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Properties;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultParser_ESTest extends DefaultParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5*oRTV|6J*wsCMxY");
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.builder("t");
      Option option0 = new Option("t", "t");
      Options options1 = options0.addOption(option0);
      String[] stringArray0 = new String[10];
      stringArray0[0] = "-t1";
      option0.setArgs((-2));
      stringArray0[1] = "-t1";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[2] = "t";
      stringArray0[3] = "--bcbgar";
      Properties properties0 = new Properties();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup0);
      Properties properties1 = new Properties();
      options0.addOption(option0);
      optionGroup0.setSelected(option0);
      OptionGroup optionGroup2 = new OptionGroup();
      properties1.replace((Object) optionGroup2, (Object) optionGroup2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--bcbgar");
      defaultParser0.handleConcatenatedOptions("t");
      String[] stringArray1 = new String[1];
      stringArray1[0] = "-t1";
      CommandLine commandLine0 = defaultParser0.parse(options2, stringArray1, properties1, true);
      defaultParser0.parse(options2, stringArray1, properties0, true);
      CommandLine commandLine1 = defaultParser0.parse(options1, stringArray1);
      assertFalse(commandLine1.equals((Object)commandLine0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String string0 = "t1";
      defaultParser0.stopAtNonOption = true;
      Option option0 = new Option("t1", "t1");
      String string1 = "--b=bar";
      String[] stringArray0 = new String[7];
      options0.addRequiredOption("t1", "", true, "t1");
      stringArray0[0] = "-t1";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[1] = "--b=bar";
      options0.addRequiredOption("be", "be", true, stringArray0[3]);
      Properties properties0 = new Properties();
      try { 
        defaultParser0.parse(options0, stringArray0, properties0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option: t1
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option option0 = new Option("t1", "t1");
      options0.addOption(option0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-t1";
      stringArray0[1] = "--b=bar";
      boolean boolean0 = defaultParser0.skipParsing;
      Options options1 = options0.addRequiredOption("be", "be", false, stringArray0[3]);
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: --b=bar
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("b");
      Option.Builder option_Builder1 = option_Builder0.hasArg(true);
      Option option0 = option_Builder1.build();
      options0.addOption(option0);
      options0.addRequiredOption("a", "-a", false, "-a");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-a";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option option0 = new Option("a", true, "a");
      options0.hasShortOption("a");
      Options options1 = options0.addOption(option0);
      options1.getMatchingOptions("lasx6");
      defaultParser0.parse(options0, (String[]) null);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-ab";
      option0.setArgs(19);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options2 = defaultParser0.options;
      Properties properties0 = new Properties();
      String[] stringArray1 = new String[3];
      stringArray1[0] = "-ab";
      stringArray1[1] = "!Y\u0004&-en.";
      stringArray1[2] = "!Y\u0004&-en.";
      defaultParser0.parse(options1, stringArray1, properties0, true);
      defaultParser0.handleConcatenatedOptions("lasx6");
      CommandLine commandLine0 = defaultParser0.parse(options0, (String[]) null);
      CommandLine commandLine1 = defaultParser0.parse(options1, (String[]) null, properties0, true);
      assertFalse(commandLine1.equals((Object)commandLine0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t");
      Option option0 = option_Builder0.build();
      Options options1 = options0.addOption(option0);
      option0.setArgs(49);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-t1";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t");
      Option option0 = option_Builder0.build();
      options0.addOption(option0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-t1";
      option0.setArgs((-2));
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      Option.builder("t1");
      Option option0 = option_Builder0.build();
      Options options1 = options0.addOption(option0);
      option0.setArgs(34);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "t1";
      stringArray0[1] = "-t1";
      stringArray0[2] = "t1";
      stringArray0[3] = "-";
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option: t1
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t");
      Option option0 = option_Builder0.build();
      Options options1 = options0.addOption(option0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-t1";
      DefaultParser defaultParser0 = new DefaultParser();
      CommandLine commandLine0 = new CommandLine();
      Properties properties0 = new Properties();
      Option option1 = new Option("t", "-t1");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.setRequired(true);
      options0.addOptionGroup(optionGroup0);
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -t1
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.builder();
      Option.Builder option_Builder0 = Option.builder("t1");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      option_Builder0.numberOfArgs((-32));
      Option.builder();
      Option option0 = option_Builder0.build();
      options0.addOption(option0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-t1";
      option0.setArgs((-2));
      stringArray0[1] = "#e:ZT!o";
      stringArray0[2] = "";
      stringArray0[3] = "--b=bar";
      stringArray0[4] = "t1";
      stringArray0[5] = "";
      defaultParser0.handleConcatenatedOptions("");
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.builder("t1");
      Option option0 = new Option("t1", (String) null);
      Options options1 = options0.addOption(option0);
      option0.setArgs(222);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-t1";
      try { 
        defaultParser0.parse(options2, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option: t1
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-f=bar";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -f=bar
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      options0.addRequiredOption("a", "-ab", false, "-ab");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-ab";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -ab
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[7];
      Options options1 = options0.addRequiredOption("t1", "", true, "t1");
      stringArray0[0] = "-t1";
      boolean boolean0 = defaultParser0.skipParsing;
      stringArray0[1] = "--b=bar";
      options0.addRequiredOption("bye", "bye", false, stringArray0[3]);
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: --b=bar
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("b");
      option_Builder0.hasArg(true);
      Option option0 = option_Builder0.build();
      options0.addOption(option0);
      Options options1 = options0.addRequiredOption("a", "-ab", false, "-ab");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-ab";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      defaultParser0.stopAtNonOption = true;
      Option.Builder option_Builder0 = Option.builder("a");
      Option.Builder option_Builder1 = option_Builder0.hasArg(true);
      Option option0 = option_Builder0.build();
      Options options1 = options0.addOption(option0);
      Option option1 = option_Builder1.build();
      options1.addOption(option1);
      option_Builder1.build();
      option_Builder0.build();
      options0.addOption(option0);
      Option.builder("a");
      DefaultParser defaultParser1 = new DefaultParser();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-ab";
      stringArray0[1] = "-ab";
      stringArray0[2] = "last";
      stringArray0[3] = "last";
      stringArray0[4] = "last";
      stringArray0[5] = "-ab";
      stringArray0[6] = "last";
      stringArray0[7] = "last";
      stringArray0[8] = "a";
      defaultParser1.parse(options1, stringArray0);
      defaultParser1.handleConcatenatedOptions("last");
      defaultParser1.handleConcatenatedOptions("-ab");
      assertFalse(defaultParser1.equals((Object)defaultParser0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Options options0 = new Options();
      Properties properties0 = new Properties();
      properties0.put("s q|kM", options0);
      DefaultParser defaultParser0 = new DefaultParser();
      try { 
        defaultParser0.parse(options0, (String[]) null, properties0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Default option wasn't defined
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[7];
      options0.addOption("t1", true, "-t1");
      stringArray0[0] = "-t1";
      boolean boolean0 = defaultParser0.skipParsing;
      stringArray0[1] = "--b=bar";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("a");
      option_Builder0.hasArg(true);
      Option option0 = option_Builder0.build();
      options0.addOption(option0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-ab";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "--b=bar";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: --b=bar
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      option_Builder0.hasArg();
      option_Builder0.numberOfArgs(1);
      option_Builder0.optionalArg(true);
      option_Builder0.argName("t1_path");
      Option option0 = option_Builder0.build();
      Options options1 = options0.addOption(option0);
      Option.Builder option_Builder1 = Option.builder("a");
      option_Builder1.hasArg(false);
      Option option1 = option_Builder1.build();
      Options options2 = options1.addOption(option1);
      Option.Builder option_Builder2 = Option.builder("b");
      option_Builder2.hasArg(false);
      Options options3 = options2.addOption(option0);
      Option.Builder option_Builder3 = Option.builder("last");
      option_Builder3.hasArg(false);
      Option option2 = option_Builder3.build();
      Options options4 = options3.addOption(option2);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-t1";
      stringArray0[1] = "-ab";
      defaultParser0.parse(options4, stringArray0);
      defaultParser0.handleConcatenatedOptions("+5H#M3Z5*zyhGx!2wj");
      Properties properties0 = new Properties();
      defaultParser0.parse(options1, stringArray0, properties0, true);
      defaultParser0.handleConcatenatedOptions("last");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t");
      option_Builder0.numberOfArgs((-8));
      Option option0 = option_Builder0.build();
      options0.addOption(option0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-t1";
      DefaultParser defaultParser0 = new DefaultParser();
      defaultParser0.parse(options0, stringArray0, true);
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -t1
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[0];
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option((String) null, "=");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      CommandLine commandLine0 = defaultParser0.parse(options1, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      defaultParser0.handleConcatenatedOptions("-");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t");
      Option option0 = option_Builder0.build();
      Options options1 = options0.addOption(option0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-t1";
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -t1
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "--";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[0];
      Options options1 = options0.addRequiredOption((String) null, (String) null, false, (String) null);
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing required option: null
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      option_Builder0.hasArg();
      option_Builder0.numberOfArgs(1);
      option_Builder0.optionalArg(true);
      option_Builder0.argName("t1_path");
      Option option0 = option_Builder0.build();
      Options options1 = options0.addOption(option0);
      Option.Builder option_Builder1 = Option.builder("a");
      option_Builder1.hasArg(false);
      Option option1 = option_Builder1.build();
      Options options2 = options1.addOption(option1);
      Option.Builder option_Builder2 = Option.builder("b");
      option_Builder2.hasArg(false);
      Option option2 = option_Builder2.build();
      Options options3 = options2.addOption(option2);
      Option.Builder option_Builder3 = Option.builder("last");
      option_Builder3.hasArg(false);
      Option option3 = option_Builder3.build();
      Options options4 = options3.addOption(option3);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "t1_path";
      stringArray0[1] = "a";
      defaultParser0.parse(options4, stringArray0);
      defaultParser0.handleConcatenatedOptions("last");
  }

  @Test(timeout = 4000)
  public void shouldParseShortOptionWithoutValueshouldParseConcatenatedShortOptions_29()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      option_Builder0.hasArg();
      option_Builder0.numberOfArgs(1);
      option_Builder0.optionalArg(true);
      option_Builder0.argName("t1_path");
      Option option0 = option_Builder0.build();
      Options options1 = options0.addOption(option0);
      Option.Builder option_Builder1 = Option.builder("a");
      option_Builder1.hasArg(false);
      Option option1 = option_Builder1.build();
      Options options2 = options1.addOption(option1);
      Option.Builder option_Builder2 = Option.builder("b");
      option_Builder2.hasArg(false);
      Option option2 = option_Builder2.build();
      Options options3 = options2.addOption(option2);
      Option.Builder option_Builder3 = Option.builder("last");
      option_Builder3.hasArg(false);
      Option option3 = option_Builder3.build();
      Options options4 = options3.addOption(option3);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-t1";
      stringArray0[1] = "-last";
      defaultParser0.parse(options4, stringArray0);
      Options options5 = options2.addOption(option0);
      defaultParser0.parse(options5, stringArray0, false);
      defaultParser0.parse(options2, stringArray0, true);
      defaultParser0.handleConcatenatedOptions("-t1");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      CommandLine commandLine0 = defaultParser0.parse(options0, (String[]) null, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[0];
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
      
      defaultParser0.stopAtNonOption = true;
      defaultParser0.handleConcatenatedOptions("-2");
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "--[";
      Properties properties0 = new Properties();
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, properties0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      CommandLine commandLine0 = defaultParser0.parse(options0, (String[]) null);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Options options0 = new Options();
      Properties properties0 = new Properties();
      DefaultParser defaultParser0 = new DefaultParser();
      CommandLine commandLine0 = defaultParser0.parse(options0, (String[]) null, properties0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void shouldParseConcatenatedShortOptionsshouldParseShortOptionWithValue_35()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      option_Builder0.hasArg();
      option_Builder0.numberOfArgs(1);
      option_Builder0.optionalArg(true);
      option_Builder0.argName("t1_path");
      Option option0 = option_Builder0.build();
      Options options1 = options0.addOption(option0);
      Option.Builder option_Builder1 = Option.builder("a");
      option_Builder1.hasArg(false);
      Option option1 = option_Builder1.build();
      Options options2 = options1.addOption(option1);
      Option.Builder option_Builder2 = Option.builder("b");
      option_Builder2.hasArg(false);
      Option option2 = option_Builder2.build();
      Options options3 = options2.addOption(option2);
      option2.clone();
      Option.Builder option_Builder3 = Option.builder("last");
      option_Builder3.hasArg(false);
      Option option3 = option_Builder3.build();
      Options options4 = options3.addOption(option3);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-t1";
      stringArray0[1] = "-ab";
      defaultParser0.parse(options4, stringArray0);
      defaultParser0.handleConcatenatedOptions("t1");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[0];
      defaultParser0.parse(options0, stringArray0);
      defaultParser0.handleConcatenatedOptions("6nI");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      // Undeclared exception!
      try { 
        defaultParser0.handleConcatenatedOptions("-2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "--[";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: --[
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[12];
      stringArray0[0] = "-.";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -.
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      Option option0 = option_Builder0.build();
      options0.addOption(option0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-t1";
      option0.setArgs((-2));
      stringArray0[1] = "t1";
      stringArray0[2] = "-t1";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-.Y?h2";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -.Y?h2
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Confirm NO of extra args";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-t1";
      stringArray0[1] = "true";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = options0.addRequiredOption("o", "t1", true, "true");
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = defaultParser0.options;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        defaultParser0.parse((Options) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-tr";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -tr
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option option0 = new Option("t1", "t1");
      options0.addOption(option0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-t1";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-LJ8>foIm=-";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -LJ8>foIm=-
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      Option option0 = option_Builder0.build();
      options0.addOption(option0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-t1";
      option0.setArgs((-2));
      stringArray0[1] = "t1";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-t1";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Options options1 = options0.addRequiredOption("o", "t1", true, "t1");
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.builder();
      Option option0 = new Option("t1", "t1");
      options0.addOption(option0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-t1";
      option0.setArgs((-2));
      stringArray0[1] = "-t1";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option: t1
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }
}
