/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 21:24:54 GMT 2023
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      try { 
        NumberUtils.createNumber("1E78e0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1E78e0\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1.1E700F");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1.1E-700F");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0.$u>y8UA#5} aEUz");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.$u>y8UA#5} aEUz is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertNotNull(number0);
      
      boolean boolean0 = NumberUtils.isDigits("0.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "-1!l";
      try { 
        NumberUtils.createNumber("-1!l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -1!l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1l");
      assertEquals((-1L), number0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0.B$u>MUUA#5} a{Uz");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.B$u>MUUA#5} a{Uz is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.1");
      assertEquals(0.1F, number0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.1E-00");
      assertEquals(0.1F, number0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1E700");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-700");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".12.3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0{h");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      short[] shortArray0 = new short[8];
      boolean boolean0 = NumberUtils.isNumber("-0xfS");
      assertFalse(boolean0);
      
      shortArray0[0] = (short)29421;
      shortArray0[1] = (short) (-1675);
      shortArray0[2] = (short)1463;
      shortArray0[3] = (short) (-1327);
      shortArray0[4] = (short)1355;
      shortArray0[5] = (short)192;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short)1364;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1675), short0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234E5l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("4.9E-324");
      assertNotNull(number0);
      assertEquals(4.9E-324, number0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-234.F");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-234.F");
      assertEquals((-234.0F), number0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1.1E200");
      assertEquals((-1.1E200), number0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.1L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("3.5ed");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      NumberUtils.isNumber("2E.");
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234.5d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      try { 
        NumberUtils.createNumber("toFloat(Float.MAX_VALUE) failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // toFloat(Float.MAX_VALUE) failed is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      try { 
        NumberUtils.createNumber("U?tsv$G-=0e");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // U?tsv$G-=0e is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("01l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("23.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      try { 
        NumberUtils.createNumber("+.hl");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // +.hl is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+hl");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234E-5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x109223372036854775807");
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      try { 
        NumberUtils.createNumber("1234Ee-5");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 1234Ee-5 is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("23.4E5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("eD)}IUH6rf<nO");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-123E2.12");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long[] longArray0 = new long[15];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-11471);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-6040);
      shortArray0[3] = (short)577;
      shortArray0[4] = (short)3;
      shortArray0[5] = (short)68;
      shortArray0[6] = (short)43;
      shortArray0[7] = (short)123;
      shortArray0[8] = (short)57;
      NumberUtils.max(shortArray0);
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("123.4E21D");
      assertEquals(1.234E23, number0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      boolean boolean0 = NumberUtils.isNumber("0xa\"ai1}q5ce0R1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 353.0F;
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) numberUtils0.BYTE_ZERO;
      NumberUtils.toByte((String) null, (byte)76);
      byteArray0[1] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[2] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[3] = (byte) numberUtils0.BYTE_MINUS_ONE;
      NumberUtils.max(byteArray0);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1677;
      shortArray0[2] = (short) numberUtils0.SHORT_ONE;
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
      
      int int0 = NumberUtils.min(64, (int) (short)1677, (-6254807));
      assertEquals((-6254807), int0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (-3019L);
      longArray0[2] = (long) (short)1677;
      longArray0[3] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      longArray0[4] = (long) (short)1677;
      longArray0[5] = (long) 64;
      longArray0[6] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      longArray0[7] = (long) 64;
      longArray0[8] = (long) numberUtils0.LONG_ZERO;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1677L, long0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1751.73F;
      floatArray0[1] = (float) 1677L;
      floatArray0[2] = (float) 1677L;
      floatArray0[3] = (float) numberUtils0.FLOAT_MINUS_ONE;
      floatArray0[4] = (float) 64;
      floatArray0[5] = (float) (short)numberUtils0.SHORT_ONE;
      floatArray0[6] = 603.6255F;
      floatArray0[7] = (float) (int)numberUtils0.INTEGER_ONE;
      floatArray0[8] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      try { 
        NumberUtils.createNumber("SS +.&{MCdvX`z%f");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // SS +.&{MCdvX`z%f is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0RX_6OBEa=t2");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      Number number0 = NumberUtils.createNumber("-1234.5");
      assertNotNull(number0);
      
      byte byte0 = NumberUtils.max((byte)55, (byte)55, (byte)55);
      assertEquals((byte)55, byte0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)55;
      longArray0[1] = (long) (byte)55;
      longArray0[2] = (long) (byte)55;
      longArray0[3] = (long) (byte)55;
      longArray0[4] = (long) (byte)55;
      longArray0[5] = (long) (byte)55;
      longArray0[6] = (long) (byte)55;
      long long0 = new Long(55L);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte)55;
      floatArray0[1] = (float) 55L;
      floatArray0[2] = (float) 55L;
      floatArray0[3] = (float) 55L;
      floatArray0[4] = (float) 55L;
      floatArray0[5] = (float) (byte)55;
      float float0 = NumberUtils.min(floatArray0);
      float float1 = NumberUtils.max(floatArray0);
      assertEquals(float1, float0, 0.01F);
      assertEquals(55.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) (float)numberUtils0.FLOAT_MINUS_ONE;
      NumberUtils.toShort((String) null, (short) numberUtils0.SHORT_ONE);
      NumberUtils.isNumber("bI<2';#");
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("12345678901234567890L");
      assertEquals((short)2770, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("8");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = NumberUtils.toInt("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.min((int) numberUtils0.INTEGER_MINUS_ONE, (int) numberUtils0.SHORT_ONE, (int) numberUtils0.INTEGER_ZERO);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      boolean boolean0 = NumberUtils.isNumber("-0xcreateNumber(String) 9b failed");
      assertFalse(boolean0);
      
      intArray0[0] = (int) (byte)numberUtils0.BYTE_ZERO;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      longArray0[1] = (long) numberUtils0.LONG_MINUS_ONE;
      NumberUtils.max(longArray0);
      boolean boolean1 = NumberUtils.isNumber("{S^HeBRn0Ac3E6<u ");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
      
      NumberUtils.createInteger((String) null);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) numberUtils0.INTEGER_ZERO;
      intArray0[1] = (int) (byte)numberUtils0.BYTE_ONE;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      try { 
        NumberUtils.createNumber("e;PK@TB;J>_Rr");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // e;PK@TB;J>_Rr is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      try { 
        NumberUtils.createNumber("7(Po4X]6R`Hw6L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 7(Po4X]6R`Hw6L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E-s*D;C");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("123.4E21D");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      try { 
        NumberUtils.createNumber("X;Gk*qqJmK?>H=62.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xa");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 93.92835058886445;
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      try { 
        NumberUtils.createNumber("isNumber(String)/createNumber(String) 23 Neg failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // isNumber(String)/createNumber(String) 23 Neg failed is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.createBigInteger((String) null);
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      boolean boolean0 = NumberUtils.isDigits("-0xjava.awt.printerjob");
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[2] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[3] = (short) (-14946);
      shortArray0[4] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[5] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[6] = (short) numberUtils0.SHORT_MINUS_ONE;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) numberUtils0.INTEGER_ZERO;
      intArray0[1] = (int) (short) (-1);
      intArray0[2] = 4;
      intArray0[3] = (-3816);
      intArray0[4] = (int) numberUtils0.INTEGER_ONE;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-3816), int0);
      
      boolean boolean1 = NumberUtils.isNumber("-0xjava.awt.printerjob");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-6);
      intArray0[1] = (-401);
      intArray0[2] = (-112);
      intArray0[3] = 785;
      intArray0[4] = 6;
      intArray0[5] = (-1685);
      NumberUtils.max((-1685), (-1685), (-112));
      boolean boolean0 = NumberUtils.isNumber("A blank string is not a valid number");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      try { 
        NumberUtils.createNumber("{S^HeBRn0Ac3E6<u ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // {S^HeBRn0Ac3E6<u  is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3498.08375241304);
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      longArray0[1] = (-3019L);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte) numberUtils0.BYTE_MINUS_ONE;
      NumberUtils.isNumber("0x");
      byteArray0[2] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[3] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[4] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[5] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[6] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[7] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[8] = (byte) numberUtils0.BYTE_ZERO;
      NumberUtils.min(byteArray0);
      longArray0[2] = (long) (int)numberUtils0.INTEGER_ONE;
      longArray0[3] = (long) numberUtils0.LONG_MINUS_ONE;
      longArray0[4] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      NumberUtils.min(longArray0);
      try { 
        NumberUtils.createNumber("java.awt.printerjob");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // java.awt.printerjob is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.min((int) numberUtils0.INTEGER_MINUS_ONE, (int) numberUtils0.SHORT_ONE, (int) numberUtils0.INTEGER_ZERO);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[2];
      boolean boolean0 = NumberUtils.isNumber("-0xcreateNumber(String) 9b failed");
      assertFalse(boolean0);
      
      intArray0[0] = (int) (byte)numberUtils0.BYTE_ZERO;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      longArray0[1] = (long) numberUtils0.LONG_MINUS_ONE;
      byte byte0 = NumberUtils.max((byte) numberUtils0.BYTE_ONE, (byte) numberUtils0.BYTE_ZERO, (byte)68);
      assertEquals((byte)68, byte0);
      
      long long0 = NumberUtils.max(longArray0);
      assertEquals((-1L), long0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (float) (-1L);
      floatArray0[2] = (float) numberUtils0.FLOAT_MINUS_ONE;
      floatArray0[3] = (float) numberUtils0.FLOAT_MINUS_ONE;
      floatArray0[4] = (float) (int)numberUtils0.INTEGER_ONE;
      NumberUtils.min(floatArray0);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x1234E-5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xYR@=/pG8JS_J[T h");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x-0xcreateNumber(String) 9b faAled");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--vfY/lp");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1520;
      intArray0[1] = 1417;
      intArray0[2] = 313;
      intArray0[3] = (-1276);
      int int0 = NumberUtils.max((-1276), 1520, 313);
      assertEquals(1520, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("a");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      try { 
        NumberUtils.createNumber(")0X,Cs~?e,*'&G\"{#l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // )0X,Cs~?e,*'&G\"{#l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("l");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) (float)numberUtils0.FLOAT_MINUS_ONE;
      doubleArray0[2] = (double) (int)numberUtils0.INTEGER_ZERO;
      doubleArray0[3] = (double) (float)numberUtils0.FLOAT_ZERO;
      doubleArray0[5] = (double) (byte)numberUtils0.BYTE_MINUS_ONE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) numberUtils0.BYTE_ZERO;
      byte byte0 = new Byte((byte) numberUtils0.BYTE_MINUS_ONE);
      short short0 = NumberUtils.min((short) (-906), (short) (-906), (short)12345);
      assertEquals((short) (-906), short0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[7];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
      
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[2] = (short) numberUtils0.SHORT_ZERO;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_ONE;
      shortArray0[3] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      byteArray0[3] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[4] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[5] = (byte) numberUtils0.BYTE_ZERO;
      short[] shortArray1 = new short[9];
      shortArray1[0] = (short) (byte) (-1);
      shortArray1[1] = (short) (byte)1;
      shortArray1[2] = (short) (byte) (-1);
      shortArray1[3] = (short) numberUtils0.SHORT_ONE;
      shortArray1[4] = (short) (byte)0;
      shortArray1[5] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray1[6] = (short) (byte)1;
      shortArray1[7] = (short) (byte)1;
      shortArray1[8] = (short) (byte) (-1);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)1, byte0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) (short) (-1);
      intArray0[5] = 117;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(117, int0);
      
      byte byte1 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-1), byte1);
      
      short short1 = NumberUtils.min(shortArray1);
      assertEquals((short) (-1), short1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0x)@e-9,di}|");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-)@e-9,di}|\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0xC=nG7;ulLirX");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"C=nG7;ulLirX\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--0X_6OBEa=t2F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (float)numberUtils0.FLOAT_MINUS_ONE;
      doubleArray0[1] = (double) (int)numberUtils0.INTEGER_ZERO;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[2] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[3] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[4] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[5] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[6] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)1, byte0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-2135);
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = (int) numberUtils0.INTEGER_ONE;
      intArray0[3] = (int) numberUtils0.INTEGER_ZERO;
      intArray0[4] = (-709);
      intArray0[5] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[6] = (int) (short)numberUtils0.SHORT_ONE;
      intArray0[7] = (int) numberUtils0.INTEGER_ZERO;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)3, (byte)3, (byte)3);
      assertEquals((byte)3, byte0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 68;
      floatArray0[1] = (float) 68;
      floatArray0[2] = (float) 68;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(68.0F, float0, 0.01F);
      
      byte byte0 = NumberUtils.max((byte) (-96), (byte)98, (byte) (-38));
      assertEquals((byte)98, byte0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[1] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[3] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[4] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[5] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[6] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[7] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)1, byte0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)numberUtils0.SHORT_ZERO;
      floatArray0[1] = (float) (byte)1;
      floatArray0[2] = (float) (int)numberUtils0.INTEGER_ONE;
      floatArray0[4] = (float) (long)numberUtils0.LONG_MINUS_ONE;
      floatArray0[5] = (float) (short)numberUtils0.SHORT_ONE;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.max(68, 13, (int) numberUtils0.BYTE_ONE);
      assertEquals(68, int0);
      
      byte byte0 = NumberUtils.toByte("---0XD#*TkbBX");
      assertEquals((byte)0, byte0);
      
      short short0 = NumberUtils.min((short)1, (short)69, (short) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short)numberUtils0.SHORT_ONE;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
      
      int int0 = NumberUtils.min(1, (int) numberUtils0.BYTE_ONE, (-1528));
      assertEquals((-1528), int0);
      
      byte byte0 = NumberUtils.min((byte) numberUtils0.BYTE_ZERO, (byte) numberUtils0.BYTE_ZERO, (byte) numberUtils0.BYTE_ZERO);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (int)numberUtils0.INTEGER_ZERO;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) numberUtils0.INTEGER_MINUS_ONE;
      intArray0[1] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[2] = (int) numberUtils0.INTEGER_MINUS_ONE;
      intArray0[3] = (int) numberUtils0.INTEGER_ONE;
      intArray0[4] = (int) (short)numberUtils0.SHORT_ONE;
      intArray0[5] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[6] = (int) (short)numberUtils0.SHORT_ZERO;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1), int0);
      
      short short0 = NumberUtils.min((short) numberUtils0.SHORT_ONE, (short) (-1283), (short) (-1314));
      assertEquals((short) (-1314), short0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      longArray0[1] = (-3019L);
      int int0 = NumberUtils.max((int) numberUtils0.INTEGER_ONE, (int) numberUtils0.INTEGER_ONE, (-150886746));
      assertEquals(1, int0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[1] = (short) numberUtils0.SHORT_ONE;
      shortArray0[2] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[3] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[4] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[5] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[6] = (short) numberUtils0.SHORT_ONE;
      shortArray0[7] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[4];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[3] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[4] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[5] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte) numberUtils0.BYTE_ZERO;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)1, byte0);
      
      doubleArray0[0] = (double) (float)numberUtils0.FLOAT_MINUS_ONE;
      doubleArray0[1] = (double) (int)numberUtils0.INTEGER_ZERO;
      doubleArray0[2] = (double) (byte)numberUtils0.BYTE_ZERO;
      doubleArray0[3] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
      
      byte byte1 = NumberUtils.toByte(" 24S`w#", (byte)70);
      assertEquals((byte)70, byte1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.max((short) numberUtils0.SHORT_ONE, (short) numberUtils0.BYTE_ZERO, (short)43);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) numberUtils0.INTEGER_ZERO;
      intArray0[1] = (int) (short)43;
      intArray0[2] = (int) (short)43;
      intArray0[3] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[4] = (int) (short)numberUtils0.SHORT_ONE;
      intArray0[5] = (int) numberUtils0.INTEGER_ONE;
      NumberUtils.min(intArray0);
      boolean boolean0 = NumberUtils.isNumber("Y(XVZ`1o>#u");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-2014);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-2014), int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      short short0 = NumberUtils.max((short)91, (short)27832, (short)368);
      assertEquals((short)27832, short0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xorg.apache.commons.lang3.math.NumberUtils");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("120|3.4E5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0X.12.3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (float)numberUtils0.FLOAT_MINUS_ONE;
      int int0 = NumberUtils.min((int) numberUtils0.SHORT_ZERO, (int) numberUtils0.SHORT_MINUS_ONE, 3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)59;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int[] intArray0 = new int[11];
      intArray0[2] = 4854;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(4854, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      longArray0[1] = (-3019L);
      longArray0[2] = (long) (int)numberUtils0.INTEGER_ONE;
      longArray0[3] = (long) numberUtils0.LONG_MINUS_ONE;
      longArray0[4] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-3019L), long0);
      
      long long1 = NumberUtils.max((long) numberUtils0.LONG_MINUS_ONE, 303L, 1827L);
      assertEquals(1827L, long1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0X=|_HEIyG");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"=|_HEIyG\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0X_6OBEa=t2F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-_6OBEa=t2F\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = NumberUtils.min(shortArray0);
      byte[] byteArray0 = new byte[2];
      short short1 = NumberUtils.toShort((String) null, (short)0);
      assertTrue(short1 == short0);
      
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("12");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int[] intArray0 = new int[2];
      NumberUtils.isNumber("-0xcreateNumber(String) 9b faAled");
      byte[] byteArray0 = new byte[2];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
      
      NumberUtils.createNumber("5l");
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[9];
      short short0 = NumberUtils.toShort("-0xcreateNumber(String) 9b faAled");
      assertEquals((short)0, short0);
      
      float[] floatArray0 = new float[2];
      NumberUtils.min(floatArray0);
      Number number0 = NumberUtils.createNumber("5l");
      assertNotNull(number0);
      
      boolean boolean0 = NumberUtils.isNumber("5l");
      assertTrue(boolean0);
      
      boolean boolean1 = NumberUtils.isNumber("-0xcreateNumber(String) 9b faAled");
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("RJ*");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)97;
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)97;
      longArray0[1] = (long) (byte)97;
      longArray0[2] = 12347L;
      longArray0[3] = (long) (byte)97;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(12347L, long0);
      
      short short0 = NumberUtils.toShort("l");
      assertEquals((short)0, short0);
      
      byte byte0 = NumberUtils.toByte("l", (byte)97);
      assertEquals((byte)97, byte0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[1];
      double double0 = new Float((double) numberUtils0.INTEGER_MINUS_ONE);
      byte byte0 = NumberUtils.min((byte) numberUtils0.BYTE_ONE, (byte) numberUtils0.BYTE_MINUS_ONE, (byte) numberUtils0.BYTE_ZERO);
      assertEquals((byte) (-1), byte0);
      
      int int0 = NumberUtils.toInt((String) null, (-12));
      assertEquals((-12), int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      short[] shortArray0 = new short[13];
      shortArray0[0] = (short) (-1237);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      float[] floatArray0 = new float[17];
      floatArray0[0] = (-128.52345F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short)27832, (short)27832, (short)70);
      assertEquals((short)27832, short0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      try { 
        NumberUtils.createNumber("{}R/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // {}R/ is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.min((short) numberUtils0.BYTE_MINUS_ONE, (short)46, (short) (-327));
      assertEquals((short) (-327), short0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.toByte("bar", (byte) numberUtils0.BYTE_ZERO);
      long[] longArray0 = new long[9];
      longArray0[0] = (long) numberUtils0.LONG_ZERO;
      longArray0[1] = (long) numberUtils0.LONG_ONE;
      NumberUtils.min(longArray0);
      NumberUtils.toLong((String) null, 1836L);
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)70;
      byteArray0[1] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[2] = (byte)70;
      NumberUtils.max(byteArray0);
      // Undeclared exception!
      try { 
        NumberUtils.createInteger(" is not a valid number.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" is not a valid number.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.max(100, (int) numberUtils0.INTEGER_ONE, (int) numberUtils0.INTEGER_MINUS_ONE);
      assertEquals(100, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte)numberUtils0.BYTE_ONE;
      floatArray0[1] = (float) (short)numberUtils0.SHORT_ZERO;
      floatArray0[2] = (float) numberUtils0.FLOAT_ONE;
      floatArray0[3] = (float) (long)numberUtils0.LONG_MINUS_ONE;
      floatArray0[4] = (float) (int)numberUtils0.INTEGER_MINUS_ONE;
      floatArray0[5] = (float) (byte)numberUtils0.BYTE_ONE;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1.0F), float0, 0.01F);
      
      byteArray0[1] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[3] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[4] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[5] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[6] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[7] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[8] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-1), byte0);
      
      NumberUtils.isNumber("S1z5N{9Q6e");
      long long0 = NumberUtils.min((long) numberUtils0.INTEGER_ONE, (long) numberUtils0.LONG_ONE, (-124L));
      assertEquals((-124L), long0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = Float.NEGATIVE_INFINITY;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
      
      byte byte0 = NumberUtils.min((byte) (-1), (byte) (-87), (byte)91);
      assertEquals((byte) (-87), byte0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-1.35591971E8);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.35591971E8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      NumberUtils.createBigDecimal((String) null);
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.createBigDecimal((String) null);
      double double0 = NumberUtils.min((double) numberUtils0.INTEGER_MINUS_ONE, 5.0, (-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[1] = (byte)42;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)42, byte0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("123.4E<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("N;qq5<_19 MIe^");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.min((short) numberUtils0.SHORT_ONE, (short) numberUtils0.BYTE_ZERO, (short) numberUtils0.SHORT_MINUS_ONE);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_166()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.min((short) numberUtils0.SHORT_ONE, (short) numberUtils0.BYTE_ZERO, (short)46);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[2] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[3] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[4] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[5] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[6] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[7] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[8] = (byte) numberUtils0.BYTE_ZERO;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-1), byte0);
      
      byte byte1 = NumberUtils.toByte("oY", (byte)1);
      assertEquals((byte)1, byte1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)32;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[7];
      longArray0[0] = 6260L;
      longArray0[1] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      longArray0[2] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      longArray0[3] = (long) numberUtils0.LONG_MINUS_ONE;
      longArray0[4] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      longArray0[5] = (long) (int)numberUtils0.INTEGER_ONE;
      longArray0[6] = (long) (int)numberUtils0.INTEGER_ZERO;
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1L), long0);
      
      double double0 = NumberUtils.toDouble("Hv[#R: j,", (double) numberUtils0.LONG_ZERO);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_173()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.max(2213L, (long) numberUtils0.BYTE_ZERO, 2213L);
      assertEquals(2213L, long0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-2648L);
      longArray0[1] = 929L;
      long long0 = NumberUtils.min(929L, 929L, (-2648L));
      assertEquals((-2648L), long0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (int)numberUtils0.INTEGER_ZERO;
      doubleArray0[1] = (double) (short)numberUtils0.SHORT_ONE;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1.0, double0, 0.01);
      
      long long0 = NumberUtils.min((long) numberUtils0.INTEGER_ZERO, (long) numberUtils0.LONG_MINUS_ONE, (-3161L));
      assertEquals((-3161L), long0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      float float0 = NumberUtils.toFloat("FJ}KUu<9@M`_<T'&");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_177()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.max((-1.0), (double) numberUtils0.FLOAT_ZERO, (double) numberUtils0.SHORT_MINUS_ONE);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("V");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float float0 = NumberUtils.max((float) numberUtils0.BYTE_ZERO, (float) numberUtils0.LONG_ONE, 1933.3512F);
      assertEquals(1933.3512F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double double0 = NumberUtils.toDouble("G)hN]", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("123.4E5");
      assertEquals(1.234E7F, number0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      try { 
        NumberUtils.createNumber(" is not a vajidLnumber.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  is not a vajidLnumber. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 498L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      long[] longArray0 = new long[19];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      try { 
        NumberUtils.createNumber("bu,0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"bu,0\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      try { 
        NumberUtils.createNumber("False result for (false, false, true)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // False result for (false, false, true) is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.min((int) numberUtils0.INTEGER_MINUS_ONE, (int) numberUtils0.SHORT_ONE, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 1L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      try { 
        NumberUtils.createNumber("_6OBEa=t2F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // _6OBEa=t2F is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.toShort("111", (short) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((short)111, short0);
      
      byte byte0 = NumberUtils.min((byte) numberUtils0.BYTE_MINUS_ONE, (byte) numberUtils0.BYTE_ONE, (byte) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("-0x11d11");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"x11d11\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_195()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.min(0L, (long) numberUtils0.INTEGER_ONE, 1L);
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("YMVO'9+6");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("12345l");
      assertNotNull(number0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-514L);
      long long0 = NumberUtils.toLong("12345l");
      assertEquals(0L, long0);
      
      long long1 = NumberUtils.min(longArray0);
      assertEquals((-514L), long1);
      
      boolean boolean0 = NumberUtils.isNumber("12345l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      NumberUtils.toByte("Er0}7m@1f@3hGA", (byte)45);
      NumberUtils.min((byte)45, (byte)114, (byte)0);
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("Er0}7m@1f@3hGA");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Er0}7\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte) (-72), (byte) (-72), (byte) (-72));
      assertEquals((byte) (-72), byte0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float float0 = NumberUtils.min((-10.0F), 1.1F, (-10.0F));
      assertEquals((-10.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      int int0 = NumberUtils.toInt("0", (-91));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("createNumber(String) 8 faEled");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (long)numberUtils0.LONG_MINUS_ONE;
      doubleArray0[1] = (double) (byte)numberUtils0.BYTE_ONE;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) (int)numberUtils0.INTEGER_ONE;
      doubleArray0[4] = (double) (float)numberUtils0.FLOAT_ONE;
      doubleArray0[5] = (double) (int)numberUtils0.INTEGER_ONE;
      doubleArray0[6] = (double) (int)numberUtils0.INTEGER_MINUS_ONE;
      doubleArray0[7] = (double) (short)numberUtils0.SHORT_ONE;
      doubleArray0[8] = (double) (float)numberUtils0.FLOAT_ONE;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) numberUtils0.DOUBLE_ZERO;
      doubleArray0[1] = (double) (float)numberUtils0.FLOAT_ZERO;
      doubleArray0[2] = (double) (short)numberUtils0.SHORT_MINUS_ONE;
      doubleArray0[3] = (double) (long)numberUtils0.LONG_ONE;
      doubleArray0[4] = (double) (float)numberUtils0.FLOAT_ONE;
      doubleArray0[5] = (double) (long)numberUtils0.LONG_ZERO;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1.0, double0, 0.01);
      
      byte byte0 = NumberUtils.toByte("-0x", (byte) numberUtils0.BYTE_ZERO);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1.0;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (double) (long)numberUtils0.LONG_MINUS_ONE;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
      
      byte byte0 = NumberUtils.toByte("", (byte) numberUtils0.BYTE_ONE);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }
}
