/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 01:21:45 GMT 2023
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;
import java.util.function.BiFunction;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultParser_ESTest extends DefaultParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("f", "---4%b", true, "f");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      options0.addOption("f", "-)w", true, "-)w");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "---";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Ambiguous option: '---'  (could be: '---4%b', '-)w')
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.builder();
      Option option0 = new Option("a", "a", true, "a");
      options0.addOption(option0);
      DefaultParser defaultParser1 = new DefaultParser();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-a";
      stringArray0[1] = "---b=bar";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option option0 = new Option("a", "a", true, "a");
      Options options1 = options0.addOption(option0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-a";
      stringArray0[1] = "---b=bar";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      options0.addOption("", "-)w", true, "-)w");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "---";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option option0 = new Option("a", "a", true, "a");
      Options options1 = options0.addOption(option0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-a";
      stringArray0[1] = "-a";
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option: a
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("t1", true, "t1");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      DefaultParser defaultParser1 = new DefaultParser();
      String[] stringArray0 = new String[4];
      optionGroup1.setRequired(true);
      stringArray0[0] = "-t1";
      stringArray0[1] = "-t1";
      options2.getMatchingOptions("-t1");
      stringArray0[2] = "-t1";
      try { 
        defaultParser1.parse(options2, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option: t1
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("a");
      Option option0 = new Option("t", "a");
      Options options1 = options0.addOption("a", "a");
      Option option1 = option_Builder0.build();
      option1.setArgs((-2));
      options1.addOption("x", true, "t");
      Options options2 = options1.addOption(option1);
      String[] stringArray0 = new String[2];
      options1.getRequiredOptions();
      stringArray0[0] = "-ab";
      stringArray0[1] = "t";
      defaultParser0.handleConcatenatedOptions("a");
      options2.getOptionGroups();
      Properties properties0 = new Properties();
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      CommandLine commandLine0 = defaultParser0.parse(options2, stringArray0, properties0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      defaultParser0.handleConcatenatedOptions("T^v~>~fj");
      Options options3 = defaultParser0.options;
      CommandLine commandLine1 = defaultParser0.parse(options2, stringArray0);
      assertFalse(commandLine1.equals((Object)commandLine0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-b=bar";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -b=bar
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.builder("a");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "a";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      defaultParser0.cmd = commandLine0;
      Option option0 = new Option("t1", "a");
      Options options1 = options0.addRequiredOption("t1", "a", true, "t1");
      option0.setRequired(false);
      option0.setArgs(153);
      options1.addOption(option0);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "-ab";
      stringArray1[1] = "-ab";
      defaultParser0.handleConcatenatedOptions("a");
      stringArray1[2] = "-ab";
      DefaultParser defaultParser1 = new DefaultParser();
      String[] stringArray2 = new String[9];
      stringArray2[0] = "last";
      stringArray2[1] = "-ab";
      stringArray2[2] = "t1";
      stringArray2[4] = "last";
      stringArray2[5] = "t1";
      defaultParser1.parse(options0, stringArray1, false);
      defaultParser1.handleConcatenatedOptions("last");
      defaultParser1.handleConcatenatedOptions("yes");
      assertFalse(defaultParser1.equals((Object)defaultParser0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("a");
      Option option0 = option_Builder0.build();
      option0.setArgs((-2));
      Options options1 = options0.addOption(option0);
      String[] stringArray0 = new String[3];
      options0.getRequiredOptions();
      stringArray0[0] = "-ab";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      options0.addOption("a", "~4kOrb^sJR|p05qF}p");
      Option.Builder option_Builder0 = Option.builder("a");
      Option option0 = option_Builder0.build();
      option0.setArgs(153);
      Options options1 = options0.addOption(option0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-ab";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-";
      stringArray0[1] = "-b==*a";
      stringArray0[2] = "-b==*a";
      stringArray0[3] = "-b==*a";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -b==*a
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      option_Builder0.hasArg();
      Option.Builder option_Builder1 = option_Builder0.numberOfArgs(1);
      Option.Builder option_Builder2 = option_Builder0.argName("t1_path");
      Option option0 = option_Builder0.build();
      Options options1 = options0.addOption(option0);
      option_Builder2.hasArg(false);
      Option option1 = option_Builder0.build();
      Options options2 = options1.addOption(option1);
      Option.Builder option_Builder3 = Option.builder("b");
      option_Builder3.hasArg(false);
      Option option2 = option_Builder3.build();
      Options options3 = options2.addOption(option2);
      Option.Builder option_Builder4 = Option.builder("last");
      Option option3 = option_Builder4.build();
      options2.addOption("t1_path", "b", true, "t1_path");
      option_Builder1.build();
      options3.addOption(option3);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "t1";
      stringArray0[1] = "t1_path";
      defaultParser0.parse(options2, stringArray0);
      defaultParser0.handleConcatenatedOptions("last");
      Properties properties0 = new Properties();
      defaultParser0.parse(options0, stringArray0, properties0, true);
      CommandLine commandLine0 = defaultParser0.parse(options3, stringArray0, properties0, true);
      defaultParser0.handleConcatenatedOptions("4b3oVz");
      CommandLine commandLine1 = defaultParser0.parse(options1, stringArray0, properties0, false);
      assertFalse(commandLine1.equals((Object)commandLine0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Options options1 = options0.addOption("a", "a");
      String[] stringArray0 = new String[3];
      List list0 = new LinkedList<Object>();
      stringArray0[0] = "-ab";
      CommandLine commandLine0 = defaultParser0.parse(options1, stringArray0, (Properties) null, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("a", "a", true, "a");
      Option.builder("");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-ab";
      CommandLine commandLine0 = defaultParser0.parse(options1, stringArray0);
      CommandLine commandLine1 = defaultParser0.parse(options1, stringArray0);
      assertFalse(commandLine1.equals((Object)commandLine0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      Properties properties0 = new Properties();
      properties0.put("---t1", "---t1");
      String[] stringArray0 = new String[0];
      try { 
        defaultParser0.parse(options0, stringArray0, properties0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Default option wasn't defined
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Options options0 = new Options();
      options0.addRequiredOption("2", "2", false, "2");
      DefaultParser defaultParser0 = new DefaultParser();
      try { 
        defaultParser0.parse(options0, (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing required option: 2
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      option_Builder0.hasArg();
      Option.Builder option_Builder1 = option_Builder0.numberOfArgs(1);
      option_Builder0.optionalArg(true);
      option_Builder0.argName("t1_path");
      Option option0 = option_Builder0.build();
      Options options1 = options0.addOption(option0);
      Option.Builder option_Builder2 = Option.builder("a");
      option_Builder2.hasArg(false);
      Option option1 = option_Builder2.build();
      Options options2 = options1.addOption(option1);
      Option.Builder option_Builder3 = Option.builder("b");
      option_Builder3.hasArg(false);
      Option option2 = option_Builder3.build();
      Options options3 = options2.addOption(option2);
      Option.Builder option_Builder4 = Option.builder("last");
      Option option3 = option_Builder4.build();
      options2.addOption("a", "b", true, "t1_path");
      option_Builder1.build();
      options3.addOption(option3);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-ab";
      stringArray0[1] = "a";
      defaultParser0.parse(options2, stringArray0);
      defaultParser0.handleConcatenatedOptions("last");
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-1";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -1
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      Option option0 = option_Builder0.build();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      String[] stringArray0 = new String[0];
      CommandLine commandLine0 = defaultParser0.parse(options1, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "---t1";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: ---t1
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "--b=bar";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: --b=bar
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      option_Builder0.hasArg();
      option_Builder0.numberOfArgs(1);
      option_Builder0.optionalArg(true);
      option_Builder0.argName("t1_path");
      Option option0 = option_Builder0.build();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "t1";
      stringArray0[1] = "!";
      stringArray0[2] = "t1";
      stringArray0[3] = "t1_path";
      stringArray0[4] = "j";
      stringArray0[5] = "t1";
      stringArray0[6] = "t1_path";
      stringArray0[7] = "t1";
      stringArray0[8] = "t1_path";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, true);
      defaultParser0.cmd = commandLine0;
      Options options1 = options0.addOption(option0);
      Option.Builder option_Builder1 = Option.builder("a");
      option_Builder1.hasArg(false);
      Option option1 = option_Builder1.build();
      Options options2 = options1.addOption(option1);
      Option.Builder option_Builder2 = Option.builder("b");
      option_Builder2.hasArg(false);
      Option option2 = option_Builder2.build();
      Options options3 = options2.addOption(option2);
      Option.Builder option_Builder3 = Option.builder("last");
      option_Builder3.hasArg(false);
      Option option3 = option_Builder3.build();
      options3.addOption(option3);
      defaultParser0.handleConcatenatedOptions("-t1");
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[0];
      Properties properties0 = new Properties();
      defaultParser0.parse(options0, stringArray0, properties0, true);
      defaultParser0.handleConcatenatedOptions("--t");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-D-b=bar";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[21];
      stringArray0[0] = ".V;xiIan7vC7]";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void shouldParseShortOptionWithValueshouldParseShortOptionWithValue_27()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      option_Builder0.hasArg();
      option_Builder0.numberOfArgs(1);
      option_Builder0.optionalArg(true);
      option_Builder0.argName("t1_path");
      Option option0 = option_Builder0.build();
      Options options1 = options0.addOption(option0);
      Option.Builder option_Builder1 = Option.builder("a");
      option_Builder1.hasArg(false);
      Option option1 = option_Builder1.build();
      Options options2 = options1.addOption(option1);
      Option.Builder option_Builder2 = Option.builder("b");
      option_Builder2.hasArg(false);
      Option option2 = option_Builder2.build();
      Options options3 = options2.addOption(option2);
      Option.Builder option_Builder3 = Option.builder("last");
      option_Builder3.hasArg(false);
      options1.getOption(": ");
      Option option3 = option_Builder3.build();
      Options options4 = options3.addOption(option3);
      options3.getMatchingOptions("t1_path");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-t1";
      stringArray0[1] = "path/to/my/db";
      defaultParser0.parse(options4, stringArray0);
      defaultParser0.handleConcatenatedOptions("!c;g(NU-wUI(x6)Dv");
  }

  @Test(timeout = 4000)
  public void shouldParseShortOptionWithoutValueshouldParseConcatenatedShortOptions_28()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      option_Builder0.hasArg();
      option_Builder0.numberOfArgs(1);
      option_Builder0.optionalArg(true);
      option_Builder0.argName("t1_path");
      Option option0 = option_Builder0.build();
      Options options1 = options0.addOption(option0);
      Option.Builder option_Builder1 = Option.builder("a");
      option_Builder1.hasArg(false);
      Option option1 = option_Builder1.build();
      Options options2 = options1.addOption(option1);
      Option.Builder option_Builder2 = Option.builder("b");
      option_Builder2.hasArg(false);
      Option option2 = option_Builder2.build();
      Options options3 = options2.addOption(option2);
      Option.Builder option_Builder3 = Option.builder("last");
      option_Builder3.hasArg(false);
      Option option3 = option_Builder3.build();
      Options options4 = options3.addOption(option3);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-t1";
      stringArray0[1] = "-last";
      CommandLine commandLine0 = defaultParser0.parse(options4, stringArray0);
      defaultParser0.handleConcatenatedOptions("y+A`HceFy=6l");
      Properties properties0 = new Properties();
      CommandLine commandLine1 = defaultParser0.parse(options1, stringArray0, properties0, true);
      assertFalse(commandLine1.equals((Object)commandLine0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      defaultParser0.handleConcatenatedOptions("-");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[0];
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, properties0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      CommandLine commandLine0 = defaultParser0.parse(options0, (String[]) null, false);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[0];
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
      
      defaultParser0.handleConcatenatedOptions(".V;xiIan7vC7]");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      // Undeclared exception!
      try { 
        defaultParser0.handleConcatenatedOptions("1NNwLlW/ojU2*(aIz");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option option0 = new Option("a", "a");
      option0.setArgs((-2));
      Options options1 = options0.addOption(option0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-a";
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option: a
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("a");
      Option option0 = option_Builder0.build();
      Options options1 = options0.addOption(option0);
      defaultParser0.parse(options1, (String[]) null);
      try { 
        defaultParser0.handleConcatenatedOptions("-ad");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -ad
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "t1";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Options options1 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("t1", "t1");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options2 = options1.addOptionGroup(optionGroup1);
      Option option1 = new Option("t1", true, "t1");
      String[] stringArray0 = new String[18];
      stringArray0[0] = "-t1";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options2, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      options0.addOption("a", "a", true, "a");
      Option.builder("");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-ab";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option option0 = new Option("a", "a", true, "a");
      Options options1 = options0.addOption(option0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-a";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-.V;xiIan7vC7]";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -.V;xiIan7vC7]
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-Jsource=1.5";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -Jsource=1.5
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option option0 = new Option("a", "a");
      option0.setArgs((-2));
      options0.addOption(option0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-a";
      stringArray0[1] = "a";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("a", true, "a");
      Properties properties0 = new Properties();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[0];
      defaultParser0.parse(options1, stringArray0, properties0, true);
      defaultParser0.handleConcatenatedOptions("La");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      CommandLine commandLine0 = defaultParser0.parse(options0, (String[]) null);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option option0 = new Option("a", "a");
      option0.setArgs((-2));
      options0.addOption(option0);
      String[] stringArray0 = new String[11];
      stringArray0[0] = "-a";
      stringArray0[1] = "-a";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option: a
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }
}
