/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 23:41:03 GMT 2023
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thoughtworks.xstream.converters.ConversionException;
import org.apache.commons.math3.fraction.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.testcarver.testcase.EvoSuiteXStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 2313);
      Fraction fraction1 = Fraction.getReducedFraction(Integer.MIN_VALUE, 2313);
      // Undeclared exception!
      try { 
        fraction0.add(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: -4,294,967,296
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      // Undeclared exception!
      try { 
        fraction0.ONE_THIRD.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(1.8014398509481984E16);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 18,014,398,509,481,984 to fraction (18,014,398,509,481,984/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = Fraction.ONE_FIFTH;
      Fraction fraction2 = fraction0.ZERO.subtract(fraction1);
      assertEquals((-0.2), fraction2.doubleValue(), 0.01);
      assertEquals((-1), fraction2.getNumerator());
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = new Fraction(2191.3714);
      Fraction fraction2 = Fraction.ONE_QUARTER;
      Fraction fraction3 = new Fraction(2168.1809947972824);
      Fraction fraction4 = Fraction.TWO;
      Fraction fraction5 = new Fraction(2191.3714);
      assertTrue(fraction5.equals((Object)fraction1));
      assertEquals(2191.3713F, fraction5.floatValue(), 0.01F);
      
      String string0 = fraction0.toString();
      assertEquals("2", string0);
      
      Fraction fraction6 = Fraction.ONE_QUARTER;
      Fraction fraction7 = Fraction.ONE_HALF;
      boolean boolean0 = fraction6.equals(fraction7);
      assertFalse(fraction7.equals((Object)fraction2));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = new Fraction((double) Integer.MAX_VALUE);
      Fraction fraction2 = new Fraction((double) Integer.MAX_VALUE);
      Fraction fraction3 = new Fraction((-0.1));
      Fraction fraction4 = fraction3.TWO_FIFTHS.subtract(fraction0);
      assertEquals(1.4, fraction4.doubleValue(), 0.01);
      
      Fraction fraction5 = new Fraction((-0.1));
      Fraction fraction6 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction7 = fraction6.THREE_FIFTHS.multiply((-2012));
      assertEquals((byte)73, fraction7.byteValue());
      
      Fraction fraction8 = new Fraction((double) (-2012));
      Fraction fraction9 = fraction2.ONE.divide(fraction0);
      Fraction fraction10 = new Fraction(43.22225709687704);
      Fraction fraction11 = new Fraction(0.66401019848615);
      Fraction fraction12 = Fraction.ZERO;
      Fraction fraction13 = Fraction.getReducedFraction(1690, (-2012));
      fraction13.ONE.add(982);
      Fraction fraction14 = new Fraction(75.0);
      fraction14.ONE_QUARTER.getField();
      Fraction fraction15 = new Fraction((-0.1), (-2395));
      fraction2.equals(fraction12);
      Fraction fraction16 = Fraction.getReducedFraction(2223, (-2395));
      assertEquals((-0.9281837160751566), fraction16.doubleValue(), 0.01);
      
      fraction2.negate();
      fraction10.toString();
      boolean boolean0 = fraction15.equals(fraction5);
      assertTrue(fraction15.equals((Object)fraction9));
      assertFalse(boolean0);
      
      Fraction fraction17 = Fraction.getReducedFraction(21297, 21297);
      assertFalse(fraction17.equals((Object)fraction9));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = Fraction.ONE_HALF;
      Fraction fraction2 = fraction1.add(fraction0);
      assertEquals(1.0, fraction2.doubleValue(), 0.01);
      assertEquals(1, fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = new Fraction((-490.0));
      Fraction fraction2 = fraction1.add(fraction0);
      assertEquals((short) (-490), fraction1.shortValue());
      assertSame(fraction2, fraction1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = new Fraction((double) Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.FOUR_FIFTHS.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.subtract(Integer.MIN_VALUE);
      boolean boolean0 = fraction1.equals(fraction0);
      assertTrue(boolean0);
      
      Fraction fraction2 = Fraction.MINUS_ONE;
      Fraction fraction3 = fraction0.divide(1336);
      assertFalse(fraction3.equals((Object)fraction0));
      assertEquals(1.8712574850299402E-4, fraction3.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) Integer.MIN_VALUE);
      assertEquals((-2147483648L), fraction0.longValue());
      
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = new Fraction((-3054.514));
      Fraction fraction2 = fraction0.add(fraction1);
      assertEquals((-1527257), fraction2.getNumerator());
      assertSame(fraction2, fraction1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = Fraction.ONE_HALF;
      Fraction fraction2 = fraction1.ONE_FIFTH.subtract(fraction0);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = new Fraction((-3054.514));
      Fraction fraction2 = fraction0.add(fraction1);
      assertEquals((-1527007), fraction2.getNumerator());
      assertEquals((-3054.014), fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, Integer.MAX_VALUE);
      assertEquals(0, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(3.7353947325291514E-6, 3.7353947325291514E-6, (-2147483646));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 0 to fraction after -2,147,483,646 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.divide(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(1.0E-15);
      Fraction fraction3 = new Fraction((-3454.25));
      Fraction fraction4 = new Fraction(4572.7724709161075);
      Fraction fraction5 = new Fraction(1.0E-5);
      Fraction fraction6 = new Fraction(238);
      Fraction fraction7 = new Fraction((-0.09088450866185192));
      Fraction fraction8 = new Fraction((-1.0));
      double double0 = fraction6.percentageValue();
      assertEquals(1, fraction6.getDenominator());
      assertEquals(23800.0, double0, 0.01);
      
      Fraction fraction9 = new Fraction(1232.67);
      Fraction fraction10 = new Fraction((-0.09088450866185192), (-1798));
      Fraction fraction11 = fraction5.negate();
      assertEquals(99999, fraction11.getDenominator());
      assertEquals((-1.00001E-5F), fraction11.floatValue(), 0.01F);
      
      float float0 = fraction4.floatValue();
      assertEquals(4572.7725F, float0, 0.01F);
      
      int int0 = fraction7.compareTo(fraction1);
      assertEquals((-1), int0);
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.MINUS_ONE;
      double double0 = fraction1.percentageValue();
      assertEquals((-100.0), double0, 0.01);
      
      Fraction fraction2 = Fraction.MINUS_ONE;
      Fraction fraction3 = fraction2.negate();
      fraction1.floatValue();
      Fraction fraction4 = fraction3.divide((-2553));
      assertEquals((-3.916960438699569E-4), fraction4.doubleValue(), 0.01);
      
      int int0 = fraction2.compareTo(fraction3);
      assertEquals((-1), int0);
      
      int int1 = fraction0.compareTo(fraction1);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      fraction0.compareTo(fraction0);
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      assertEquals(2147483647L, fraction3.longValue());
      
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-0.1));
      assertEquals((-0.1), fraction6.doubleValue(), 0.01);
      
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction9 = new Fraction(332.0);
      Fraction fraction10 = new Fraction((-2323.0));
      Fraction fraction11 = new Fraction((-1.0));
      Fraction fraction12 = Fraction.ZERO;
      Fraction fraction13 = new Fraction((-1.0));
      fraction12.equals(fraction13);
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      boolean boolean0 = fraction12.equals(object2);
      assertFalse(boolean0);
      
      fraction4.hashCode();
      assertTrue(fraction4.equals((Object)fraction13));
      assertTrue(fraction4.equals((Object)fraction11));
      assertEquals((-1.0F), fraction4.floatValue(), 0.01F);
      
      Fraction fraction14 = fraction3.divide(fraction10);
      assertEquals(Integer.MAX_VALUE, fraction3.getNumerator());
      assertEquals((-924444.1011622901), fraction14.doubleValue(), 0.01);
      
      long long0 = fraction6.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = Fraction.ONE_HALF;
      int int0 = fraction1.compareTo(fraction0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-1086));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-1,086, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      fraction0.equals(fraction0);
      Fraction fraction1 = Fraction.MINUS_ONE;
      int int0 = fraction1.compareTo(fraction0);
      assertEquals((-1), int0);
      
      Fraction fraction2 = fraction1.divide((-1));
      assertEquals(1, fraction2.getNumerator());
      assertEquals((short)1, fraction2.shortValue());
      assertFalse(fraction2.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(100.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction((-1.0));
      Fraction fraction4 = new Fraction(0.0);
      Fraction fraction5 = new Fraction((-242343.0));
      Fraction fraction6 = new Fraction((-242343.0));
      Fraction.getReducedFraction(1046, 3542);
      Fraction fraction7 = new Fraction(5.3036932601280284E-6);
      Fraction fraction8 = new Fraction(2034.0);
      Fraction fraction9 = Fraction.getReducedFraction(23577716, (-20561));
      Fraction fraction10 = Fraction.TWO_QUARTERS;
      Fraction fraction11 = new Fraction(8.168421061327535E-6, (-20561));
      Fraction fraction12 = fraction6.negate();
      assertEquals(242343L, fraction12.longValue());
      
      Fraction fraction13 = fraction9.subtract((-55));
      assertEquals((-1091.7203F), fraction13.floatValue(), 0.01F);
      assertEquals((-22446861), fraction13.getNumerator());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(281, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 281/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(75.0);
      Fraction fraction4 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction5 = new Fraction(1.019848614991492E-5);
      Fraction fraction6 = new Fraction(968.5331297922);
      Fraction fraction7 = new Fraction(1.019848614991492E-5);
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction9 = Fraction.getReducedFraction(1386, Integer.MIN_VALUE);
      Fraction fraction10 = new Fraction(75.0);
      Fraction fraction11 = new Fraction(4.2568383673557975E-7);
      Fraction fraction12 = Fraction.getReducedFraction(2163, 265);
      Fraction fraction13 = new Fraction((-2.957007209750105E-8));
      Fraction fraction14 = new Fraction(3940.21, (-562));
      fraction6.negate();
      assertEquals((byte) (-56), fraction6.byteValue());
      
      fraction11.equals(fraction3);
      assertTrue(fraction11.equals((Object)fraction13));
      assertEquals(75.0, fraction3.doubleValue(), 0.01);
      
      fraction12.negate();
      String string0 = fraction9.toString();
      assertEquals("-693 / 1073741824", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (2,147,483,649/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void testRemovetestRemovetestRemovetestRemove_30()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction(0.0);
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = fraction7.ZERO.abs();
      fraction8.ONE_THIRD.add(Integer.MAX_VALUE);
      fraction7.TWO_QUARTERS.subtract(fraction0);
      Fraction fraction9 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction10 = new Fraction(332.0);
      Fraction fraction11 = new Fraction((-2323.0));
      Fraction fraction12 = new Fraction((-1307.279127825879));
      Fraction fraction13 = new Fraction(0.66401019848615);
      Fraction fraction14 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction14.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction14.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction14.equals(object2);
      // Undeclared exception!
      try { 
        EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</orghapache.commons.math3.fraction.Fraction>");
        fail("Expecting exception: ConversionException");
      
      } catch(ConversionException e) {
         //
         // 
         // ---- Debugging information ----
         // cause-exception     : com.thoughtworks.xstream.io.StreamException
         // cause-message       : 
         // class               : org.apache.commons.math3.fraction.Fraction
         // required-type       : org.apache.commons.math3.fraction.Fraction
         // converter-type      : com.thoughtworks.xstream.converters.reflection.ReflectionConverter
         // path                : /org.apache.commons.math3.fraction.Fraction
         // line number         : 4
         // version             : 1.2.1-SNAPSHOT
         // -------------------------------
         //
         verifyException("com.thoughtworks.xstream.core.TreeUnmarshaller", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.MINUS_ONE.abs();
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1L, fraction1.longValue());
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      assertEquals(1, fraction3.getDenominator());
      
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-0.1));
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction9 = new Fraction(332.0);
      Fraction fraction10 = new Fraction((-2323.0));
      Fraction fraction11 = new Fraction((-1.0));
      Fraction fraction12 = Fraction.ZERO;
      Fraction fraction13 = new Fraction((-1.0));
      boolean boolean0 = fraction12.equals(fraction13);
      assertFalse(boolean0);
      
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object2);
      assertTrue(fraction12.equals((Object)fraction5));
      
      fraction4.hashCode();
      assertTrue(fraction4.equals((Object)fraction11));
      assertFalse(fraction4.equals((Object)fraction6));
      
      Fraction fraction14 = fraction1.subtract(Integer.MAX_VALUE);
      assertEquals((-2147483572), fraction14.getNumerator());
      
      int int0 = fraction10.getNumerator();
      assertFalse(fraction10.equals((Object)fraction2));
      assertEquals((-2323), int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.negate();
      assertEquals(2, fraction1.getDenominator());
      assertEquals((-0.5F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) Integer.MIN_VALUE);
      Fraction fraction1 = fraction0.ONE_QUARTER.add(Integer.MIN_VALUE);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0.25, fraction1.doubleValue(), 0.01);
      
      String string0 = fraction0.toString();
      assertEquals("-2147483648", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      String string0 = fraction0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = Fraction.ONE;
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.FOUR_FIFTHS.multiply(fraction1);
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction((double) Integer.MAX_VALUE);
      fraction5.ZERO.abs();
      Fraction fraction6 = new Fraction((-0.1));
      Fraction fraction7 = new Fraction((-0.1));
      Fraction fraction8 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction9 = new Fraction(332.0);
      Fraction fraction10 = Fraction.TWO;
      fraction10.ONE.divide(fraction0);
      Fraction fraction11 = new Fraction(44.0);
      Fraction fraction12 = new Fraction(0.66401019848615);
      Fraction fraction13 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object2);
      Object object3 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object3);
      Object object4 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      assertNotSame(object4, object0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = new Fraction(500.0);
      String string0 = fraction1.THREE_QUARTERS.toString();
      assertEquals("3 / 4", string0);
      
      Fraction fraction2 = new Fraction((-1.0));
      Fraction fraction3 = Fraction.FOUR_FIFTHS;
      Fraction fraction4 = new Fraction((-0.1));
      Fraction fraction5 = new Fraction((-0.1));
      Fraction fraction6 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction7 = new Fraction((-0.1));
      Fraction fraction8 = Fraction.ONE_THIRD;
      Fraction fraction9 = new Fraction((-211.725229382594));
      Fraction fraction10 = fraction7.THREE_FIFTHS.subtract(fraction1);
      assertEquals(5, fraction10.getDenominator());
      assertEquals((-499.4F), fraction10.floatValue(), 0.01F);
      
      Fraction fraction11 = Fraction.ZERO;
      fraction5.equals(fraction11);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Object object0 = new Object();
      boolean boolean0 = fraction8.equals(object0);
      assertFalse(boolean0);
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction0.equals(fraction7);
      assertTrue(fraction7.equals((Object)fraction4));
      
      fraction9.hashCode();
      assertEquals((short) (-211), fraction9.shortValue());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.THREE_FIFTHS;
      fraction0.multiply(fraction1);
      Fraction fraction2 = Fraction.ONE_QUARTER;
      assertNotSame(fraction2, fraction3);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-18738), (-18738));
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) Integer.MIN_VALUE);
      fraction0.MINUS_ONE.subtract(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void testRemovetestRemove_43()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, fraction3.getNumerator());
      
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-0.1));
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      assertEquals((-2.147483648E9), fraction8.doubleValue(), 0.01);
      
      Fraction fraction9 = new Fraction(332.0);
      Fraction fraction10 = new Fraction((-2323.0));
      Fraction fraction11 = new Fraction(44.0);
      Fraction fraction12 = new Fraction(0.66401019848615);
      assertEquals(753, fraction12.getDenominator());
      
      Fraction fraction13 = Fraction.ZERO;
      Fraction fraction14 = new Fraction((-1.0));
      boolean boolean0 = fraction13.equals(fraction14);
      assertTrue(fraction14.equals((Object)fraction4));
      assertFalse(fraction14.equals((Object)fraction11));
      assertFalse(boolean0);
      
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object2);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      int int0 = fraction0.getDenominator();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void testRemovetestRemove_45()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction((double) Integer.MAX_VALUE);
      Fraction fraction6 = new Fraction((-0.1));
      Fraction fraction7 = new Fraction((-0.1));
      Fraction fraction8 = new Fraction(Integer.MAX_VALUE);
      assertEquals(2.147483647E9, fraction8.doubleValue(), 0.01);
      
      Fraction fraction9 = new Fraction(332.0);
      Fraction fraction10 = Fraction.TWO;
      Fraction fraction11 = new Fraction(44.0);
      Fraction fraction12 = new Fraction(0.66401019848615);
      Fraction fraction13 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object2);
      Object object3 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object3);
      assertFalse(fraction13.equals((Object)fraction12));
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      int int0 = fraction9.intValue();
      assertEquals(332, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.abs();
      assertEquals(0.25, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.ONE_THIRD.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      double double0 = fraction0.percentageValue();
      assertEquals(0.0, double0, 0.01);
      
      Fraction fraction1 = fraction0.negate();
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.THREE_QUARTERS.reciprocal();
      assertEquals(4, fraction1.getNumerator());
      assertEquals(1.3333334F, fraction1.floatValue(), 0.01F);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      Fraction fraction2 = fraction1.ONE_THIRD.divide(fraction0);
      assertEquals(5, fraction2.getNumerator());
      assertEquals(0.8333333333333334, fraction2.doubleValue(), 0.01);
      
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(4514, 4514);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = Fraction.TWO;
      Fraction fraction2 = fraction0.multiply(fraction1);
      assertEquals(0.4F, fraction2.floatValue(), 0.01F);
      assertEquals(5, fraction2.getDenominator());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) 2147483636, (-1925));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,636 to fraction (-2,147,483,635/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fraction fraction0 = new Fraction(5.0614674548127384E-8, Integer.MIN_VALUE);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      fraction0.TWO.getField();
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1167), (-1167));
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.divide(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 0/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.MINUS_ONE;
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(boolean0);
      
      Fraction fraction2 = Fraction.MINUS_ONE;
      int int0 = fraction1.compareTo(fraction0);
      assertEquals((-1), int0);
      
      Fraction fraction3 = fraction1.negate();
      assertFalse(fraction3.equals((Object)fraction0));
      assertEquals(1L, fraction3.longValue());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = Fraction.TWO_FIFTHS;
      Fraction fraction2 = fraction1.add(fraction0);
      assertEquals(0.9, fraction2.doubleValue(), 0.01);
      assertEquals(9, fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = Fraction.MINUS_ONE;
      Fraction fraction2 = fraction0.MINUS_ONE.subtract(fraction1);
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      assertEquals(1, fraction2.getDenominator());
      
      String string0 = fraction0.toString();
      assertEquals("2", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = new Fraction(4);
      assertEquals(4, fraction0.getNumerator());
      assertEquals((short)4, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Object object0 = new Object();
      boolean boolean0 = fraction0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = new Fraction((-3054.514));
      assertEquals((-1527257), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      String string0 = fraction0.toString();
      assertEquals("1 / 2", string0);
  }
}
