/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 07:49:51 GMT 2023
 */

package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.util.zip.Adler32;
import org.apache.commons.compress.utils.ChecksumCalculatingInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ChecksumCalculatingInputStream_ESTest extends ChecksumCalculatingInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream0);
      assertEquals(1L, checksumCalculatingInputStream0.getValue());
      
      int int0 = checksumCalculatingInputStream0.read(byteArray0);
      assertEquals((-1), int0);
      
      checksumCalculatingInputStream0.skip((-1));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(checksumCalculatingInputStream0, byteArrayInputStream0);
      sequenceInputStream0.read();
      int int1 = checksumCalculatingInputStream0.read();
      assertTrue(int1 == int0);
      
      ChecksumCalculatingInputStream checksumCalculatingInputStream1 = new ChecksumCalculatingInputStream(adler32_0, checksumCalculatingInputStream0);
      checksumCalculatingInputStream1.getValue();
      long long0 = checksumCalculatingInputStream0.skip(0L);
      assertEquals(0L, long0);
      
      checksumCalculatingInputStream0.getValue();
      checksumCalculatingInputStream1.read();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(checksumCalculatingInputStream0, 12);
      ChecksumCalculatingInputStream checksumCalculatingInputStream2 = new ChecksumCalculatingInputStream(adler32_0, pushbackInputStream0);
      checksumCalculatingInputStream2.read(byteArray0);
      long long1 = checksumCalculatingInputStream0.getValue();
      assertEquals(1L, long1);
      
      int int2 = checksumCalculatingInputStream1.read();
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(13);
      byteBuffer0.getChar();
      byteBuffer0.getInt();
      ByteBuffer byteBuffer1 = ByteBuffer.allocate(2055);
      byteBuffer1.getChar();
      byteBuffer1.getInt();
      byteBuffer1.slice();
      Adler32 adler32_0 = new Adler32();
      adler32_0.update(byteBuffer1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)78;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream0);
      checksumCalculatingInputStream0.skip((byte) (-60));
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read(byteArray0, 3, 3114);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2055);
      byteBuffer0.getChar();
      byteBuffer0.getInt();
      byteBuffer0.slice();
      Adler32 adler32_0 = new Adler32();
      adler32_0.update(byteBuffer0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream0);
      checksumCalculatingInputStream0.skip(27L);
      int int0 = checksumCalculatingInputStream0.read();
      assertEquals(134348801L, checksumCalculatingInputStream0.getValue());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Adler32 adler32_0 = new Adler32();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream0);
      int int0 = checksumCalculatingInputStream0.read();
      assertEquals(65537L, checksumCalculatingInputStream0.getValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream0);
      checksumCalculatingInputStream0.read(byteArray0);
      int int0 = checksumCalculatingInputStream0.read();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream0);
      long long0 = checksumCalculatingInputStream0.skip(0L);
      assertEquals(0L, long0);
      
      int int0 = checksumCalculatingInputStream0.read();
      assertEquals(1L, checksumCalculatingInputStream0.getValue());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream0);
      int int0 = checksumCalculatingInputStream0.read();
      assertEquals((-1), int0);
      assertEquals(1L, checksumCalculatingInputStream0.getValue());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, byteArrayInputStream0);
      adler32_0.update(byteArray0);
      checksumCalculatingInputStream0.getValue();
      checksumCalculatingInputStream0.getValue();
      // Undeclared exception!
      try { 
        checksumCalculatingInputStream0.read(byteArray0, 6, 6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }
}
