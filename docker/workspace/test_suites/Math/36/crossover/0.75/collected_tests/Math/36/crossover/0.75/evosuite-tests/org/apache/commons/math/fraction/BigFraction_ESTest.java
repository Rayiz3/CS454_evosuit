/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 17 00:08:32 GMT 2023
 */

package org.apache.commons.math.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.math.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(0, (-1716));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.ONE;
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(7.87675118338788E41, (-2147483647));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 787,675,118,338,788,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.TWO_FIFTHS.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.45454545454545453, (-161));
      BigFraction bigFraction1 = new BigFraction((-161), 979.62064309, (-161));
      assertEquals((short) (-161), bigFraction1.shortValue());
      
      BigFraction bigFraction2 = bigFraction0.abs();
      assertSame(bigFraction2, bigFraction0);
      assertEquals((byte)0, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3371.9170099174507), 2710);
      BigFraction bigFraction1 = new BigFraction(0.0);
      int int0 = bigFraction0.compareTo(bigFraction1);
      assertEquals((-1), int0);
      assertEquals((short) (-3371), bigFraction0.shortValue());
      
      String string0 = bigFraction1.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      assertEquals((short)0, bigFraction0.shortValue());
      
      String string0 = bigFraction0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-63);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.pow(bigInteger0);
      bigFraction1.ZERO.getDenominatorAsInt();
      assertEquals((byte) (-1), bigFraction1.byteValue());
      
      BigFraction bigFraction2 = bigFraction0.negate();
      assertEquals((byte)0, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-3371.9170099174507), 2710);
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.divide(2710);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.TEN;
      BigInteger bigInteger2 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction1.multiply(bigInteger2);
      boolean boolean0 = bigFraction2.ONE.equals(bigFraction1);
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertFalse(boolean0);
      
      Object object0 = new Object();
      boolean boolean1 = bigFraction0.equals(object0);
      assertFalse(boolean1);
      assertEquals((byte) (-43), bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-579.319566604));
      BigFraction bigFraction1 = bigFraction0.abs();
      BigFraction bigFraction2 = BigFraction.ZERO;
      BigFraction bigFraction3 = bigFraction1.add(bigFraction2);
      assertNotSame(bigFraction3, bigFraction0);
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertSame(bigFraction3, bigFraction1);
      assertEquals((short)579, bigFraction3.shortValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction2 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction3 = bigFraction1.multiply(bigFraction0);
      assertSame(bigFraction3, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      // Undeclared exception!
      try { 
        bigFraction0.FOUR_FIFTHS.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.45454545454545453, (-161));
      BigFraction bigFraction1 = bigFraction0.negate();
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction2.divide(bigInteger0);
      assertSame(bigFraction2, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-420.80288809353124));
      // Undeclared exception!
      try { 
        bigFraction0.ONE_QUARTER.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 4212;
      BigFraction bigFraction0 = BigFraction.TWO;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_THIRD.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_HALF.divide(bigFraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) 2146474965, 2146474965);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,146,474,965 to fraction (9,223,372,034,708,300,844/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.0));
      BigFraction bigFraction1 = new BigFraction((-1.0));
      long long0 = bigFraction1.getDenominatorAsLong();
      assertEquals(1L, long0);
      
      BigFraction bigFraction2 = new BigFraction(830605);
      BigFraction bigFraction3 = BigFraction.getReducedFraction(830605, 1);
      assertEquals((byte) (-115), bigFraction3.byteValue());
      
      bigFraction2.compareTo(bigFraction1);
      BigFraction bigFraction4 = BigFraction.TWO_THIRDS;
      int int0 = bigFraction4.compareTo(bigFraction0);
      assertEquals(1, int0);
      
      BigFraction bigFraction5 = bigFraction0.divide(bigFraction2);
      assertEquals((byte)0, bigFraction5.byteValue());
      assertEquals((short) (-1), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      BigFraction bigFraction1 = bigFraction0.abs();
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertSame(bigFraction2, bigFraction1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 9;
      BigFraction bigFraction0 = new BigFraction(2.146925464473481E-8, 2.146925464473481E-8, 9);
      int int1 = 1126;
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.subtract(1126);
      BigFraction bigFraction2 = bigFraction0.TWO_QUARTERS.reciprocal();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction1.multiply(bigInteger0);
      bigFraction0.pow(bigInteger0);
      bigFraction0.subtract((-1882L));
      bigFraction2.divide(290L);
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      bigFraction0.ZERO.multiply(bigFraction1);
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction((-1699.0), 1609);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -1,699 to fraction (-9,223,372,036,854,774,108/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1816.8535367730685));
      assertEquals((short) (-1816), bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.abs();
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      assertEquals((byte)0, bigFraction2.byteValue());
      assertEquals((short)1816, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.getNumerator();
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.reduce();
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction2 = bigFraction0.negate();
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((byte)0, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction0.intValue();
      bigFraction0.equals(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      bigFraction0.ONE.intValue();
      bigFraction1.TWO.longValue();
      BigFraction bigFraction2 = bigFraction1.FOUR_FIFTHS.divide((long) 1);
      bigFraction1.getDenominatorAsLong();
      BigFraction bigFraction3 = bigFraction0.add(bigFraction1);
      bigFraction1.getDenominatorAsInt();
      bigFraction3.getDenominatorAsLong();
      BigFraction bigFraction4 = BigFraction.getReducedFraction((-3148), 990);
      bigFraction2.THREE_QUARTERS.floatValue();
      bigFraction4.ZERO.bigDecimalValue();
      bigFraction2.compareTo(bigFraction4);
      BigFraction bigFraction5 = bigFraction3.divide((-3881));
      bigFraction5.MINUS_ONE.getNumeratorAsLong();
      BigFraction bigFraction6 = bigFraction3.subtract((long) 990);
      double double0 = bigFraction4.doubleValue();
      assertEquals((-3.17979797979798), double0, 0.01);
      
      BigFraction bigFraction7 = bigFraction6.subtract(bigFraction4);
      BigFraction bigFraction8 = bigFraction7.negate();
      assertEquals((short)985, bigFraction8.shortValue());
      
      bigFraction0.subtract(bigInteger0);
      BigFraction bigFraction9 = bigFraction5.pow((-2036L));
      assertEquals((short) (-3631), bigFraction9.shortValue());
      assertFalse(bigFraction3.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.THREE_QUARTERS.intValue();
      // Undeclared exception!
      try { 
        bigFraction0.TWO_QUARTERS.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction1 = bigFraction0.negate();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.7534976959332482E-7);
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.add(4294967295L);
      float float0 = bigFraction0.THREE_FIFTHS.floatValue();
      assertEquals(0.6F, float0, 0.01F);
      
      BigFraction bigFraction2 = BigFraction.ONE_FIFTH;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction2.ONE.pow(bigInteger0);
      BigFraction bigFraction4 = bigFraction0.divide(bigFraction2);
      BigFraction bigFraction5 = bigFraction0.divide(242L);
      bigFraction2.MINUS_ONE.getNumeratorAsLong();
      BigFraction bigFraction6 = bigFraction3.THREE_FIFTHS.divide(100L);
      bigFraction2.hashCode();
      BigFraction bigFraction7 = bigFraction5.subtract(bigFraction3);
      bigFraction7.MINUS_ONE.pow(1650L);
      bigFraction7.ONE_THIRD.add(532L);
      assertNotSame(bigFraction7, bigFraction5);
      assertEquals((short)0, bigFraction7.shortValue());
      
      BigFraction bigFraction8 = bigFraction4.MINUS_ONE.negate();
      bigFraction1.doubleValue();
      bigFraction0.hashCode();
      bigFraction1.subtract(bigInteger0);
      BigFraction bigFraction9 = bigFraction4.subtract((-1028));
      assertEquals((short)1028, bigFraction9.shortValue());
      
      BigFraction bigFraction10 = bigFraction1.add(bigFraction6);
      assertFalse(bigFraction0.equals((Object)bigFraction4));
      assertEquals((short) (-1), bigFraction10.shortValue());
      
      bigFraction6.divide(bigInteger0);
      assertTrue(bigFraction3.equals((Object)bigFraction8));
      assertFalse(bigFraction6.equals((Object)bigFraction10));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      String string0 = bigFraction0.TWO.toString();
      assertEquals("2", string0);
      
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertEquals((byte)1, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.TWO_THIRDS.getDenominatorAsInt();
      BigFraction bigFraction1 = bigFraction0.negate();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-2815.979274), 0.0, (-2682));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -2,815.979 to fraction after -2,682 iterations
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow((-392));
      assertEquals((byte) (-16), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.TWO.pow((-80L));
      BigFraction bigFraction2 = bigFraction0.negate();
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((byte)0, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.multiply(4294967295L);
      assertEquals((short)26214, bigFraction1.shortValue());
      
      BigFraction bigFraction2 = bigFraction0.negate();
      assertFalse(bigFraction2.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4155.4516);
      assertEquals((short)4155, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(421L);
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((short)1, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      boolean boolean0 = bigFraction0.equals(bigInteger0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.TWO_QUARTERS.bigDecimalValue(1289, 1289);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2478), (-2478));
      assertEquals((byte)1, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.abs();
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      assertEquals((short)1, bigFraction2.shortValue());
      assertFalse(bigFraction2.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.TWO.subtract((-1533L));
      assertEquals((short)1535, bigFraction1.shortValue());
      
      BigFraction bigFraction2 = bigFraction0.abs();
      assertSame(bigFraction2, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 46314;
      BigFraction bigFraction0 = new BigFraction(46314, 46314);
      BigFraction bigFraction1 = bigFraction0.ONE_QUARTER.divide(1894L);
      BigFraction bigFraction2 = bigFraction1.subtract(1894L);
      bigFraction2.ONE_THIRD.percentageValue();
      bigFraction2.THREE_FIFTHS.divide(46314);
      bigFraction1.ONE_QUARTER.equals(bigFraction2);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction1.ONE_THIRD.divide(bigFraction0);
      bigFraction3.ONE_HALF.pow((double) 46314);
      bigFraction0.FOUR_FIFTHS.subtract(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.ONE_QUARTER.pow(46314);
      bigFraction4.THREE_FIFTHS.divide(bigInteger0);
      bigFraction0.reduce();
      // Undeclared exception!
      try { 
        bigFraction1.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1185L, 1185L);
      BigFraction bigFraction1 = bigFraction0.negate();
      assertEquals((short) (-1), bigFraction1.shortValue());
      assertEquals((byte)1, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      float float0 = bigFraction0.TWO_THIRDS.floatValue();
      assertEquals(0.6666667F, float0, 0.01F);
      
      BigFraction bigFraction1 = bigFraction0.negate();
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = bigFraction0.negate();
      BigFraction bigFraction2 = bigFraction0.ONE_FIFTH.subtract(bigFraction1);
      assertEquals((short)0, bigFraction2.shortValue());
      
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction1.divide(bigInteger0);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 2146474966);
      assertEquals((short) (-25642), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.TWO_FIFTHS.subtract(bigFraction1);
      assertEquals((byte)0, bigFraction2.byteValue());
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      
      BigFraction bigFraction3 = bigFraction0.negate();
      assertFalse(bigFraction3.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      double double0 = bigFraction0.pow(1.0972130298614502);
      assertEquals(2.1394100599792334, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 3139);
      bigFraction0.ONE_QUARTER.hashCode();
      Random.setNextRandom(3139);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      int int0 = bigFraction0.ONE_FIFTH.getNumeratorAsInt();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2.631993083235205E-8);
      String string0 = bigFraction0.toString();
      assertEquals("1988677747106347 / 75557863725914323419136", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.TWO_FIFTHS.add(2);
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.THREE_FIFTHS.add((long) 2146925279);
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((double) 2146925279, 2146925279);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,146,925,279 to fraction (9,223,372,034,707,850,530/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.0));
      bigFraction0.MINUS_ONE.longValue();
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction1 = BigFraction.ONE;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = bigFraction1.add(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.FOUR_FIFTHS.subtract(bigFraction0);
      BigFraction bigFraction4 = bigFraction2.TWO.add((-1));
      bigFraction4.ONE_QUARTER.toString();
      BigFraction bigFraction5 = bigFraction0.add(bigFraction1);
      bigFraction0.getField();
      bigFraction5.pow((double) (-1));
      bigFraction2.getField();
      bigFraction1.add(bigInteger0);
      bigFraction4.hashCode();
      // Undeclared exception!
      try { 
        bigFraction3.bigDecimalValue((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.1252723197685555E-9, 1004);
      assertEquals((short)0, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.divide((-1441L));
      assertEquals((short)0, bigFraction1.shortValue());
      
      BigFraction bigFraction2 = bigFraction0.negate();
      assertFalse(bigFraction2.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4133.28909);
      BigFraction bigFraction1 = BigFraction.ONE;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertEquals((short)4134, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.TWO_FIFTHS.percentageValue();
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-114.795), 1894);
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      double double0 = bigFraction0.ONE_QUARTER.doubleValue();
      assertEquals(0.25, double0, 0.01);
      
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.TWO_QUARTERS.multiply(bigFraction1);
      assertFalse(bigFraction3.equals((Object)bigFraction1));
      assertEquals((byte)0, bigFraction3.byteValue());
      
      bigFraction2.THREE_FIFTHS.getField();
      BigInteger bigInteger0 = bigFraction2.getDenominator();
      assertEquals((byte) (-114), bigFraction2.byteValue());
      assertEquals((short)600, bigInteger0.shortValue());
      
      BigFraction bigFraction4 = new BigFraction((-4343));
      BigFraction bigFraction5 = bigFraction1.add(bigFraction4);
      assertEquals((short) (-4342), bigFraction5.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      
      bigFraction4.getDenominator();
      BigFraction bigFraction6 = bigFraction4.pow(3431L);
      assertFalse(bigFraction6.equals((Object)bigFraction4));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.TWO_THIRDS.getField();
      BigFraction bigFraction1 = bigFraction0.negate();
      assertEquals((short) (-1), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-240.8824), 1598);
      assertEquals((byte)16, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.pow(364L);
      BigFraction bigFraction2 = bigFraction0.negate();
      assertEquals((short) (-1), bigFraction2.shortValue());
      assertFalse(bigFraction0.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.bigDecimalValue(100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.bigDecimalValue();
      BigFraction bigFraction1 = bigFraction0.negate();
      assertNotSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.pow(840);
      BigFraction bigFraction2 = bigFraction0.negate();
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((short)0, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(6.532390045481988);
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      assertEquals((short)13, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.FOUR_FIFTHS.intValue();
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.divide(1);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction1.shortValue());
      
      BigFraction bigFraction2 = new BigFraction((double) 1);
      assertEquals((byte)1, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1815.527));
      assertEquals((short) (-1815), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = new BigFraction((-1815.527));
      int int0 = bigFraction0.compareTo(bigFraction1);
      assertEquals(1, int0);
      assertEquals((short) (-1815), bigFraction1.shortValue());
      
      String string0 = bigFraction0.toString();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertEquals("3 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.TWO.getDenominatorAsLong();
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.divide(bigFraction0);
      assertEquals((short)2, bigFraction1.shortValue());
      
      BigFraction bigFraction2 = bigFraction0.negate();
      assertFalse(bigFraction2.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.THREE_QUARTERS.longValue();
      BigFraction bigFraction1 = bigFraction0.negate();
      assertEquals((byte)0, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) (-161), (-161));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -161 to fraction (-9,223,372,036,854,775,646/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483643, 2147483643, 2147483643);
      assertEquals((short) (-5), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.THREE_QUARTERS.multiply((-1645));
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.negate();
      assertEquals((byte)0, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(2147483577, 2147483577);
      assertEquals((byte)1, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.ONE.subtract(938);
      BigFraction bigFraction2 = bigFraction1.negate();
      assertEquals((byte) (-87), bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.multiply(bigInteger0);
      assertEquals((short)2, bigFraction1.shortValue());
  }
}
