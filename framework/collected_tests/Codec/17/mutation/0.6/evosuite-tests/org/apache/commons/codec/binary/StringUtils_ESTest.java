/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 15 23:12:49 GMT 2023
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import org.apache.commons.codec.binary.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "+AwI<YlG^`c";
      StringUtils.getBytesUtf16Le("+AwI<YlG^`c");
      StringUtils.getBytesUnchecked((String) null, "+AwI<YlG^`c");
      // Undeclared exception!
      try { 
        StringUtils.newStringIso8859_1((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      StringUtils.newStringIso8859_1(byteArray0);
      String string0 = "$Q";
      StringUtils.getByteBufferUtf8("$Q");
      StringUtils.newStringUsAscii(byteArray0);
      StringUtils.newStringUtf16(byteArray0);
      byte[] byteArray1 = StringUtils.getBytesUtf16Be("");
      StringUtils.newStringIso8859_1(byteArray0);
      StringUtils.equals((CharSequence) null, (CharSequence) "\u0002");
      StringUtils.newStringUtf16(byteArray1);
      StringUtils.newStringIso8859_1(byteArray0);
      StringUtils.getBytesUtf8("j.@szPD");
      StringUtils.getByteBufferUtf8("\uFFFD");
      StringUtils.equals((CharSequence) "\u0002", (CharSequence) "");
      char[] charArray0 = new char[6];
      charArray0[0] = 'f';
      charArray0[1] = '!';
      charArray0[2] = 'w';
      charArray0[3] = 'V';
      charArray0[4] = 'm';
      charArray0[5] = 'm';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-529), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)1;
      StringUtils.newStringUsAscii(byteArray0);
      boolean boolean0 = StringUtils.equals((CharSequence) "-\u0001\u0000\u0000", (CharSequence) "-\u0001\u0000\u0000");
      StringUtils.newStringUtf16Be(byteArray0);
      String string0 = StringUtils.newStringUtf8(byteArray0);
      assertNotNull(string0);
      
      StringUtils.getBytesUtf16Be("ch#RDn}1[p*(z;");
      CharBuffer charBuffer0 = CharBuffer.allocate(979);
      boolean boolean1 = StringUtils.equals((CharSequence) "-\u0001\u0000\u0000", (CharSequence) charBuffer0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)51;
      StringUtils.newStringUtf16(byteArray0);
      StringUtils.newStringUtf16(byteArray0);
      StringUtils.newStringUtf16Le(byteArray0);
      StringUtils.getBytesUtf8("\u01E8\uE2003");
      StringUtils.newStringIso8859_1(byteArray0);
      StringUtils.newStringUsAscii(byteArray0);
      StringUtils.getBytesUtf8((String) null);
      StringUtils.newString((byte[]) null, "\u0001\u00E8\u00E2\u0000\u00003");
      StringUtils.newString((byte[]) null, (String) null);
      StringUtils stringUtils0 = new StringUtils();
      // Undeclared exception!
      try { 
        StringUtils.getBytesUnchecked("", ": ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // : : java.io.UnsupportedEncodingException: : 
         //
         verifyException("org.apache.commons.codec.binary.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)0;
      StringUtils.newStringUsAscii(byteArray0);
      StringUtils.equals((CharSequence) "[\u0000", (CharSequence) "[\u0000");
      StringUtils.newStringUtf16Be(byteArray0);
      StringUtils.newStringUtf8(byteArray0);
      StringUtils.getBytesUtf16Be("");
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      // Undeclared exception!
      try { 
        StringUtils.equals((CharSequence) charBuffer0, (CharSequence) "[\u0000");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringUtils.getByteBufferUtf8((String) null);
      StringUtils.getBytesUtf16Be((String) null);
      StringUtils.getBytesUtf16Be("");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)0;
      String string0 = StringUtils.newStringUtf16Be(byteArray0);
      assertEquals("\u919E\u0081\uAB9E\u5908\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringUtils.newStringUtf16((byte[]) null);
      byte[] byteArray0 = StringUtils.getBytesUtf16Le("envireminakl");
      StringUtils.newStringUsAscii(byteArray0);
      StringUtils.getBytesUtf16("");
      StringUtils.getBytesUtf8("e\u0000n\u0000v\u0000i\u0000r\u0000e\u0000m\u0000i\u0000n\u0000a\u0000k\u0000l\u0000");
      StringUtils.getBytesUtf16Le("e\u0000n\u0000v\u0000i\u0000r\u0000e\u0000m\u0000i\u0000n\u0000a\u0000k\u0000l\u0000");
      String string0 = "";
      StringUtils.getBytesUtf16("");
      byte[] byteArray1 = StringUtils.getBytesUtf16Le("org.apache.commons.codec.binary.StringUtils");
      StringUtils.equals((CharSequence) "envireminakl", (CharSequence) null);
      byte[] byteArray2 = null;
      // Undeclared exception!
      try { 
        StringUtils.newString(byteArray1, "org.apache.commons.codec.binary.StringUtils");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // org.apache.commons.codec.binary.StringUtils: java.io.UnsupportedEncodingException: org.apache.commons.codec.binary.StringUtils
         //
         verifyException("org.apache.commons.codec.binary.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf16Le("+AwI<YlG^`c");
      StringUtils.newStringUsAscii(byteArray0);
      StringUtils.newStringUtf16Be(byteArray0);
      StringUtils stringUtils0 = new StringUtils();
      StringUtils.getByteBufferUtf8(".]XLMIi_HsU0y6e");
      CharBuffer.allocate(1);
      StringUtils.equals((CharSequence) "\u2B00\u4100\u7700\u4900\u3C00\u5900\u6C00\u4700\u5E00\u6000\u6300", (CharSequence) "\u2B00\u4100\u7700\u4900\u3C00\u5900\u6C00\u4700\u5E00\u6000\u6300");
      String string0 = StringUtils.newStringUtf16Le(byteArray0);
      assertEquals("+AwI<YlG^`c", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)100;
      StringUtils.newStringUtf16(byteArray0);
      StringUtils.newStringUsAscii(byteArray0);
      StringUtils.getBytesUtf16Le((String) null);
      StringUtils.getBytesUtf16Le("\u1A46\uFFFD");
      byte[] byteArray1 = StringUtils.getBytesUtf16Le("drunkenness");
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringUtils.getBytesIso8859_1("");
      StringUtils.getBytesUtf16Le("EPoS\"cc&Sh{GFK]DUv");
      StringUtils.getBytesUtf16("EPoS\"cc&Sh{GFK]DUv");
      byte[] byteArray0 = StringUtils.getBytesUtf8((String) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      StringUtils.getByteBufferUtf8("aWZ [kSo_f`yy+y'K");
      byte[] byteArray0 = StringUtils.getBytesUtf16Be("(s*kL?}.L");
      String string0 = StringUtils.newStringUtf8(byteArray0);
      assertEquals("\u0000(\u0000s\u0000*\u0000k\u0000L\u0000?\u0000}\u0000.\u0000L", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesIso8859_1("abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu");
      StringUtils.getBytesUtf16Le("abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu");
      byte[] byteArray1 = StringUtils.getBytesUtf16Le("abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu");
      StringUtils.equals((CharSequence) "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu", (CharSequence) "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu");
      StringUtils.newStringIso8859_1(byteArray1);
      StringUtils.newStringUsAscii(byteArray1);
      StringUtils.equals((CharSequence) "a\u0000b\u0000c\u0000d\u0000e\u0000f\u0000g\u0000h\u0000b\u0000c\u0000d\u0000e\u0000f\u0000g\u0000h\u0000i\u0000c\u0000d\u0000e\u0000f\u0000g\u0000h\u0000i\u0000j\u0000d\u0000e\u0000f\u0000g\u0000h\u0000i\u0000j\u0000k\u0000e\u0000f\u0000g\u0000h\u0000i\u0000j\u0000k\u0000l\u0000f\u0000g\u0000h\u0000i\u0000j\u0000k\u0000l\u0000m\u0000g\u0000h\u0000i\u0000j\u0000k\u0000l\u0000m\u0000n\u0000h\u0000i\u0000j\u0000k\u0000l\u0000m\u0000n\u0000o\u0000i\u0000j\u0000k\u0000l\u0000m\u0000n\u0000o\u0000p\u0000j\u0000k\u0000l\u0000m\u0000n\u0000o\u0000p\u0000q\u0000k\u0000l\u0000m\u0000n\u0000o\u0000p\u0000q\u0000r\u0000l\u0000m\u0000n\u0000o\u0000p\u0000q\u0000r\u0000s\u0000m\u0000n\u0000o\u0000p\u0000q\u0000r\u0000s\u0000t\u0000n\u0000o\u0000p\u0000q\u0000r\u0000s\u0000t\u0000u\u0000", (CharSequence) "abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu");
      String string0 = StringUtils.newStringUtf16Le(byteArray0);
      StringUtils stringUtils0 = new StringUtils();
      String string1 = StringUtils.newStringUtf8(byteArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringUtils.getByteBufferUtf8("*@Lt");
      byte[] byteArray0 = StringUtils.getBytesUtf16Le("org.apache.commons.codec.binary.StringUtils");
      StringUtils.equals((CharSequence) "*@Lt", (CharSequence) "org.apache.commons.codec.binary.StringUtils");
      StringUtils.getByteBufferUtf8("*@Lt");
      String string0 = StringUtils.newStringUtf16Be(byteArray0);
      StringUtils.getBytesUtf16Be("org.apache.commons.codec.binary.StringUtils");
      byte[] byteArray1 = StringUtils.getBytesUtf8("*@Lt");
      String string1 = StringUtils.newStringUtf16Le(byteArray1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringUtils.getBytesUsAscii("u,Q@v");
      ByteBuffer byteBuffer0 = StringUtils.getByteBufferUtf8("");
      assertTrue(byteBuffer0.hasArray());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-51);
      // Undeclared exception!
      try { 
        StringUtils.newString(byteArray0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf16("xl");
      byte[] byteArray1 = StringUtils.getBytesUtf16Le("CPNMUOG=");
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-96);
      String string0 = StringUtils.newStringUsAscii(byteArray0);
      assertEquals("\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "org.apache.commons.codec.binary.StringUtils";
      // Undeclared exception!
      try { 
        StringUtils.getBytesUnchecked("org.apache.commons.codec.binary.StringUtils", "org.apache.commons.codec.binary.StringUtils");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // org.apache.commons.codec.binary.StringUtils: java.io.UnsupportedEncodingException: org.apache.commons.codec.binary.StringUtils
         //
         verifyException("org.apache.commons.codec.binary.StringUtils", e);
      }
  }
}
