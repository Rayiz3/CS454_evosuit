/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 18:40:13 GMT 2023
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.helper.W3CDom;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class W3CDom_ESTest extends W3CDom_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Parser.parse(".9`_Ji", ".9`_Ji");
      W3CDom w3CDom0 = new W3CDom();
      Element element0 = document0.attr(".9`_Ji", ".9`_Ji");
      document0.tagName("Er.soup.select.Evaluator");
      org.w3c.dom.Document document1 = w3CDom0.fromJsoup(document0);
      W3CDom.W3CBuilder w3CDom_W3CBuilder0 = new W3CDom.W3CBuilder(document1);
      // Undeclared exception!
      try { 
        w3CDom_W3CBuilder0.head(element0, (-1865));
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("xmlns::has(el) subselect must not be empty", "xmlns::has(el) subselect must not be empty");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      W3CDom w3CDom0 = new W3CDom();
      document0.attr("aRIf", "xmlns::has(el) subselect must not be empty");
      document0.tagName("aRIf");
      org.w3c.dom.Document document1 = w3CDom0.fromJsoup(document0);
      W3CDom.W3CBuilder w3CDom_W3CBuilder0 = new W3CDom.W3CBuilder(document1);
      // Undeclared exception!
      try { 
        w3CDom_W3CBuilder0.head(document0, 100);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xmlns/:h.s(el) &ubselect must nt b empy", "xmlns/:h.s(el) &ubselect must nt b empy");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      W3CDom w3CDom0 = new W3CDom();
      org.w3c.dom.Document document1 = w3CDom0.fromJsoup(document0);
      document0.attr("xmlns/:h.s(el) &ubselect must nt b empy", "xmlns/:h.s(el) &ubselect must nt b empy");
      W3CDom.W3CBuilder w3CDom_W3CBuilder0 = new W3CDom.W3CBuilder(document1);
      Comment comment0 = new Comment("xmlns/:h.s(el) &ubselect must nt b empy");
      // Undeclared exception!
      try { 
        w3CDom_W3CBuilder0.head(comment0, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.W3CDom$W3CBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Document.createShell("xmlns::h.s(el) &ubselect must nt be empy");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      W3CDom w3CDom0 = new W3CDom();
      org.w3c.dom.Document document1 = w3CDom0.fromJsoup(document0);
      document0.attr("?L9,uKs`Uobm", "xmlns::h.s(el) &ubselect must nt be empy");
      W3CDom.W3CBuilder w3CDom_W3CBuilder0 = new W3CDom.W3CBuilder(document1);
      DataNode dataNode0 = new DataNode("xmlns::h.s(el) &ubselect must nt be empy");
      // Undeclared exception!
      try { 
        w3CDom_W3CBuilder0.head(dataNode0, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.W3CDom$W3CBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xmlns", "xmlns");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      W3CDom w3CDom0 = new W3CDom();
      org.w3c.dom.Document document1 = w3CDom0.fromJsoup(document0);
      W3CDom.W3CBuilder w3CDom_W3CBuilder0 = new W3CDom.W3CBuilder(document1);
      Element element0 = document0.attr("xmlns", "xmlns");
      // Undeclared exception!
      try { 
        w3CDom_W3CBuilder0.head(element0, 100);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      W3CDom w3CDom0 = new W3CDom();
      Document document0 = new Document("xmlns:vd!7c#");
      document0.prependElement("xmlns:vd!7c#");
      // Undeclared exception!
      try { 
        w3CDom0.fromJsoup(document0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xmlns/:h.s(el) &ubselect must nt b empy", "xmlns/:h.s(el) &ubselect must nt b empy");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      W3CDom w3CDom0 = new W3CDom();
      org.w3c.dom.Document document1 = w3CDom0.fromJsoup(document0);
      document0.attr("xmlns/:h.s(el) &ubselect must nt b empy", "xmlns/:h.s(el) &ubselect must nt b empy");
      W3CDom.W3CBuilder w3CDom_W3CBuilder0 = new W3CDom.W3CBuilder(document1);
      w3CDom_W3CBuilder0.head((Node) null, 100);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Q=(od\\A$&h", "Q=(od\\A$&h");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      W3CDom w3CDom0 = new W3CDom();
      org.w3c.dom.Document document1 = w3CDom0.fromJsoup(document0);
      Element element0 = document0.attr("Q=(od\\A$&h", "Q=(od\\A$&h");
      W3CDom.W3CBuilder w3CDom_W3CBuilder0 = new W3CDom.W3CBuilder(document1);
      // Undeclared exception!
      try { 
        w3CDom_W3CBuilder0.head(element0, 100);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xmlns::has(el) subselect must not be empty", "xmlns::has(el) subselect must not be empty");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      W3CDom w3CDom0 = new W3CDom();
      org.w3c.dom.Document document1 = w3CDom0.fromJsoup(document0);
      Element element0 = document0.attr("xmlns::has(el) subselect must not be empty", "xmlns::has(el) subselect must not be empty");
      W3CDom.W3CBuilder w3CDom_W3CBuilder0 = new W3CDom.W3CBuilder(document1);
      // Undeclared exception!
      try { 
        w3CDom_W3CBuilder0.head(element0, 100);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      String string0 = w3CDom0.asString((org.w3c.dom.Document) null);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      // Undeclared exception!
      try { 
        w3CDom0.fromJsoup((Document) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        w3CDom0.fromJsoup(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xmlns?:h.s(el)!upelectm<t zo bz J<tA", "xmlns?:h.s(el)!upelectm<t zo bz J<tA");
      W3CDom w3CDom0 = new W3CDom();
      w3CDom0.fromJsoup(document0);
  }
}
