/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 23:52:00 GMT 2023
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.fraction.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.testcarver.testcase.EvoSuiteXStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.multiply(fraction0);
      assertEquals(0.0, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(1.633123935319537E16);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 16,331,239,353,195,370 to fraction (16,331,239,353,195,370/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.TWO_THIRDS;
      Fraction fraction2 = fraction0.ONE_THIRD.add(fraction1);
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      
      String string0 = fraction0.toString();
      assertEquals("1 / 3", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.0);
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      Fraction fraction2 = fraction1.TWO_QUARTERS.reciprocal();
      assertEquals(2, fraction2.getNumerator());
      
      Fraction fraction3 = fraction0.ONE_THIRD.add(fraction1);
      Fraction fraction4 = new Fraction(1.0);
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(boolean0);
      
      int int0 = fraction1.getDenominator();
      assertEquals(2, int0);
      
      int int1 = fraction1.compareTo(fraction4);
      assertEquals((-1), int1);
      
      fraction0.floatValue();
      int int2 = fraction3.compareTo(fraction1);
      assertEquals(1, int2);
      assertTrue(fraction0.equals((Object)fraction4));
      assertEquals(0.8333333333333334, fraction3.doubleValue(), 0.01);
      assertFalse(fraction0.equals((Object)fraction2));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.ONE_THIRD.subtract(fraction1);
      assertEquals(0.33333334F, fraction2.floatValue(), 0.01F);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-2268));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,268, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      int int0 = 2606;
      Fraction fraction1 = new Fraction(Integer.MIN_VALUE, 2606);
      Fraction fraction2 = fraction0.add(fraction1);
      int int1 = (-415);
      Fraction fraction3 = fraction1.divide((-415));
      Fraction fraction4 = new Fraction((-1825));
      // Undeclared exception!
      try { 
        fraction3.subtract(fraction2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: 893,352,656,823
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, (-3));
      assertEquals(0, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1.0));
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
      
      Fraction fraction1 = Fraction.MINUS_ONE;
      assertTrue(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = new Fraction(679, 679);
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = new Fraction(75.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = fraction0.ONE_THIRD.add(fraction1);
      assertEquals(75.33333333333333, fraction2.doubleValue(), 0.01);
      
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction(2.3926130521267908E-5);
      boolean boolean0 = fraction1.equals(fraction0);
      assertTrue(boolean0);
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction3.equals((Object) null);
      Fraction fraction5 = new Fraction((-0.634285773324));
      assertEquals((-111), fraction5.getNumerator());
      
      Fraction fraction6 = Fraction.getReducedFraction((-1290), (-1583));
      assertEquals(0.8149084017687934, fraction6.doubleValue(), 0.01);
      
      fraction0.hashCode();
      fraction0.negate();
      String string0 = fraction3.toString();
      assertEquals("2147483647", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.MINUS_ONE;
      // Undeclared exception!
      try { 
        fraction1.THREE_QUARTERS.divide(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      // Undeclared exception!
      try { 
        fraction0.MINUS_ONE.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = Fraction.ZERO;
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.5);
      Fraction fraction1 = Fraction.ONE_THIRD;
      fraction1.ONE_HALF.getField();
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals(2, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = new Fraction(75.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = fraction0.ONE_THIRD.add(fraction1);
      boolean boolean0 = fraction1.equals(fraction0);
      assertTrue(boolean0);
      
      fraction1.getDenominator();
      int int0 = fraction1.compareTo(fraction2);
      assertEquals(75.333336F, fraction2.floatValue(), 0.01F);
      assertEquals((-1), int0);
      
      float float0 = fraction0.floatValue();
      assertEquals(1, fraction0.getDenominator());
      assertFalse(fraction0.equals((Object)fraction2));
      assertEquals(75.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-1286.283), (-1286.283), Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -1,286.283 to fraction after -2,147,483,648 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      // Undeclared exception!
      try { 
        fraction0.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      assertEquals(100L, fraction0.longValue());
      
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = fraction1.THREE_QUARTERS.subtract(365163894);
      assertEquals((-1460655573), fraction2.getNumerator());
      
      Fraction fraction3 = new Fraction(500.0);
      Fraction fraction4 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction5 = new Fraction(1398.8488526397425);
      Fraction fraction6 = new Fraction(1959.581680844452);
      Fraction fraction7 = new Fraction((-1.0));
      assertEquals(1, fraction7.getDenominator());
      
      Fraction fraction8 = new Fraction(Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertFalse(fraction8.equals((Object)fraction7));
      assertEquals(1L, fraction8.longValue());
      assertFalse(fraction8.equals((Object)fraction3));
      assertEquals(1, fraction8.getDenominator());
      
      boolean boolean0 = fraction5.equals(fraction4);
      assertEquals(2.14748365E9F, fraction4.floatValue(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.TWO.multiply(fraction1);
      String string0 = fraction0.toString();
      assertSame(fraction0, fraction2);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1123.116530586));
      Fraction fraction1 = Fraction.ONE_THIRD;
      Fraction fraction2 = fraction1.ZERO.add(fraction0);
      assertSame(fraction2, fraction0);
      assertEquals((-414430), fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction((-2147483631));
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction((-1.0));
      Fraction fraction6 = new Fraction((-0.1));
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = new Fraction(332.0);
      Fraction fraction9 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction9.equals(object0);
      Fraction fraction10 = fraction9.subtract(fraction7);
      assertEquals((short) (-19801), fraction10.shortValue());
      assertEquals(242343, fraction10.getNumerator());
      
      Fraction fraction11 = new Fraction(0.0016524888812909921);
      Fraction fraction12 = new Fraction((-1168.894750567));
      Fraction fraction13 = Fraction.ZERO;
      assertFalse(fraction13.equals((Object)fraction11));
      
      Fraction fraction14 = fraction0.abs();
      assertEquals(100.0, fraction14.doubleValue(), 0.01);
      
      Object object1 = new Object();
      fraction7.getNumerator();
      assertFalse(fraction7.equals((Object)fraction10));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.MINUS_ONE.abs();
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
      
      String string0 = fraction0.toString();
      assertEquals("1 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      fraction0.THREE_FIFTHS.getField();
      String string0 = fraction0.toString();
      assertEquals("3 / 4", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = new Fraction(75.0);
      Fraction fraction1 = new Fraction(500.0);
      Fraction fraction2 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction3 = Fraction.ONE_QUARTER;
      Fraction fraction4 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction5 = new Fraction((double) Integer.MAX_VALUE);
      Fraction fraction6 = new Fraction(1.0E-5);
      Fraction fraction7 = new Fraction(75.0);
      Fraction fraction8 = new Fraction(0.0);
      Fraction fraction9 = Fraction.TWO_QUARTERS;
      Fraction fraction10 = new Fraction(0.0);
      Fraction fraction11 = new Fraction((-4060.6664258334317));
      Fraction fraction12 = new Fraction(2.2839507258254343E-4);
      Fraction fraction13 = new Fraction(242.50061882, 570);
      Fraction fraction14 = Fraction.TWO;
      assertFalse(fraction14.equals((Object)fraction9));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      assertEquals(2.147483647E9, fraction3.doubleValue(), 0.01);
      
      Fraction fraction4 = new Fraction((-1.0));
      assertEquals(1, fraction4.getDenominator());
      
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = Fraction.TWO_QUARTERS;
      assertEquals(0.5F, fraction6.floatValue(), 0.01F);
      
      Fraction fraction7 = new Fraction(75.0);
      Fraction fraction8 = new Fraction((-1.0E-6));
      Fraction fraction9 = new Fraction((-1.0E-6));
      Fraction fraction10 = new Fraction(0.0011473602573914832, Integer.MIN_VALUE);
      Fraction fraction11 = Fraction.ZERO;
      long long0 = fraction9.longValue();
      assertTrue(fraction9.equals((Object)fraction10));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = new Fraction(75.0);
      Fraction fraction1 = Fraction.TWO_THIRDS;
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
      
      int int0 = fraction0.getDenominator();
      int int1 = fraction0.compareTo(fraction1);
      assertTrue(int1 == int0);
      assertEquals(0.6666666666666666, fraction1.doubleValue(), 0.01);
      
      float float0 = fraction0.floatValue();
      assertEquals(75.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.FOUR_FIFTHS;
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = new Fraction(75.0);
      Fraction fraction1 = new Fraction(500.0);
      Fraction fraction2 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction3 = new Fraction((-1.0));
      Fraction fraction4 = new Fraction(0.0);
      Fraction fraction5 = new Fraction((-0.1));
      Fraction fraction6 = new Fraction((-242343.0));
      Fraction fraction7 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction8 = new Fraction(332.0);
      Fraction fraction9 = Fraction.THREE_FIFTHS;
      fraction9.TWO_FIFTHS.toString();
      Fraction fraction10 = new Fraction(332.0);
      Fraction fraction11 = new Fraction(1.5574076175689697);
      Fraction fraction12 = Fraction.getReducedFraction(Integer.MIN_VALUE, 37);
      assertEquals((-58040098L), fraction12.longValue());
      
      Fraction fraction13 = fraction10.add(Integer.MIN_VALUE);
      Fraction fraction14 = fraction13.add(fraction1);
      assertEquals((-2147483316), fraction13.getNumerator());
      assertEquals((-2147482816L), fraction14.longValue());
      
      Fraction fraction15 = new Fraction(Integer.MIN_VALUE, 21772118);
      assertEquals((-1073741824), fraction15.getNumerator());
      assertEquals(10886059, fraction15.getDenominator());
      
      int int0 = fraction6.intValue();
      assertEquals(1, fraction6.getDenominator());
      assertEquals((-242343), int0);
  }

  @Test(timeout = 4000)
  public void testRemovetestRemove_32()  throws Throwable  {
      Fraction fraction0 = new Fraction(75.0);
      Fraction fraction1 = new Fraction(500.0);
      Fraction fraction2 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction3 = new Fraction((double) Integer.MAX_VALUE);
      assertTrue(fraction3.equals((Object)fraction2));
      
      Fraction fraction4 = new Fraction(0.0);
      Fraction fraction5 = new Fraction((-0.1));
      assertEquals(10, fraction5.getDenominator());
      
      Fraction fraction6 = new Fraction((-242343.0));
      Fraction fraction7 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction8 = new Fraction(332.0);
      Fraction fraction9 = new Fraction((-2323.0));
      Fraction fraction10 = new Fraction(44.0);
      Fraction fraction11 = Fraction.ONE_FIFTH;
      Fraction fraction12 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object2);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Fraction fraction13 = fraction12.abs();
      assertEquals(0.0, fraction13.doubleValue(), 0.01);
      
      Fraction fraction14 = fraction1.subtract(370);
      assertEquals((short)130, fraction14.shortValue());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      String string0 = fraction0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.TWO.abs();
      assertEquals((byte)2, fraction1.byteValue());
      
      String string0 = fraction0.toString();
      assertEquals("-1", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = Fraction.ONE_HALF;
      Fraction fraction2 = fraction0.THREE_QUARTERS.subtract(fraction1);
      assertEquals(0.25F, fraction2.floatValue(), 0.01F);
      
      Fraction fraction3 = fraction0.negate();
      assertEquals((-2), fraction3.getNumerator());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = Fraction.ONE_FIFTH;
      Fraction fraction2 = fraction0.ONE_FIFTH.add(fraction1);
      assertEquals(0.4F, fraction2.floatValue(), 0.01F);
      assertEquals(2, fraction2.getNumerator());
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (2,147,483,649/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = fraction2.ONE.add(fraction0);
      assertEquals((byte)101, fraction3.byteValue());
      
      Fraction fraction4 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction5 = new Fraction((-1.0));
      Fraction fraction6 = new Fraction(0.0);
      Fraction fraction7 = new Fraction((-0.1));
      Fraction fraction8 = new Fraction((-242343.0));
      Fraction fraction9 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction10 = new Fraction(332.0);
      Fraction fraction11 = new Fraction((-2323.0));
      Fraction fraction12 = new Fraction(44.0);
      Fraction fraction13 = Fraction.ZERO;
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object1);
      Fraction fraction14 = new Fraction((-1.0));
      fraction13.equals(fraction14);
      assertTrue(fraction14.equals((Object)fraction5));
      assertFalse(fraction14.equals((Object)fraction7));
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Fraction fraction15 = fraction1.divide((-3248));
      String string0 = fraction15.toString();
      assertFalse(fraction1.equals((Object)fraction0));
      assertEquals("-75 / 3248", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(3013, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 3,013/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.TWO_THIRDS.add(4127);
      assertEquals(3, fraction1.getDenominator());
      assertEquals(4127.666666666667, fraction1.doubleValue(), 0.01);
      
      String string0 = fraction0.toString();
      assertEquals("3 / 4", string0);
  }

  @Test(timeout = 4000)
  public void testRemovetestRemovetestRemovetestRemove_42()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-0.1));
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction.getReducedFraction(Integer.MAX_VALUE, Integer.MAX_VALUE);
      fraction6.add(Integer.MIN_VALUE);
      fraction7.add(fraction4);
      Fraction fraction8 = null;
      try {
        fraction8 = new Fraction(Integer.MAX_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 2,147,483,647/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      float float0 = fraction0.floatValue();
      assertEquals(0.25F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      double double0 = fraction0.TWO.percentageValue();
      assertEquals(200.0, double0, 0.01);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(77, 77);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-202), (-202));
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      
      fraction0.TWO.subtract((-202));
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      assertEquals(3, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.ONE_THIRD.reciprocal();
      assertEquals(1, fraction1.getDenominator());
      assertEquals((byte)3, fraction1.byteValue());
      
      String string0 = fraction0.toString();
      assertEquals("1 / 4", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1123.116530586));
      fraction0.TWO_FIFTHS.divide(fraction0);
      String string0 = fraction0.toString();
      assertEquals("-414430 / 369", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-202), (-202));
      Fraction fraction1 = fraction0.multiply(fraction0);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.divide(Integer.MAX_VALUE);
      assertEquals((-0.5F), fraction1.floatValue(), 0.01F);
      assertEquals((-1), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE, 1084);
      Fraction fraction1 = Fraction.ZERO;
      boolean boolean0 = fraction1.equals(fraction0);
      assertEquals((-536870912), fraction0.getNumerator());
      assertFalse(boolean0);
      assertEquals((-1981073.47601476), fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = Fraction.TWO_FIFTHS;
      Fraction fraction2 = fraction0.ZERO.subtract(fraction1);
      assertEquals((-0.4), fraction2.doubleValue(), 0.01);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = Fraction.TWO_FIFTHS;
      Fraction fraction2 = fraction0.ONE_THIRD.add(fraction1);
      assertEquals(0.73333335F, fraction2.floatValue(), 0.01F);
      
      String string0 = fraction0.toString();
      assertEquals("1 / 2", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      Fraction fraction2 = fraction0.FOUR_FIFTHS.subtract(fraction1);
      assertEquals(10, fraction2.getDenominator());
      assertEquals(0.3, fraction2.doubleValue(), 0.01);
      
      String string0 = fraction0.toString();
      assertEquals("1 / 4", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-1), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -1/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2147483627), (-2147483627));
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) (-2147483646), (-2147483646));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,646 to fraction (2,147,483,647/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = new Fraction(3244.10558392, 1176);
      assertEquals(3244.1055837563454, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      String string0 = fraction0.toString();
      assertEquals("1 / 2", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = new Fraction((-0.9294560651498419));
      assertEquals((-224), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = new Fraction(1);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Object object0 = new Object();
      boolean boolean0 = fraction0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.2093895747966599E-5);
      assertEquals(82686, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.negate();
      assertTrue(fraction1.equals((Object)fraction0));
  }
}
