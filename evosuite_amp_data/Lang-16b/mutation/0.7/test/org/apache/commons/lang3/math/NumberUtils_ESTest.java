/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 21:45:03 GMT 2023
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.1L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234E5l");
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-21);
      shortArray0[1] = (short) (-3025);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-3025), short0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (short) (-3025);
      doubleArray0[1] = (double) (short) (-21);
      doubleArray0[2] = (double) (short) (-21);
      doubleArray0[3] = (double) (short) (-3025);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals((-21.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Number number0 = NumberUtils.createNumber(".1E700F");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-700F");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0zFAAE");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0.E.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0E is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      NumberUtils.isNumber("...");
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2096.57464186212;
      doubleArray0[1] = 136.01280642;
      doubleArray0[2] = 1384.8;
      doubleArray0[3] = (-2174.145090416824);
      doubleArray0[4] = (-2732.921373689);
      doubleArray0[5] = (-2546.8506);
      doubleArray0[6] = 0.0;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-2732.921373689), double0, 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 124;
      intArray0[1] = 8;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(8, int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 8;
      longArray0[1] = (long) 8;
      longArray0[2] = (long) 124;
      longArray0[3] = (long) 8;
      longArray0[4] = (long) 8;
      longArray0[5] = (long) 124;
      longArray0[6] = (long) 124;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(124L, long0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0E9t");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0E9t is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.E99");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x5f");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xi");
      double[] doubleArray0 = new double[9];
      NumberUtils.min(doubleArray0);
      Number number0 = NumberUtils.createNumber("-0x8");
      assertNotNull(number0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-512L);
      longArray0[1] = 1430L;
      longArray0[2] = (-2669L);
      longArray0[3] = 1830L;
      longArray0[4] = 0L;
      longArray0[5] = 2147483648L;
      longArray0[6] = (-1453L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals(2147483648L, long0);
      
      boolean boolean1 = NumberUtils.isDigits("-0x8");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E200");
      assertEquals(1.1E200, number0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-520");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.9");
      assertEquals(0.9F, number0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1e1E-200");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("5f");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-221.23F");
      assertEquals((-221.23F), number0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1l");
      assertEquals((-1L), number0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234.5Ed");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      try { 
        NumberUtils.createNumber(".?4c=_sH;l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .?4c=_sH;l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234.5d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+<([6yG");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("123.4E21D");
      assertEquals(1.234E23, number0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      try { 
        NumberUtils.createNumber(" is noE a valid number.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  is noE a valid number. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-123E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-200");
      assertEquals(1.1E-200, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      NumberUtils.createLong((String) null);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1379.69772);
      doubleArray0[1] = 437.25115712794;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.2345;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1379.69772), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      NumberUtils.isNumber("--Z!RHfjMw(z1_h8=vQfD");
      boolean boolean0 = NumberUtils.isNumber("-0xa|-7Gb(8h.Yf");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-829.60098);
      doubleArray0[1] = 1282.51023866;
      doubleArray0[2] = (-2.130741551E9);
      NumberUtils.min(doubleArray0);
      NumberUtils.max(doubleArray0);
      NumberUtils.isNumber("0xFale resDlt for (true, true)");
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-279.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 3663.0F;
      floatArray0[3] = (-10.6F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(3663.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xF1$wd|LE6Gt,JhPf5w");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("01l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("3L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte) (-70), (byte)4, (byte)76);
      assertEquals((byte) (-70), byte0);
      
      NumberUtils.isNumber("-0x39O 2.2oI,f8 A");
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)76;
      shortArray0[1] = (short) (byte) (-70);
      shortArray0[2] = (short) (byte) (-70);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)76, short0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("123.4E-D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e+M6^/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-72);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-72), byte0);
      
      byte byte1 = NumberUtils.min((byte) (-102), (byte)75, (byte)4);
      assertEquals((byte) (-102), byte1);
      
      NumberUtils.createNumber((String) null);
      NumberUtils.createBigDecimal((String) null);
      byte byte2 = NumberUtils.max(byteArray0);
      assertEquals((byte)9, byte2);
      
      int int0 = NumberUtils.toInt((String) null, (int) (byte)9);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)75;
      intArray0[1] = (int) (byte)75;
      intArray0[2] = (int) (byte)9;
      int int1 = NumberUtils.min(intArray0);
      assertTrue(int1 == int0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)9;
      shortArray0[1] = (short) (byte) (-102);
      shortArray0[2] = (short) (byte) (-72);
      shortArray0[3] = (short) (byte) (-102);
      shortArray0[4] = (short) (byte)2;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)9, short0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Z!RHfjMw(z1_h8=vQfD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Z!RHfjMw(z1_h8=vQfD is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1589.4485F;
      floatArray0[1] = (-3.4028235E38F);
      floatArray0[2] = 5463.231F;
      floatArray0[3] = 1891.96F;
      floatArray0[4] = (-2178.0F);
      floatArray0[5] = 1425.68F;
      floatArray0[6] = Float.NaN;
      floatArray0[7] = 1310.664F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1589.4485F;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(1589.448486328125, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-289.7056F);
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[1];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      byte byte0 = NumberUtils.min((byte) numberUtils0.BYTE_ZERO, (byte) numberUtils0.BYTE_ZERO, (byte)68);
      assertEquals((byte)0, byte0);
      
      double double1 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long long0 = NumberUtils.toLong(".a}m");
      assertEquals(0L, long0);
      
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.");
      assertEquals(1.0F, number0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1234E-5");
      assertEquals(0.01234F, number0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      NumberUtils.isNumber("-0x");
      try { 
        NumberUtils.createNumber("z$KIP");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // z$KIP is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      try { 
        NumberUtils.createNumber("F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // F is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      byte byte0 = NumberUtils.max((byte) (-45), (byte)124, (byte)106);
      assertEquals((byte)124, byte0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      try { 
        NumberUtils.createNumber("o+ovLeER-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // o+ovLeER- is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1249.8F;
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-GxJ$q~3WYHOBj2u(l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -GxJ$q~3WYHOBj2u(l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      try { 
        NumberUtils.createNumber("K_:F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // K_:F is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      try { 
        NumberUtils.createNumber("The Array must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Fal");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Fal is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[3] = (-10.0);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-10.0), double0, 0.01);
      
      byte byte0 = NumberUtils.max((byte)124, (byte)124, (byte)124);
      assertEquals((byte)124, byte0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)42, (byte) (-29), (byte)101);
      assertEquals((byte)101, byte0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[1] = (int) (short)numberUtils0.SHORT_ZERO;
      intArray0[2] = (int) (short)numberUtils0.SHORT_ZERO;
      intArray0[3] = (int) numberUtils0.INTEGER_ONE;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1, int0);
      
      NumberUtils.isNumber("MJ^ ,DQ^zk^Ow4Gq");
      short short0 = NumberUtils.max((short) numberUtils0.SHORT_ONE, (short)657, (short) (-3507));
      assertEquals((short)657, short0);
      
      int int1 = NumberUtils.max(0, 46, 101);
      assertEquals(101, int1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)101;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)101, byte0);
      
      boolean boolean0 = NumberUtils.isNumber("0x1d11");
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)101;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)101, short0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      boolean boolean0 = NumberUtils.isNumber("-0x1mW^9;KopG^^*M2E");
      assertFalse(boolean0);
      
      short short0 = NumberUtils.max((short)23143, (short)42, (short) numberUtils0.BYTE_ZERO);
      assertEquals((short)23143, short0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xisNumber(String)/createNumber(String) 6 Neg failed");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x1.1E-200");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xZ%#ISUJ:Y\u001Fs(4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x1d11");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x is not a valid number.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 76;
      int int0 = NumberUtils.max(76, 76, 76);
      assertEquals(76, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[3];
      int[] intArray0 = new int[7];
      intArray0[0] = (int) numberUtils0.INTEGER_ONE;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1, int0);
      
      longArray0[0] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      int int1 = NumberUtils.max(1, 1380, (-727));
      assertEquals(1380, int1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      NumberUtils.isNumber("-0xi");
      double[] doubleArray0 = new double[9];
      NumberUtils.toDouble("-0xi");
      int[] intArray0 = new int[16];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--f+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xTj1.1E20");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.min(110, (int) numberUtils0.BYTE_ONE, (-1431655756));
      NumberUtils.toDouble((String) null, 893.0);
      long long0 = NumberUtils.min((long) numberUtils0.BYTE_ONE, (long) numberUtils0.BYTE_ONE, (-10L));
      long long1 = new Integer((int) numberUtils0.BYTE_ONE);
      assertFalse(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 662L;
      longArray0[1] = (-1L);
      long long0 = NumberUtils.min(662L, 662L, (-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      int[] intArray0 = new int[3];
      intArray0[0] = 1346;
      intArray0[1] = 70;
      intArray0[2] = (-1299);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1299), int0);
      
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
      
      double double0 = NumberUtils.max((-244.2760725670533), (double) 1346, (double) (-1299));
      assertEquals(1346.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      try { 
        NumberUtils.createNumber("o0e");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // o0e is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("1d11");
      assertFalse(boolean0);
      
      double double0 = NumberUtils.toDouble("1d11", (-2490.15148));
      assertEquals((-2490.15148), double0, 0.01);
      
      long long0 = NumberUtils.min((long) (short)1704, (long) (short)1704, (long) (short)1704);
      assertEquals(1704L, long0);
      
      long long1 = NumberUtils.min((long) (short)1704, 708L, 0L);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      try { 
        NumberUtils.createNumber("123.4E-D");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 123.4E-D is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Tj1.1E20");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      try { 
        NumberUtils.createNumber(".a}m");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .a}m is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("6.0");
      assertEquals(6.0F, number0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      try { 
        NumberUtils.createNumber("LE.7+cMp>~T2VEsj~p");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // LE.7+cMp>~T2VEsj~p is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      try { 
        NumberUtils.createNumber("genl!vr8`dTF;!$h0&");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // genl!vr8`dTF;!$h0& is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1701;
      shortArray0[1] = (short) (-1397);
      shortArray0[2] = (short)1701;
      short short0 = NumberUtils.min((short)1701, (short) (-2978), (short) (-1397));
      assertEquals((short) (-2978), short0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      NumberUtils.min((short)796, (short)796, (short)5);
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger(",");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \",\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = NumberUtils.min((-519L), (-519L), (-519L));
      assertEquals((-519L), long0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.1E-200");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("J");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".tX.f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.min(110, (int) numberUtils0.BYTE_ONE, (-1431655764));
      NumberUtils.toDouble("<}+veM`6$Cd}~oC}c", 2656.5605169111577);
      try { 
        NumberUtils.createNumber("<}+veM`6$Cd}~oC}c");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // <}+veM`6$Cd}~oC}c is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.min((short) (-1314), (short) (-485), (short) (-485));
      assertEquals((short) (-1314), short0);
      
      NumberUtils.createDouble((String) null);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) numberUtils0.LONG_MINUS_ONE;
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_ONE;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) numberUtils0.INTEGER_ONE;
      intArray0[1] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[2] = (int) numberUtils0.INTEGER_MINUS_ONE;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1, int0);
      
      short short0 = NumberUtils.max((short)102, (short)102, (short) numberUtils0.SHORT_ONE);
      assertEquals((short)102, short0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[6];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
      
      intArray0[1] = (int) (byte)numberUtils0.BYTE_ZERO;
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      try { 
        NumberUtils.createNumber("d=L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // d=L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (-735);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-735), short0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("01l");
      assertEquals(1L, number0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      try { 
        NumberUtils.createNumber("isNumber(String)/createNumber(String) 13 failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // isNumber(String)/createNumber(String) 13 failed is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_120()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[1] = (short)1426;
      shortArray0[2] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[3] = (short) numberUtils0.SHORT_ONE;
      NumberUtils.min(shortArray0);
      double[] doubleArray0 = new double[6];
      NumberUtils.min(doubleArray0);
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      short[] shortArray0 = new short[14];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)101;
      NumberUtils.min(byteArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)101;
      doubleArray0[1] = 2049.0;
      NumberUtils.min(doubleArray0);
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("N9U8K");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"N9U8K\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-2060L);
      longArray0[1] = 2968L;
      longArray0[2] = (-3620L);
      long long0 = NumberUtils.max((-2060L), 2968L, (-2060L));
      assertEquals(2968L, long0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)101;
      byte byte0 = NumberUtils.min(byteArray0);
      short short0 = NumberUtils.min((short)97, (short)97, (short)120);
      assertEquals((short)97, short0);
      
      byte byte1 = NumberUtils.min((byte)0, (byte)4, (byte)101);
      assertTrue(byte1 == byte0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)101;
      floatArray0[1] = (float) (short)97;
      floatArray0[2] = (float) (byte)0;
      floatArray0[3] = (float) (short)120;
      floatArray0[4] = (float) (byte)0;
      floatArray0[5] = (float) (byte)4;
      floatArray0[6] = (-4581.9844F);
      floatArray0[7] = (float) (byte)0;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(120.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[3];
      intArray0[0] = 2049;
      intArray0[1] = 119;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[1] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[3] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("*7_JM\"sd");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(":ck*9,eL");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-113);
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-113);
      intArray0[1] = 1;
      intArray0[2] = (int) (byte) (-113);
      intArray0[3] = (int) (byte)101;
      intArray0[4] = (int) (byte)101;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-113), int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Z%#ISUJ:Y\u001Fs(4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Z%#I\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = NumberUtils.toInt("11", (-795));
      assertEquals(11, int0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 11;
      floatArray0[2] = (float) (-795);
      floatArray0[3] = (float) 11;
      floatArray0[4] = (float) (-795);
      floatArray0[5] = (-2362.4F);
      floatArray0[6] = (float) (-795);
      NumberUtils.max(floatArray0);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(11.0F, float0, 0.01F);
      
      byte byte0 = NumberUtils.toByte("-0x");
      assertEquals((byte)0, byte0);
      
      byte byte1 = NumberUtils.toByte("11");
      assertEquals((byte)11, byte1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-59);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0xo0e");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-o0e\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = 11.0F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(11.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)55, (byte) (-107), (byte)55);
      assertEquals((byte) (-107), byte0);
      
      boolean boolean0 = NumberUtils.isNumber("1.1E20");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short) numberUtils0.SHORT_ONE, (short)70, (short)1235);
      assertEquals((short)1235, short0);
      
      double double0 = NumberUtils.min((double) numberUtils0.FLOAT_ZERO, (double) numberUtils0.FLOAT_ONE, (double) (short)70);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("$WPORlY7C87Ks&P");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-1598.6746067744);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1598.6746067744), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("12.3");
      assertTrue(boolean0);
      
      short short0 = NumberUtils.max((short)23143, (short)23143, (short)23143);
      assertEquals((short)23143, short0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("----Z!RHfjMw(z1_h8=vQfD");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      try { 
        NumberUtils.createNumber("|t{]y4*d-?#j");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // |t{]y4*d-?#j is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 1L;
      long long0 = NumberUtils.max(1L, 1L, 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double double0 = NumberUtils.max(1386.0, 5.0, 1904.628);
      assertEquals(1904.628, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double double0 = NumberUtils.max((-5.0), (-741.0844414112945), (-2783.542221023));
      assertEquals((-5.0), double0, 0.01);
      
      float float0 = NumberUtils.toFloat((String) null, (-375.57F));
      assertEquals((-375.57F), float0, 0.01F);
      
      long long0 = NumberUtils.max(0L, 0L, 9L);
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("isNumber(String)/createNumber(String) 5 failed", (byte) (-71));
      byte byte1 = NumberUtils.toByte((String) null, (byte) (-71));
      assertTrue(byte1 == byte0);
      
      NumberUtils.max((long) (byte) (-71), 1L, 1L);
      long long0 = NumberUtils.max((long) (byte) (-71), (long) (byte) (-71), 3001L);
      assertEquals(3001L, long0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_153()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.toByte("11z", (byte)7);
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_155()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.toInt("N#i6+Sos!grcYwZ*AH,", (int) numberUtils0.SHORT_ONE);
      assertEquals(1, int0);
      
      int int1 = NumberUtils.min((-824), (int) numberUtils0.BYTE_MINUS_ONE, 1431655765);
      assertEquals((-824), int1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = NumberUtils.min(65, (-1431655764), (-1431655764));
      assertEquals((-1431655764), int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short) (-2928), (short) numberUtils0.SHORT_MINUS_ONE, (short) numberUtils0.SHORT_ZERO);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2267;
      short short0 = NumberUtils.min((short)2267, (short)2267, (short)2267);
      short short1 = NumberUtils.min(shortArray0);
      assertTrue(short1 == short0);
      assertEquals((short)2267, short1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      float float0 = NumberUtils.max((-1.2F), (-666.4F), (-666.4F));
      assertEquals((-1.2F), float0, 0.01F);
      
      boolean boolean0 = NumberUtils.isDigits("z9\"{;2w;Lf(BXx!a=[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-711);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_164()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.min((byte) numberUtils0.BYTE_ONE, (byte)41, (byte) (-20));
      assertEquals((byte) (-20), byte0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.min((byte) (-82), (byte) numberUtils0.BYTE_ZERO, (byte) (-82));
      assertEquals((byte) (-82), byte0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)76;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      short short0 = NumberUtils.toShort(" k{JIh.!~tL6EG");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("|-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_171()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)numberUtils0.BYTE_MINUS_ONE;
      floatArray0[1] = (float) numberUtils0.FLOAT_MINUS_ONE;
      floatArray0[2] = (float) (long)numberUtils0.LONG_ONE;
      floatArray0[3] = (-666.73F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-666.73F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_172()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)numberUtils0.SHORT_ZERO;
      longArray0[1] = (long) (byte)numberUtils0.BYTE_MINUS_ONE;
      longArray0[2] = (long) (byte)numberUtils0.BYTE_ZERO;
      longArray0[3] = (long) (byte)numberUtils0.BYTE_ONE;
      longArray0[4] = (long) (byte)numberUtils0.BYTE_ONE;
      longArray0[5] = (long) (byte)numberUtils0.BYTE_MINUS_ONE;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[1] = (float) 0L;
      floatArray0[2] = (float) 0L;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      longArray0[6] = (long) (byte)numberUtils0.BYTE_MINUS_ONE;
      longArray0[7] = (long) (byte)numberUtils0.BYTE_ZERO;
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      long[] longArray0 = new long[10];
      longArray0[0] = 3124L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      long[] longArray0 = new long[9];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      float float0 = NumberUtils.min(1.2F, Float.NaN, Float.NaN);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 592.9413F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 272;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int[] intArray0 = new int[18];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double double0 = NumberUtils.toDouble("--11d11", 14.3);
      assertEquals(14.3, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (-1.7976931348623157E308);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      int int0 = NumberUtils.toInt("D>eN4M[Z", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      float float0 = NumberUtils.toFloat("1a");
      assertEquals(0.0F, float0, 0.01F);
      
      int int0 = NumberUtils.toInt("1a");
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-5.56);
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0.0F;
      doubleArray0[7] = (double) 0;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1l");
      assertNotNull(number0);
      
      boolean boolean0 = NumberUtils.isNumber("1l");
      assertTrue(boolean0);
      
      float float0 = NumberUtils.toFloat("0xa25e5f`E,,wXf]K4JS");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[6];
      NumberUtils.max(intArray0);
      intArray0[0] = (int) (byte)numberUtils0.BYTE_ZERO;
      intArray0[1] = (int) (byte)numberUtils0.BYTE_ZERO;
      intArray0[2] = (int) (short)numberUtils0.SHORT_ONE;
      intArray0[3] = (int) numberUtils0.INTEGER_ONE;
      intArray0[4] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[5] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (-7);
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (float)numberUtils0.FLOAT_MINUS_ONE;
      doubleArray0[1] = (double) numberUtils0.DOUBLE_ONE;
      doubleArray0[2] = (double) (float)numberUtils0.FLOAT_MINUS_ONE;
      doubleArray0[3] = (double) (byte)numberUtils0.BYTE_ZERO;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      try { 
        NumberUtils.createNumber("oof");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // oof is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      longArray0[1] = (long) numberUtils0.LONG_ZERO;
      longArray0[2] = (long) (int)numberUtils0.INTEGER_ZERO;
      longArray0[3] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      longArray0[4] = (long) (byte)numberUtils0.BYTE_ZERO;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-2857L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      long[] longArray0 = new long[3];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }
}
