/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 11:35:35 GMT 2023
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.StringReader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      cSVFormat0.withEscape('V');
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "+tlQ)_(3&,LscY9");
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse(uRL0, charset0, cSVFormat0);
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "+tlQ)_(3&,LscY9");
      URL uRL0 = MockURL.getHttpExample();
      Charset charset0 = Charset.defaultCharset();
      CSVParser cSVParser0 = CSVParser.parse(uRL0, charset0, cSVFormat0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<!^A6*";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("charset");
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat5 = cSVFormat4.withCommentStart('C');
      CSVFormat cSVFormat6 = cSVFormat5.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("<!^A6*", cSVFormat6);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat1);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("< aSW|V0Q=A*?/", cSVFormat1);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("< aSW|V0Q=A*?/", cSVFormat1);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test
  public void test06() {}
// Defects4J: flaky method
//   @Test(timeout = 4000)
//   public void test06()  throws Throwable  {
//       CSVFormat cSVFormat0 = CSVFormat.MYSQL;
//       CSVParser cSVParser0 = CSVParser.parse("TABLE ", cSVFormat0);
//       cSVParser0.close();
//       Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
//       cSVParser0.forEach(consumer0);
//       assertEquals(0L, cSVParser0.getRecordNumber());
//   }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Charset.defaultCharset();
      Character character0 = new Character('@');
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVParser cSVParser0 = CSVParser.parse("<!^A6*", cSVFormat1);
      cSVParser0.getRecords();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("<!^A6*");
      Character character1 = new Character('E');
      cSVFormat0.withSkipHeaderRecord(false);
      CSVParser cSVParser1 = CSVParser.parse("<!^A6*", cSVFormat2);
      cSVFormat0.withRecordSeparator("unlock");
      cSVParser1.nextRecord();
      cSVParser0.close();
      CSVRecord cSVRecord0 = cSVParser1.nextRecord();
      assertNull(cSVRecord0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Charset.defaultCharset();
      Character character0 = new Character('K');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('e');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVFormat2.withDelimiter('j');
      CSVFormat cSVFormat3 = cSVFormat1.withNullString("url");
      Character character1 = new Character('e');
      cSVFormat2.withSkipHeaderRecord(false);
      CSVParser cSVParser0 = CSVParser.parse("\nORDER BY ", cSVFormat3);
      cSVFormat3.withRecordSeparator("\nORDER BY ");
      cSVParser0.nextRecord();
      cSVParser0.close();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("<!^A6*");
      CSVParser cSVParser0 = CSVParser.parse("<!^A6*", cSVFormat1);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("<!^A6*");
      CSVParser cSVParser0 = CSVParser.parse("COLUMN", cSVFormat1);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Charset.defaultCharset();
      Character character0 = new Character('@');
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('@');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("url");
      Character character1 = new Character('@');
      cSVFormat2.withSkipHeaderRecord(false);
      CSVParser cSVParser0 = CSVParser.parse("\nORDER BY ", cSVFormat0);
      cSVFormat3.withRecordSeparator("96qS~9WjwLA,_");
      cSVParser0.nextRecord();
      cSVParser0.close();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse(",c8#v:XytVJ)rLe7S1", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[, c8#v:XytVJ)rLe7S1]", cSVRecord0.toString());
  }

  @Test
  public void test13() {}
// Defects4J: flaky method
//   @Test(timeout = 4000)
//   public void test13()  throws Throwable  {
//       CSVFormat cSVFormat0 = CSVFormat.MYSQL;
//       CSVParser cSVParser0 = CSVParser.parse("nSgetAsciiSXream", cSVFormat0);
//       Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
//       cSVParser0.forEach(consumer0);
//       assertEquals(1L, cSVParser0.getRecordNumber());
//   }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CSVParser has been closed");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      stringReader0.skip((-5627L));
      cSVFormat0.withEscape('G');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('0');
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
      char[] charArray0 = new char[7];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      Character character0 = new Character('\\');
      cSVFormat1.withQuoteChar(character0);
      charArray0[2] = '0';
      charArray0[3] = 'G';
      charArray0[4] = '0';
      charArray0[5] = 'G';
      charArray0[6] = 'G';
      cSVFormat0.withDelimiter('G');
      stringReader0.read(charArray0);
      cSVFormat1.withIgnoreSurroundingSpaces(false);
      Character character1 = new Character('e');
      cSVFormat1.withCommentStart(character1);
      cSVParser0.getRecords();
      cSVParser0.iterator();
      long long0 = cSVParser0.getRecordNumber();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("Xe^Y0QgybM]p8=7<h", cSVFormat0);
      assertEquals(0L, cSVParser0.getRecordNumber());
      
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse("TABLE ", cSVFormat0);
      cSVParser0.getRecords();
      cSVParser0.close();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("<!A6*", cSVFormat0);
      cSVParser0.getCurrentLineNumber();
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertNull(cSVRecord0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse(") invalid parse sequence", cSVFormat0);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVParser cSVParser0 = CSVParser.parse("+tlQ)_(3&,LscY9", cSVFormat0);
      cSVParser0.isClosed();
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[+tlQ)_(3&, LscY9]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        CSVParser.parse((File) null, cSVFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'file' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse(",c8#vWXytVG)rLe7S1", cSVFormat0);
      // Undeclared exception!
      try { 
        cSVParser0.getHeaderMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test
  public void test23() {}
// Defects4J: flaky method
//   @Test(timeout = 4000)
//   public void test23()  throws Throwable  {
//       CSVFormat cSVFormat0 = CSVFormat.RFC4180;
//       CSVParser cSVParser0 = CSVParser.parse(".mJD", cSVFormat0);
//       cSVParser0.spliterator();
//       cSVParser0.nextRecord();
//       assertEquals(1L, cSVParser0.getRecordNumber());
//   }
}
