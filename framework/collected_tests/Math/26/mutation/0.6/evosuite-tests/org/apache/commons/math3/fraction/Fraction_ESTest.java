/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 23:17:56 GMT 2023
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thoughtworks.xstream.io.StreamException;
import org.apache.commons.math3.fraction.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.testcarver.testcase.EvoSuiteXStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2147483642), 837989913);
      Fraction fraction1 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction1.TWO_THIRDS.subtract(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: 2,706,143,584
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      assertEquals((-2147483648L), fraction0.longValue());
      
      fraction0.THREE_FIFTHS.negate();
      fraction0.equals(fraction0);
      fraction0.compareTo(fraction0);
      Fraction fraction1 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction2 = Fraction.ONE_HALF;
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(39, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 39/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, 91);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        fraction0.TWO_THIRDS.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.ZERO.subtract(fraction1);
      assertNotSame(fraction2, fraction1);
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      
      String string0 = fraction0.toString();
      assertEquals("3 / 4", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      assertEquals(10000.0, fraction0.percentageValue(), 0.01);
      
      Fraction fraction1 = new Fraction(101.22616893630631);
      fraction1.THREE_FIFTHS.toString();
      Fraction fraction2 = new Fraction(500.2442931897692);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction(0.0);
      Fraction fraction5 = new Fraction((-242343.0));
      Fraction fraction6 = new Fraction((double) Integer.MIN_VALUE);
      Fraction fraction7 = new Fraction(500.2442931897692);
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE, Integer.MAX_VALUE);
      Fraction fraction9 = new Fraction(0.0);
      fraction6.equals(fraction8);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction3.ONE.divide(fraction7);
      Object object0 = new Object();
      fraction7.equals(object0);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Fraction fraction10 = new Fraction((-1316));
      fraction10.subtract(613555800);
      // Undeclared exception!
      try { 
        fraction8.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/2,147,483,647, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(1.7976931348623157E308, (-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 179,769,313,486,231,570,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(474, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 474/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = fraction1.TWO_FIFTHS.subtract(2684);
      assertEquals((-2683L), fraction2.longValue());
      
      Fraction fraction3 = new Fraction(500.0);
      Fraction fraction4 = new Fraction(75.0);
      Fraction fraction5 = Fraction.THREE_QUARTERS;
      Fraction fraction6 = new Fraction(0.0);
      Fraction fraction7 = Fraction.ONE_THIRD;
      Fraction fraction8 = Fraction.ZERO;
      Fraction fraction9 = fraction8.abs();
      Fraction fraction10 = new Fraction(100.0);
      Fraction fraction11 = new Fraction(0.185964365000018);
      Fraction fraction12 = new Fraction(0.3606999999999516);
      Fraction fraction13 = new Fraction(2290.4622502);
      fraction9.negate();
      Fraction fraction14 = Fraction.ONE_QUARTER;
      fraction9.negate();
      assertTrue(fraction9.equals((Object)fraction6));
      assertFalse(fraction9.equals((Object)fraction11));
      
      Fraction fraction15 = Fraction.getReducedFraction(133856, 1053);
      assertEquals(127.118706F, fraction15.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      fraction0.floatValue();
      fraction0.toString();
      Fraction fraction1 = new Fraction((-594.5680502));
      fraction1.getField();
      Fraction fraction2 = fraction1.negate();
      assertFalse(fraction2.equals((Object)fraction1));
      
      Fraction fraction3 = new Fraction((-1.0));
      assertEquals((-1), fraction3.getNumerator());
      
      Fraction fraction4 = Fraction.getReducedFraction(289, 31);
      assertEquals(932.258064516129, fraction4.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = fraction1.ONE.divide(fraction0);
      assertEquals(0.01F, fraction2.floatValue(), 0.01F);
      
      Fraction fraction3 = new Fraction(500.0);
      Fraction fraction4 = Fraction.THREE_QUARTERS;
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-1235.0));
      assertEquals((-1235), fraction6.getNumerator());
      
      Fraction fraction7 = new Fraction(0.001608947368367808);
      Fraction fraction8 = new Fraction(0.001608947368367808);
      Fraction fraction9 = Fraction.getReducedFraction((-2147483646), (-261));
      assertEquals(8227906.5F, fraction9.floatValue(), 0.01F);
      
      fraction8.hashCode();
      String string0 = fraction0.toString();
      assertEquals("100", string0);
      
      Fraction fraction10 = new Fraction(0.001608947368367808);
      fraction3.getField();
      Fraction fraction11 = new Fraction(3.230600029019426E-7);
      assertFalse(fraction11.equals((Object)fraction8));
      
      Fraction fraction12 = new Fraction((-1432));
      Fraction fraction13 = fraction4.subtract((-1432));
      assertEquals(1432.75, fraction13.doubleValue(), 0.01);
      
      Fraction fraction14 = fraction4.negate();
      assertEquals((-75.0), fraction14.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) Integer.MAX_VALUE);
      Fraction fraction1 = fraction0.divide(fraction0);
      Fraction fraction2 = fraction0.THREE_QUARTERS.negate();
      Fraction fraction3 = fraction0.multiply(fraction1);
      Fraction fraction4 = new Fraction(4);
      Fraction fraction5 = new Fraction((-242343.0));
      Fraction fraction6 = new Fraction((double) 4);
      Fraction fraction7 = new Fraction(4.648764684134221E-4);
      String string0 = fraction1.toString();
      assertEquals("1", string0);
      
      Fraction fraction8 = new Fraction(0.027645648022934344);
      Fraction fraction9 = Fraction.getReducedFraction(204, 4);
      Fraction fraction10 = new Fraction(0.027645648022934344);
      fraction4.getField();
      Fraction fraction11 = new Fraction(1.1723543519770656);
      assertEquals(1.1723518850987433, fraction11.doubleValue(), 0.01);
      
      Fraction fraction12 = new Fraction((-2131));
      Fraction fraction13 = fraction9.subtract(204);
      assertEquals((short) (-153), fraction13.shortValue());
      
      fraction3.negate();
      assertEquals(1, fraction1.getNumerator());
      
      String string1 = fraction2.toString();
      assertEquals("-3 / 4", string1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0.0012045217391118967, Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 0.001 to fraction after -2,147,483,648 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      fraction1.MINUS_ONE.reciprocal();
      Fraction fraction2 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction3 = new Fraction((-1.0));
      fraction3.TWO.abs();
      Fraction fraction4 = new Fraction(1.1723543519770656);
      Fraction fraction5 = new Fraction(26.705246901878994);
      fraction5.ONE_FIFTH.toString();
      Fraction fraction6 = new Fraction((-878.0));
      Fraction fraction7 = new Fraction(0.005687685310398871);
      Fraction fraction8 = Fraction.ZERO;
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction5.equals(fraction7);
      String string0 = "<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>";
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction1.add(fraction8);
      Object object0 = new Object();
      Fraction fraction9 = Fraction.getReducedFraction(Integer.MAX_VALUE, Integer.MAX_VALUE);
      fraction7.equals(fraction9);
      // Undeclared exception!
      try { 
        EvoSuiteXStream.fromString("1 / 5");
        fail("Expecting exception: StreamException");
      
      } catch(StreamException e) {
         //
         // 
         //
         verifyException("com.thoughtworks.xstream.io.xml.XppReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MAX_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 2,147,483,647/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-1165));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-1,165, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = Fraction.ONE_HALF;
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.ONE;
      Fraction fraction2 = fraction0.ZERO.add(fraction1);
      assertSame(fraction2, fraction1);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.TWO_QUARTERS.add(fraction1);
      assertEquals(0.5F, fraction2.floatValue(), 0.01F);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = new Fraction(0.0);
      Fraction fraction2 = new Fraction((-0.1));
      Fraction fraction3 = fraction1.divide(fraction2);
      Fraction fraction4 = new Fraction((-242343.0));
      Fraction fraction5 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction6 = new Fraction(332.0);
      Fraction fraction7 = new Fraction((-2323.0));
      Fraction fraction8 = new Fraction(44.0);
      Fraction fraction9 = new Fraction(0.8717881410664308);
      Fraction fraction10 = Fraction.ZERO;
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction10.equals(object0);
      assertSame(fraction10, fraction3);
      assertFalse(fraction10.equals((Object)fraction9));
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Fraction fraction11 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction12 = Fraction.TWO_QUARTERS;
      Fraction fraction13 = fraction12.subtract((-990));
      assertEquals(990.5F, fraction13.floatValue(), 0.01F);
      
      Fraction fraction14 = new Fraction(4236.2279778853, Integer.MIN_VALUE);
      assertFalse(fraction14.equals((Object)fraction5));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = Fraction.TWO;
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      // Undeclared exception!
      try { 
        fraction0.ONE_QUARTER.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      String string0 = fraction0.toString();
      assertEquals("-1", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction((-1.0));
      fraction3.TWO_QUARTERS.divide(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction(0.0);
      Fraction fraction5 = new Fraction((-0.1));
      Fraction fraction6 = new Fraction((-1057.7453839254517));
      Fraction fraction7 = new Fraction(44.0);
      Fraction fraction8 = new Fraction(1.0E-5);
      Fraction fraction9 = Fraction.ZERO;
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      String string0 = "<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>";
      // Undeclared exception!
      try { 
        EvoSuiteXStream.fromString("0 / 1");
        fail("Expecting exception: StreamException");
      
      } catch(StreamException e) {
         //
         // 
         //
         verifyException("com.thoughtworks.xstream.io.xml.XppReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.multiply(fraction1);
      assertEquals(0, fraction2.getNumerator());
      
      String string0 = fraction0.toString();
      assertEquals("2 / 3", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = fraction0.ONE_HALF.add(5);
      assertEquals(5.5, fraction1.doubleValue(), 0.01);
      
      Fraction fraction2 = new Fraction(75.0);
      Fraction fraction3 = new Fraction(500.0);
      Fraction fraction4 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction5 = new Fraction((-1.0));
      Fraction fraction6 = fraction5.ONE_QUARTER.divide(256);
      assertEquals(9.765625E-4F, fraction6.floatValue(), 0.01F);
      
      Fraction fraction7 = new Fraction(0.0);
      Fraction fraction8 = new Fraction((-242343.0));
      assertEquals((-242343), fraction8.getNumerator());
      
      Fraction fraction9 = new Fraction((double) Integer.MIN_VALUE);
      Fraction fraction10 = new Fraction(500.0);
      Fraction fraction11 = new Fraction(500.0);
      assertTrue(fraction11.equals((Object)fraction3));
      
      Fraction fraction12 = Fraction.ZERO;
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      boolean boolean0 = fraction9.equals(fraction12);
      assertFalse(boolean0);
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Object object0 = new Object();
      fraction12.equals(object0);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Object object1 = new Object();
      fraction9.equals(object1);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Fraction fraction13 = fraction4.subtract((-1));
      assertTrue(fraction13.equals((Object)fraction9));
      assertEquals(1, fraction4.getDenominator());
      assertFalse(fraction4.equals((Object)fraction11));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.MINUS_ONE.abs();
      assertEquals(100.0, fraction1.percentageValue(), 0.01);
      assertEquals(1, fraction1.getDenominator());
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      Fraction fraction2 = fraction0.ONE_HALF.subtract(fraction1);
      assertEquals((-1), fraction2.getNumerator());
      assertEquals((-0.25F), fraction2.floatValue(), 0.01F);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.ONE_THIRD.add(292);
      assertEquals(292.3333333333333, fraction1.doubleValue(), 0.01);
      
      String string0 = fraction0.toString();
      assertEquals("1 / 3", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = Fraction.ONE_HALF;
      Fraction fraction2 = fraction0.TWO_QUARTERS.add(fraction1);
      assertEquals(100.0, fraction2.percentageValue(), 0.01);
      assertEquals(1, fraction2.getDenominator());
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void testRemovetestRemove_32()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      fraction0.THREE_QUARTERS.divide(5);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      fraction2.getDenominator();
      fraction3.ONE.subtract(1852);
      Fraction fraction4 = null;
      try {
        fraction4 = new Fraction(75.0, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 75 to fraction (9,223,372,036,854,775,734/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1390, 890);
      Fraction fraction1 = new Fraction((-369), (-369));
      Fraction fraction2 = fraction0.divide(fraction1);
      boolean boolean0 = fraction0.equals(fraction2);
      assertTrue(boolean0);
      
      int int0 = fraction1.compareTo(fraction0);
      assertEquals(1, fraction1.getNumerator());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.divide(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void testRemovetestRemove_36()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = Fraction.THREE_QUARTERS;
      Fraction fraction5 = new Fraction((-0.8410421675967998));
      Fraction fraction6 = new Fraction((-0.1));
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      assertEquals((-2.147483648E11), fraction8.percentageValue(), 0.01);
      
      Fraction fraction9 = new Fraction(332.0);
      Fraction fraction10 = new Fraction((-2316.343568441701));
      Fraction fraction11 = new Fraction(44.0);
      Fraction fraction12 = new Fraction(0.8717881410664308);
      Fraction fraction13 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object0);
      Fraction fraction14 = new Fraction((-0.1));
      fraction13.equals(fraction14);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object1);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      boolean boolean0 = fraction14.equals(object0);
      assertFalse(boolean0);
      
      Fraction fraction15 = new Fraction(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, fraction15.getNumerator());
      assertTrue(fraction15.equals((Object)fraction3));
      
      int int0 = fraction2.intValue();
      assertEquals(500, int0);
      assertFalse(fraction2.equals((Object)fraction11));
      
      int int1 = fraction5.intValue();
      assertEquals((-84.10404624277457), fraction5.percentageValue(), 0.01);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.getReducedFraction(837989913, 837989913);
      Fraction fraction2 = fraction0.divide(fraction1);
      assertEquals(100.0, fraction1.percentageValue(), 0.01);
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      fraction0.ONE.getField();
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertEquals((-2.0), fraction2.doubleValue(), 0.01);
      
      fraction0.negate();
      assertFalse(fraction0.equals((Object)fraction2));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.negate();
      assertEquals((-1), fraction1.getNumerator());
      assertEquals((-25.0), fraction1.percentageValue(), 0.01);
      
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertEquals(1.0, fraction2.doubleValue(), 0.01);
      
      fraction0.negate();
      assertNotSame(fraction0, fraction2);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = new Fraction((-64), (-64));
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.divide((-2147483634));
      assertEquals((-1.3969839074597103E-7), fraction1.percentageValue(), 0.01);
      assertEquals((-3), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      String string0 = fraction0.toString();
      assertEquals("1 / 2", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
      
      Fraction fraction1 = fraction0.ONE_HALF.multiply(Integer.MIN_VALUE);
      assertEquals((-1073741824), fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      
      Fraction fraction2 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(1.0, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void testRemovetestRemove_46()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-0.1));
      assertEquals(10, fraction6.getDenominator());
      
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction9 = new Fraction(332.0);
      Fraction fraction10 = new Fraction(0.0);
      Fraction fraction11 = fraction10.MINUS_ONE.multiply(fraction4);
      assertEquals(1, fraction4.getDenominator());
      assertEquals(1.0F, fraction11.floatValue(), 0.01F);
      
      Fraction fraction12 = new Fraction(44.0);
      Fraction fraction13 = new Fraction(0.8717881410664308);
      Fraction fraction14 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction14.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction14.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction14.equals(object2);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      int int0 = fraction3.getNumerator();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.TWO_QUARTERS.subtract((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = Fraction.FOUR_FIFTHS;
      Fraction fraction2 = fraction0.TWO_THIRDS.add(fraction1);
      assertEquals(1.4666666666666666, fraction2.doubleValue(), 0.01);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.MINUS_ONE.subtract((-2150));
      assertEquals((short)2149, fraction1.shortValue());
      
      Fraction fraction2 = fraction0.negate();
      assertEquals((-75.0), fraction2.percentageValue(), 0.01);
      assertEquals((-3), fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) 1276, 1276);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1,276 to fraction (-1,275/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = fraction0.TWO_FIFTHS.reciprocal();
      assertEquals(5, fraction1.getNumerator());
      assertEquals(2.5F, fraction1.floatValue(), 0.01F);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.ONE_FIFTH.abs();
      assertEquals(20.0, fraction1.percentageValue(), 0.01);
      
      String string0 = fraction0.toString();
      assertEquals("1 / 3", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-0.1));
      Fraction fraction7 = new Fraction(3113.6904270122054);
      assertEquals(3113.6904231625836, fraction7.doubleValue(), 0.01);
      
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      assertEquals((-2.147483648E11), fraction8.percentageValue(), 0.01);
      
      Fraction fraction9 = new Fraction(332.0);
      Fraction fraction10 = new Fraction((-2323.0));
      Fraction fraction11 = new Fraction(44.0);
      Fraction fraction12 = Fraction.TWO_QUARTERS;
      Fraction fraction13 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object1);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      boolean boolean0 = fraction13.equals(object2);
      assertFalse(boolean0);
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      double double0 = fraction13.percentageValue();
      assertTrue(fraction13.equals((Object)fraction5));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void testRemovetestRemovetestRemovetestRemove_54()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = Fraction.FOUR_FIFTHS;
      Fraction fraction3 = fraction2.THREE_FIFTHS.multiply(fraction1);
      assertEquals((byte)45, fraction3.byteValue());
      
      Fraction fraction4 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction5 = Fraction.ONE_THIRD;
      fraction4.longValue();
      Fraction fraction6 = Fraction.ONE;
      assertFalse(fraction6.equals((Object)fraction3));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(145, 145);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = fraction0.divide(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.getReducedFraction((-2136852539), (-2136852539));
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(boolean0);
      
      int int0 = fraction1.compareTo(fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertEquals(100.0, fraction1.percentageValue(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = Fraction.ZERO;
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
      
      Fraction fraction2 = Fraction.THREE_FIFTHS;
      int int0 = fraction1.compareTo(fraction2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (2,147,483,649/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = new Fraction(11.735627, 1800);
      assertEquals(11.735632183908047, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Object object0 = new Object();
      boolean boolean0 = fraction0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = new Fraction(101.22616893630631);
      assertEquals(54156, fraction0.getNumerator());
  }
}
