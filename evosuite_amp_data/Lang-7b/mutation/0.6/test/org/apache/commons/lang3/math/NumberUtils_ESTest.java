/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 21:31:32 GMT 2023
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-0l");
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      short[] shortArray0 = new short[10];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
      
      boolean boolean0 = NumberUtils.isNumber("1.1L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.9");
      assertEquals(0.9F, number0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("d");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-49);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-49), byte0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Number number0 = NumberUtils.createNumber(".1E700");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-700F");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E200");
      assertEquals(1.1E200, number0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x9f");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("9f");
      assertEquals(9.0F, number0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-700");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0{");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("9f");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("3eL");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)76;
      NumberUtils.min(shortArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)76;
      NumberUtils.min(doubleArray0);
      boolean boolean0 = NumberUtils.isNumber("..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("14D");
      assertEquals(14.0, number0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.1E-700");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      long[] longArray0 = new long[1];
      NumberUtils.max(longArray0);
      NumberUtils.isNumber("0xFalse result for (false, false, true)");
      boolean boolean0 = NumberUtils.isDigits("-0X-2.");
      assertFalse(boolean0);
      
      boolean boolean1 = NumberUtils.isNumber("0xFalse result for (false, false, true)");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0Eo");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x0E");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0E is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0Eo");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0Eo is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xu3(w:@Gm^g!");
      assertFalse(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-464);
      intArray0[1] = (-265506228);
      intArray0[2] = 1571;
      intArray0[3] = 120;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1571, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x0xJAVA_1_4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xd2");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("22338L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-XWtB##5=5!Nl");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -XWtB##5=5!Nl is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      try { 
        NumberUtils.createNumber("?Ti>81;JO9~N(`;[E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ?Ti>81;JO9~N(`;[E is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      float[] floatArray0 = new float[17];
      floatArray0[10] = 661.465F;
      NumberUtils.max(floatArray0);
      NumberUtils.createDouble((String) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      try { 
        NumberUtils.createNumber("'AV.c\nL'w\"/4-BL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 'AV.c
         // L'w\"/4-BL is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0E.*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("12.4E5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 2583.438F;
      floatArray0[1] = 2583.438F;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = 2583.438F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1579;
      intArray0[1] = (-2855);
      intArray0[2] = 8192;
      intArray0[3] = 7366;
      intArray0[4] = 7;
      intArray0[5] = 101;
      intArray0[6] = 34;
      intArray0[7] = 1068;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-2855), int0);
      
      long long0 = NumberUtils.max((-1517L), (long) 7366, 6L);
      assertEquals(7366L, long0);
      
      short short0 = NumberUtils.toShort((String) null, (short) (-386));
      assertEquals((short) (-386), short0);
      
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-1.1E-700F");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      try { 
        NumberUtils.createNumber("cfANsP=uuNEie;F[<");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // cfANsP=uuNEie;F[< is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      try { 
        NumberUtils.createNumber("L%bgT[{>gQ_jf");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // L%bgT[{>gQ_jf is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      try { 
        NumberUtils.createNumber("tG@EU268-6:<vZ]+eE:9");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      try { 
        NumberUtils.createNumber("toLong(Long.MIN_VALUE) failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // toLong(Long.MIN_VALUE) failed is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-2.");
      assertEquals((-2.0F), number0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x:P9");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x-x:9");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xJAVA_1_4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.max((byte) numberUtils0.BYTE_ONE, (byte) (-104), (byte)46);
      assertEquals((byte)46, byte0);
      
      long[] longArray0 = new long[8];
      boolean boolean0 = NumberUtils.isDigits((String) null);
      longArray0[0] = (long) numberUtils0.LONG_ONE;
      longArray0[1] = (long) (short)numberUtils0.SHORT_ONE;
      NumberUtils.createLong((String) null);
      longArray0[2] = (long) (short)numberUtils0.SHORT_ZERO;
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)numberUtils0.SHORT_ZERO;
      floatArray0[1] = (-701.0F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      boolean boolean1 = NumberUtils.isNumber((String) null);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray1 = new float[4];
      floatArray1[0] = (float) (int)numberUtils0.INTEGER_MINUS_ONE;
      floatArray1[1] = (float) (int)numberUtils0.INTEGER_ONE;
      floatArray1[2] = (float) (byte)numberUtils0.BYTE_MINUS_ONE;
      floatArray1[3] = (float) (byte)46;
      float float1 = NumberUtils.max(floatArray1);
      assertEquals(46.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-3.4028235E38F);
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      short short0 = NumberUtils.min((short)3, (short)84, (short) (-1279));
      assertEquals((short) (-1279), short0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      try { 
        NumberUtils.createNumber("', has a length less than 2");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0X");
      assertFalse(boolean0);
      
      NumberUtils.createFloat((String) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte)41;
      byteArray0[8] = (byte)43;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)76, byte0);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)67;
      byteArray1[1] = (byte)56;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)76;
      byteArray1[4] = (byte)76;
      byte byte1 = NumberUtils.min(byteArray1);
      assertEquals((byte)0, byte1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      try { 
        NumberUtils.createNumber("1U1E-700F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 1U1E-700F is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      try { 
        NumberUtils.createNumber(".");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      try { 
        NumberUtils.createNumber("?a#zm.e'sJO:_");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ?a#zm.e'sJO:_ is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int[] intArray0 = new int[0];
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-202.5671F);
      floatArray0[1] = 1057.2667F;
      floatArray0[2] = 2215.9F;
      floatArray0[3] = 994.6F;
      floatArray0[4] = 2583.438F;
      floatArray0[5] = Float.NaN;
      NumberUtils.min(floatArray0);
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1108.8F);
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      try { 
        NumberUtils.createNumber(" is not a valid number.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  is not a valid number. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)numberUtils0.BYTE_ZERO;
      floatArray0[1] = (float) numberUtils0.FLOAT_MINUS_ONE;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1.0F), float0, 0.01F);
      
      boolean boolean0 = NumberUtils.isNumber("0x");
      int[] intArray0 = new int[1];
      intArray0[0] = (int) numberUtils0.INTEGER_MINUS_ONE;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1), int0);
      
      long long0 = NumberUtils.max(353L, (long) numberUtils0.LONG_ONE, 1650L);
      assertEquals(1650L, long0);
      
      short short0 = NumberUtils.toShort((String) null, (short) (-2494));
      assertEquals((short) (-2494), short0);
      
      boolean boolean1 = NumberUtils.isNumber((String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      try { 
        NumberUtils.createNumber("D");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // D is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int[] intArray0 = new int[1];
      NumberUtils.min(intArray0);
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
      
      short short0 = NumberUtils.max((short)0, (short)0, (short)0);
      assertEquals((short)0, short0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      short short1 = NumberUtils.min(shortArray0);
      assertTrue(short1 == short0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (short)0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) (short)0;
      floatArray0[5] = (float) (short)0;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[1];
      intArray0[0] = (int) numberUtils0.INTEGER_ONE;
      NumberUtils.min(intArray0);
      int int0 = NumberUtils.min(intArray0);
      assertEquals(1, int0);
      
      short short0 = NumberUtils.max((short) numberUtils0.SHORT_ONE, (short) numberUtils0.BYTE_ZERO, (short)125);
      assertEquals((short)125, short0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      NumberUtils.min(byteArray0);
      NumberUtils.max(byteArray0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      longArray0[1] = (-1093L);
      NumberUtils.max(longArray0);
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-2");
      assertEquals((-2), number0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("5.1");
      assertEquals(5.1F, number0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      try { 
        NumberUtils.createNumber("toDouble(String) 1 failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // toDouble(String) 1 failed is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      boolean boolean0 = NumberUtils.isDigits("-0xKX0%il0XAKT;^  }i:ELL");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-1), byte0);
      
      int int0 = NumberUtils.max(933, (int) (byte)1, (-1153));
      assertEquals(933, int0);
      
      float float0 = NumberUtils.toFloat("-0X", (-2749.0F));
      assertEquals((-2749.0F), float0, 0.01F);
      
      int int1 = NumberUtils.toInt((String) null, 32);
      assertEquals(32, int1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      try { 
        NumberUtils.createNumber("gMf'jl@Qhe-00zl");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // gMf'jl@Qhe-00zl is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("22338L");
      assertEquals(22338L, number0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      try { 
        NumberUtils.createNumber("4N&zh:DUl-zZ@}l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 4N&zh:DUl-zZ@}l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("6.2");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+7m");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("---P5GQeqJ{`t)ZM");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short) (-3314), (short) numberUtils0.BYTE_MINUS_ONE, (short) numberUtils0.BYTE_ONE);
      assertEquals((short)1, short0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (float)numberUtils0.FLOAT_ONE;
      doubleArray0[1] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      doubleArray0[2] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      doubleArray0[3] = (double) (long)numberUtils0.LONG_ZERO;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "0X7)Ttz@*D";
      NumberUtils.toFloat((String) null);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NumberUtils.isNumber("eY6TvW3@TqE@NS^O");
      short short0 = NumberUtils.toShort((String) null, (short) (-6145));
      assertEquals((short) (-6145), short0);
      
      boolean boolean0 = NumberUtils.isNumber("-0X");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[1] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[2] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[3] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[4] = (short) numberUtils0.SHORT_ONE;
      shortArray0[5] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short) numberUtils0.SHORT_ONE;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1, short0);
      
      byte byte0 = NumberUtils.max((byte) numberUtils0.BYTE_ONE, (byte) numberUtils0.BYTE_ONE, (byte)1);
      assertEquals((byte)1, byte0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)numberUtils0.BYTE_ZERO;
      short[] shortArray1 = new short[4];
      shortArray1[0] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray1[1] = (short) numberUtils0.SHORT_ZERO;
      shortArray1[2] = (short) numberUtils0.SHORT_ONE;
      shortArray1[3] = (short) numberUtils0.SHORT_MINUS_ONE;
      short short1 = NumberUtils.min(shortArray1);
      assertEquals((short) (-1), short1);
      
      longArray0[1] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      longArray0[2] = (long) (int)numberUtils0.INTEGER_ONE;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)1, byte0);
      
      short short0 = NumberUtils.min((short)4455, (short)4455, (short)4455);
      assertEquals((short)4455, short0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int[] intArray0 = new int[2];
      NumberUtils.max(intArray0);
      NumberUtils.isNumber("-");
      NumberUtils.isNumber("9U\"kHDty>g7");
      NumberUtils.max((short) (-1694), (short) (-1694), (short) (-1694));
      NumberUtils.min((short) (-1694), (short) (-1694), (short) (-1694));
      NumberUtils.toInt("9U\"kHDty>g7");
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (short) (-1694);
      doubleArray0[1] = (double) (short) (-1694);
      NumberUtils.createNumber("-1.1E-700F");
      try { 
        NumberUtils.createNumber("-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // - is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[3] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[6] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[7] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[8] = (byte) numberUtils0.BYTE_ONE;
      NumberUtils.min(byteArray0);
      byte byte0 = NumberUtils.toByte("i");
      assertEquals((byte)0, byte0);
      
      byte byte1 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-1), byte1);
      
      byte byte2 = NumberUtils.max(byteArray0);
      assertEquals((byte)48, byte2);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte) (-1);
      shortArray0[1] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[2] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[3] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[4] = (short) (byte) (-1);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) (byte)numberUtils0.BYTE_ZERO;
      intArray0[2] = (int) (short) (-1);
      intArray0[3] = (-341);
      int int0 = NumberUtils.max(intArray0);
      shortArray0[5] = (short) (byte)48;
      shortArray0[6] = (short) (byte)48;
      shortArray0[7] = (short)1024;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1), short0);
      
      int int1 = NumberUtils.toInt("i");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.isDigits(".2%uVC<LatEj0(r");
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      NumberUtils.min(byteArray0);
      Integer integer0 = new Integer((byte)0);
      NumberUtils.toInt("_|y{{4xCo3W", (-225777470));
      Double double0 = NumberUtils.createDouble("4.0");
      assertEquals(4.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 767.74F;
      float float0 = NumberUtils.min(767.74F, 767.74F, 767.74F);
      assertEquals(767.74F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-16481), (short) (-16481), (short) (-16481));
      assertEquals((short) (-16481), short0);
      
      short short1 = new Short((short) (-16481));
      assertTrue(short1 == short0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = (-8.90256F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-8.90256F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      float[] floatArray0 = new float[17];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)numberUtils0.SHORT_ONE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-1), byte0);
      
      byte byte1 = NumberUtils.toByte("/Zx?q0W6");
      byte byte2 = NumberUtils.min((byte)0, (byte)0, (byte) numberUtils0.BYTE_ONE);
      assertTrue(byte2 == byte1);
      assertEquals((byte)0, byte2);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-5.599999904632568);
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int[] intArray0 = new int[4];
      NumberUtils.max(intArray0);
      NumberUtils.isNumber("-");
      NumberUtils.isNumber("9\"HDt>g7");
      NumberUtils.toShort("9\"HDt>g7");
      NumberUtils.min((short)0, (short) (-1687), (short)0);
      NumberUtils.min(intArray0);
      try { 
        NumberUtils.createNumber("Dr_Cjo}WYIe7`+BVw");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Dr_Cjo}WYIe7`+BVw is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0!");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-16481), (short) (-16481), (short) (-16481));
      short short1 = NumberUtils.min((short) (-16481), (short) (-16481), (short) (-16481));
      assertTrue(short1 == short0);
      assertEquals((short) (-16481), short1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("11a");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0xJAVA_1_4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"JAVA_1_4\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[9];
      intArray0[0] = (int) numberUtils0.INTEGER_ZERO;
      intArray0[1] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[2] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[3] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[4] = (-579);
      intArray0[5] = (int) numberUtils0.INTEGER_ZERO;
      intArray0[6] = (int) numberUtils0.INTEGER_ONE;
      intArray0[7] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[8] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1, int0);
      
      byte byte0 = NumberUtils.min((byte) (-128), (byte) (-62), (byte)66);
      assertEquals((byte) (-128), byte0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = 6.300000190734863;
      double double0 = NumberUtils.max(6.300000190734863, 6.300000190734863, 6.300000190734863);
      assertEquals(6.300000190734863, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[9];
      shortArray0[1] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[2] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[3] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[4] = (short) (byte)numberUtils0.BYTE_ZERO;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1, short0);
      
      shortArray0[5] = (short) numberUtils0.SHORT_ONE;
      byte byte0 = NumberUtils.max((byte) numberUtils0.BYTE_ONE, (byte) numberUtils0.BYTE_MINUS_ONE, (byte) numberUtils0.BYTE_ONE);
      assertEquals((byte)1, byte0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 12344L;
      longArray0[1] = (long) (byte)numberUtils0.BYTE_MINUS_ONE;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(12344L, long0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.createNumber("--0X1111 ");
      long long0 = NumberUtils.max((long) numberUtils0.BYTE_ONE, (long) numberUtils0.LONG_ONE, (-2832L));
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.max((long) numberUtils0.BYTE_MINUS_ONE, (-1L), 0L);
      try { 
        NumberUtils.createNumber("yC/.N");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // yC/.N is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      try { 
        NumberUtils.createNumber("I;7roR!{?,");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // I;7roR!{?, is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.createNumber("-- 1111");
      int[] intArray0 = new int[1];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
      
      byte byte0 = NumberUtils.min((byte)109, (byte) numberUtils0.BYTE_ONE, (byte) numberUtils0.BYTE_ZERO);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("Ea92T");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("eK");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("False result for (true, true)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 43;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(43, int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      long long0 = NumberUtils.max(6L, 3162L, 6L);
      assertEquals(3162L, long0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)75;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)75, byte0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--}\u00019;+afv#");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      try { 
        NumberUtils.createNumber("$-e?i[Ow*GQ/W>P&S4I");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // $-e?i[Ow*GQ/W>P&S4I is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-3);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.max((int) numberUtils0.BYTE_ZERO, (int) numberUtils0.BYTE_ZERO, (int) numberUtils0.BYTE_ONE);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (int)numberUtils0.INTEGER_ZERO;
      longArray0[1] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short) (-1), short0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (long)numberUtils0.LONG_ONE;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) (byte)numberUtils0.BYTE_ONE;
      doubleArray0[3] = (double) (long)numberUtils0.LONG_ONE;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) (float)numberUtils0.FLOAT_MINUS_ONE;
      doubleArray0[6] = (double) 0L;
      doubleArray0[7] = (double) (byte)numberUtils0.BYTE_ZERO;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("0X");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)108;
      byte byte0 = NumberUtils.max((byte)2, (byte)108, (byte)2);
      assertEquals((byte)108, byte0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[5];
      longArray0[0] = (long) numberUtils0.LONG_ZERO;
      longArray0[1] = (long) numberUtils0.LONG_ONE;
      longArray0[2] = (long) (int)numberUtils0.INTEGER_ONE;
      byte byte0 = NumberUtils.max((byte) numberUtils0.BYTE_ZERO, (byte)122, (byte)89);
      assertEquals((byte)122, byte0);
      
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = NumberUtils.max(24, 2549, 2549);
      assertEquals(2549, int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.toShort("-0x11def", (short) (-2925));
      assertEquals((short) (-2925), short0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_153()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.max((byte)3, (byte) numberUtils0.BYTE_MINUS_ONE, (byte)86);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)102;
      byte byte0 = NumberUtils.max((byte)102, (byte)102, (byte)102);
      assertEquals((byte)102, byte0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double double0 = NumberUtils.toDouble("I^U2L@H!=`T7S'4*?");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.toDouble((String) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) numberUtils0.FLOAT_MINUS_ONE;
      floatArray0[1] = (float) (long)numberUtils0.LONG_MINUS_ONE;
      floatArray0[2] = (float) (short)numberUtils0.SHORT_MINUS_ONE;
      floatArray0[3] = (float) (byte)numberUtils0.BYTE_MINUS_ONE;
      floatArray0[4] = (float) (byte)numberUtils0.BYTE_MINUS_ONE;
      floatArray0[5] = (float) (long)numberUtils0.LONG_ONE;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[8] = 661.465F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(661.465F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short) (-2298);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-2298), short0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0XWtB#v#5=5!Nl");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-WtB#v#5=5!Nl\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)120;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      long long0 = NumberUtils.toLong("createNumber(String) 6 failed");
      assertEquals(0L, long0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-126);
      short short0 = NumberUtils.min((short) (-1366), (short) (byte) (-83), (short) (byte) (-126));
      assertEquals((short) (-1366), short0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int int0 = NumberUtils.max(24, 24, 24);
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_167()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.min((short) numberUtils0.BYTE_ONE, (short) (-108), (short) (-108));
      assertEquals((short) (-108), short0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_ZERO;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      short[] shortArray0 = new short[19];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_171()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[1] = (int) (short)numberUtils0.SHORT_ZERO;
      intArray0[2] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[3] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      int[] intArray1 = new int[1];
      intArray1[0] = (int) numberUtils0.INTEGER_ZERO;
      NumberUtils.min(intArray1);
      intArray0[4] = (int) (byte)numberUtils0.BYTE_ZERO;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2145836795;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int[] intArray0 = new int[19];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      try { 
        NumberUtils.createNumber(":Yo7M`rvD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // :Yo7M`rvD is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.min(12345L, (long) numberUtils0.SHORT_ZERO, (long) numberUtils0.INTEGER_ONE);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      long long0 = NumberUtils.min(8L, 8L, (-5L));
      assertEquals((-5L), long0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      NumberUtils.isNumber("eY6TvW3@TqE@NS^O");
      float float0 = NumberUtils.toFloat("MT$X?KP# }Jh}QtJ");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0X");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_181()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float float0 = NumberUtils.max((float) numberUtils0.SHORT_ZERO, (float) numberUtils0.INTEGER_MINUS_ONE, 3.4028235E38F);
      assertEquals(3.4028235E38F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_ONE;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_184()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.min((double) numberUtils0.LONG_ZERO, Double.NaN, 891.64865742);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-507.4700012207031);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_186()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (int)numberUtils0.INTEGER_ZERO;
      longArray0[1] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      longArray0[2] = 0L;
      longArray0[3] = (long) (short)numberUtils0.SHORT_ONE;
      longArray0[4] = (long) (int)numberUtils0.INTEGER_ONE;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) (int)numberUtils0.INTEGER_MINUS_ONE;
      doubleArray0[2] = (double) (float)numberUtils0.FLOAT_MINUS_ONE;
      doubleArray0[3] = (double) (long)numberUtils0.LONG_ONE;
      doubleArray0[4] = (double) (short)numberUtils0.SHORT_ZERO;
      doubleArray0[5] = (double) (short)numberUtils0.SHORT_MINUS_ONE;
      doubleArray0[6] = (double) (short)numberUtils0.SHORT_ONE;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1.0, double0, 0.01);
      
      longArray0[5] = (long) (int)numberUtils0.INTEGER_ZERO;
      longArray0[6] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      longArray0[7] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (int)numberUtils0.INTEGER_ONE;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      long[] longArray0 = new long[5];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-56);
      byte byte0 = NumberUtils.min((byte) (-56), (byte) (-56), (byte) (-56));
      assertEquals((byte) (-56), byte0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      NumberUtils.toByte("i");
      try { 
        NumberUtils.createNumber("i");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // i is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_195()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.toLong((String) null, 10L);
      assertEquals(10L, long0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 10.0;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.min(116, (int) numberUtils0.BYTE_ONE, (int) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      float float0 = NumberUtils.toFloat("--11def", 10.3F);
      assertEquals(10.3F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      int int0 = NumberUtils.min((-1043), 1, (-1043));
      assertEquals((-1043), int0);
      
      float float0 = NumberUtils.toFloat("-`0X11d11", 1234.5F);
      assertEquals(1234.5F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      long[] longArray0 = new long[14];
      longArray0[0] = (-3475L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      long[] longArray0 = new long[4];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("--LvTVg*6:A.thV+");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }
}
