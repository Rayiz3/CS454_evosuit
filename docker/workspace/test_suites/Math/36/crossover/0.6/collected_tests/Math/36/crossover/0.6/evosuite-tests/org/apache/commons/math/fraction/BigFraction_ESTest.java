/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 17 00:44:41 GMT 2023
 */

package org.apache.commons.math.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.ONE_FIFTH.getNumeratorAsInt();
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.abs();
      BigFraction bigFraction2 = bigFraction0.FOUR_FIFTHS.reciprocal();
      BigFraction bigFraction3 = BigFraction.THREE_FIFTHS;
      bigFraction2.ONE_QUARTER.subtract(bigFraction3);
      bigFraction1.ONE_THIRD.abs();
      Object object0 = new Object();
      bigFraction0.equals(object0);
      BigFraction bigFraction4 = BigFraction.getReducedFraction(1, 1);
      BigFraction bigFraction5 = bigFraction4.THREE_FIFTHS.reciprocal();
      bigFraction5.ONE_HALF.bigDecimalValue(1);
      bigFraction0.TWO_FIFTHS.divide((long) 1);
      BigFraction bigFraction6 = new BigFraction((long) 1);
      BigFraction bigFraction7 = bigFraction4.ONE_FIFTH.multiply(bigFraction6);
      bigFraction1.compareTo(bigFraction2);
      BigFraction bigFraction8 = bigFraction1.divide((long) (-1));
      bigFraction8.TWO_THIRDS.equals(bigFraction6);
      bigFraction4.subtract((-9223372036854775808L));
      BigFraction bigFraction9 = BigFraction.getReducedFraction(99, 1);
      bigFraction9.THREE_QUARTERS.add((long) (-1));
      bigFraction7.getField();
      bigFraction4.add(386);
      bigFraction3.getNumerator();
      bigFraction9.toString();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.6461620330810547, (-1234));
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      bigFraction1.getDenominatorAsLong();
      BigFraction bigFraction2 = bigFraction0.pow(1301456);
      bigFraction2.bigDecimalValue();
      bigFraction1.intValue();
      bigFraction0.hashCode();
      BigFraction bigFraction3 = bigFraction0.negate();
      BigFraction bigFraction4 = new BigFraction(0, (-1));
      bigFraction4.add(bigFraction2);
      bigFraction3.hashCode();
      // Undeclared exception!
      try { 
        BigFraction.getReducedFraction((-5745), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2.15668056606777E-5, 2);
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      int int0 = (-2147437269);
      bigFraction1.add((-2147437269));
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction(2.15668056606777E-5, 2.15668056606777E-5, (-2147437269));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 0 to fraction after -2,147,437,269 iterations
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      // Undeclared exception!
      try { 
        bigFraction0.ONE.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-621L));
      BigFraction bigFraction1 = new BigFraction(1810L);
      bigFraction0.getNumerator();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 980;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-4369.99052755), (-4369.99052755), 980);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -4,369.991 to fraction (-14,650,270,700,337/3,352,471,958)
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.FOUR_FIFTHS.multiply(964);
      BigFraction bigFraction1 = bigFraction0.TWO_THIRDS.negate();
      BigFraction bigFraction2 = bigFraction1.ONE_HALF.negate();
      bigFraction2.ONE_HALF.getNumeratorAsInt();
      bigFraction1.getDenominatorAsLong();
      BigFraction bigFraction3 = bigFraction0.multiply(9L);
      BigFraction bigFraction4 = bigFraction3.TWO.reduce();
      bigFraction4.FOUR_FIFTHS.longValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction3.multiply(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction4.TWO_FIFTHS.bigDecimalValue((-21475), (-1071));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = new BigFraction((-144.98), (-2147483645));
      BigFraction bigFraction2 = bigFraction0.ZERO.add(bigFraction1);
      bigFraction0.MINUS_ONE.percentageValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.THREE_FIFTHS.subtract(bigInteger0);
      bigFraction1.ONE.percentageValue();
      BigFraction bigFraction3 = bigFraction0.subtract(4398046511103L);
      bigFraction3.ONE.subtract(bigFraction0);
      bigFraction1.divide((long) (-2147483645));
      BigFraction bigFraction4 = bigFraction2.add(bigInteger0);
      bigFraction4.intValue();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(15);
      BigFraction bigFraction1 = bigFraction0.TWO.negate();
      bigFraction1.THREE_QUARTERS.toString();
      bigFraction1.getField();
      bigFraction1.TWO_FIFTHS.multiply((long) 15);
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      bigFraction0.MINUS_ONE.multiply(22L);
      BigFraction bigFraction2 = bigFraction0.ONE.multiply((-1185L));
      bigFraction0.pow(1380.9479);
      bigFraction0.floatValue();
      BigFraction bigFraction3 = new BigFraction(bigInteger0, bigInteger0);
      bigFraction2.compareTo(bigFraction3);
      bigFraction3.subtract(bigInteger0);
      bigFraction0.add(7205759403792974L);
      bigFraction3.percentageValue();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 18;
      BigFraction bigFraction0 = new BigFraction(18);
      // Undeclared exception!
      try { 
        bigFraction0.ONE.bigDecimalValue(18, 18);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 700;
      BigFraction bigFraction0 = new BigFraction(700);
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.reciprocal();
      bigFraction0.TWO_FIFTHS.getField();
      // Undeclared exception!
      try { 
        bigFraction1.ONE_THIRD.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1.0));
      BigFraction bigFraction1 = bigFraction0.abs();
      bigFraction1.divide(830605);
      bigFraction0.TWO_FIFTHS.abs();
      BigFraction bigFraction2 = BigFraction.FOUR_FIFTHS;
      bigFraction2.THREE_FIFTHS.getField();
      BigFraction bigFraction3 = bigFraction1.divide(bigFraction2);
      BigFraction bigFraction4 = bigFraction3.THREE_FIFTHS.divide(830605);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction5 = bigFraction3.add(bigInteger0);
      bigFraction5.ONE_FIFTH.bigDecimalValue();
      BigFraction bigFraction6 = bigFraction4.add(bigFraction2);
      bigFraction3.add(bigInteger0);
      bigFraction4.multiply(bigFraction6);
      bigFraction4.toString();
      // Undeclared exception!
      try { 
        bigFraction6.divide(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4890L, 4890L);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.ZERO.pow(bigInteger0);
      Object object0 = new Object();
      BigFraction bigFraction2 = bigFraction1.ONE_QUARTER.divide(bigInteger0);
      bigFraction2.ZERO.hashCode();
      bigFraction0.ONE_THIRD.getDenominatorAsLong();
      bigFraction2.TWO_THIRDS.doubleValue();
      bigFraction0.equals(object0);
      bigFraction1.equals(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-2232), 5674453);
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      bigFraction1.THREE_QUARTERS.getDenominatorAsInt();
      bigFraction1.ZERO.longValue();
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      BigFraction bigFraction3 = bigFraction1.reduce();
      bigFraction3.ZERO.hashCode();
      BigFraction bigFraction4 = bigFraction0.multiply((-53));
      bigFraction4.ONE_THIRD.divide(bigFraction0);
      bigFraction1.equals(bigFraction2);
      bigFraction3.MINUS_ONE.divide((long) 4);
      BigFraction bigFraction5 = bigFraction0.abs();
      bigFraction5.ONE_HALF.multiply(bigFraction3);
      bigFraction3.add((-53));
      bigFraction3.compareTo(bigFraction0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // numerator
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.06703783571720123);
      bigFraction0.TWO_QUARTERS.doubleValue();
      BigFraction bigFraction1 = bigFraction0.TWO.add(2840L);
      BigDecimal bigDecimal0 = bigFraction0.TWO.bigDecimalValue();
      bigFraction0.getNumeratorAsLong();
      bigFraction0.TWO.getDenominatorAsLong();
      BigFraction bigFraction2 = bigFraction0.pow((-463L));
      BigFraction bigFraction3 = bigFraction2.negate();
      BigFraction bigFraction4 = bigFraction0.add(bigFraction1);
      bigFraction0.ONE_HALF.longValue();
      BigFraction bigFraction5 = bigFraction4.subtract(bigFraction3);
      BigFraction bigFraction6 = bigFraction2.ONE.subtract(1104);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction7 = bigFraction5.add(bigInteger0);
      assertEquals((short) (-20087), bigFraction7.shortValue());
      
      bigFraction2.negate();
      bigFraction6.getField();
      bigFraction1.equals(bigDecimal0);
      assertNotSame(bigFraction0, bigFraction4);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2.5583188456579364E-8);
      BigFraction bigFraction1 = bigFraction0.pow(2943L);
      assertEquals((byte)0, bigFraction0.byteValue());
      assertEquals((byte)0, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = BigFraction.getReducedFraction(1063, 1063);
      bigFraction1.MINUS_ONE.getNumeratorAsLong();
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.TWO_THIRDS.toString();
      bigFraction0.THREE_FIFTHS.add(bigInteger0);
      int int0 = 591;
      // Undeclared exception!
      try { 
        bigFraction0.FOUR_FIFTHS.bigDecimalValue(591);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.THREE_QUARTERS.divide(4701);
      BigFraction bigFraction1 = bigFraction0.divide(1073741824);
      BigFraction bigFraction2 = bigFraction1.abs();
      BigFraction bigFraction3 = bigFraction1.add((-1108L));
      assertEquals((short)0, bigFraction1.shortValue());
      assertEquals((byte) (-83), bigFraction3.byteValue());
      assertSame(bigFraction1, bigFraction2);
      
      bigFraction0.getDenominatorAsInt();
      BigFraction bigFraction4 = bigFraction0.divide(1);
      assertTrue(bigFraction4.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction2 = bigFraction0.ZERO.add(bigFraction1);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction0.add(bigInteger0);
      BigFraction bigFraction4 = bigFraction0.negate();
      bigFraction3.getField();
      assertFalse(bigFraction3.equals((Object)bigFraction4));
      
      boolean boolean0 = bigFraction2.equals(bigInteger0);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(boolean0);
      assertFalse(bigFraction1.equals((Object)bigFraction3));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.ONE.hashCode();
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.add(128L);
      BigFraction bigFraction2 = bigFraction1.ONE_FIFTH.reciprocal();
      bigFraction0.THREE_QUARTERS.getNumeratorAsInt();
      BigFraction bigFraction3 = bigFraction1.TWO_QUARTERS.pow((-1663));
      int int0 = bigFraction3.compareTo(bigFraction2);
      assertEquals(1, int0);
      
      bigFraction0.ONE_QUARTER.getNumeratorAsLong();
      bigFraction0.intValue();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte) (-99);
      byteArray0[8] = (byte)19;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigFraction bigFraction4 = bigFraction3.divide(bigInteger0);
      assertEquals((short)128, bigFraction1.shortValue());
      assertEquals((byte) (-124), bigFraction4.byteValue());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.TWO.add(443);
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.hashCode();
      BigFraction bigFraction2 = bigFraction1.multiply(bigFraction0);
      bigFraction2.ONE_THIRD.negate();
      // Undeclared exception!
      try { 
        bigFraction0.TWO.bigDecimalValue(723, 629);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.add(423);
      // Undeclared exception!
      try { 
        bigFraction0.MINUS_ONE.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.ZERO.add(bigFraction0);
      bigFraction0.pow(2943L);
      BigFraction bigFraction2 = bigFraction1.ONE_THIRD.pow(7);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      
      Random.setNextRandom(7);
      BigFraction bigFraction3 = bigFraction0.divide(bigFraction1);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)1, bigFraction3.byteValue());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.MINUS_ONE.pow(415.35498871);
      bigFraction0.ONE_FIFTH.pow((-2.893149098508887E-8));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.THREE_FIFTHS.divide((-1730L));
      BigFraction bigFraction3 = bigFraction2.THREE_FIFTHS.subtract(bigFraction1);
      assertEquals((short)10, bigFraction3.shortValue());
      
      BigFraction bigFraction4 = bigFraction2.ONE_FIFTH.divide(bigFraction0);
      BigFraction bigFraction5 = bigFraction4.ONE.add(bigFraction2);
      assertEquals((byte)1, bigFraction4.byteValue());
      assertEquals((byte)0, bigFraction5.byteValue());
      
      BigFraction bigFraction6 = bigFraction0.divide(277);
      double double0 = bigFraction6.percentageValue();
      assertEquals(0.07220216606498195, double0, 0.01);
      
      BigFraction bigFraction7 = bigFraction1.MINUS_ONE.pow((-329L));
      assertFalse(bigFraction7.equals((Object)bigFraction4));
      
      double double1 = bigFraction6.pow(0.07220216606498195);
      assertEquals(0.5931718351526506, double1, 0.01);
      
      bigFraction1.pow(0.07220216606498195);
      bigFraction6.pow(277);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
      assertFalse(bigFraction0.equals((Object)bigFraction6));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.MINUS_ONE.getNumeratorAsInt();
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      BigFraction bigFraction2 = bigFraction0.TWO_FIFTHS.subtract(bigFraction1);
      assertEquals((byte)1, bigFraction2.byteValue());
      
      BigFraction bigFraction3 = BigFraction.TWO;
      bigFraction3.ONE_QUARTER.divide((-1));
      BigFraction bigFraction4 = bigFraction0.subtract(bigFraction3);
      BigFraction bigFraction5 = bigFraction4.reciprocal();
      assertEquals((short) (-1), bigFraction4.shortValue());
      assertEquals((short)0, bigFraction5.shortValue());
      assertFalse(bigFraction0.equals((Object)bigFraction2));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction2 = bigFraction0.ONE_QUARTER.divide(bigFraction1);
      bigFraction0.doubleValue();
      bigFraction0.subtract(16L);
      bigFraction1.subtract(16L);
      // Undeclared exception!
      try { 
        bigFraction2.bigDecimalValue(1411);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.multiply(bigInteger0);
      assertEquals((short)0, bigFraction1.shortValue());
      
      BigFraction bigFraction2 = BigFraction.ONE_HALF;
      int int0 = bigFraction0.TWO.compareTo(bigFraction2);
      assertEquals(1, int0);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      
      bigFraction0.getDenominatorAsLong();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = new BigFraction((-144.98), (-2147483645));
      BigFraction bigFraction2 = bigFraction0.ZERO.add(bigFraction1);
      bigFraction0.MINUS_ONE.percentageValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      double double0 = bigFraction1.ONE.percentageValue();
      assertEquals(100.0, double0, 0.01);
      
      BigFraction bigFraction3 = bigFraction0.subtract(4398046511103L);
      assertEquals((byte)2, bigFraction3.byteValue());
      
      BigFraction bigFraction4 = bigFraction1.divide((long) (-2147483645));
      assertEquals((byte)0, bigFraction4.byteValue());
      
      BigFraction bigFraction5 = bigFraction2.add(bigInteger0);
      int int0 = bigFraction5.intValue();
      assertTrue(bigFraction5.equals((Object)bigFraction1));
      assertEquals((-145), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.ZERO.add(bigFraction0);
      BigFraction bigFraction2 = bigFraction0.pow(2943L);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      
      bigFraction1.reciprocal();
      double double0 = bigFraction1.percentageValue();
      assertEquals(50.0, double0, 0.01);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.pow(2943L);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      MockRandom mockRandom0 = new MockRandom();
      BigInteger bigInteger0 = new BigInteger(22, (-956), mockRandom0);
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      assertEquals((short)0, bigFraction1.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow((-3057));
      Random.setNextRandom(1234);
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      assertEquals((short) (-16852), bigFraction1.shortValue());
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-621L));
      BigFraction bigFraction1 = new BigFraction(1810L);
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      assertEquals((short) (-9898), bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(8444249301319736L);
      assertEquals((short)56, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.5460609501999993, (-3057));
      // Undeclared exception!
      try { 
        bigFraction0.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }
}
