/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 21:38:25 GMT 2023
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1eeE");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1E709F");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x9223372036854775807");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1l");
      assertEquals((-1L), number0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-700F");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        NumberUtils.createNumber("1.E-e700");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0d");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-bz<*i_%NG5{jlL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -bz<*i_%NG5{jlL is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234E5l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("11E700");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      NumberUtils.createNumber("0.9");
      boolean boolean0 = NumberUtils.isNumber("}g?IGeW");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-0x2345");
      assertEquals((-9029), number0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E200");
      assertEquals(1.1E200, number0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-700");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0E is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      NumberUtils.isNumber("0xabc");
      boolean boolean0 = NumberUtils.isNumber("0xabc");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-5D");
      assertEquals((-5.0), number0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-123E2.12");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x_B8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0Ex");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0Ex is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("3F");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      try { 
        NumberUtils.createNumber("toFloat(Float.MIN_VALUE) failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // toFloat(Float.MIN_VALUE) failed is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("3F");
      assertEquals(3.0F, number0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("12345L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("12345L");
      assertEquals(12345L, number0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+-~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      try { 
        NumberUtils.createNumber(":SODS{'nrgxZ^`D");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // :SODS{'nrgxZ^`D is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.4E-45");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0Ex");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      try { 
        NumberUtils.createNumber("&ZEC{e");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // &ZEC{e is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x1234E5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 676;
      intArray0[1] = (-101);
      intArray0[2] = 65;
      intArray0[3] = 676;
      intArray0[4] = 676;
      intArray0[5] = 676;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(676, int0);
      
      boolean boolean0 = NumberUtils.isDigits("int");
      boolean boolean1 = NumberUtils.isNumber("-0xfL0%B>]R");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("eFu");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-123E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-5D");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      try { 
        NumberUtils.createNumber("1.1L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 1.1L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xDY)'y_ Sd^Mg8v7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.1L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xdLmy*l37");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      try { 
        NumberUtils.createNumber("gY`Y.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-5826.168405);
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1434.9373F);
      floatArray0[1] = 1.0F;
      floatArray0[2] = 147.55F;
      floatArray0[3] = (-10.6F);
      floatArray0[4] = 10.0F;
      floatArray0[5] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
      
      short short0 = NumberUtils.toShort("J");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 2095.0234F;
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      try { 
        NumberUtils.createNumber("OFF");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // OFF is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x1.1L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      try { 
        NumberUtils.createNumber("ektPb%h)h d23$");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ektPb%h)h d23$ is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      NumberUtils.max(byteArray0);
      NumberUtils.toLong((String) null, (-1353L));
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)76;
      intArray0[1] = (int) (byte)76;
      intArray0[2] = (int) (byte)76;
      intArray0[3] = (int) (byte)76;
      intArray0[4] = (-116821848);
      NumberUtils.min(intArray0);
      NumberUtils.toLong((String) null, (long) 76);
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      try { 
        NumberUtils.createNumber("d");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // d is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x-0x123'4E5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[23];
      NumberUtils.createInteger((String) null);
      NumberUtils.createBigDecimal((String) null);
      byteArray0[0] = (byte) numberUtils0.BYTE_MINUS_ONE;
      NumberUtils.isNumber("-0xw*[");
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      try { 
        NumberUtils.createNumber("line.separator");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // line.separator is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Short short0 = NumberUtils.SHORT_ONE;
      Short short1 = new Short((short)5750);
      NumberUtils.min((int) (short)5750, (int) (short)5750, (int) short0);
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("j");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Float float0 = new Float((-1286.9));
      boolean boolean0 = NumberUtils.isNumber("-0xcreateInteger(null) failed");
      assertFalse(boolean0);
      
      boolean boolean1 = NumberUtils.isNumber("org.apache.commons.lang3.math.NumberUtils");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      NumberUtils.createNumber("--3s8*P]iv|UQwLB-DgV");
      boolean boolean0 = NumberUtils.isNumber("0xArray element ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xtoFloat(empty) failed");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      try { 
        NumberUtils.createNumber("The Array must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
      
      NumberUtils.isNumber("0nm:\u0007-");
      float float0 = NumberUtils.toFloat("toInt(String,int) 2 failed", 5.7F);
      assertEquals(5.7F, float0, 0.01F);
      
      float float1 = NumberUtils.toFloat((String) null, (-1.0F));
      assertEquals((-1.0F), float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0V,xy9");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 12;
      int int0 = NumberUtils.min(12, 12, 12);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[19];
      intArray0[0] = (int) (short)numberUtils0.SHORT_ZERO;
      int int0 = NumberUtils.min(intArray0);
      int int1 = NumberUtils.min((int) numberUtils0.INTEGER_ONE, (int) numberUtils0.INTEGER_ZERO, (int) numberUtils0.BYTE_ONE);
      assertTrue(int1 == int0);
      
      long long0 = NumberUtils.toLong("toByte(empty) failed", 918L);
      assertEquals(918L, long0);
      
      byte byte0 = NumberUtils.toByte("p;6MT|R-U[o]E9-%");
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      NumberUtils.isNumber("");
      NumberUtils.toByte("");
      NumberUtils.isDigits("");
      byte[] byteArray0 = new byte[7];
      NumberUtils.min(byteArray0);
      Number number0 = NumberUtils.createNumber("1.1");
      assertEquals(1.1F, number0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
      
      byte byte0 = NumberUtils.min((byte) (-86), (byte) (-46), (byte)97);
      assertEquals((byte) (-86), byte0);
      
      int int0 = NumberUtils.toInt((String) null, (-903));
      assertEquals((-903), int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0x is no9 a valid n?mber.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"- is no9 a valid n?mber.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      try { 
        NumberUtils.createNumber("ALl");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ALl is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      try { 
        NumberUtils.createNumber("j91o,L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // j91o,L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      NumberUtils.toByte((String) null, (byte)5);
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_082()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      boolean boolean0 = NumberUtils.isNumber("-0x");
      assertFalse(boolean0);
      
      float float0 = NumberUtils.toFloat(".T2 pbGBi", (float) numberUtils0.LONG_ONE);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      float[] floatArray0 = new float[1];
      short[] shortArray0 = new short[4];
      short[] shortArray1 = new short[4];
      short short0 = NumberUtils.max(shortArray1);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      short short1 = NumberUtils.min(shortArray0);
      assertTrue(short1 == short0);
      
      boolean boolean0 = NumberUtils.isDigits("|6[I](#W^{{?Ef).~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xG /;mM;E:D2dKJFk/x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte) (-86), (byte) (-86), (byte) (-88));
      assertEquals((byte) (-88), byte0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1.0F;
      float float0 = NumberUtils.min(1.0F, 1.0F, 1.0F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      short short0 = NumberUtils.max((short)5750, (short)5750, (short)5750);
      assertEquals((short)5750, short0);
      
      short short1 = NumberUtils.toShort("");
      assertEquals((short)0, short1);
      
      byte byte0 = NumberUtils.max((byte)31, (byte)31, (byte)99);
      byte byte1 = NumberUtils.toByte("{lqUO\rU*oC~", (byte)122);
      assertEquals((byte)122, byte1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)7;
      byte byte2 = NumberUtils.max(byteArray0);
      assertTrue(byte2 == byte0);
      assertEquals((byte)99, byte2);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.min((short) (-910), (short) (-86), (short) (-3091));
      NumberUtils.max((-3830), (-1), 1486);
      // Undeclared exception!
      try { 
        NumberUtils.createInteger("0xT|K/@i`Aw+6z0]0LS`");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"T|K/@i`Aw+6z0]0LS`\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1285.821382709657);
      double double0 = NumberUtils.max((-1285.821382709657), (-1285.821382709657), (-1285.821382709657));
      assertEquals((-1285.821382709657), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      NumberUtils.isNumber("minimum(long,long,long) 2 failed");
      short short0 = NumberUtils.min((short) (-1403), (short) (-1403), (short) (-1403));
      assertEquals((short) (-1403), short0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)111;
      long long0 = NumberUtils.max(longArray0);
      NumberUtils.createNumber("--{04$,|fpCMc3Y^mq)k");
      long long1 = NumberUtils.min(longArray0);
      assertTrue(long1 == long0);
      
      int int0 = NumberUtils.max(101, (int) (short)111, (-1910));
      assertEquals(111, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-9.223372036854776E18);
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)78;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[5];
      intArray0[0] = (int) numberUtils0.INTEGER_ONE;
      intArray0[1] = (int) numberUtils0.INTEGER_ONE;
      intArray0[2] = (int) numberUtils0.INTEGER_ZERO;
      intArray0[3] = (int) (short)numberUtils0.SHORT_ONE;
      intArray0[4] = (int) numberUtils0.INTEGER_ONE;
      int int0 = NumberUtils.min(intArray0);
      float[] floatArray0 = new float[8];
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[1] = (short) (-32761);
      shortArray0[2] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[3] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[4] = (short) (byte)numberUtils0.BYTE_ZERO;
      NumberUtils.isNumber("[u+t?AKsp#");
      shortArray0[5] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[6] = (short) numberUtils0.SHORT_ONE;
      shortArray0[7] = (short) (-614);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-32761), short0);
      
      floatArray0[0] = (float) (byte)numberUtils0.BYTE_ONE;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) (short)numberUtils0.SHORT_ZERO;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) numberUtils0.FLOAT_ONE;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
      
      long long0 = NumberUtils.min((long) numberUtils0.LONG_ZERO, 12346L, (long) numberUtils0.SHORT_ONE);
      assertEquals(0L, long0);
      
      int int1 = NumberUtils.toInt("RW", (int) numberUtils0.BYTE_ZERO);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)numberUtils0.SHORT_ZERO;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (int)numberUtils0.INTEGER_ONE;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
      
      long long0 = NumberUtils.min(5L, 3991L, (long) 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[1] = (int) numberUtils0.INTEGER_ONE;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) numberUtils0.LONG_ZERO;
      longArray0[1] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      long long0 = NumberUtils.max((-2497L), 12345L, (long) numberUtils0.LONG_MINUS_ONE);
      assertEquals(12345L, long0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      try { 
        NumberUtils.createNumber("$AqRx.ZE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // $AqRx.ZE is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = NumberUtils.max((-71), (-71), (-71));
      assertEquals((-71), int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("123.4E5");
      assertEquals(1.234E7F, number0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      try { 
        NumberUtils.createNumber("8JI0|7EyM8N3L6c<S1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--lin");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)125;
      byte byte0 = NumberUtils.max((byte)125, (byte)125, (byte)125);
      assertEquals((byte)125, byte0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.min((short) (-1403), (short) (-2339), (short) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((short) (-2339), short0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Gu+ iKXq2.~s2|$`");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Gu+ iKXq2.~s2|$` is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      NumberUtils.createBigInteger((String) null);
      NumberUtils.min((short) (-1403), (short) (-3591), (short)335);
      NumberUtils.max((int) (short)335, (int) (short) (-1403), (int) (short) (-3591));
      // Undeclared exception!
      try { 
        NumberUtils.createInteger(" is not a valid number.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" is not a valid number.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)92;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(92L, long0);
      
      byte byte0 = NumberUtils.max((byte)20, (byte)68, (byte) (-44));
      assertEquals((byte)68, byte0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)68, (byte) (-124), (byte)76);
      assertEquals((byte)76, byte0);
      
      short short0 = NumberUtils.toShort((String) null);
      assertEquals((short)0, short0);
      
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) (int)numberUtils0.INTEGER_MINUS_ONE;
      double double0 = new Double((double) numberUtils0.FLOAT_ONE);
      boolean boolean0 = NumberUtils.isDigits("ALl.Ka");
      assertFalse(boolean0);
      
      long long0 = NumberUtils.min((long) numberUtils0.SHORT_MINUS_ONE, (long) numberUtils0.SHORT_ZERO, 0L);
      assertEquals((-1L), long0);
      
      short short0 = NumberUtils.min((short) numberUtils0.SHORT_ZERO, (short)3983, (short) numberUtils0.SHORT_MINUS_ONE);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.min((short) (-2339), (short) numberUtils0.BYTE_ZERO, (short) (-3856));
      assertEquals((short) (-3856), short0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-185.74605F);
      floatArray0[1] = (-103.734F);
      floatArray0[2] = 356.215F;
      float float0 = NumberUtils.max((-103.734F), (-185.74605F), 356.215F);
      assertEquals(356.215F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) numberUtils0.DOUBLE_ONE;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.toLong("+");
      assertEquals(0L, long0);
      
      double double0 = NumberUtils.toDouble((String) null, 10.78);
      assertEquals(10.78, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      try { 
        NumberUtils.createNumber("maximum(long,long,long) 1 failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // maximum(long,long,long) 1 failed is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      try { 
        NumberUtils.createNumber("The String did not match any specified value");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The String did not match any specified value is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      try { 
        NumberUtils.createNumber("org.apache.commons.lang3.reflect.ConstructorUtilsTest$PrivateClass");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // org.apache.commons.lang3.reflect.ConstructorUtilsTest$PrivateClass is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      short short0 = NumberUtils.max((short)5750, (short)5750, (short)5750);
      assertEquals((short)5750, short0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)5750;
      doubleArray0[1] = (double) (short)5750;
      doubleArray0[2] = (double) (short)5750;
      doubleArray0[3] = (double) (short)5750;
      doubleArray0[4] = (double) (short)5750;
      doubleArray0[5] = (double) (short)5750;
      doubleArray0[6] = (double) (short)5750;
      doubleArray0[8] = (double) (short)5750;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(5750.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long[] longArray0 = new long[19];
      longArray0[0] = 12343L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructortestConstructortestConstructor_134()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (long)numberUtils0.LONG_ONE;
      floatArray0[1] = (float) (int)numberUtils0.INTEGER_ZERO;
      floatArray0[2] = (float) (short)numberUtils0.SHORT_ZERO;
      floatArray0[3] = (float) (int)numberUtils0.INTEGER_ONE;
      floatArray0[4] = (float) (byte)numberUtils0.BYTE_ONE;
      floatArray0[5] = 578.0F;
      floatArray0[6] = 5.1F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(578.0F, float0, 0.01F);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[2] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[3] = (short) (byte)numberUtils0.BYTE_ONE;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1, short0);
      
      float float1 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float1, 0.01F);
      
      NumberUtils.createDouble((String) null);
      int[] intArray0 = new int[1];
      intArray0[0] = 2274;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(2274, int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.min((byte)51, (byte)26, (byte)51);
      assertEquals((byte)26, byte0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("123.4E5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--3s8*P]iv|UQwLB-DgV");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)numberUtils0.SHORT_ZERO;
      intArray0[1] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[2] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[3] = (int) (short)numberUtils0.SHORT_ONE;
      intArray0[4] = (int) numberUtils0.INTEGER_ONE;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1, int0);
      
      long long0 = NumberUtils.toLong(";z\"", (-85L));
      assertEquals((-85L), long0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-10), (short) (-10), (short)1367);
      assertEquals((short)1367, short0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (short) (-10);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-10.0F), float0, 0.01F);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1878.25501);
      doubleArray0[1] = (double) (-10.0F);
      doubleArray0[2] = (double) (-10.0F);
      doubleArray0[3] = (-500.01437);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1878.25501), double0, 0.01);
      
      boolean boolean0 = NumberUtils.isDigits("JQ.OST");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)852;
      shortArray0[2] = (short)67;
      short short0 = NumberUtils.max((short)2, (short)852, (short)852);
      assertEquals((short)852, short0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      NumberUtils.isDigits("di");
      NumberUtils.toFloat("di");
      try { 
        NumberUtils.createNumber("createInteger(blank) failed: ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // createInteger(blank) failed:  is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)39;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)39, byte0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[2] = (byte) numberUtils0.BYTE_ONE;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      NumberUtils.toByte("]E", (byte)64);
      try { 
        NumberUtils.createNumber("]E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ]E is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0xm$& 8/5 R}m0)KoB5DI");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"m$& 8/5 R}m0)KoB5DI\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      NumberUtils.min(94L, (-2942L), 1757L);
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      short short0 = NumberUtils.toShort("s^=eL");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[4] = 947L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(947L, long0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      doubleArray0[0] = 717.8565935939912;
      NumberUtils.min(717.8565935939912, 717.8565935939912, 717.8565935939912);
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      long long0 = NumberUtils.max(2984L, 2984L, 2984L);
      assertEquals(2984L, long0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.max((long) numberUtils0.INTEGER_ONE, (long) numberUtils0.INTEGER_ZERO, 2984L);
      assertEquals(2984L, long0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      NumberUtils.toDouble("-0x1111 ");
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("-0x1111 ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = (-10.6F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-10.6F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      float[] floatArray0 = new float[13];
      floatArray0[0] = (-630.6375F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = (-1187);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1187), int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      try { 
        NumberUtils.createNumber("3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.min((short) (-2344), (short) numberUtils0.BYTE_MINUS_ONE, (short) numberUtils0.SHORT_MINUS_ONE);
      assertEquals((short) (-2344), short0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_167()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float float0 = NumberUtils.toFloat(".T2 pbGBi", (float) numberUtils0.LONG_ONE);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (int)numberUtils0.INTEGER_ONE;
      longArray0[1] = (long) numberUtils0.LONG_ONE;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      long[] longArray0 = new long[3];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.min((byte) (-53), (byte) numberUtils0.BYTE_ONE, (byte) numberUtils0.BYTE_ZERO);
      assertEquals((byte) (-53), byte0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.toLong("=}|'?ff", (long) numberUtils0.SHORT_ONE);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("Gu+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      NumberUtils.isNumber("minimum(long,long,long) 2 failed");
      long long0 = NumberUtils.toLong("+");
      assertEquals(0L, long0);
      
      double double0 = NumberUtils.toDouble("+", (double) 0L);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-3475.03);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-3475.03), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      try { 
        NumberUtils.createNumber("off");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // off is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_177()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)numberUtils0.SHORT_ZERO;
      longArray0[1] = (long) (short)numberUtils0.SHORT_ZERO;
      longArray0[2] = (long) (byte)numberUtils0.BYTE_ONE;
      longArray0[3] = (long) numberUtils0.LONG_ZERO;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_178()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (int)numberUtils0.INTEGER_ONE;
      longArray0[1] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      longArray0[2] = (-3204L);
      longArray0[3] = (long) (byte)numberUtils0.BYTE_MINUS_ONE;
      longArray0[4] = (long) (byte)numberUtils0.BYTE_ONE;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1L, long0);
      
      double double0 = NumberUtils.toDouble("--11d11", (-746.2204));
      assertEquals((-746.2204), double0, 0.01);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[1] = (short) numberUtils0.SHORT_ONE;
      shortArray0[2] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[3] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[4] = (short) numberUtils0.SHORT_ONE;
      shortArray0[5] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[6] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[7] = (short) numberUtils0.SHORT_MINUS_ONE;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-965);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_182()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.toDouble("0xa", (-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      long[] longArray0 = new long[4];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-2320);
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      try { 
        NumberUtils.createNumber("w*[");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // w*[ is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      short short0 = NumberUtils.max((short)5750, (short)5750, (short)5750);
      assertEquals((short)5750, short0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)5750;
      floatArray0[1] = (float) (short)5750;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(5750.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (int)numberUtils0.INTEGER_MINUS_ONE;
      doubleArray0[1] = (double) (int)numberUtils0.INTEGER_MINUS_ONE;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
      
      boolean boolean0 = NumberUtils.isDigits("ALl.Ka");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_196()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[3] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[4] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[5] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[6] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[7] = (byte)24;
      byteArray0[8] = (byte)24;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-104);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-104), byte0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("123");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("-0x$AqRx.ZE");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.toInt("toShort(String,short) 1 failed");
      assertEquals(0, int0);
  }
}
