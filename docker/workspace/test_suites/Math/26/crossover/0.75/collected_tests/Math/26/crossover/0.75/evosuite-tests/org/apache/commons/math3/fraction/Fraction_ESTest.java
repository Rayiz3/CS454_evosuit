/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 22:51:47 GMT 2023
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thoughtworks.xstream.io.StreamException;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.testcarver.testcase.EvoSuiteXStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      fraction0.TWO_THIRDS.getField();
      Fraction fraction1 = new Fraction(500.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = Fraction.ONE_HALF;
      boolean boolean0 = fraction0.equals(fraction0);
      assertTrue(boolean0);
      
      Fraction fraction4 = Fraction.ONE_HALF;
      fraction4.toString();
      Fraction fraction5 = fraction4.FOUR_FIFTHS.subtract(1);
      assertEquals(5, fraction5.getDenominator());
      assertEquals((-0.2), fraction5.doubleValue(), 0.01);
      
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-1), int0);
      
      String string0 = fraction4.toString();
      assertEquals("1 / 2", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, 315);
      Fraction fraction1 = Fraction.ONE_THIRD;
      Fraction.getReducedFraction(315, (-315));
      // Undeclared exception!
      try { 
        fraction0.subtract(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: -2,147,483,753
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = Fraction.ONE_THIRD;
      Fraction fraction2 = fraction0.ZERO.add(fraction1);
      assertSame(fraction2, fraction1);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(8.0E298);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 80,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) Integer.MIN_VALUE);
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01);
      
      // Undeclared exception!
      try { 
        fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, 369);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-1072.775716329459), (-1072.775716329459), (-4828));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -1,072.776 to fraction after -4,828 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(589, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 589/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-5263));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-5,263, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = Fraction.TWO_THIRDS;
      Fraction fraction2 = fraction0.TWO_THIRDS.add(fraction1);
      assertEquals(133.33333333333331, fraction2.percentageValue(), 0.01);
      
      Fraction fraction3 = new Fraction(1.5874010519681994);
      Fraction fraction4 = Fraction.ONE_HALF;
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = Fraction.TWO_THIRDS;
      Fraction fraction7 = new Fraction(0.0);
      Fraction fraction8 = new Fraction((-5541.1));
      Fraction fraction9 = new Fraction((-3303.903170815));
      Fraction fraction10 = Fraction.ZERO;
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Fraction fraction11 = new Fraction(1587.0);
      assertEquals(158700.0, fraction11.percentageValue(), 0.01);
      
      Fraction fraction12 = Fraction.ONE_FIFTH;
      boolean boolean0 = fraction4.equals(fraction12);
      assertFalse(boolean0);
      
      Fraction fraction13 = new Fraction((-5541.1));
      assertTrue(fraction13.equals((Object)fraction8));
      
      String string0 = fraction3.toString();
      assertEquals("781 / 492", string0);
      
      Fraction fraction14 = Fraction.TWO_THIRDS;
      Fraction fraction15 = fraction14.divide(2147483634);
      assertEquals(1073741803, fraction15.getDenominator());
      assertEquals(9.313225928300754E-10, fraction15.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(45.355822471198024);
      fraction1.THREE_FIFTHS.add((-12));
      Fraction fraction2 = fraction0.negate();
      Fraction fraction3 = new Fraction(1.8307188599677033E-8);
      Fraction fraction4 = new Fraction(100.0);
      Fraction fraction5 = new Fraction(0.003118690731469087);
      Fraction fraction6 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction7 = Fraction.TWO_QUARTERS;
      Fraction fraction8 = new Fraction(1.8307188599677033E-8);
      fraction5.getField();
      Fraction fraction9 = Fraction.ZERO;
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Object object0 = new Object();
      fraction2.equals(object0);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Object object1 = new Object();
      Object object2 = new Object();
      fraction2.equals(object2);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Fraction fraction10 = Fraction.ONE_FIFTH;
      fraction10.equals(fraction7);
      Fraction fraction11 = Fraction.TWO_FIFTHS;
      Fraction fraction12 = new Fraction((-142.223336), 47826);
      fraction10.equals("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      // Undeclared exception!
      try { 
        EvoSuiteXStream.fromString("%3o=[)B#_h");
        fail("Expecting exception: StreamException");
      
      } catch(StreamException e) {
         //
         // 
         //
         verifyException("com.thoughtworks.xstream.io.xml.XppReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = Fraction.TWO_THIRDS;
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      // Undeclared exception!
      try { 
        fraction0.THREE_FIFTHS.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.abs();
      // Undeclared exception!
      try { 
        fraction1.ONE_FIFTH.divide(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = fraction0.abs();
      assertEquals((byte)1, fraction1.byteValue());
      assertEquals(1, fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = new Fraction(75.0);
      fraction0.ONE_FIFTH.negate();
      Fraction fraction1 = new Fraction(500.0);
      Fraction fraction2 = new Fraction(75.0);
      Fraction fraction3 = new Fraction((-0.1));
      Fraction fraction4 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction5 = new Fraction(1.0E-5);
      Fraction fraction6 = new Fraction((-4245.4110595223));
      fraction6.getField();
      Fraction fraction7 = Fraction.ZERO;
      String string0 = "Y:iQDag^\\\";B";
      // Undeclared exception!
      try { 
        EvoSuiteXStream.fromString("Y:iQDag^\";B");
        fail("Expecting exception: StreamException");
      
      } catch(StreamException e) {
         //
         // 
         //
         verifyException("com.thoughtworks.xstream.io.xml.XppReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.3);
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      fraction0.multiply(fraction1);
      Object object0 = new Object();
      Fraction fraction2 = Fraction.TWO_QUARTERS;
      fraction0.equals(fraction1);
      fraction2.toString();
      // Undeclared exception!
      try { 
        fraction1.divide((-1073741824));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 3/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      boolean boolean0 = fraction0.equals(fraction1);
      assertTrue(boolean0);
      
      Fraction fraction2 = new Fraction(0.0696590192806753);
      fraction0.toString();
      Fraction fraction3 = fraction2.divide((-963));
      assertEquals((-7.232787E-5F), fraction3.floatValue(), 0.01F);
      
      String string0 = fraction2.toString();
      assertEquals("14 / 201", string0);
      
      int int0 = fraction2.compareTo(fraction0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = Fraction.ZERO;
      fraction0.add(fraction1);
      fraction0.compareTo(fraction0);
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      // Undeclared exception!
      try { 
        fraction0.FOUR_FIFTHS.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = Fraction.ONE_QUARTER;
      Fraction fraction2 = fraction0.ONE_HALF.add(fraction1);
      assertEquals(3, fraction2.getNumerator());
      assertEquals(75.0, fraction2.percentageValue(), 0.01);
      
      String string0 = fraction0.toString();
      assertEquals("1 / 2", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      String string0 = fraction0.toString();
      assertEquals("2 / 5", string0);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      int int0 = fraction1.compareTo(fraction0);
      assertEquals((-1), int0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (2,147,483,649/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      fraction5.ONE_FIFTH.add(Integer.MAX_VALUE);
      Fraction fraction6 = new Fraction((-242343.0));
      Fraction fraction7 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction8 = new Fraction(332.0);
      Fraction fraction9 = new Fraction((-2323.0));
      Fraction fraction10 = new Fraction(44.0);
      Fraction fraction11 = new Fraction(1.0147341092624975);
      Fraction fraction12 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object0);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object1);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction4.toString();
      // Undeclared exception!
      try { 
        fraction10.divide(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 44/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void testRemovetestRemove_27()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      fraction1.TWO_THIRDS.getField();
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((double) Integer.MAX_VALUE);
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-242343.0));
      Fraction fraction7 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction8 = fraction7.ZERO.add(100);
      assertTrue(fraction8.equals((Object)fraction0));
      
      Fraction fraction9 = new Fraction(332.5803697591105);
      Fraction fraction10 = new Fraction((-2323.0));
      Fraction fraction11 = new Fraction(500.0);
      Fraction fraction12 = new Fraction(0.7363256859473419);
      assertEquals(0, fraction12.intValue());
      
      Fraction fraction13 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object1);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      String string0 = fraction4.toString();
      assertEquals("2147483647", string0);
      
      Fraction fraction14 = fraction5.abs();
      assertFalse(fraction5.equals((Object)fraction12));
      assertSame(fraction5, fraction14);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = new Fraction(335.2322047629, (-1));
      assertEquals(335L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = new Fraction(75.0);
      Fraction fraction1 = new Fraction(500.0);
      Fraction fraction2 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction3 = new Fraction((-1.0));
      fraction3.multiply(fraction2);
      assertEquals(Integer.MAX_VALUE, fraction2.getNumerator());
      
      Fraction fraction4 = new Fraction(0.0);
      Fraction fraction5 = new Fraction((-0.1));
      Fraction fraction6 = new Fraction((-242343.0));
      Fraction fraction7 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction8 = new Fraction(332.0);
      Fraction fraction9 = new Fraction((-2323.0));
      Fraction fraction10 = fraction9.MINUS_ONE.subtract(fraction6);
      Fraction fraction11 = new Fraction(44.0);
      Fraction fraction12 = new Fraction(0.7363256859473419);
      Fraction fraction13 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object0);
      fraction13.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object1);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.getNumerator();
      assertFalse(fraction13.equals((Object)fraction12));
      
      Fraction fraction14 = fraction10.multiply(fraction8);
      assertEquals(80457544, fraction14.intValue());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(502.94560886349905);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-0.1));
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction9 = new Fraction(332.0);
      Fraction fraction10 = new Fraction((double) Integer.MIN_VALUE);
      Fraction fraction11 = new Fraction(44.0);
      Fraction fraction12 = new Fraction(0.7363256859473419);
      fraction12.ONE_FIFTH.subtract(Integer.MIN_VALUE);
      Fraction fraction13 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object0);
      Fraction fraction14 = new Fraction((double) Integer.MIN_VALUE);
      fraction13.equals(fraction14);
      // Undeclared exception!
      try { 
        EvoSuiteXStream.fromString("U.}");
        fail("Expecting exception: StreamException");
      
      } catch(StreamException e) {
         //
         // 
         //
         verifyException("com.thoughtworks.xstream.io.xml.XppReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) Integer.MIN_VALUE);
      fraction0.TWO_FIFTHS.subtract(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.MINUS_ONE.abs();
      assertEquals(0.75F, fraction1.floatValue(), 0.01F);
      
      Fraction fraction2 = fraction1.ONE_HALF.multiply(fraction0);
      assertEquals(0.375, fraction2.doubleValue(), 0.01);
      assertEquals(1L, fraction1.longValue());
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = fraction1.ONE_FIFTH.negate();
      assertEquals(5, fraction2.getDenominator());
      assertEquals((-0.2F), fraction2.floatValue(), 0.01F);
      
      Fraction fraction3 = new Fraction(500.0);
      Fraction fraction4 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction5 = new Fraction(953.5087103);
      Fraction fraction6 = new Fraction((-0.1));
      Fraction fraction7 = new Fraction(Integer.MAX_VALUE);
      assertTrue(fraction7.equals((Object)fraction4));
      
      Fraction fraction8 = new Fraction(332.0);
      Fraction fraction9 = new Fraction((-2323.0));
      Fraction fraction10 = new Fraction(0.7363256859473419);
      Fraction fraction11 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      boolean boolean0 = fraction11.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction11.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction11.equals(object2);
      boolean boolean1 = fraction11.equals(fraction6);
      assertTrue(boolean1 == boolean0);
      assertEquals((-10.0), fraction6.percentageValue(), 0.01);
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction3.hashCode();
      assertEquals(500L, fraction3.longValue());
      assertFalse(fraction3.equals((Object)fraction11));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = new Fraction(75.0);
      Fraction fraction1 = fraction0.ONE_FIFTH.negate();
      assertEquals((-0.2F), fraction1.floatValue(), 0.01F);
      
      Fraction fraction2 = new Fraction(75.0);
      Fraction fraction3 = new Fraction(75.0);
      Fraction fraction4 = Fraction.THREE_QUARTERS;
      Fraction fraction5 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction6 = new Fraction(332.0);
      Fraction fraction7 = fraction6.ONE_HALF.divide(fraction4);
      assertEquals(0.6666666666666666, fraction7.doubleValue(), 0.01);
      
      Fraction fraction8 = new Fraction(0.7363256859473419);
      fraction8.ONE.getField();
      assertEquals(73.6318407960199, fraction8.percentageValue(), 0.01);
      
      Fraction fraction9 = new Fraction((double) Integer.MAX_VALUE);
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction9.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction9.equals(object1);
      fraction9.equals(object1);
      fraction9.equals(fraction4);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction5.hashCode();
      assertTrue(fraction5.equals((Object)fraction9));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(509.00634587547927);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction(100.0);
      assertTrue(fraction4.equals((Object)fraction0));
      
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction(0.0);
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction9 = new Fraction(332.0);
      Fraction fraction10 = new Fraction((-2323.0));
      Fraction fraction11 = Fraction.THREE_QUARTERS;
      Fraction fraction12 = fraction10.THREE_FIFTHS.divide(fraction11);
      assertEquals(0.8F, fraction12.floatValue(), 0.01F);
      
      Fraction fraction13 = new Fraction(44.0);
      Fraction fraction14 = new Fraction(Integer.MIN_VALUE);
      fraction7.equals(fraction14);
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction8.equals(object0);
      assertEquals(1, fraction8.getDenominator());
      
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction7.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction5.equals(object2);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Fraction fraction15 = fraction5.multiply(fraction1);
      assertEquals(0, fraction15.getNumerator());
      assertFalse(fraction15.equals((Object)fraction13));
      
      fraction2.longValue();
      assertEquals(509.0063492063492, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      fraction1.TWO_THIRDS.getField();
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((-2.0460208605269625));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-242343.0));
      Fraction fraction7 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction8 = fraction7.ZERO.add(100);
      assertTrue(fraction8.equals((Object)fraction0));
      
      Fraction fraction9 = new Fraction(332.5803697591105);
      Fraction fraction10 = new Fraction((-2323.0));
      Fraction fraction11 = new Fraction(44.0);
      Fraction fraction12 = new Fraction(0.7363256859473419);
      Fraction fraction13 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object2);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      String string0 = fraction4.toString();
      assertEquals("-489 / 239", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) Integer.MIN_VALUE);
      Fraction fraction1 = Fraction.ZERO;
      fraction0.ONE_HALF.multiply(fraction1);
      // Undeclared exception!
      try { 
        fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = new Fraction(75.0);
      Fraction fraction1 = new Fraction(500.0);
      Fraction fraction2 = Fraction.THREE_QUARTERS;
      Fraction fraction3 = new Fraction((-1.0));
      Fraction fraction4 = fraction3.multiply(fraction2);
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-242343.0));
      Fraction fraction7 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction8 = new Fraction(332.9342172117868);
      Fraction fraction9 = new Fraction((-2323.0));
      Fraction fraction10 = fraction9.MINUS_ONE.subtract(fraction6);
      assertEquals(242342, fraction10.intValue());
      
      Fraction fraction11 = new Fraction(44.0);
      Fraction fraction12 = new Fraction(0.7363256859473419);
      Fraction fraction13 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object0);
      fraction13.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object1);
      assertFalse(fraction13.equals((Object)fraction12));
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      int int0 = fraction6.compareTo(fraction11);
      assertEquals((-1), int0);
      
      double double0 = fraction4.percentageValue();
      assertEquals(4, fraction4.getDenominator());
      assertEquals((-75.0), double0, 0.01);
      assertEquals((-1L), fraction3.longValue());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.THREE_FIFTHS;
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void testRemovetestRemove_40()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = fraction0.TWO.add(31);
      assertEquals((byte)33, fraction1.byteValue());
      
      Fraction fraction2 = new Fraction(75.0);
      Fraction fraction3 = new Fraction(500.0);
      Fraction fraction4 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction5 = new Fraction((-1.0));
      Fraction fraction6 = new Fraction(0.0);
      Fraction fraction7 = new Fraction(0.0);
      Fraction fraction8 = new Fraction((-242343.0));
      Fraction fraction9 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction10 = new Fraction(332.0);
      Fraction fraction11 = new Fraction((-2323.0));
      Fraction fraction12 = new Fraction(44.0);
      Fraction fraction13 = new Fraction(0.7363256859473419);
      assertEquals(73.6318407960199, fraction13.percentageValue(), 0.01);
      
      Fraction fraction14 = new Fraction(Integer.MIN_VALUE);
      fraction8.equals(fraction14);
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction9.equals(object0);
      assertTrue(fraction9.equals((Object)fraction14));
      assertEquals(1, fraction9.getDenominator());
      
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction8.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      boolean boolean0 = fraction6.equals(object2);
      assertFalse(boolean0);
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      float float0 = fraction12.floatValue();
      assertFalse(fraction12.equals((Object)fraction4));
      assertEquals(44.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = new Fraction(2147483637);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2147483637L, fraction0.longValue());
      
      Fraction fraction1 = fraction0.TWO_THIRDS.add(2147483637);
      assertEquals(7.158278723333334E8, fraction1.doubleValue(), 0.01);
      
      Fraction fraction2 = fraction0.negate();
      assertEquals((-2147483637), fraction2.getNumerator());
      assertEquals((-2147483637L), fraction2.longValue());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = Fraction.ONE_FIFTH;
      Fraction fraction2 = fraction1.TWO.divide(fraction0);
      assertEquals(10L, fraction2.longValue());
      
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(1600.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = fraction4.multiply(fraction3);
      assertEquals((-2.147483647E11), fraction5.percentageValue(), 0.01);
      
      Fraction fraction6 = new Fraction(0.0);
      Fraction fraction7 = new Fraction((-0.1));
      Fraction fraction8 = new Fraction((-242343.0));
      Fraction fraction9 = new Fraction(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, fraction9.intValue());
      
      Fraction fraction10 = new Fraction(332.0);
      Fraction fraction11 = new Fraction((-2323.0));
      Fraction fraction12 = new Fraction(44.0);
      Fraction fraction13 = new Fraction(0.7363256859473419);
      Fraction fraction14 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction14.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction14.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction14.equals(object2);
      assertFalse(fraction14.equals((Object)fraction13));
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction10.getDenominator();
      assertFalse(fraction10.equals((Object)fraction12));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = Fraction.ONE_HALF;
      Fraction fraction2 = fraction0.ONE_THIRD.subtract(fraction1);
      assertEquals((-0.16666666666666666), fraction2.doubleValue(), 0.01);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.TWO_FIFTHS;
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertEquals((-2), fraction2.getNumerator());
      assertEquals((-40.0), fraction2.percentageValue(), 0.01);
      
      Fraction fraction3 = fraction0.abs();
      assertSame(fraction3, fraction0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      Fraction fraction2 = fraction0.TWO_FIFTHS.divide(fraction1);
      assertEquals(5, fraction2.getDenominator());
      
      Fraction fraction3 = new Fraction(75.0);
      Fraction fraction4 = new Fraction(500.0);
      Fraction fraction5 = new Fraction((-1.0));
      Fraction fraction6 = fraction5.ONE_QUARTER.divide(fraction3);
      Fraction fraction7 = new Fraction(0.0);
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction9 = new Fraction(44.0);
      Fraction fraction10 = new Fraction(1.0147341092624975);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction5.equals(fraction7);
      assertFalse(fraction7.equals((Object)fraction5));
      
      Fraction fraction11 = fraction9.multiply(fraction6);
      assertEquals(0.14666666666666667, fraction11.doubleValue(), 0.01);
      
      Object object0 = new Object();
      fraction5.equals(fraction3);
      fraction10.intValue();
      Fraction fraction12 = fraction10.negate();
      assertEquals((-482), fraction12.getNumerator());
      
      boolean boolean0 = fraction6.equals(fraction4);
      assertEquals(0.0033333333333333335, fraction6.doubleValue(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      FractionField fractionField0 = fraction0.TWO_THIRDS.getField();
      assertNotNull(fractionField0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = fraction0.negate();
      assertEquals(4, fraction1.getDenominator());
      assertEquals((-0.75F), fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-798), (-798));
      // Undeclared exception!
      try { 
        fraction0.FOUR_FIFTHS.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.ONE_QUARTER.multiply(2038);
      assertEquals(2, fraction1.getDenominator());
      assertEquals(50950.0, fraction1.percentageValue(), 0.01);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      Fraction fraction2 = fraction0.ONE_THIRD.add(fraction1);
      assertEquals(0.8333333F, fraction2.floatValue(), 0.01F);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-1639), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -1,639/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1), (-1));
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = fraction0.divide((-37));
      assertEquals((-0.009009009F), fraction1.floatValue(), 0.01F);
      assertEquals(111, fraction1.getDenominator());
      
      Fraction fraction2 = Fraction.ZERO;
      assertFalse(fraction2.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      String string0 = fraction0.toString();
      assertEquals("4 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(522, 522);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = Fraction.TWO_THIRDS;
      Fraction fraction2 = fraction0.ZERO.multiply(fraction1);
      assertEquals(0.0, fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      String string0 = fraction0.ONE.toString();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.MINUS_ONE.reciprocal();
      assertEquals((-1.0), fraction1.doubleValue(), 0.01);
      
      Fraction fraction2 = fraction0.negate();
      assertEquals(0.0, fraction2.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) (-10), (-10));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -10 to fraction (11/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.3);
      Fraction fraction1 = new Fraction(0.3);
      Fraction fraction2 = Fraction.TWO;
      Object object0 = new Object();
      fraction2.equals(object0);
      fraction0.compareTo(fraction1);
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = new Fraction((-26.723402));
      assertEquals((-26), fraction0.intValue());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1.0));
      Fraction fraction1 = Fraction.ONE_HALF;
      Fraction fraction2 = Fraction.TWO_QUARTERS;
      boolean boolean0 = fraction0.equals(fraction2);
      assertFalse(boolean0);
      assertEquals((-1L), fraction0.longValue());
      
      Fraction fraction3 = Fraction.ONE_HALF;
      String string0 = fraction3.toString();
      assertTrue(fraction3.equals((Object)fraction2));
      assertEquals("1 / 2", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-3848), (-3848));
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
  }
}
