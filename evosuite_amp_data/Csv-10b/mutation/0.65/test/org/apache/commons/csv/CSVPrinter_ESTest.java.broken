/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 13:29:20 GMT 2023
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.FileDescriptor;
import java.sql.ResultSet;
import java.time.Clock;
import java.time.LocalDate;
import java.time.chrono.Chronology;
import java.time.chrono.IsoChronology;
import java.util.ArrayList;
import java.util.Locale;
import java.util.concurrent.TimeUnit;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.testcarver.testcase.EvoSuiteXStream;
import org.h2.tools.SimpleResultSet;
import org.h2.value.ValueLong;
import org.h2.value.ValueResultSet;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat0);
      Character character0 = Character.valueOf('G');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringBuilder0, cSVFormat1);
      cSVPrinter0.println();
      Object object0 = new Object();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      CSVPrinter cSVPrinter3 = new CSVPrinter(stringBuilder0, cSVFormat1);
      cSVPrinter3.print(mockFileReader0);
      System.setCurrentTimeMillis(2386L);
      cSVPrinter3.printComment("");
      System.setCurrentTimeMillis(12L);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      cSVPrinter0.printComment("");
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      Character character0 = new Character('C');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      MockFile mockFile0 = new MockFile("format");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Character character1 = Character.valueOf('}');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart(character1);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat3);
      cSVPrinter0.println();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) cSVPrinter0;
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter0.printComment("");
      assertNotSame(cSVPrinter0, cSVPrinter1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      cSVPrinter0.printComment("");
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      Character character0 = new Character('C');
      Character character1 = new Character('C');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("format");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(mockPrintWriter0, cSVFormat1);
      Character character2 = Character.valueOf('}');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentStart(character2);
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringBuilder0, cSVFormat3);
      cSVPrinter2.close();
      cSVPrinter0.println();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) cSVPrinter0;
      cSVPrinter2.printRecords(objectArray0);
      cSVPrinter1.printComment("");
      assertNotSame(cSVPrinter1, cSVPrinter2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      cSVPrinter0.printComment("");
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      Character character0 = new Character('R');
      Character character1 = new Character('R');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("<string-builder></string-builder>");
      Character.valueOf('}');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator('}');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentStart((Character) null);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat4);
      cSVPrinter1.close();
      cSVPrinter0.println();
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[9];
      Object object2 = new Object();
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) character0;
      cSVPrinter1.printRecord(objectArray0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('e');
      cSVFormat2.withDelimiter('Y');
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat4 = cSVFormat2.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat4);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("B");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Object object0 = new Object();
      arrayList0.add("<string-builder></string-builder>");
      ArrayList<String> arrayList2 = new ArrayList<String>();
      ArrayList<String> arrayList3 = new ArrayList<String>();
      arrayList3.add("B");
      arrayList3.add("<string-builder></string-builder>");
      cSVPrinter0.printRecord((Iterable<?>) arrayList3);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Locale locale0 = Locale.CHINESE;
      IsoChronology isoChronology0 = (IsoChronology)Chronology.ofLocale(locale0);
      Clock clock0 = MockClock.systemUTC();
      LocalDate localDate0 = (LocalDate)isoChronology0.dateNow(clock0);
      cSVPrinter0.print(localDate0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat0);
      Character character0 = Character.valueOf('G');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringBuilder0, cSVFormat1);
      cSVPrinter0.println();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) stringBuilder0;
      cSVPrinter2.printRecords(objectArray0);
      CSVPrinter cSVPrinter3 = new CSVPrinter(stringBuilder0, cSVFormat1);
      cSVPrinter3.printComment("pVOnXrG");
      assertNotSame(cSVPrinter3, cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator("<string-builder></string-builder>");
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteChar('e');
      cSVFormat3.withNullString("<string-builder></string-builder>");
      CSVFormat cSVFormat5 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat6 = cSVFormat4.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat6);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("B");
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      arrayList0.add("");
      arrayList0.add("");
      arrayList0.add("UPDATE INFORMATION_SCHEMA.LOBS SET TABLE = ? WHERE ID = ?");
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      StringBuilder stringBuilder1 = (StringBuilder)cSVPrinter0.getOut();
      cSVPrinter0.close();
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[1] = (Object) stringBuilder1;
      objectArray0[2] = (Object) cSVFormat2;
      Object object1 = new Object();
      objectArray0[3] = object1;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('e');
      cSVFormat3.withDelimiter('B');
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringBuilder0);
      cSVPrinter0.close();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object0 = new Object();
      cSVPrinter0.print(object0);
      System.setCurrentTimeMillis(1336L);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      cSVPrinter0.printComment("");
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat1);
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringBuilder0, cSVFormat1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("BIT_LENGTH");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("A");
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList0.add("AU't$DjW#E");
      arrayList0.add("");
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter1.getOut();
      cSVPrinter1.close();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      cSVPrinter1.print((Object) null);
      assertNotSame(cSVPrinter1, cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('e');
      cSVFormat3.withDelimiter('Y');
      CSVFormat cSVFormat4 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat5 = cSVFormat3.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat5);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("B");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("C");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("DOMAINS");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "<string-builder></string-builder>";
      StringBuilder stringBuilder0 = new StringBuilder("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      cSVPrinter0.printComment("");
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat1);
      ValueLong valueLong0 = ValueLong.get(128L);
      ResultSet resultSet0 = valueLong0.getResultSet();
      ValueResultSet valueResultSet0 = ValueResultSet.get(resultSet0);
      ResultSet resultSet1 = valueResultSet0.getResultSet();
      cSVPrinter1.printRecords(resultSet1);
      // Undeclared exception!
      try { 
        valueResultSet0.negate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Feature not supported: \"RESULT_SET NEG\" [50100-168]
         //
         verifyException("org.h2.message.DbException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      cSVPrinter0.printComment("");
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("A");
      arrayList0.add("B");
      arrayList0.add("C");
      arrayList0.add("NewValue");
      cSVPrinter1.printRecord((Iterable<?>) arrayList0);
      cSVPrinter1.getOut();
      cSVPrinter1.close();
      assertNotSame(cSVPrinter1, cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat1);
      cSVPrinter0.println();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat1);
      cSVPrinter1.println();
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[20];
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[4] = (Object) arrayList0;
      cSVPrinter1.printRecords(objectArray0);
      System.setCurrentTimeMillis(1296L);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      MockFile mockFile0 = new MockFile("ZfZQ$%+k*nVrx(Z!M[r");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Character.valueOf(' ');
      Character character0 = Character.valueOf(' ');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentStart(character0);
      cSVFormat2.withCommentStart(character0);
      Object object0 = new Object();
      System.setCurrentTimeMillis(2096L);
      CSVFormat cSVFormat3 = CSVFormat.newFormat(' ');
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintWriter0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = EvoSuiteXStream.fromString("<string-builder></string-builder>");
      EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("out");
      arrayList0.add("<org.apache.commons.csv.CSVFormat>\n  <delimiter>,</delimiter>\n  <quoteChar>&quot;</quoteChar>\n  <ignoreSurroundingSpaces>false</ignoreSurroundingSpaces>\n  <ignoreEmptyLines>true</ignoreEmptyLines>\n  <recordSeparator>&#xd;\n</recordSeparator>\n  <skipHeaderRecord>false</skipHeaderRecord>\n</org.apache.commons.csv.CSVFormat>");
      arrayList0.add("type1=");
      arrayList0.add("v'KVFL0f\"6");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      cSVPrinter0.println();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) charArrayWriter0;
      objectArray0[3] = object0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) "<org.apache.commons.csv.CSVFormat>\n  <delimiter>,</delimiter>\n  <quoteChar>&quot;</quoteChar>\n  <ignoreSurroundingSpaces>false</ignoreSurroundingSpaces>\n  <ignoreEmptyLines>true</ignoreEmptyLines>\n  <recordSeparator>&#xd;\n</recordSeparator>\n  <skipHeaderRecord>false</skipHeaderRecord>\n</org.apache.commons.csv.CSVFormat>";
      objectArray0[7] = object0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(246, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.validate();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      Object object1 = new Object();
      Object object2 = new Object();
      cSVPrinter0.close();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Object object3 = new Object();
      cSVPrinter0.print(object3);
      System.setCurrentTimeMillis(2096L);
      Object[] objectArray0 = new Object[6];
      Object object4 = new Object();
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('#');
      Character character0 = Character.valueOf('#');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      cSVFormat3.withIgnoreEmptyLines(false);
      cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('\t');
      CSVFormat cSVFormat5 = cSVFormat4.withDelimiter('9');
      CSVFormat cSVFormat6 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat5);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("out");
      arrayList0.add("<org.apache.commons.csv.CSVFormat>\n  <delimiter>,</delimiter>\n  <quoteChar>&quot;</quoteChar>\n  <ignoreSurroundingSpaces>false</ignoreSurroundingSpaces>\n  <ignoreEmptyLines>true</ignoreEmptyLines>\n  <recordSeparator>&#xd;\n</recordSeparator>\n  <skipHeaderRecord>false</skipHeaderRecord>\n</org.apache.commons.csv.CSVFormat>");
      arrayList0.add("type1=");
      arrayList0.add("v'KVFL0f\"6");
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat0);
      cSVPrinter1.getOut();
      cSVPrinter1.flush();
      assertNotSame(cSVPrinter1, cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.validate();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printComment("");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      cSVPrinter0.printComment("");
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat1);
      cSVPrinter1.getOut();
      cSVPrinter1.close();
      cSVPrinter0.println();
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "<string-builder></string-builder>";
      objectArray0[1] = (Object) charArrayWriter0;
      cSVPrinter1.printRecords(objectArray0);
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      cSVPrinter0.printRecords((ResultSet) simpleResultSet0);
      assertEquals("\r\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('#');
      Character character0 = Character.valueOf('#');
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      cSVFormat3.withIgnoreEmptyLines(false);
      cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('\t');
      CSVFormat cSVFormat5 = cSVFormat4.withDelimiter('9');
      CSVFormat cSVFormat6 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat5);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList2.add("7;<=@Ql&`n");
      arrayList2.add("out");
      arrayList0.add("<string-builder></string-builder>");
      arrayList2.add("bR");
      cSVPrinter0.printRecord((Iterable<?>) arrayList2);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.validate();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      cSVPrinter0.close();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[8];
      Object object2 = new Object();
      objectArray0[0] = object2;
      objectArray0[1] = (Object) cSVPrinter0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      arrayList0.add("B");
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      cSVPrinter0.flush();
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      cSVPrinter0.printComment("");
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("A");
      arrayList0.add("<string-builder></string-builder>");
      cSVPrinter1.printRecords((Iterable<?>) arrayList0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringBuilder0, cSVFormat1);
      cSVPrinter2.printRecord((Iterable<?>) arrayList0);
      Appendable appendable0 = cSVPrinter1.getOut();
      assertSame(appendable0, stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("stream trunk");
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      cSVPrinter0.printComment("");
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("A");
      arrayList0.add("<string-builder></string-builder>");
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter1.printRecord((Iterable<?>) arrayList0);
      Appendable appendable0 = cSVPrinter0.getOut();
      assertSame(stringBuilder0, appendable0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("A");
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      assertTrue(arrayList0.contains("A"));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.validate();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      Object object1 = new Object();
      cSVPrinter0.close();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      cSVPrinter0.print(object0);
      cSVPrinter0.printComment("<string-builder></string-builder>");
  }
}
