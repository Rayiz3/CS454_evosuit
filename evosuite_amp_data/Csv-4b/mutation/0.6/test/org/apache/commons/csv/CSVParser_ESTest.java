/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 11:43:19 GMT 2023
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.nio.charset.Charset;
import java.util.Map;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVParser_ESTest extends CSVParser_ESTest_scaffolding {

  @Test
  public void test00() {}
// Defects4J: flaky method
//   @Test(timeout = 4000)
//   public void test00()  throws Throwable  {
//       CSVFormat cSVFormat0 = CSVFormat.TDF;
//       CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('t');
//       String[] stringArray0 = new String[0];
//       cSVFormat1.withHeader(stringArray0);
//       Character.valueOf('t');
//       Character character0 = new Character('2');
//       CSVFormat cSVFormat2 = cSVFormat1.withCommentStart(character0);
//       Character.valueOf('<');
//       CSVParser cSVParser0 = CSVParser.parse("2Lriax7W.{z/ol", cSVFormat2);
//       Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
//       cSVParser0.forEach(consumer0);
//       assertEquals(0L, cSVParser0.getRecordNumber());
//   }

  @Test
  public void test01() {}
// Defects4J: flaky method
//   @Test(timeout = 4000)
//   public void test01()  throws Throwable  {
//       MockURL.getHttpExample();
//       Charset.defaultCharset();
//       Quote quote0 = Quote.NONE;
//       Character character0 = Character.valueOf('i');
//       Character character1 = new Character('Q');
//       String[] stringArray0 = new String[1];
//       stringArray0[0] = "h2.browser";
//       CSVFormat cSVFormat0 = new CSVFormat('', (Character) null, quote0, character0, character1, false, true, "h2.browser", "org.apache.commons.csv.CSVParser$2", stringArray0, true);
//       CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character1);
//       CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('f');
//       CSVParser cSVParser0 = CSVParser.parse("{fz%b_c7z@/dbnso", cSVFormat2);
//       Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
//       cSVParser0.forEach(consumer0);
//       cSVParser0.close();
//       assertEquals(1L, cSVParser0.getRecordNumber());
//   }

  @Test
  public void test02() {}
// Defects4J: flaky method
//   @Test(timeout = 4000)
//   public void test02()  throws Throwable  {
//       CSVFormat cSVFormat0 = CSVFormat.MYSQL;
//       FileSystemHandling.shouldAllThrowIOExceptions();
//       MockFile mockFile0 = new MockFile("hCp1I=~d]p[LL^<pa", "UTF-8");
//       mockFile0.toURL();
//       Charset.defaultCharset();
//       CSVFormat cSVFormat1 = CSVFormat.TDF;
//       CSVFormat cSVFormat2 = cSVFormat0.withNullString("0ga9500{P");
//       CSVParser cSVParser0 = CSVParser.parse("0ga9500{P", cSVFormat2);
//       Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
//       cSVParser0.forEach(consumer0);
//       cSVParser0.close();
//       assertEquals(1L, cSVParser0.getRecordNumber());
//   }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("JE,");
      CSVParser cSVParser0 = CSVParser.parse("JE,", cSVFormat1);
      cSVParser0.nextRecord();
      cSVParser0.close();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test
  public void test04() {}
// Defects4J: flaky method
//   @Test(timeout = 4000)
//   public void test04()  throws Throwable  {
//       CSVFormat cSVFormat0 = CSVFormat.MYSQL;
//       CSVParser cSVParser0 = CSVParser.parse("vbS![Q).BA'8<MdD\"", cSVFormat0);
//       cSVParser0.close();
//       Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
//       cSVParser0.forEach(consumer0);
//       assertEquals(0L, cSVParser0.getRecordNumber());
//   }

  @Test
  public void test05() {}
// Defects4J: flaky method
//   @Test(timeout = 4000)
//   public void test05()  throws Throwable  {
//       MockFile mockFile0 = new MockFile(" jG8", " jG8");
//       mockFile0.mkdirs();
//       mockFile0.toURL();
//       Charset.defaultCharset();
//       CSVFormat cSVFormat0 = CSVFormat.TDF;
//       CSVFormat cSVFormat1 = cSVFormat0.withNullString(" jG8");
//       CSVParser cSVParser0 = CSVParser.parse("No more CSV records available", cSVFormat1);
//       Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
//       cSVParser0.forEach(consumer0);
//       cSVParser0.close();
//       cSVParser0.close();
//       assertEquals(1L, cSVParser0.getRecordNumber());
//   }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("file");
      CSVParser cSVParser0 = CSVParser.parse("org.h2.expression.expression", cSVFormat1);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('x');
      String[] stringArray0 = new String[2];
      cSVFormat0.toString();
      stringArray0[0] = "";
      cSVFormat1.withHeader(stringArray0);
      StringReader stringReader0 = new StringReader("");
      CSVParser cSVParser0 = CSVParser.parse("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[Delimiter=<, > QuoteChar=<\"> RecordSeparator=<]", cSVRecord0.toString());
  }

  @Test
  public void test08() {}
// Defects4J: flaky method
//   @Test(timeout = 4000)
//   public void test08()  throws Throwable  {
//       CSVFormat cSVFormat0 = CSVFormat.RFC4180;
//       CSVParser cSVParser0 = CSVParser.parse("=gc]odxcui|4{/d", cSVFormat0);
//       Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
//       cSVParser0.forEach(consumer0);
//       assertEquals(1L, cSVParser0.getRecordNumber());
//   }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Charset.defaultCharset();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('t');
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      StringReader stringReader0 = new StringReader("");
      CSVParser cSVParser0 = cSVFormat2.parse(stringReader0);
      Map<String, Integer> map0 = cSVParser0.getHeaderMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("Nvv_,1N$K4>QT", cSVFormat1);
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("Liey 4heHQH<sn,", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertEquals("[Liey 4heHQH<sn, ]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVParser cSVParser0 = CSVParser.parse("$y[y{=OMSd", cSVFormat0);
      cSVParser0.getCurrentLineNumber();
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      cSVParser0.iterator();
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertNull(cSVRecord0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVParser cSVParser0 = CSVParser.parse("format", cSVFormat0);
      cSVParser0.isClosed();
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("p#", cSVFormat0);
      cSVParser0.nextRecord();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);
      // Undeclared exception!
      try { 
        cSVParser0.getHeaderMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      CSVParser cSVParser0 = CSVParser.parse("vbS![Q).BA'8<MdD\"", cSVFormat1);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("=2c]odxcui|4{/qd", cSVFormat0);
      cSVParser0.getRecords();
      cSVParser0.close();
      assertEquals(1L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("", cSVFormat0);
      CSVRecord cSVRecord0 = cSVParser0.nextRecord();
      assertNull(cSVRecord0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("?t+ZN");
      // Undeclared exception!
      try { 
        CSVParser.parse((File) mockFile0, (CSVFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'format' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('x');
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.csv.CSVParser$2";
      stringArray0[1] = "";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      StringReader stringReader0 = new StringReader("org.apache.commons.csv.CSVParser$2");
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 206);
      CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat1);
      CSVParser cSVParser1 = cSVFormat0.parse(stringReader0);
      cSVParser0.getRecordNumber();
      cSVParser1.close();
      MockFile mockFile0 = new MockFile("", "");
      try { 
        CSVParser.parse((File) mockFile0, cSVFormat2);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVParser cSVParser0 = CSVParser.parse("T=gcodxui|4{/d", cSVFormat0);
      cSVParser0.close();
      assertEquals(0L, cSVParser0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVParser cSVParser0 = CSVParser.parse("=gc]odxcui|4{/qd", cSVFormat0);
      assertEquals(0L, cSVParser0.getRecordNumber());
  }
}
