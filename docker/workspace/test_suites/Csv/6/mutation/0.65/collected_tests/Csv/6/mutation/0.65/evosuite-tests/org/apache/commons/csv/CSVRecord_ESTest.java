/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 12:10:54 GMT 2023
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thoughtworks.xstream.io.StreamException;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVRecord;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.testcarver.testcase.EvoSuiteXStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVRecord_ESTest extends CSVRecord_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-714));
      hashMap0.put("PkW @%V|> `9Z", integer0);
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "PkW @%V|> `9Z", (-14L));
      boolean boolean0 = cSVRecord0.isSet("PkW @%V|> `9Z");
      assertEquals((-14L), cSVRecord0.getRecordNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, (Map<String, Integer>) null, "PkW @%V|> `9Z", (-2073L));
      boolean boolean0 = cSVRecord0.isSet("PkW @%V|> `9Z");
      assertEquals((-2073L), cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<org.apache.commons.csv.CSVRecord>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(2);
      Integer integer1 = new Integer(90077);
      Integer integer2 = Integer.valueOf(90077);
      hashMap0.put("<org.apache.commons.csv.CSVRecord>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>", integer2);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      String[] stringArray1 = new String[3];
      stringArray1[0] = "<org.apache.commons.csv.CSVRecord>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      stringArray1[1] = "~xl#f$";
      CSVRecord cSVRecord0 = new CSVRecord(stringArray1, hashMap0, "<org.apache.commons.csv.CSVRecord>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>", 0L);
      boolean boolean0 = cSVRecord0.isSet("<org.apache.commons.csv.CSVRecord>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(90116);
      hashMap0.put("PkW @%V|> `9Z", integer0);
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "PkW @%V|> `9Z", (-17L));
      boolean boolean0 = cSVRecord0.isSet("PkW @%V|> `9Z");
      assertEquals((-17L), cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String string0 = "PkW @%V|> `9Z";
      Integer integer0 = new Integer((-1189));
      hashMap0.put("PkW @%V|> `9Z", integer0);
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "PkW @%V|> `9Z", (-2073L));
      // Undeclared exception!
      try { 
        cSVRecord0.get("PkW @%V|> `9Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index for header 'PkW @%V|> `9Z' is -1189 but CSVRecord only has 0 values!
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[8];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "Index for header '%s' is %d but CSVRecord only has %d values!", 582L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertTrue(boolean0);
      assertEquals(582L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = "){kx?Q4vpbp3}J";
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "){kx?Q4vpbp3}J", 955L);
      // Undeclared exception!
      try { 
        cSVRecord0.get("){kx?Q4vpbp3}J");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No header mapping was specified, the record values can't be accessed by name
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[8];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("w|{dWW~@Z2)a", (Integer) null);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "w|{dWW~@Z2)a", 1884L);
      // Undeclared exception!
      try { 
        cSVRecord0.isSet("w|{dWW~@Z2)a");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "PkW @%V|> `9Z", (-17L));
      assertEquals((-17L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "PkW @%V|> `9Z", 0L);
      assertEquals("[]", cSVRecord0.toString());
      
      boolean boolean0 = cSVRecord0.isConsistent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "<org.apache.commons.csv.CSVRecord>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[2] = "<org.apache.commons.csv.CSVRecord>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[2] = "<org.apache.commons.csv.CSVRecord>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[3] = "<org.apache.commons.csv.CSVRecord>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[4] = "<org.apache.commons.csv.CSVRecord>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[5] = "<org.apache.commons.csv.CSVRecord>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[6] = "<org.apache.commons.csv.CSVRecord>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[7] = "<org.apache.commons.csv.CSVRecord>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-672));
      hashMap0.put("No header mapping was specified, the record values can't be accessed by name", integer0);
      hashMap0.put("<org.apache.commons.csv.CSVRecord>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "<org.apache.commons.csv.CSVRecord>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>", (-672));
      // Undeclared exception!
      try { 
        cSVRecord0.get((-672));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -672
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<org.apache.commons.csv.CSVRecord>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap1, "<org.apache.commons.csv.CSVRecord>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>", 1024L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVRecord0.forEach(consumer0);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertFalse(boolean0);
      
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals(1024L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[8];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String string0 = "A";
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "A", (-2147L));
      // Undeclared exception!
      try { 
        cSVRecord0.get("A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mapping for A not found, expected one of []
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[8];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[1], 1884L);
      boolean boolean0 = cSVRecord0.isSet(stringArray0[3]);
      assertEquals(1884L, cSVRecord0.getRecordNumber());
      assertEquals(8, cSVRecord0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "<org.apache.commons.csv.CSVRecord>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[2] = "<org.apache.commons.csv.CSVRecord>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[2] = "<org.apache.commons.csv.CSVRecord>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[3] = "<org.apache.commons.csv.CSVRecord>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[4] = "<org.apache.commons.csv.CSVRecord>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[5] = "<org.apache.commons.csv.CSVRecord>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[6] = "<org.apache.commons.csv.CSVRecord>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[7] = "<org.apache.commons.csv.CSVRecord>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "<org.apache.commons.csv.CSVRecord>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>", 3846L);
      CSVRecord cSVRecord1 = new CSVRecord(stringArray0, hashMap0, "<org.apache.commons.csv.CSVRecord>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>", 3846L);
      Integer integer0 = new Integer((-672));
      hashMap0.put("No header mapping was specified, the record values can't be accessed by name", integer0);
      cSVRecord1.isConsistent();
      cSVRecord1.isConsistent();
      cSVRecord1.toString();
      hashMap0.put("<org.apache.commons.csv.CSVRecord>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>", integer0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        cSVRecord0.putIn(hashMap1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -672
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[11];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("e&jeo% Wn68rX", (Integer) null);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[1], 4096L);
      // Undeclared exception!
      try { 
        cSVRecord0.putIn((Map<String, Integer>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[8];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "w|{dWW~@Z2)a", 0L);
      cSVRecord0.spliterator();
      int int0 = cSVRecord0.size();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "<org.apache.commons.csv.CSVRecord>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[1] = "<org.apache.commons.csv.CSVRecord>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[2] = "<org.apache.commons.csv.CSVRecord>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[3] = "<org.apache.commons.csv.CSVRecord>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[4] = "<org.apache.commons.csv.CSVRecord>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[5] = "<org.apache.commons.csv.CSVRecord>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[6] = "<org.apache.commons.csv.CSVRecord>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[7] = "<org.apache.commons.csv.CSVRecord>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "<org.apache.commons.csv.CSVRecord>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>", 3846L);
      cSVRecord0.isConsistent();
      boolean boolean0 = cSVRecord0.isConsistent();
      assertFalse(boolean0);
      assertEquals(3846L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[8];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[1], 1884L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertEquals(1884L, cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[8];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[1], 1884L);
      cSVRecord0.toMap();
      boolean boolean0 = cSVRecord0.isSet(stringArray0[3]);
      assertEquals(1884L, cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
      assertEquals(8, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[7];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[1], 385L);
      cSVRecord0.putIn((Map<String, Integer>) hashMap0);
      assertEquals(385L, cSVRecord0.getRecordNumber());
      assertFalse(cSVRecord0.isConsistent());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[8];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[1], 1884L);
      cSVRecord0.iterator();
      boolean boolean0 = cSVRecord0.isSet(stringArray0[3]);
      assertEquals(1884L, cSVRecord0.getRecordNumber());
      assertEquals(8, cSVRecord0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<org.apache.commons.csv.CSVRecord>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "<org.apache.commons.csv.CSVRecord>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>", 0L);
      cSVRecord0.spliterator();
      int int0 = cSVRecord0.size();
      assertEquals(1, int0);
      
      cSVRecord0.getComment();
      assertFalse(cSVRecord0.isConsistent());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[5];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[1], 1884L);
      assertEquals(5, cSVRecord0.size());
      assertEquals(1884L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "<org.apache.commons.csv.CSVRecord>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>", 0L);
      cSVRecord0.values();
      // Undeclared exception!
      try { 
        EvoSuiteXStream.fromString("WRITE_DELAY");
        fail("Expecting exception: StreamException");
      
      } catch(StreamException e) {
         //
         // 
         //
         verifyException("com.thoughtworks.xstream.io.xml.XppReader", e);
      }
  }
}
