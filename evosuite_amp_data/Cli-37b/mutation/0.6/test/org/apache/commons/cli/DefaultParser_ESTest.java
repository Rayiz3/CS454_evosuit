/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 01:13:03 GMT 2023
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.Properties;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultParser_ESTest extends DefaultParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      options0.addRequiredOption("", "", true, "--=_A6qwP0{({wZ.@@");
      String[] stringArray0 = new String[15];
      stringArray0[0] = "--=_A6qwP0{({wZ.@@";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      Options options1 = options0.addRequiredOption("i", "i", true, "--=_A6qwP0{({wZ.@@");
      options1.addRequiredOption("i", "--=_A6qwP0{({wZ.@@", true, "---<=w5r");
      options0.getRequiredOptions();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--=_A6qwP0{({wZ.@@";
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Ambiguous option: '--'  (could be: 'i', '--=_A6qwP0{({wZ.@@')
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      options0.addRequiredOption("", "", false, "--=_A6qwP0{({wZ.@@");
      String[] stringArray0 = new String[15];
      stringArray0[0] = "--=_A6qwP0{({wZ.@@";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: --=_A6qwP0{({wZ.@@
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Option.builder();
      Option.Builder option_Builder0 = Option.builder("t");
      Option option0 = option_Builder0.build();
      Properties properties0 = new Properties();
      Options options1 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      defaultParser0.parse(options1, (String[]) null, true);
      defaultParser0.handleConcatenatedOptions("-t1");
      Properties properties1 = new Properties();
      CommandLine commandLine0 = defaultParser0.parse(options0, (String[]) null, properties1, true);
      defaultParser0.currentToken = "---,";
      defaultParser0.handleConcatenatedOptions("De");
      OptionGroup optionGroup0 = new OptionGroup();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      options0.addOptionGroup(optionGroup2);
      optionGroup0.setRequired(false);
      defaultParser0.handleConcatenatedOptions("-t1");
      CommandLine commandLine1 = defaultParser0.parse(options1, (String[]) null);
      assertNotSame(commandLine1, commandLine0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t");
      Option option0 = option_Builder0.build();
      Options options1 = options0.addOption(option0);
      options1.addRequiredOption("t", ",/", true, "-t1");
      options0.getOptions();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "pY6FE' ~Q";
      stringArray0[1] = "-t";
      stringArray0[2] = ",/";
      defaultParser0.parse(options1, stringArray0);
      defaultParser0.handleConcatenatedOptions("-t1");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Options options0 = new Options();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Option.builder();
      Options options1 = options0.addRequiredOption("t", "--l=wr", true, "t");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "t";
      stringArray0[1] = "-t";
      stringArray0[2] = "--l=wr";
      CommandLine commandLine0 = defaultParser0.parse(options1, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t");
      Option option0 = option_Builder0.build();
      Options options1 = options0.addOption(option0);
      options1.addRequiredOption("t", "--l=wr", true, "-t1");
      options0.getOptions();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "pY6FE' ~Q";
      stringArray0[1] = "-t";
      stringArray0[2] = "--l=wr";
      CommandLine commandLine0 = defaultParser0.parse(options1, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Options options0 = new Options();
      Option.builder("t");
      Options options1 = options0.addRequiredOption("t", "t", true, "t");
      DefaultParser defaultParser0 = new DefaultParser();
      DefaultParser defaultParser1 = new DefaultParser();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-t";
      stringArray0[1] = "bfile";
      stringArray0[2] = "t";
      stringArray0[3] = "t";
      stringArray0[4] = "-t";
      stringArray0[5] = "/";
      stringArray0[6] = "-t";
      stringArray0[7] = "-";
      CommandLine commandLine0 = defaultParser1.parse(options1, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option option0 = new Option("t", "t");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      optionGroup0.setRequired(true);
      String[] stringArray0 = new String[60];
      stringArray0[0] = "-ts1";
      option0.setArgs((-2));
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t");
      Option.Builder option_Builder1 = option_Builder0.hasArg();
      Option option0 = option_Builder0.build();
      defaultParser0.handleConcatenatedOptions("");
      Options options1 = options0.addOption("t", "");
      options1.addOption(option0);
      options1.getOptionGroups();
      option_Builder1.numberOfArgs((-2));
      Option option1 = option_Builder1.build();
      options1.addOption(option1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "t";
      stringArray0[2] = "-t1";
      stringArray0[3] = "t";
      stringArray0[4] = "-t1";
      CommandLine commandLine0 = defaultParser0.parse(options1, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-l=wr";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -l=wr
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      options0.getOptionGroups();
      Option.Builder option_Builder0 = Option.builder("t");
      option_Builder0.numberOfArgs(2868);
      Option option0 = option_Builder0.build();
      options0.addOption(option0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-t1";
      stringArray0[1] = "-t1";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option option0 = new Option("t", "t");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      optionGroup0.setRequired(true);
      String[] stringArray0 = new String[0];
      defaultParser0.parse(options0, stringArray0);
      defaultParser0.handleConcatenatedOptions("-t");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      options0.getOptionGroups();
      Option.Builder option_Builder0 = Option.builder("t");
      Option.Builder option_Builder1 = option_Builder0.numberOfArgs((-948));
      Option option0 = option_Builder1.build();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      Options options2 = options1.addOption(option0);
      Options options3 = options2.addRequiredOption("t", "t", true, "t");
      options0.getOptions();
      DefaultParser defaultParser1 = new DefaultParser();
      DefaultParser defaultParser2 = new DefaultParser();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ">ySo!lnzGyem<!kQI";
      stringArray0[1] = "t";
      stringArray0[2] = "-t";
      stringArray0[3] = "t";
      Properties properties0 = new Properties();
      defaultParser1.parse(options2, stringArray0, properties0, false);
      defaultParser2.parse(options3, stringArray0);
      defaultParser2.handleConcatenatedOptions("-t");
      defaultParser2.handleConcatenatedOptions("");
      assertNotSame(defaultParser2, defaultParser0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      options0.getOptionGroups();
      Option.Builder option_Builder0 = Option.builder("t");
      option_Builder0.build();
      options0.addOption("t", "t");
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[20];
      stringArray0[0] = "-t1";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, properties0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      DefaultParser defaultParser1 = new DefaultParser();
      String[] stringArray0 = new String[6];
      stringArray0[0] = ", ";
      stringArray0[1] = "last";
      stringArray0[2] = ", ";
      stringArray0[3] = ", ";
      stringArray0[4] = ", ";
      stringArray0[5] = "";
      defaultParser1.parse(options0, stringArray0);
      defaultParser1.handleConcatenatedOptions(",v,u");
      assertNotSame(defaultParser1, defaultParser0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("t", false, "t");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[0];
      defaultParser0.parse(options1, stringArray0);
      defaultParser0.handleConcatenatedOptions("-t");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-D";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -D
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Options options0 = new Options();
      Properties properties0 = new Properties();
      properties0.put("t", options0);
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "t";
      try { 
        defaultParser0.parse(options0, stringArray0, properties0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Default option wasn't defined
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t");
      Option option0 = option_Builder0.build();
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      String[] stringArray0 = new String[20];
      stringArray0[0] = "-t1";
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -t1
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder();
      option_Builder0.hasArg();
      Option.builder("t1");
      DefaultParser defaultParser1 = new DefaultParser();
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "t1";
      defaultParser0.parse(options0, stringArray0, properties0, true);
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, properties0, true);
      defaultParser0.handleConcatenatedOptions("--t1");
      CommandLine commandLine1 = defaultParser1.parse(options0, stringArray0, properties0, false);
      assertNotSame(commandLine1, commandLine0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[13];
      stringArray0[0] = "-foo=ba";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -foo=ba
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      Options options1 = options0.addRequiredOption((String) null, (String) null, true, (String) null);
      try { 
        defaultParser0.parse(options1, (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing required option: null
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[0];
      defaultParser0.parse(options0, stringArray0, properties0, true);
      defaultParser0.handleConcatenatedOptions("--, ");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      CommandLine commandLine0 = defaultParser0.parse(options0, (String[]) null);
      assertNotNull(commandLine0);
      
      defaultParser0.handleConcatenatedOptions("6{:j#4R#/nlYi");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("t", "t");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      DefaultParser defaultParser0 = new DefaultParser();
      CommandLine commandLine0 = defaultParser0.parse(options1, (String[]) null);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = defaultParser0.options;
      defaultParser0.handleConcatenatedOptions("");
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--bfile";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: --bfile
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--b=bar";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: --b=bar
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      Options options1 = options0.addOption("", true, "");
      String[] stringArray0 = new String[0];
      DefaultParser defaultParser1 = new DefaultParser();
      Properties properties0 = new Properties();
      defaultParser1.parse(options1, stringArray0, properties0, true);
      defaultParser1.handleConcatenatedOptions("");
      defaultParser1.handleConcatenatedOptions("");
      defaultParser1.handleConcatenatedOptions("--D");
      defaultParser1.handleConcatenatedOptions("--b");
      assertNotSame(defaultParser1, defaultParser0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("t", "t", false, "t");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-t";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      Option.Builder option_Builder1 = option_Builder0.hasArg();
      options0.getRequiredOptions();
      option_Builder0.numberOfArgs(1);
      option_Builder0.optionalArg(true);
      Option.Builder option_Builder2 = option_Builder0.argName("t1_path");
      Option option0 = option_Builder0.build();
      Options options1 = options0.addOption(option0);
      Option.builder("t1_path");
      option_Builder1.hasArg(false);
      option_Builder2.build();
      options1.addOption(option0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "path/to/my/db";
      defaultParser0.parse(options0, stringArray0);
      defaultParser0.handleConcatenatedOptions("path/to/my/db");
      defaultParser0.handleConcatenatedOptions("t1");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[0];
      Properties properties0 = new Properties();
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, properties0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[0];
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, false);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[14];
      stringArray0[0] = "--";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--b=bar";
      Properties properties0 = new Properties();
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, properties0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      // Undeclared exception!
      try { 
        defaultParser0.handleConcatenatedOptions("Confirm -b is set");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[12];
      stringArray0[0] = "&-z-Z";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Options options0 = new Options();
      Option.builder("t");
      Options options1 = options0.addRequiredOption("t", "t", true, "t");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-t";
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option: t
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      Option option0 = option_Builder0.build();
      Options options1 = options0.addOption(option0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-t1";
      stringArray0[1] = "-t1";
      CommandLine commandLine0 = defaultParser0.parse(options1, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      option_Builder0.numberOfArgs(1);
      Option option0 = option_Builder0.build();
      options0.addOption(option0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-t1";
      stringArray0[1] = "-t1";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.addRequiredOption("t", "t", true, "--t");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "--t";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("t", true, "t");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[0];
      defaultParser0.parse(options1, stringArray0);
      defaultParser0.handleConcatenatedOptions("-t");
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("t", "t", true, "t");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-t";
      stringArray0[1] = "t";
      CommandLine commandLine0 = defaultParser0.parse(options1, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("t", "t", true, "-t1");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-t1";
      CommandLine commandLine0 = defaultParser0.parse(options1, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      options0.getOptionGroups();
      options0.addRequiredOption("t", "t", true, "--t");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "--t";
      stringArray0[1] = "--t";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option: t
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[0];
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Options options0 = new Options();
      options0.addRequiredOption("t", ",Y", true, "t");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-t";
      stringArray0[1] = "-t";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option: t
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[12];
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[12];
      stringArray0[0] = "-,}lJVrik";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -,}lJVrik
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }
}
