1:LVR:FALSE:TRUE:org.apache.commons.csv.CSVFormat:176:false |==> true
2:LVR:TRUE:FALSE:org.apache.commons.csv.CSVFormat:176:true |==> false
3:LVR:FALSE:TRUE:org.apache.commons.csv.CSVFormat:176:false |==> true
4:LVR:FALSE:TRUE:org.apache.commons.csv.CSVFormat:176:false |==> true
5:LVR:FALSE:TRUE:org.apache.commons.csv.CSVFormat:191:false |==> true
6:LVR:FALSE:TRUE:org.apache.commons.csv.CSVFormat:219:false |==> true
7:LVR:TRUE:FALSE:org.apache.commons.csv.CSVFormat:237:true |==> false
8:LVR:FALSE:TRUE:org.apache.commons.csv.CSVFormat:264:false |==> true
9:ROR:==(int,int):<=(int,int):org.apache.commons.csv.CSVFormat@isLineBreak(char):277:c == LF |==> c <= LF
10:ROR:==(int,int):>=(int,int):org.apache.commons.csv.CSVFormat@isLineBreak(char):277:c == LF |==> c >= LF
11:ROR:==(int,int):FALSE(int,int):org.apache.commons.csv.CSVFormat@isLineBreak(char):277:c == LF |==> false
12:ROR:==(int,int):<=(int,int):org.apache.commons.csv.CSVFormat@isLineBreak(char):277:c == CR |==> c <= CR
13:ROR:==(int,int):>=(int,int):org.apache.commons.csv.CSVFormat@isLineBreak(char):277:c == CR |==> c >= CR
14:ROR:==(int,int):FALSE(int,int):org.apache.commons.csv.CSVFormat@isLineBreak(char):277:c == CR |==> false
15:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.csv.CSVFormat@isLineBreak(char):277:c == LF || c == CR |==> c == LF != (c == CR)
16:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.csv.CSVFormat@isLineBreak(char):277:c == LF || c == CR |==> c == LF
17:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.csv.CSVFormat@isLineBreak(char):277:c == LF || c == CR |==> c == CR
18:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.csv.CSVFormat@isLineBreak(char):277:c == LF || c == CR |==> true
19:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@isLineBreak(java.lang.Character):289:c != null |==> true
20:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.csv.CSVFormat@isLineBreak(java.lang.Character):289:c != null && isLineBreak(c.charValue()) |==> c != null == isLineBreak(c.charValue())
21:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.csv.CSVFormat@isLineBreak(java.lang.Character):289:c != null && isLineBreak(c.charValue()) |==> false
22:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.csv.CSVFormat@isLineBreak(java.lang.Character):289:c != null && isLineBreak(c.charValue()) |==> c != null
23:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.csv.CSVFormat@isLineBreak(java.lang.Character):289:c != null && isLineBreak(c.charValue()) |==> isLineBreak(c.charValue())
24:LVR:FALSE:TRUE:org.apache.commons.csv.CSVFormat@newFormat(char):310:false |==> true
25:LVR:FALSE:TRUE:org.apache.commons.csv.CSVFormat@newFormat(char):310:false |==> true
26:LVR:FALSE:TRUE:org.apache.commons.csv.CSVFormat@newFormat(char):310:false |==> true
27:LVR:FALSE:TRUE:org.apache.commons.csv.CSVFormat@newFormat(char):310:false |==> true
28:COR:isLineBreak(delimiter):TRUE:org.apache.commons.csv.CSVFormat@<init>(char,java.lang.Character,org.apache.commons.csv.QuoteMode,java.lang.Character,java.lang.Character,boolean,boolean,java.lang.String,java.lang.String,java.lang.String[],boolean,boolean):346:isLineBreak(delimiter) |==> false
29:COR:isLineBreak(delimiter):FALSE:org.apache.commons.csv.CSVFormat@<init>(char,java.lang.Character,org.apache.commons.csv.QuoteMode,java.lang.Character,java.lang.Character,boolean,boolean,java.lang.String,java.lang.String,java.lang.String[],boolean,boolean):346:isLineBreak(delimiter) |==> true
30:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@<init>(char,java.lang.Character,org.apache.commons.csv.QuoteMode,java.lang.Character,java.lang.Character,boolean,boolean,java.lang.String,java.lang.String,java.lang.String[],boolean,boolean):359:header == null |==> false
31:COR:dupCheck.add(hdr):TRUE:org.apache.commons.csv.CSVFormat@<init>(char,java.lang.Character,org.apache.commons.csv.QuoteMode,java.lang.Character,java.lang.Character,boolean,boolean,java.lang.String,java.lang.String,java.lang.String[],boolean,boolean):364:dupCheck.add(hdr) |==> false
32:COR:dupCheck.add(hdr):FALSE:org.apache.commons.csv.CSVFormat@<init>(char,java.lang.Character,org.apache.commons.csv.QuoteMode,java.lang.Character,java.lang.Character,boolean,boolean,java.lang.String,java.lang.String,java.lang.String[],boolean,boolean):364:dupCheck.add(hdr) |==> true
33:STD:<CALL>:<NO-OP>:org.apache.commons.csv.CSVFormat@<init>(char,java.lang.Character,org.apache.commons.csv.QuoteMode,java.lang.Character,java.lang.Character,boolean,boolean,java.lang.String,java.lang.String,java.lang.String[],boolean,boolean):372:validate() |==> <NO-OP>
34:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@equals(java.lang.Object):377:this == obj |==> false
35:LVR:TRUE:FALSE:org.apache.commons.csv.CSVFormat@equals(java.lang.Object):378:true |==> false
36:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@equals(java.lang.Object):380:obj == null |==> false
37:LVR:FALSE:TRUE:org.apache.commons.csv.CSVFormat@equals(java.lang.Object):381:false |==> true
38:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@equals(java.lang.Object):383:getClass() != obj.getClass() |==> true
39:LVR:FALSE:TRUE:org.apache.commons.csv.CSVFormat@equals(java.lang.Object):384:false |==> true
40:ROR:!=(int,int):<(int,int):org.apache.commons.csv.CSVFormat@equals(java.lang.Object):388:delimiter != other.delimiter |==> delimiter < other.delimiter
41:ROR:!=(int,int):>(int,int):org.apache.commons.csv.CSVFormat@equals(java.lang.Object):388:delimiter != other.delimiter |==> delimiter > other.delimiter
42:ROR:!=(int,int):TRUE(int,int):org.apache.commons.csv.CSVFormat@equals(java.lang.Object):388:delimiter != other.delimiter |==> true
43:LVR:FALSE:TRUE:org.apache.commons.csv.CSVFormat@equals(java.lang.Object):389:false |==> true
44:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@equals(java.lang.Object):391:quoteMode != other.quoteMode |==> true
45:LVR:FALSE:TRUE:org.apache.commons.csv.CSVFormat@equals(java.lang.Object):392:false |==> true
46:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@equals(java.lang.Object):394:quoteCharacter == null |==> false
47:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@equals(java.lang.Object):395:other.quoteCharacter != null |==> true
48:LVR:FALSE:TRUE:org.apache.commons.csv.CSVFormat@equals(java.lang.Object):396:false |==> true
49:COR:quoteCharacter.equals(other.quoteCharacter):TRUE:org.apache.commons.csv.CSVFormat@equals(java.lang.Object):398:quoteCharacter.equals(other.quoteCharacter) |==> false
50:COR:quoteCharacter.equals(other.quoteCharacter):FALSE:org.apache.commons.csv.CSVFormat@equals(java.lang.Object):398:quoteCharacter.equals(other.quoteCharacter) |==> true
51:LVR:FALSE:TRUE:org.apache.commons.csv.CSVFormat@equals(java.lang.Object):399:false |==> true
52:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@equals(java.lang.Object):401:commentMarker == null |==> false
53:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@equals(java.lang.Object):402:other.commentMarker != null |==> true
54:LVR:FALSE:TRUE:org.apache.commons.csv.CSVFormat@equals(java.lang.Object):403:false |==> true
55:COR:commentMarker.equals(other.commentMarker):TRUE:org.apache.commons.csv.CSVFormat@equals(java.lang.Object):405:commentMarker.equals(other.commentMarker) |==> false
56:COR:commentMarker.equals(other.commentMarker):FALSE:org.apache.commons.csv.CSVFormat@equals(java.lang.Object):405:commentMarker.equals(other.commentMarker) |==> true
57:LVR:FALSE:TRUE:org.apache.commons.csv.CSVFormat@equals(java.lang.Object):406:false |==> true
58:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@equals(java.lang.Object):408:escapeCharacter == null |==> false
59:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@equals(java.lang.Object):409:other.escapeCharacter != null |==> true
60:LVR:FALSE:TRUE:org.apache.commons.csv.CSVFormat@equals(java.lang.Object):410:false |==> true
61:COR:escapeCharacter.equals(other.escapeCharacter):TRUE:org.apache.commons.csv.CSVFormat@equals(java.lang.Object):412:escapeCharacter.equals(other.escapeCharacter) |==> false
62:COR:escapeCharacter.equals(other.escapeCharacter):FALSE:org.apache.commons.csv.CSVFormat@equals(java.lang.Object):412:escapeCharacter.equals(other.escapeCharacter) |==> true
63:LVR:FALSE:TRUE:org.apache.commons.csv.CSVFormat@equals(java.lang.Object):413:false |==> true
64:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@equals(java.lang.Object):415:nullString == null |==> false
65:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@equals(java.lang.Object):416:other.nullString != null |==> true
66:LVR:FALSE:TRUE:org.apache.commons.csv.CSVFormat@equals(java.lang.Object):417:false |==> true
67:COR:nullString.equals(other.nullString):TRUE:org.apache.commons.csv.CSVFormat@equals(java.lang.Object):419:nullString.equals(other.nullString) |==> false
68:COR:nullString.equals(other.nullString):FALSE:org.apache.commons.csv.CSVFormat@equals(java.lang.Object):419:nullString.equals(other.nullString) |==> true
69:LVR:FALSE:TRUE:org.apache.commons.csv.CSVFormat@equals(java.lang.Object):420:false |==> true
70:COR:Arrays.equals(header, other.header):TRUE:org.apache.commons.csv.CSVFormat@equals(java.lang.Object):422:Arrays.equals(header, other.header) |==> false
71:COR:Arrays.equals(header, other.header):FALSE:org.apache.commons.csv.CSVFormat@equals(java.lang.Object):422:Arrays.equals(header, other.header) |==> true
72:LVR:FALSE:TRUE:org.apache.commons.csv.CSVFormat@equals(java.lang.Object):423:false |==> true
73:ROR:!=(boolean,boolean):LHS(boolean,boolean):org.apache.commons.csv.CSVFormat@equals(java.lang.Object):425:ignoreSurroundingSpaces != other.ignoreSurroundingSpaces |==> ignoreSurroundingSpaces
74:ROR:!=(boolean,boolean):RHS(boolean,boolean):org.apache.commons.csv.CSVFormat@equals(java.lang.Object):425:ignoreSurroundingSpaces != other.ignoreSurroundingSpaces |==> other.ignoreSurroundingSpaces
75:ROR:!=(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.csv.CSVFormat@equals(java.lang.Object):425:ignoreSurroundingSpaces != other.ignoreSurroundingSpaces |==> true
76:LVR:FALSE:TRUE:org.apache.commons.csv.CSVFormat@equals(java.lang.Object):426:false |==> true
77:ROR:!=(boolean,boolean):LHS(boolean,boolean):org.apache.commons.csv.CSVFormat@equals(java.lang.Object):428:ignoreEmptyLines != other.ignoreEmptyLines |==> ignoreEmptyLines
78:ROR:!=(boolean,boolean):RHS(boolean,boolean):org.apache.commons.csv.CSVFormat@equals(java.lang.Object):428:ignoreEmptyLines != other.ignoreEmptyLines |==> other.ignoreEmptyLines
79:ROR:!=(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.csv.CSVFormat@equals(java.lang.Object):428:ignoreEmptyLines != other.ignoreEmptyLines |==> true
80:LVR:FALSE:TRUE:org.apache.commons.csv.CSVFormat@equals(java.lang.Object):429:false |==> true
81:ROR:!=(boolean,boolean):LHS(boolean,boolean):org.apache.commons.csv.CSVFormat@equals(java.lang.Object):431:skipHeaderRecord != other.skipHeaderRecord |==> skipHeaderRecord
82:ROR:!=(boolean,boolean):RHS(boolean,boolean):org.apache.commons.csv.CSVFormat@equals(java.lang.Object):431:skipHeaderRecord != other.skipHeaderRecord |==> other.skipHeaderRecord
83:ROR:!=(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.csv.CSVFormat@equals(java.lang.Object):431:skipHeaderRecord != other.skipHeaderRecord |==> true
84:LVR:FALSE:TRUE:org.apache.commons.csv.CSVFormat@equals(java.lang.Object):432:false |==> true
85:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@equals(java.lang.Object):434:recordSeparator == null |==> false
86:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@equals(java.lang.Object):435:other.recordSeparator != null |==> true
87:LVR:FALSE:TRUE:org.apache.commons.csv.CSVFormat@equals(java.lang.Object):436:false |==> true
88:COR:recordSeparator.equals(other.recordSeparator):TRUE:org.apache.commons.csv.CSVFormat@equals(java.lang.Object):438:recordSeparator.equals(other.recordSeparator) |==> false
89:COR:recordSeparator.equals(other.recordSeparator):FALSE:org.apache.commons.csv.CSVFormat@equals(java.lang.Object):438:recordSeparator.equals(other.recordSeparator) |==> true
90:LVR:FALSE:TRUE:org.apache.commons.csv.CSVFormat@equals(java.lang.Object):439:false |==> true
91:LVR:TRUE:FALSE:org.apache.commons.csv.CSVFormat@equals(java.lang.Object):441:true |==> false
92:STD:<CALL>:<NO-OP>:org.apache.commons.csv.CSVFormat@format(java.lang.Object[]):454:new CSVPrinter(out, this).printRecord(values) |==> <NO-OP>
93:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@getHeader():495:header != null |==> true
94:LVR:POS:0:org.apache.commons.csv.CSVFormat@hashCode():585:1 |==> 0
95:LVR:POS:NEG:org.apache.commons.csv.CSVFormat@hashCode():585:1 |==> -1
96:AOR:*(int,int):%(int,int):org.apache.commons.csv.CSVFormat@hashCode():587:prime * result |==> prime % result
97:AOR:*(int,int):+(int,int):org.apache.commons.csv.CSVFormat@hashCode():587:prime * result |==> prime + result
98:AOR:*(int,int):-(int,int):org.apache.commons.csv.CSVFormat@hashCode():587:prime * result |==> prime - result
99:AOR:*(int,int):/(int,int):org.apache.commons.csv.CSVFormat@hashCode():587:prime * result |==> prime / result
100:AOR:+(int,int):%(int,int):org.apache.commons.csv.CSVFormat@hashCode():587:prime * result + delimiter |==> prime * result % delimiter
101:AOR:+(int,int):*(int,int):org.apache.commons.csv.CSVFormat@hashCode():587:prime * result + delimiter |==> prime * result * delimiter
102:AOR:+(int,int):-(int,int):org.apache.commons.csv.CSVFormat@hashCode():587:prime * result + delimiter |==> prime * result - delimiter
103:AOR:+(int,int):/(int,int):org.apache.commons.csv.CSVFormat@hashCode():587:prime * result + delimiter |==> prime * result / delimiter
104:STD:<ASSIGN>:<NO-OP>:org.apache.commons.csv.CSVFormat@hashCode():587:result = prime * result + delimiter |==> <NO-OP>
105:AOR:*(int,int):%(int,int):org.apache.commons.csv.CSVFormat@hashCode():588:prime * result |==> prime % result
106:AOR:*(int,int):+(int,int):org.apache.commons.csv.CSVFormat@hashCode():588:prime * result |==> prime + result
107:AOR:*(int,int):-(int,int):org.apache.commons.csv.CSVFormat@hashCode():588:prime * result |==> prime - result
108:AOR:*(int,int):/(int,int):org.apache.commons.csv.CSVFormat@hashCode():588:prime * result |==> prime / result
109:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@hashCode():588:quoteMode == null |==> false
110:LVR:0:POS:org.apache.commons.csv.CSVFormat@hashCode():588:0 |==> 1
111:LVR:0:NEG:org.apache.commons.csv.CSVFormat@hashCode():588:0 |==> -1
112:AOR:+(int,int):%(int,int):org.apache.commons.csv.CSVFormat@hashCode():588:prime * result + ((quoteMode == null) ? 0 : quoteMode.hashCode()) |==> prime * result % ((quoteMode == null) ? 0 : quoteMode.hashCode())
113:AOR:+(int,int):*(int,int):org.apache.commons.csv.CSVFormat@hashCode():588:prime * result + ((quoteMode == null) ? 0 : quoteMode.hashCode()) |==> prime * result * ((quoteMode == null) ? 0 : quoteMode.hashCode())
114:AOR:+(int,int):-(int,int):org.apache.commons.csv.CSVFormat@hashCode():588:prime * result + ((quoteMode == null) ? 0 : quoteMode.hashCode()) |==> prime * result - ((quoteMode == null) ? 0 : quoteMode.hashCode())
115:AOR:+(int,int):/(int,int):org.apache.commons.csv.CSVFormat@hashCode():588:prime * result + ((quoteMode == null) ? 0 : quoteMode.hashCode()) |==> prime * result / ((quoteMode == null) ? 0 : quoteMode.hashCode())
116:STD:<ASSIGN>:<NO-OP>:org.apache.commons.csv.CSVFormat@hashCode():588:result = prime * result + ((quoteMode == null) ? 0 : quoteMode.hashCode()) |==> <NO-OP>
117:AOR:*(int,int):%(int,int):org.apache.commons.csv.CSVFormat@hashCode():589:prime * result |==> prime % result
118:AOR:*(int,int):+(int,int):org.apache.commons.csv.CSVFormat@hashCode():589:prime * result |==> prime + result
119:AOR:*(int,int):-(int,int):org.apache.commons.csv.CSVFormat@hashCode():589:prime * result |==> prime - result
120:AOR:*(int,int):/(int,int):org.apache.commons.csv.CSVFormat@hashCode():589:prime * result |==> prime / result
121:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@hashCode():589:quoteCharacter == null |==> false
122:LVR:0:POS:org.apache.commons.csv.CSVFormat@hashCode():589:0 |==> 1
123:LVR:0:NEG:org.apache.commons.csv.CSVFormat@hashCode():589:0 |==> -1
124:AOR:+(int,int):%(int,int):org.apache.commons.csv.CSVFormat@hashCode():589:prime * result + ((quoteCharacter == null) ? 0 : quoteCharacter.hashCode()) |==> prime * result % ((quoteCharacter == null) ? 0 : quoteCharacter.hashCode())
125:AOR:+(int,int):*(int,int):org.apache.commons.csv.CSVFormat@hashCode():589:prime * result + ((quoteCharacter == null) ? 0 : quoteCharacter.hashCode()) |==> prime * result * ((quoteCharacter == null) ? 0 : quoteCharacter.hashCode())
126:AOR:+(int,int):-(int,int):org.apache.commons.csv.CSVFormat@hashCode():589:prime * result + ((quoteCharacter == null) ? 0 : quoteCharacter.hashCode()) |==> prime * result - ((quoteCharacter == null) ? 0 : quoteCharacter.hashCode())
127:AOR:+(int,int):/(int,int):org.apache.commons.csv.CSVFormat@hashCode():589:prime * result + ((quoteCharacter == null) ? 0 : quoteCharacter.hashCode()) |==> prime * result / ((quoteCharacter == null) ? 0 : quoteCharacter.hashCode())
128:STD:<ASSIGN>:<NO-OP>:org.apache.commons.csv.CSVFormat@hashCode():589:result = prime * result + ((quoteCharacter == null) ? 0 : quoteCharacter.hashCode()) |==> <NO-OP>
129:AOR:*(int,int):%(int,int):org.apache.commons.csv.CSVFormat@hashCode():590:prime * result |==> prime % result
130:AOR:*(int,int):+(int,int):org.apache.commons.csv.CSVFormat@hashCode():590:prime * result |==> prime + result
131:AOR:*(int,int):-(int,int):org.apache.commons.csv.CSVFormat@hashCode():590:prime * result |==> prime - result
132:AOR:*(int,int):/(int,int):org.apache.commons.csv.CSVFormat@hashCode():590:prime * result |==> prime / result
133:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@hashCode():590:commentMarker == null |==> false
134:LVR:0:POS:org.apache.commons.csv.CSVFormat@hashCode():590:0 |==> 1
135:LVR:0:NEG:org.apache.commons.csv.CSVFormat@hashCode():590:0 |==> -1
136:AOR:+(int,int):%(int,int):org.apache.commons.csv.CSVFormat@hashCode():590:prime * result + ((commentMarker == null) ? 0 : commentMarker.hashCode()) |==> prime * result % ((commentMarker == null) ? 0 : commentMarker.hashCode())
137:AOR:+(int,int):*(int,int):org.apache.commons.csv.CSVFormat@hashCode():590:prime * result + ((commentMarker == null) ? 0 : commentMarker.hashCode()) |==> prime * result * ((commentMarker == null) ? 0 : commentMarker.hashCode())
138:AOR:+(int,int):-(int,int):org.apache.commons.csv.CSVFormat@hashCode():590:prime * result + ((commentMarker == null) ? 0 : commentMarker.hashCode()) |==> prime * result - ((commentMarker == null) ? 0 : commentMarker.hashCode())
139:AOR:+(int,int):/(int,int):org.apache.commons.csv.CSVFormat@hashCode():590:prime * result + ((commentMarker == null) ? 0 : commentMarker.hashCode()) |==> prime * result / ((commentMarker == null) ? 0 : commentMarker.hashCode())
140:STD:<ASSIGN>:<NO-OP>:org.apache.commons.csv.CSVFormat@hashCode():590:result = prime * result + ((commentMarker == null) ? 0 : commentMarker.hashCode()) |==> <NO-OP>
141:AOR:*(int,int):%(int,int):org.apache.commons.csv.CSVFormat@hashCode():591:prime * result |==> prime % result
142:AOR:*(int,int):+(int,int):org.apache.commons.csv.CSVFormat@hashCode():591:prime * result |==> prime + result
143:AOR:*(int,int):-(int,int):org.apache.commons.csv.CSVFormat@hashCode():591:prime * result |==> prime - result
144:AOR:*(int,int):/(int,int):org.apache.commons.csv.CSVFormat@hashCode():591:prime * result |==> prime / result
145:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@hashCode():591:escapeCharacter == null |==> false
146:LVR:0:POS:org.apache.commons.csv.CSVFormat@hashCode():591:0 |==> 1
147:LVR:0:NEG:org.apache.commons.csv.CSVFormat@hashCode():591:0 |==> -1
148:AOR:+(int,int):%(int,int):org.apache.commons.csv.CSVFormat@hashCode():591:prime * result + ((escapeCharacter == null) ? 0 : escapeCharacter.hashCode()) |==> prime * result % ((escapeCharacter == null) ? 0 : escapeCharacter.hashCode())
149:AOR:+(int,int):*(int,int):org.apache.commons.csv.CSVFormat@hashCode():591:prime * result + ((escapeCharacter == null) ? 0 : escapeCharacter.hashCode()) |==> prime * result * ((escapeCharacter == null) ? 0 : escapeCharacter.hashCode())
150:AOR:+(int,int):-(int,int):org.apache.commons.csv.CSVFormat@hashCode():591:prime * result + ((escapeCharacter == null) ? 0 : escapeCharacter.hashCode()) |==> prime * result - ((escapeCharacter == null) ? 0 : escapeCharacter.hashCode())
151:AOR:+(int,int):/(int,int):org.apache.commons.csv.CSVFormat@hashCode():591:prime * result + ((escapeCharacter == null) ? 0 : escapeCharacter.hashCode()) |==> prime * result / ((escapeCharacter == null) ? 0 : escapeCharacter.hashCode())
152:STD:<ASSIGN>:<NO-OP>:org.apache.commons.csv.CSVFormat@hashCode():591:result = prime * result + ((escapeCharacter == null) ? 0 : escapeCharacter.hashCode()) |==> <NO-OP>
153:AOR:*(int,int):%(int,int):org.apache.commons.csv.CSVFormat@hashCode():592:prime * result |==> prime % result
154:AOR:*(int,int):+(int,int):org.apache.commons.csv.CSVFormat@hashCode():592:prime * result |==> prime + result
155:AOR:*(int,int):-(int,int):org.apache.commons.csv.CSVFormat@hashCode():592:prime * result |==> prime - result
156:AOR:*(int,int):/(int,int):org.apache.commons.csv.CSVFormat@hashCode():592:prime * result |==> prime / result
157:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@hashCode():592:nullString == null |==> false
158:LVR:0:POS:org.apache.commons.csv.CSVFormat@hashCode():592:0 |==> 1
159:LVR:0:NEG:org.apache.commons.csv.CSVFormat@hashCode():592:0 |==> -1
160:AOR:+(int,int):%(int,int):org.apache.commons.csv.CSVFormat@hashCode():592:prime * result + ((nullString == null) ? 0 : nullString.hashCode()) |==> prime * result % ((nullString == null) ? 0 : nullString.hashCode())
161:AOR:+(int,int):*(int,int):org.apache.commons.csv.CSVFormat@hashCode():592:prime * result + ((nullString == null) ? 0 : nullString.hashCode()) |==> prime * result * ((nullString == null) ? 0 : nullString.hashCode())
162:AOR:+(int,int):-(int,int):org.apache.commons.csv.CSVFormat@hashCode():592:prime * result + ((nullString == null) ? 0 : nullString.hashCode()) |==> prime * result - ((nullString == null) ? 0 : nullString.hashCode())
163:AOR:+(int,int):/(int,int):org.apache.commons.csv.CSVFormat@hashCode():592:prime * result + ((nullString == null) ? 0 : nullString.hashCode()) |==> prime * result / ((nullString == null) ? 0 : nullString.hashCode())
164:STD:<ASSIGN>:<NO-OP>:org.apache.commons.csv.CSVFormat@hashCode():592:result = prime * result + ((nullString == null) ? 0 : nullString.hashCode()) |==> <NO-OP>
165:AOR:*(int,int):%(int,int):org.apache.commons.csv.CSVFormat@hashCode():593:prime * result |==> prime % result
166:AOR:*(int,int):+(int,int):org.apache.commons.csv.CSVFormat@hashCode():593:prime * result |==> prime + result
167:AOR:*(int,int):-(int,int):org.apache.commons.csv.CSVFormat@hashCode():593:prime * result |==> prime - result
168:AOR:*(int,int):/(int,int):org.apache.commons.csv.CSVFormat@hashCode():593:prime * result |==> prime / result
169:COR:ignoreSurroundingSpaces:TRUE:org.apache.commons.csv.CSVFormat@hashCode():593:ignoreSurroundingSpaces |==> false
170:COR:ignoreSurroundingSpaces:FALSE:org.apache.commons.csv.CSVFormat@hashCode():593:ignoreSurroundingSpaces |==> true
171:LVR:POS:0:org.apache.commons.csv.CSVFormat@hashCode():593:1231 |==> 0
172:LVR:POS:NEG:org.apache.commons.csv.CSVFormat@hashCode():593:1231 |==> -1231
173:LVR:POS:0:org.apache.commons.csv.CSVFormat@hashCode():593:1237 |==> 0
174:LVR:POS:NEG:org.apache.commons.csv.CSVFormat@hashCode():593:1237 |==> -1237
175:AOR:+(int,int):%(int,int):org.apache.commons.csv.CSVFormat@hashCode():593:prime * result + (ignoreSurroundingSpaces ? 1231 : 1237) |==> prime * result % (ignoreSurroundingSpaces ? 1231 : 1237)
176:AOR:+(int,int):*(int,int):org.apache.commons.csv.CSVFormat@hashCode():593:prime * result + (ignoreSurroundingSpaces ? 1231 : 1237) |==> prime * result * (ignoreSurroundingSpaces ? 1231 : 1237)
177:AOR:+(int,int):-(int,int):org.apache.commons.csv.CSVFormat@hashCode():593:prime * result + (ignoreSurroundingSpaces ? 1231 : 1237) |==> prime * result - (ignoreSurroundingSpaces ? 1231 : 1237)
178:AOR:+(int,int):/(int,int):org.apache.commons.csv.CSVFormat@hashCode():593:prime * result + (ignoreSurroundingSpaces ? 1231 : 1237) |==> prime * result / (ignoreSurroundingSpaces ? 1231 : 1237)
179:STD:<ASSIGN>:<NO-OP>:org.apache.commons.csv.CSVFormat@hashCode():593:result = prime * result + (ignoreSurroundingSpaces ? 1231 : 1237) |==> <NO-OP>
180:AOR:*(int,int):%(int,int):org.apache.commons.csv.CSVFormat@hashCode():594:prime * result |==> prime % result
181:AOR:*(int,int):+(int,int):org.apache.commons.csv.CSVFormat@hashCode():594:prime * result |==> prime + result
182:AOR:*(int,int):-(int,int):org.apache.commons.csv.CSVFormat@hashCode():594:prime * result |==> prime - result
183:AOR:*(int,int):/(int,int):org.apache.commons.csv.CSVFormat@hashCode():594:prime * result |==> prime / result
184:COR:ignoreEmptyLines:TRUE:org.apache.commons.csv.CSVFormat@hashCode():594:ignoreEmptyLines |==> false
185:COR:ignoreEmptyLines:FALSE:org.apache.commons.csv.CSVFormat@hashCode():594:ignoreEmptyLines |==> true
186:LVR:POS:0:org.apache.commons.csv.CSVFormat@hashCode():594:1231 |==> 0
187:LVR:POS:NEG:org.apache.commons.csv.CSVFormat@hashCode():594:1231 |==> -1231
188:LVR:POS:0:org.apache.commons.csv.CSVFormat@hashCode():594:1237 |==> 0
189:LVR:POS:NEG:org.apache.commons.csv.CSVFormat@hashCode():594:1237 |==> -1237
190:AOR:+(int,int):%(int,int):org.apache.commons.csv.CSVFormat@hashCode():594:prime * result + (ignoreEmptyLines ? 1231 : 1237) |==> prime * result % (ignoreEmptyLines ? 1231 : 1237)
191:AOR:+(int,int):*(int,int):org.apache.commons.csv.CSVFormat@hashCode():594:prime * result + (ignoreEmptyLines ? 1231 : 1237) |==> prime * result * (ignoreEmptyLines ? 1231 : 1237)
192:AOR:+(int,int):-(int,int):org.apache.commons.csv.CSVFormat@hashCode():594:prime * result + (ignoreEmptyLines ? 1231 : 1237) |==> prime * result - (ignoreEmptyLines ? 1231 : 1237)
193:AOR:+(int,int):/(int,int):org.apache.commons.csv.CSVFormat@hashCode():594:prime * result + (ignoreEmptyLines ? 1231 : 1237) |==> prime * result / (ignoreEmptyLines ? 1231 : 1237)
194:STD:<ASSIGN>:<NO-OP>:org.apache.commons.csv.CSVFormat@hashCode():594:result = prime * result + (ignoreEmptyLines ? 1231 : 1237) |==> <NO-OP>
195:AOR:*(int,int):%(int,int):org.apache.commons.csv.CSVFormat@hashCode():595:prime * result |==> prime % result
196:AOR:*(int,int):+(int,int):org.apache.commons.csv.CSVFormat@hashCode():595:prime * result |==> prime + result
197:AOR:*(int,int):-(int,int):org.apache.commons.csv.CSVFormat@hashCode():595:prime * result |==> prime - result
198:AOR:*(int,int):/(int,int):org.apache.commons.csv.CSVFormat@hashCode():595:prime * result |==> prime / result
199:COR:skipHeaderRecord:TRUE:org.apache.commons.csv.CSVFormat@hashCode():595:skipHeaderRecord |==> false
200:COR:skipHeaderRecord:FALSE:org.apache.commons.csv.CSVFormat@hashCode():595:skipHeaderRecord |==> true
201:LVR:POS:0:org.apache.commons.csv.CSVFormat@hashCode():595:1231 |==> 0
202:LVR:POS:NEG:org.apache.commons.csv.CSVFormat@hashCode():595:1231 |==> -1231
203:LVR:POS:0:org.apache.commons.csv.CSVFormat@hashCode():595:1237 |==> 0
204:LVR:POS:NEG:org.apache.commons.csv.CSVFormat@hashCode():595:1237 |==> -1237
205:AOR:+(int,int):%(int,int):org.apache.commons.csv.CSVFormat@hashCode():595:prime * result + (skipHeaderRecord ? 1231 : 1237) |==> prime * result % (skipHeaderRecord ? 1231 : 1237)
206:AOR:+(int,int):*(int,int):org.apache.commons.csv.CSVFormat@hashCode():595:prime * result + (skipHeaderRecord ? 1231 : 1237) |==> prime * result * (skipHeaderRecord ? 1231 : 1237)
207:AOR:+(int,int):-(int,int):org.apache.commons.csv.CSVFormat@hashCode():595:prime * result + (skipHeaderRecord ? 1231 : 1237) |==> prime * result - (skipHeaderRecord ? 1231 : 1237)
208:AOR:+(int,int):/(int,int):org.apache.commons.csv.CSVFormat@hashCode():595:prime * result + (skipHeaderRecord ? 1231 : 1237) |==> prime * result / (skipHeaderRecord ? 1231 : 1237)
209:STD:<ASSIGN>:<NO-OP>:org.apache.commons.csv.CSVFormat@hashCode():595:result = prime * result + (skipHeaderRecord ? 1231 : 1237) |==> <NO-OP>
210:AOR:*(int,int):%(int,int):org.apache.commons.csv.CSVFormat@hashCode():596:prime * result |==> prime % result
211:AOR:*(int,int):+(int,int):org.apache.commons.csv.CSVFormat@hashCode():596:prime * result |==> prime + result
212:AOR:*(int,int):-(int,int):org.apache.commons.csv.CSVFormat@hashCode():596:prime * result |==> prime - result
213:AOR:*(int,int):/(int,int):org.apache.commons.csv.CSVFormat@hashCode():596:prime * result |==> prime / result
214:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@hashCode():596:recordSeparator == null |==> false
215:LVR:0:POS:org.apache.commons.csv.CSVFormat@hashCode():596:0 |==> 1
216:LVR:0:NEG:org.apache.commons.csv.CSVFormat@hashCode():596:0 |==> -1
217:AOR:+(int,int):%(int,int):org.apache.commons.csv.CSVFormat@hashCode():596:prime * result + ((recordSeparator == null) ? 0 : recordSeparator.hashCode()) |==> prime * result % ((recordSeparator == null) ? 0 : recordSeparator.hashCode())
218:AOR:+(int,int):*(int,int):org.apache.commons.csv.CSVFormat@hashCode():596:prime * result + ((recordSeparator == null) ? 0 : recordSeparator.hashCode()) |==> prime * result * ((recordSeparator == null) ? 0 : recordSeparator.hashCode())
219:AOR:+(int,int):-(int,int):org.apache.commons.csv.CSVFormat@hashCode():596:prime * result + ((recordSeparator == null) ? 0 : recordSeparator.hashCode()) |==> prime * result - ((recordSeparator == null) ? 0 : recordSeparator.hashCode())
220:AOR:+(int,int):/(int,int):org.apache.commons.csv.CSVFormat@hashCode():596:prime * result + ((recordSeparator == null) ? 0 : recordSeparator.hashCode()) |==> prime * result / ((recordSeparator == null) ? 0 : recordSeparator.hashCode())
221:STD:<ASSIGN>:<NO-OP>:org.apache.commons.csv.CSVFormat@hashCode():596:result = prime * result + ((recordSeparator == null) ? 0 : recordSeparator.hashCode()) |==> <NO-OP>
222:AOR:*(int,int):%(int,int):org.apache.commons.csv.CSVFormat@hashCode():597:prime * result |==> prime % result
223:AOR:*(int,int):+(int,int):org.apache.commons.csv.CSVFormat@hashCode():597:prime * result |==> prime + result
224:AOR:*(int,int):-(int,int):org.apache.commons.csv.CSVFormat@hashCode():597:prime * result |==> prime - result
225:AOR:*(int,int):/(int,int):org.apache.commons.csv.CSVFormat@hashCode():597:prime * result |==> prime / result
226:AOR:+(int,int):%(int,int):org.apache.commons.csv.CSVFormat@hashCode():597:prime * result + Arrays.hashCode(header) |==> prime * result % Arrays.hashCode(header)
227:AOR:+(int,int):*(int,int):org.apache.commons.csv.CSVFormat@hashCode():597:prime * result + Arrays.hashCode(header) |==> prime * result * Arrays.hashCode(header)
228:AOR:+(int,int):-(int,int):org.apache.commons.csv.CSVFormat@hashCode():597:prime * result + Arrays.hashCode(header) |==> prime * result - Arrays.hashCode(header)
229:AOR:+(int,int):/(int,int):org.apache.commons.csv.CSVFormat@hashCode():597:prime * result + Arrays.hashCode(header) |==> prime * result / Arrays.hashCode(header)
230:STD:<ASSIGN>:<NO-OP>:org.apache.commons.csv.CSVFormat@hashCode():597:result = prime * result + Arrays.hashCode(header) |==> <NO-OP>
231:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@isCommentMarkerSet():609:commentMarker != null |==> true
232:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@isEscapeCharacterSet():618:escapeCharacter != null |==> true
233:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@isNullStringSet():627:nullString != null |==> true
234:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@isQuoteCharacterSet():636:quoteCharacter != null |==> true
235:STD:<CALL>:<NO-OP>:org.apache.commons.csv.CSVFormat@toString():676:sb.append("Delimiter=<").append(delimiter).append('>') |==> <NO-OP>
236:COR:isEscapeCharacterSet():TRUE:org.apache.commons.csv.CSVFormat@toString():677:isEscapeCharacterSet() |==> false
237:COR:isEscapeCharacterSet():FALSE:org.apache.commons.csv.CSVFormat@toString():677:isEscapeCharacterSet() |==> true
238:STD:<CALL>:<NO-OP>:org.apache.commons.csv.CSVFormat@toString():678:sb.append(' ') |==> <NO-OP>
239:STD:<CALL>:<NO-OP>:org.apache.commons.csv.CSVFormat@toString():679:sb.append("Escape=<").append(escapeCharacter).append('>') |==> <NO-OP>
240:COR:isQuoteCharacterSet():TRUE:org.apache.commons.csv.CSVFormat@toString():681:isQuoteCharacterSet() |==> false
241:COR:isQuoteCharacterSet():FALSE:org.apache.commons.csv.CSVFormat@toString():681:isQuoteCharacterSet() |==> true
242:STD:<CALL>:<NO-OP>:org.apache.commons.csv.CSVFormat@toString():682:sb.append(' ') |==> <NO-OP>
243:STD:<CALL>:<NO-OP>:org.apache.commons.csv.CSVFormat@toString():683:sb.append("QuoteChar=<").append(quoteCharacter).append('>') |==> <NO-OP>
244:COR:isCommentMarkerSet():TRUE:org.apache.commons.csv.CSVFormat@toString():685:isCommentMarkerSet() |==> false
245:COR:isCommentMarkerSet():FALSE:org.apache.commons.csv.CSVFormat@toString():685:isCommentMarkerSet() |==> true
246:STD:<CALL>:<NO-OP>:org.apache.commons.csv.CSVFormat@toString():686:sb.append(' ') |==> <NO-OP>
247:STD:<CALL>:<NO-OP>:org.apache.commons.csv.CSVFormat@toString():687:sb.append("CommentStart=<").append(commentMarker).append('>') |==> <NO-OP>
248:COR:isNullStringSet():TRUE:org.apache.commons.csv.CSVFormat@toString():689:isNullStringSet() |==> false
249:COR:isNullStringSet():FALSE:org.apache.commons.csv.CSVFormat@toString():689:isNullStringSet() |==> true
250:STD:<CALL>:<NO-OP>:org.apache.commons.csv.CSVFormat@toString():690:sb.append(' ') |==> <NO-OP>
251:STD:<CALL>:<NO-OP>:org.apache.commons.csv.CSVFormat@toString():691:sb.append("NullString=<").append(nullString).append('>') |==> <NO-OP>
252:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@toString():693:recordSeparator != null |==> true
253:STD:<CALL>:<NO-OP>:org.apache.commons.csv.CSVFormat@toString():694:sb.append(' ') |==> <NO-OP>
254:STD:<CALL>:<NO-OP>:org.apache.commons.csv.CSVFormat@toString():695:sb.append("RecordSeparator=<").append(recordSeparator).append('>') |==> <NO-OP>
255:COR:getIgnoreEmptyLines():TRUE:org.apache.commons.csv.CSVFormat@toString():697:getIgnoreEmptyLines() |==> false
256:COR:getIgnoreEmptyLines():FALSE:org.apache.commons.csv.CSVFormat@toString():697:getIgnoreEmptyLines() |==> true
257:STD:<CALL>:<NO-OP>:org.apache.commons.csv.CSVFormat@toString():698:sb.append(" EmptyLines:ignored") |==> <NO-OP>
258:COR:getIgnoreSurroundingSpaces():TRUE:org.apache.commons.csv.CSVFormat@toString():700:getIgnoreSurroundingSpaces() |==> false
259:COR:getIgnoreSurroundingSpaces():FALSE:org.apache.commons.csv.CSVFormat@toString():700:getIgnoreSurroundingSpaces() |==> true
260:STD:<CALL>:<NO-OP>:org.apache.commons.csv.CSVFormat@toString():701:sb.append(" SurroundingSpaces:ignored") |==> <NO-OP>
261:STD:<CALL>:<NO-OP>:org.apache.commons.csv.CSVFormat@toString():703:sb.append(" SkipHeaderRecord:").append(skipHeaderRecord) |==> <NO-OP>
262:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@toString():704:header != null |==> true
263:STD:<CALL>:<NO-OP>:org.apache.commons.csv.CSVFormat@toString():705:sb.append(' ') |==> <NO-OP>
264:STD:<CALL>:<NO-OP>:org.apache.commons.csv.CSVFormat@toString():706:sb.append("Header:").append(Arrays.toString(header)) |==> <NO-OP>
265:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@validate():717:quoteCharacter != null |==> true
266:ROR:==(int,int):<=(int,int):org.apache.commons.csv.CSVFormat@validate():717:delimiter == quoteCharacter.charValue() |==> delimiter <= quoteCharacter.charValue()
267:ROR:==(int,int):>=(int,int):org.apache.commons.csv.CSVFormat@validate():717:delimiter == quoteCharacter.charValue() |==> delimiter >= quoteCharacter.charValue()
268:ROR:==(int,int):FALSE(int,int):org.apache.commons.csv.CSVFormat@validate():717:delimiter == quoteCharacter.charValue() |==> false
269:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.csv.CSVFormat@validate():717:quoteCharacter != null && delimiter == quoteCharacter.charValue() |==> quoteCharacter != null == (delimiter == quoteCharacter.charValue())
270:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.csv.CSVFormat@validate():717:quoteCharacter != null && delimiter == quoteCharacter.charValue() |==> false
271:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.csv.CSVFormat@validate():717:quoteCharacter != null && delimiter == quoteCharacter.charValue() |==> quoteCharacter != null
272:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.csv.CSVFormat@validate():717:quoteCharacter != null && delimiter == quoteCharacter.charValue() |==> delimiter == quoteCharacter.charValue()
273:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@validate():722:escapeCharacter != null |==> true
274:ROR:==(int,int):<=(int,int):org.apache.commons.csv.CSVFormat@validate():722:delimiter == escapeCharacter.charValue() |==> delimiter <= escapeCharacter.charValue()
275:ROR:==(int,int):>=(int,int):org.apache.commons.csv.CSVFormat@validate():722:delimiter == escapeCharacter.charValue() |==> delimiter >= escapeCharacter.charValue()
276:ROR:==(int,int):FALSE(int,int):org.apache.commons.csv.CSVFormat@validate():722:delimiter == escapeCharacter.charValue() |==> false
277:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.csv.CSVFormat@validate():722:escapeCharacter != null && delimiter == escapeCharacter.charValue() |==> escapeCharacter != null == (delimiter == escapeCharacter.charValue())
278:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.csv.CSVFormat@validate():722:escapeCharacter != null && delimiter == escapeCharacter.charValue() |==> false
279:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.csv.CSVFormat@validate():722:escapeCharacter != null && delimiter == escapeCharacter.charValue() |==> escapeCharacter != null
280:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.csv.CSVFormat@validate():722:escapeCharacter != null && delimiter == escapeCharacter.charValue() |==> delimiter == escapeCharacter.charValue()
281:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@validate():727:commentMarker != null |==> true
282:ROR:==(int,int):<=(int,int):org.apache.commons.csv.CSVFormat@validate():727:delimiter == commentMarker.charValue() |==> delimiter <= commentMarker.charValue()
283:ROR:==(int,int):>=(int,int):org.apache.commons.csv.CSVFormat@validate():727:delimiter == commentMarker.charValue() |==> delimiter >= commentMarker.charValue()
284:ROR:==(int,int):FALSE(int,int):org.apache.commons.csv.CSVFormat@validate():727:delimiter == commentMarker.charValue() |==> false
285:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.csv.CSVFormat@validate():727:commentMarker != null && delimiter == commentMarker.charValue() |==> commentMarker != null == (delimiter == commentMarker.charValue())
286:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.csv.CSVFormat@validate():727:commentMarker != null && delimiter == commentMarker.charValue() |==> false
287:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.csv.CSVFormat@validate():727:commentMarker != null && delimiter == commentMarker.charValue() |==> commentMarker != null
288:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.csv.CSVFormat@validate():727:commentMarker != null && delimiter == commentMarker.charValue() |==> delimiter == commentMarker.charValue()
289:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@validate():732:quoteCharacter != null |==> true
290:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.csv.CSVFormat@validate():732:quoteCharacter != null && quoteCharacter.equals(commentMarker) |==> quoteCharacter != null == quoteCharacter.equals(commentMarker)
291:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.csv.CSVFormat@validate():732:quoteCharacter != null && quoteCharacter.equals(commentMarker) |==> false
292:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.csv.CSVFormat@validate():732:quoteCharacter != null && quoteCharacter.equals(commentMarker) |==> quoteCharacter != null
293:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.csv.CSVFormat@validate():732:quoteCharacter != null && quoteCharacter.equals(commentMarker) |==> quoteCharacter.equals(commentMarker)
294:ROR:!=(java.lang.Object,java.lang.Object):TRUE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@validate():737:escapeCharacter != null |==> true
295:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.csv.CSVFormat@validate():737:escapeCharacter != null && escapeCharacter.equals(commentMarker) |==> escapeCharacter != null == escapeCharacter.equals(commentMarker)
296:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.csv.CSVFormat@validate():737:escapeCharacter != null && escapeCharacter.equals(commentMarker) |==> false
297:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.csv.CSVFormat@validate():737:escapeCharacter != null && escapeCharacter.equals(commentMarker) |==> escapeCharacter != null
298:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.csv.CSVFormat@validate():737:escapeCharacter != null && escapeCharacter.equals(commentMarker) |==> escapeCharacter.equals(commentMarker)
299:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@validate():742:escapeCharacter == null |==> false
300:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.csv.CSVFormat@validate():742:quoteMode == QuoteMode.NONE |==> false
301:COR:&&(boolean,boolean):==(boolean,boolean):org.apache.commons.csv.CSVFormat@validate():742:escapeCharacter == null && quoteMode == QuoteMode.NONE |==> escapeCharacter == null == (quoteMode == QuoteMode.NONE)
302:COR:&&(boolean,boolean):FALSE(boolean,boolean):org.apache.commons.csv.CSVFormat@validate():742:escapeCharacter == null && quoteMode == QuoteMode.NONE |==> false
303:COR:&&(boolean,boolean):LHS(boolean,boolean):org.apache.commons.csv.CSVFormat@validate():742:escapeCharacter == null && quoteMode == QuoteMode.NONE |==> escapeCharacter == null
304:COR:&&(boolean,boolean):RHS(boolean,boolean):org.apache.commons.csv.CSVFormat@validate():742:escapeCharacter == null && quoteMode == QuoteMode.NONE |==> quoteMode == QuoteMode.NONE
305:COR:isLineBreak(commentMarker):TRUE:org.apache.commons.csv.CSVFormat@withCommentMarker(java.lang.Character):774:isLineBreak(commentMarker) |==> false
306:COR:isLineBreak(commentMarker):FALSE:org.apache.commons.csv.CSVFormat@withCommentMarker(java.lang.Character):774:isLineBreak(commentMarker) |==> true
307:COR:isLineBreak(delimiter):TRUE:org.apache.commons.csv.CSVFormat@withDelimiter(char):792:isLineBreak(delimiter) |==> false
308:COR:isLineBreak(delimiter):FALSE:org.apache.commons.csv.CSVFormat@withDelimiter(char):792:isLineBreak(delimiter) |==> true
309:COR:isLineBreak(escape):TRUE:org.apache.commons.csv.CSVFormat@withEscape(java.lang.Character):823:isLineBreak(escape) |==> false
310:COR:isLineBreak(escape):FALSE:org.apache.commons.csv.CSVFormat@withEscape(java.lang.Character):823:isLineBreak(escape) |==> true
311:COR:isLineBreak(quoteChar):TRUE:org.apache.commons.csv.CSVFormat@withQuote(java.lang.Character):940:isLineBreak(quoteChar) |==> false
312:COR:isLineBreak(quoteChar):FALSE:org.apache.commons.csv.CSVFormat@withQuote(java.lang.Character):940:isLineBreak(quoteChar) |==> true
