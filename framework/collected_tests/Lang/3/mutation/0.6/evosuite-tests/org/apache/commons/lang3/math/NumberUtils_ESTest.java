/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 20:24:32 GMT 2023
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".0.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
      assertEquals((byte)0, bigInteger0.byteValue());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)58;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)88, byte0);
      
      NumberUtils.isNumber("24e.");
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)58;
      floatArray0[2] = (-1420.9F);
      floatArray0[3] = (float) (byte)58;
      floatArray0[4] = (float) (byte)58;
      floatArray0[5] = (float) (byte)58;
      floatArray0[6] = (float) (byte)58;
      floatArray0[7] = (float) (byte)88;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(88.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
      
      NumberUtils.isNumber("1234E5l");
      try { 
        NumberUtils.createNumber("1234E5l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 1234E5l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      NumberUtils.createNumber("1.1E70F");
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("1.1E70F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1.1E70F\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[10];
      NumberUtils.min(intArray0);
      boolean boolean0 = NumberUtils.isNumber("-123E2.12");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0EY");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0EY is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0EY");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-0.");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      try { 
        NumberUtils.createNumber("*0e8N-(HE,8");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      try { 
        NumberUtils.createNumber("---1L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ---1L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1L");
      assertEquals((-1L), number0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.1L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xabc");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("123.4E21D");
      assertEquals(1.234E23, number0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("-0x9:wL4'");
      boolean boolean1 = NumberUtils.isNumber("-0x9:wL4'");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      try { 
        NumberUtils.createNumber("mw`VeE%H=");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // mw`VeE%H= is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      try { 
        NumberUtils.createNumber(".l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1L");
      assertEquals(1L, number0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-221.23F");
      assertEquals((-221.23F), number0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0._=");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0._= is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      try { 
        NumberUtils.createNumber("fYo-w@)-o@0eyyJ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // fYo-w@)-o@0eyyJ is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      NumberUtils.isNumber("0y_qWn,@Y%%*/}m]Ss");
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1.4E-45F;
      floatArray0[1] = (-672.13F);
      floatArray0[2] = (-2020.651F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-2020.651F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.7976931348623159e+308");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-200");
      assertEquals(1.1E-200, number0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".12.3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-700F");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-gD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -gD is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
      
      byte byte1 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte1);
      
      NumberUtils.isNumber("0xDbSx HiHOhAV:'7yS3");
      boolean boolean0 = NumberUtils.isNumber("0xDbSx HiHOhAV:'7yS3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("123.4E5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-1.1E-700F");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      try { 
        NumberUtils.createNumber("e];,=");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // e];,= is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-10.5F);
      floatArray0[1] = 9.7F;
      floatArray0[2] = (-467.1F);
      floatArray0[3] = (-518.52F);
      floatArray0[4] = (-3154.9602F);
      floatArray0[5] = (-2774.7F);
      floatArray0[6] = 2233.864F;
      floatArray0[7] = 447.617F;
      floatArray0[8] = 72.0F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-3154.9602F), float0, 0.01F);
      
      float[] floatArray1 = new float[3];
      floatArray1[0] = (-1543.7891F);
      floatArray1[1] = (-518.52F);
      floatArray1[2] = 447.617F;
      float float1 = NumberUtils.max(floatArray1);
      assertEquals(447.617F, float1, 0.01F);
      
      boolean boolean0 = NumberUtils.isNumber("0xj/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x~7fffffffffffffff");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.toLong("FCs6@)y#");
      boolean boolean0 = NumberUtils.isNumber("0x7fffffffffffffff");
      boolean boolean1 = NumberUtils.isNumber("-0x4|AX");
      assertFalse(boolean1 == boolean0);
      
      NumberUtils.createBigInteger((String) null);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (long)numberUtils0.LONG_ZERO;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (-2133.0);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      doubleArray0[5] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      doubleArray0[6] = (double) (int)numberUtils0.INTEGER_ZERO;
      doubleArray0[7] = (double) (int)numberUtils0.INTEGER_MINUS_ONE;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-2133.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("ekW31o1syps:#L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.");
      assertEquals(1.0F, number0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("3.4028235E38");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
      
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      try { 
        NumberUtils.createNumber("~Q(l#P)UsaE%M@-gjIl");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ~Q(l#P)UsaE%M@-gjIl is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      try { 
        NumberUtils.createNumber("ql");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ql is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-479.05061287112176);
      doubleArray0[1] = (-4305.3409777);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals((-479.05061287112176), double0, 0.01);
      
      NumberUtils.createLong((String) null);
      int[] intArray0 = new int[7];
      intArray0[0] = 331;
      intArray0[1] = (-3437);
      intArray0[2] = (-582);
      intArray0[3] = 1658;
      intArray0[4] = 101;
      intArray0[5] = 68;
      intArray0[6] = (-941);
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1658, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.toLong("FCs6@)y#");
      boolean boolean0 = NumberUtils.isNumber("0x7fffffffffffffff");
      boolean boolean1 = NumberUtils.isDigits("0x7fffffffffffffff");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      try { 
        NumberUtils.createNumber("toFloat(Float.MIN_VALUE) failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // toFloat(Float.MIN_VALUE) failed is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xTrue result for (true, true, true)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xDbSx HiHOhA:'7yS3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      NumberUtils.toLong("");
      NumberUtils.isNumber("0x7fffffffffffffff");
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("#");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      try { 
        NumberUtils.createNumber("_F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // _F is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long long0 = NumberUtils.toLong("`W[Qk9Qi[");
      assertEquals(0L, long0);
      
      NumberUtils.isNumber("`W[Qk9Qi[");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-16);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)94, byte0);
      
      int int0 = NumberUtils.toInt((String) null, (int) (byte) (-94));
      assertEquals((-94), int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte) (-16);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals((-16.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      NumberUtils.toLong((String) null);
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      try { 
        NumberUtils.createNumber("#7ffff^ffffjffffff");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ff^ffff\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E=|@Ryh$Xt");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x7fffffffffffffff");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      try { 
        NumberUtils.createNumber("isNumber(String)/createNumber(String) 9 failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // isNumber(String)/createNumber(String) 9 failed is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      String string0 = null;
      NumberUtils.createInteger((String) null);
      try { 
        NumberUtils.createNumber("op-v.s,uWYJAGAHq");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // op-v.s,uWYJAGAHq is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.toDouble((String) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("L");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      try { 
        NumberUtils.createNumber("`RSWSG6rf");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // `RSWSG6rf is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Array cannot be empty.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Array cannot be empty. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("3.4028235E38");
      assertEquals(3.4028235E38F, number0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+QpuPpjn},!P;B]TXGg");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--`W[Qk9Qi[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-12345");
      assertEquals((short) (-12345), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)numberUtils0.BYTE_ONE;
      floatArray0[1] = 2874.8F;
      floatArray0[2] = (float) (int)numberUtils0.INTEGER_ONE;
      floatArray0[3] = Float.NaN;
      floatArray0[4] = (float) (long)numberUtils0.LONG_ZERO;
      floatArray0[5] = (float) (short)numberUtils0.SHORT_ZERO;
      floatArray0[6] = (float) (short)numberUtils0.SHORT_ZERO;
      floatArray0[7] = (float) (byte)numberUtils0.BYTE_ONE;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
      
      float[] floatArray1 = new float[9];
      floatArray1[0] = (-542.392F);
      floatArray1[1] = (-10.0F);
      floatArray1[2] = 2874.8F;
      floatArray1[3] = 2874.8F;
      floatArray1[4] = (float) numberUtils0.FLOAT_ZERO;
      floatArray1[5] = (-15.0F);
      floatArray1[6] = 0.0F;
      floatArray1[7] = (float) (long)numberUtils0.LONG_ZERO;
      floatArray1[8] = (float) (byte)numberUtils0.BYTE_MINUS_ONE;
      float float1 = NumberUtils.max(floatArray1);
      assertEquals(2874.8F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)numberUtils0.BYTE_ONE;
      floatArray0[1] = 2874.8F;
      floatArray0[2] = (float) (int)numberUtils0.INTEGER_ONE;
      floatArray0[3] = Float.NaN;
      floatArray0[4] = (float) (long)numberUtils0.LONG_ZERO;
      floatArray0[5] = (float) (short)numberUtils0.SHORT_ZERO;
      floatArray0[6] = (float) (short)numberUtils0.SHORT_ZERO;
      floatArray0[7] = (float) (byte)numberUtils0.BYTE_ONE;
      NumberUtils.min(floatArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (int)numberUtils0.INTEGER_MINUS_ONE;
      NumberUtils.isDigits("FreeBSD");
      doubleArray0[1] = (double) (int)numberUtils0.INTEGER_ONE;
      NumberUtils.min(doubleArray0);
      NumberUtils.isNumber("K");
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) numberUtils0.BYTE_ZERO;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[1] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[2] = (int) numberUtils0.INTEGER_ONE;
      intArray0[3] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[4] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[5] = (int) (short)numberUtils0.SHORT_ZERO;
      intArray0[6] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[7] = (int) numberUtils0.INTEGER_ZERO;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1), int0);
      
      byteArray0[1] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[3] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[4] = (byte) numberUtils0.BYTE_ZERO;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-1), byte0);
      
      boolean boolean0 = NumberUtils.isNumber("0x/9:Oh.h<+J:");
      assertFalse(boolean0);
      
      byte byte1 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte)numberUtils0.BYTE_MINUS_ONE;
      floatArray0[1] = (float) (byte) (-1);
      floatArray0[2] = (float) (byte)numberUtils0.BYTE_MINUS_ONE;
      byte byte2 = NumberUtils.max((byte)13, (byte) (-1), (byte) (-1));
      assertEquals((byte)13, byte2);
      
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[6] = (-674.295234);
      double double0 = NumberUtils.min((-674.295234), (-674.295234), (-674.295234));
      assertEquals((-674.295234), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("00");
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
      
      NumberUtils.min((byte)59, (byte)59, (byte)59);
      long long1 = NumberUtils.min(longArray0);
      assertTrue(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      try { 
        NumberUtils.createNumber("#/9:h.<+):");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/9:h.<+):\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NumberUtils.toShort("<.D'us");
      short short0 = NumberUtils.max((short) (-18), (short) (-18), (short) (-18));
      assertEquals((short) (-18), short0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short) (-18);
      floatArray0[2] = (float) (short) (-18);
      floatArray0[3] = (float) (short) (-18);
      floatArray0[4] = (float) (short) (-18);
      floatArray0[5] = (float) (short)0;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      short short1 = NumberUtils.toShort("-0X:Pg");
      assertEquals((short)0, short1);
      
      int int0 = NumberUtils.min(427, 70, (int) (short) (-18));
      assertEquals((-18), int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      try { 
        NumberUtils.createNumber("tRue");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // tRue is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      try { 
        NumberUtils.createNumber("em<E%ZTKTzvM`");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // em<E%ZTKTzvM` is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      doubleArray0[1] = (double) (short)numberUtils0.SHORT_MINUS_ONE;
      doubleArray0[2] = (double) (float)numberUtils0.FLOAT_ZERO;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (double) (long)numberUtils0.LONG_ONE;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.toShort((String) null);
      short short1 = NumberUtils.min((short) numberUtils0.BYTE_ZERO, (short) numberUtils0.BYTE_ZERO, (short)0);
      assertTrue(short1 == short0);
      assertEquals((short)0, short1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("-#--");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.isNumber("isNumber(String)/createNumber(String) 12 Neg failed");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[1] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_MINUS_ONE;
      NumberUtils.isNumber("isNumber(String)/createNumber(String) 12 Neg failed");
      short short0 = NumberUtils.min((short)14, (short) numberUtils0.SHORT_ONE, (short) (byte) (-1));
      assertEquals((short) (-1), short0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)numberUtils0.BYTE_ONE;
      floatArray0[1] = (float) (byte)numberUtils0.BYTE_ZERO;
      floatArray0[2] = (float) (short)14;
      floatArray0[3] = (float) (short) (-1);
      floatArray0[4] = (float) (long)numberUtils0.LONG_ONE;
      floatArray0[5] = (float) (short)numberUtils0.SHORT_ZERO;
      floatArray0[6] = (float) (short)numberUtils0.SHORT_ZERO;
      floatArray0[7] = (float) (byte) (-1);
      floatArray0[8] = (float) (short)numberUtils0.SHORT_MINUS_ONE;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(14.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 1L;
      long long0 = NumberUtils.max(1L, 1L, 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 3015;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[1] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[2] = (short) numberUtils0.SHORT_ZERO;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1, short0);
      
      boolean boolean0 = NumberUtils.isNumber("0x");
      assertFalse(boolean0);
      
      short short1 = NumberUtils.min((short) numberUtils0.BYTE_MINUS_ONE, (short) numberUtils0.SHORT_MINUS_ONE, (short) numberUtils0.SHORT_ONE);
      assertEquals((short) (-1), short1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short) (-1);
      floatArray0[1] = (float) (int)numberUtils0.INTEGER_ONE;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0X");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1046);
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[2] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[3] = (short) numberUtils0.SHORT_ONE;
      shortArray0[4] = (short) (-631);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1, short0);
      
      boolean boolean0 = NumberUtils.isDigits("(T$|mj03J/oU+=");
      assertFalse(boolean0);
      
      float float0 = NumberUtils.min(5.4F, Float.NaN, (float) numberUtils0.LONG_MINUS_ONE);
      assertEquals(Float.NaN, float0, 0.01F);
      
      long long0 = NumberUtils.max((-901L), 484L, 0L);
      assertEquals(484L, long0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[1] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[2] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[3] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[4] = (short) numberUtils0.SHORT_ONE;
      shortArray0[5] = (short) (byte)numberUtils0.BYTE_ZERO;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1), short0);
      
      short[] shortArray1 = new short[5];
      shortArray1[0] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray1[1] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray1[2] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray1[3] = (short) (-631);
      shortArray1[4] = (short) numberUtils0.SHORT_MINUS_ONE;
      short short1 = NumberUtils.max(shortArray1);
      assertEquals((short)1, short1);
      
      boolean boolean0 = NumberUtils.isDigits("Co!g&+!/lSfdC}O^");
      assertFalse(boolean0);
      
      float float0 = NumberUtils.min((float) (short)1, 0.0F, (float) (short)1);
      assertEquals(0.0F, float0, 0.01F);
      
      long long0 = NumberUtils.max((long) (short)0, 6434L, 12344L);
      assertEquals(12344L, long0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x3.4028235E38");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[1] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      float float0 = NumberUtils.min(10.3F, (-2504.8F), 91.746704F);
      assertEquals((-2504.8F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("9");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1020.06129068);
      doubleArray0[1] = (double) (int)numberUtils0.INTEGER_ONE;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1020.06129068), double0, 0.01);
      
      short short0 = NumberUtils.max((short)68, (short)68, (short)22136);
      assertEquals((short)22136, short0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)numberUtils0.SHORT_ZERO;
      floatArray0[1] = (float) (int)numberUtils0.INTEGER_ZERO;
      floatArray0[2] = 2874.8F;
      floatArray0[3] = (float) (int)numberUtils0.INTEGER_ZERO;
      floatArray0[4] = (float) numberUtils0.FLOAT_MINUS_ONE;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) numberUtils0.DOUBLE_ONE;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)numberUtils0.BYTE_ZERO;
      longArray0[1] = (long) numberUtils0.LONG_ZERO;
      longArray0[2] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
      
      short short0 = NumberUtils.max((short) numberUtils0.SHORT_ZERO, (short)2, (short) (-1874));
      assertEquals((short)2, short0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("--`W[Qk9Qi[");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // --`W[Qk9Qi[ is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)32;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (int)numberUtils0.INTEGER_ONE;
      floatArray0[2] = (float) (long)numberUtils0.LONG_MINUS_ONE;
      floatArray0[3] = (float) (short)numberUtils0.SHORT_ONE;
      floatArray0[4] = (float) numberUtils0.FLOAT_ONE;
      floatArray0[5] = (float) (short)numberUtils0.SHORT_ZERO;
      floatArray0[7] = (float) (byte)numberUtils0.BYTE_ZERO;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[5] = (byte)23;
      byteArray0[6] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[7] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[8] = (byte)70;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)70, byte0);
      
      float float0 = NumberUtils.toFloat("#1#-ySQp;[s`+YR($");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1059.15F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[7];
      floatArray0[5] = (float) (int)numberUtils0.INTEGER_MINUS_ONE;
      floatArray0[1] = (float) (byte)numberUtils0.BYTE_ZERO;
      floatArray0[2] = (float) (byte)numberUtils0.BYTE_ZERO;
      floatArray0[3] = (-134.76784F);
      floatArray0[4] = (float) (byte)numberUtils0.BYTE_ONE;
      floatArray0[5] = (float) (long)numberUtils0.LONG_MINUS_ONE;
      floatArray0[6] = (float) (byte)numberUtils0.BYTE_ZERO;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-134.76784F), float0, 0.01F);
      
      long[] longArray0 = new long[4];
      longArray0[1] = (long) numberUtils0.LONG_MINUS_ONE;
      longArray0[2] = (long) (byte)numberUtils0.BYTE_ONE;
      longArray0[3] = (long) numberUtils0.LONG_ZERO;
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (long)numberUtils0.LONG_ZERO;
      doubleArray0[1] = (double) (long)numberUtils0.LONG_ONE;
      doubleArray0[2] = (double) (float)numberUtils0.FLOAT_MINUS_ONE;
      doubleArray0[3] = (double) numberUtils0.DOUBLE_ONE;
      doubleArray0[4] = 1403.191357;
      doubleArray0[5] = (double) (int)numberUtils0.INTEGER_MINUS_ONE;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1403.191357, double0, 0.01);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      long long0 = NumberUtils.toLong("d[A\"5>");
      assertEquals(0L, long0);
      
      long long1 = NumberUtils.min(longArray0);
      assertEquals((-1L), long1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)numberUtils0.SHORT_ONE;
      longArray0[1] = (-1L);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[1] = (short) numberUtils0.SHORT_ONE;
      shortArray0[2] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[3] = (short) numberUtils0.SHORT_MINUS_ONE;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1, short0);
      
      longArray0[2] = (long) (byte)numberUtils0.BYTE_ZERO;
      longArray0[3] = (long) numberUtils0.LONG_ZERO;
      longArray0[4] = (-1L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1L), long0);
      
      double double0 = NumberUtils.toDouble("", 4393.2);
      assertEquals(4393.2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 874L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[6];
      intArray0[0] = (int) numberUtils0.INTEGER_ZERO;
      intArray0[1] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[2] = (int) numberUtils0.INTEGER_ZERO;
      intArray0[3] = (int) (short)numberUtils0.SHORT_ONE;
      intArray0[4] = (int) numberUtils0.INTEGER_MINUS_ONE;
      intArray0[5] = (int) numberUtils0.INTEGER_ZERO;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 59;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(59, int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_ZERO;
      NumberUtils.isNumber(" 6*)v");
      byteArray0[2] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[3] = (byte) numberUtils0.BYTE_ZERO;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.max((int) numberUtils0.BYTE_ZERO, 558, (-639));
      assertEquals(558, int0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[2] = (short) numberUtils0.SHORT_ONE;
      shortArray0[3] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[4] = (short)7;
      shortArray0[5] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[6] = (short)116;
      shortArray0[7] = (short)4;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1), short0);
      
      short short1 = NumberUtils.max(shortArray0);
      assertEquals((short)116, short1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.min((byte)22, (byte) (-122), (byte)120);
      assertEquals((byte) (-122), byte0);
      
      long long0 = NumberUtils.min((long) numberUtils0.BYTE_ONE, (-1L), (-759L));
      assertEquals((-759L), long0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      short short0 = NumberUtils.toShort("<.D'us");
      assertEquals((short)0, short0);
      
      short short1 = NumberUtils.max((short) (-18), (short) (-18), (short) (-18));
      assertEquals((short) (-18), short1);
      
      byte byte0 = NumberUtils.min((byte)1, (byte)1, (byte)1);
      assertEquals((byte)1, byte0);
      
      int int0 = NumberUtils.min((int) (short) (-18), (int) (byte)1, 102);
      assertEquals((-18), int0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructortestConstructortestConstructor_132()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (long)numberUtils0.LONG_MINUS_ONE;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 2970L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(2970L, long0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long[] longArray0 = new long[15];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_138()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[7];
      longArray0[0] = (long) numberUtils0.LONG_MINUS_ONE;
      longArray0[1] = (long) (int)numberUtils0.INTEGER_ONE;
      longArray0[2] = 813L;
      longArray0[3] = (long) (short)numberUtils0.SHORT_ZERO;
      longArray0[4] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      longArray0[5] = (long) (byte)numberUtils0.BYTE_ZERO;
      longArray0[6] = (long) (byte)numberUtils0.BYTE_ZERO;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(813L, long0);
      
      short short0 = NumberUtils.max((short) numberUtils0.SHORT_ZERO, (short)0, (short) (-1859));
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger(",Sj~d;kRd00_A");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \",Sj~\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long long0 = NumberUtils.toLong(")nd8l#E{$D_");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      try { 
        NumberUtils.createNumber("?=\"$%wo1S9XE7k'qi7");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.min((long) numberUtils0.INTEGER_ONE, 976L, (-727L));
      assertEquals((-727L), long0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.min((byte)49, (byte) (-49), (byte) numberUtils0.BYTE_ZERO);
      assertEquals((byte) (-49), byte0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 4294967292L;
      long long0 = NumberUtils.min(4294967292L, 4294967292L, 4294967292L);
      assertEquals(4294967292L, long0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("1.4");
      assertEquals((byte)1, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.max((int) numberUtils0.SHORT_MINUS_ONE, (-92), (-3205));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_ZERO;
      NumberUtils.isNumber(" 6*)v");
      byteArray0[2] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[3] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[4] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[5] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[6] = (byte) numberUtils0.BYTE_ZERO;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)1, byte0);
      
      byte byte1 = NumberUtils.max((byte)71, (byte) numberUtils0.BYTE_ONE, (byte) numberUtils0.BYTE_ZERO);
      assertEquals((byte)71, byte1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[5] = (byte)50;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)50, byte0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.max((byte) numberUtils0.BYTE_ONE, (byte)123, (byte) (-82));
      assertEquals((byte)123, byte0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      float[] floatArray0 = new float[10];
      floatArray0[0] = (-2129.26F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.4");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("{X-.5e`)Sk|");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int[] intArray0 = new int[15];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1181);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int int0 = NumberUtils.max(25, 857, 5322);
      assertEquals(5322, int0);
      
      int int1 = NumberUtils.toInt("-D,+9Qd", 25);
      assertEquals(25, int1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_163()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.min((short) numberUtils0.SHORT_ZERO, (short) numberUtils0.SHORT_ONE, (short)2326);
      assertEquals((short)0, short0);
      
      int int0 = NumberUtils.toInt(" is not a valid number.");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      short short0 = NumberUtils.toShort("<.D'us");
      assertEquals((short)0, short0);
      
      short short1 = NumberUtils.min((short)97, (short)97, (short)97);
      assertEquals((short)97, short1);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_165()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.min((short) numberUtils0.SHORT_ONE, (short) numberUtils0.BYTE_MINUS_ONE, (short) numberUtils0.SHORT_ONE);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      NumberUtils.min((byte)65, (byte)65, (byte) (-23));
      // Undeclared exception!
      try { 
        NumberUtils.createLong("-0XtRuE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-tRuE\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      try { 
        NumberUtils.createNumber("O2");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"O2\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.toInt("isNumber(String) 12 Neg failed", (int) numberUtils0.BYTE_ZERO);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.max((byte) (-35), (byte) (-35), (byte) numberUtils0.BYTE_ONE);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("o:eKTG*q5l?8sZ5I6x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("9");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_172()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.toShort("<.D'us");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.toByte("-0x9i8< xW1SwZ<K.);?", (byte) numberUtils0.BYTE_ONE);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.4");
      assertEquals(1.4F, number0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      try { 
        NumberUtils.createNumber("org.apache.commons.lang3.math.NumberUtils");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // org.apache.commons.lang3.math.NumberUtils is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      try { 
        NumberUtils.createNumber("dMH");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // dMH is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.min((-254), (-753), 6);
      try { 
        NumberUtils.createNumber("9i8< xW1SwZ<K.);?");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 9i8< xW1SwZ<K.);? is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float float0 = NumberUtils.toFloat("-#", (float) numberUtils0.FLOAT_ZERO);
      assertEquals(0.0F, float0, 0.01F);
      
      float float1 = NumberUtils.max((float) numberUtils0.BYTE_ONE, 0.0F, (float) numberUtils0.LONG_ZERO);
      assertEquals(1.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      NumberUtils.toShort("<.D'us");
      NumberUtils.max((short) (-18), (short) (-18), (short) (-18));
      Long long0 = NumberUtils.LONG_ZERO;
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)numberUtils0.SHORT_ONE;
      longArray0[1] = 813L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(813L, long0);
      
      short short0 = NumberUtils.max((short) numberUtils0.SHORT_ZERO, (short)43, (short) numberUtils0.BYTE_ONE);
      assertEquals((short)43, short0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.min((byte) numberUtils0.BYTE_MINUS_ONE, (byte) numberUtils0.BYTE_ZERO, (byte) numberUtils0.BYTE_ONE);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.toDouble("/9:Oh.h<+J:");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double double0 = NumberUtils.max((-1.0), (-1.0), 1.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      short[] shortArray0 = new short[15];
      shortArray0[0] = (short)69;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_185()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) numberUtils0.SHORT_ONE;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[2] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[3] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[4] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[5] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[6] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[7] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[8] = (short)570;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1), short0);
      
      byte byte0 = NumberUtils.toByte((String) null);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createDouble("dMH");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float float0 = NumberUtils.toFloat((String) null, (float) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      long[] longArray0 = new long[9];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }
}
