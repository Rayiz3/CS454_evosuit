/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 13:34:55 GMT 2023
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileDescriptor;
import java.io.Reader;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.function.Function;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.testcarver.testcase.EvoSuiteXStream;
import org.h2.tools.SimpleResultSet;
import org.h2.value.ValueLong;
import org.h2.value.ValueResultSet;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("<string-builder></string-bilder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Boolean boolean0 = new Boolean("");
      arrayList0.add((String) null);
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("YZsexi}9Y[l,;yG!");
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('D');
      CSVFormat cSVFormat4 = CSVFormat.newFormat('Q');
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringBuilder0);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      ValueLong valueLong0 = ValueLong.get((-4730L));
      Reader reader0 = valueLong0.getReader();
      CSVParser cSVParser0 = cSVFormat4.parse(reader0);
      cSVFormat3.toString();
      arrayList0.add("0`UYKJK%?DwcUnhOQc9");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) stringBuilder0;
      objectArray0[1] = (Object) "Y4V~.3xRXVGxxV";
      objectArray0[2] = (Object) reader0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) cSVParser0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      assertFalse(arrayList0.contains("YZsexi}9Y[l,;yG!"));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      Character character0 = new Character('4');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat2);
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('4');
      CSVFormat cSVFormat5 = cSVFormat1.withDelimiter('4');
      CSVFormat cSVFormat6 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat4);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("OzARACO<");
      ValueLong valueLong0 = ValueLong.get(0L);
      valueLong0.getResultSet();
      arrayList0.add("/npQ_9115* 6uK");
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter0.printComment("/npQ_9115* 6uK");
      cSVPrinter1.printRecord((Iterable<?>) arrayList0);
      StringBuilder stringBuilder1 = (StringBuilder)cSVPrinter0.getOut();
      cSVPrinter1.close();
      cSVPrinter1.printRecords((Iterable<?>) arrayList0);
      cSVPrinter1.printComment("format");
      cSVPrinter0.printComment("recursive queries without UNION ALL");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) stringBuilder1;
      objectArray0[1] = (Object) cSVFormat5;
      objectArray0[3] = (Object) "<string-builder></string-builder>";
      objectArray0[4] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[6] = object0;
      cSVPrinter1.printRecords(objectArray0);
      assertNotSame(cSVPrinter1, cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      Character character0 = new Character('4');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat2);
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      cSVPrinter0.print(mockFileReader0);
      cSVFormat3.withDelimiter('4');
      cSVFormat1.withDelimiter('4');
      CSVFormat cSVFormat4 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat1);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList0.add("- Wey4yYlo[]bN{'F");
      arrayList1.add("- Wey4yYlo[]bN{'F");
      cSVPrinter1.printRecord((Iterable<?>) arrayList1);
      assertNotSame(cSVPrinter1, cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("<string-builder></string-bilder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Boolean boolean0 = new Boolean("+=");
      arrayList0.add((String) null);
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("YZsexi}9Y[l,;yG!");
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('D');
      CSVFormat cSVFormat4 = CSVFormat.DEFAULT;
      ArrayList<String> arrayList1 = new ArrayList<String>();
      MockFile mockFile0 = new MockFile("F;*nhOU,.biF!?");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintStream0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      assertEquals(17L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("<string-builder></string-bilder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Boolean boolean0 = new Boolean("ZFmMb");
      arrayList0.add((String) null);
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("YZsexi}9Y[l,;yG!");
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('D');
      CSVFormat cSVFormat4 = CSVFormat.DEFAULT;
      ArrayList<String> arrayList1 = new ArrayList<String>();
      MockFile mockFile0 = new MockFile("F;*nhOU,.biF!?");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(mockPrintStream0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      assertEquals(18L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('c');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('J');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVFormat2.withRecordSeparator('B');
      cSVFormat2.withDelimiter('N');
      cSVFormat0.withDelimiter('J');
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("<string-builder></string-builder>");
      MockFile mockFile0 = new MockFile("QYsiBelGBLp!<@mNgC");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat2.print(mockPrintStream0);
      cSVPrinter0.printComment("Jzq@'UN/-bn");
      arrayList1.add("#7YVf");
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(linkedBlockingDeque0);
      cSVPrinter0.printRecord((Iterable<?>) priorityQueue0);
      cSVPrinter0.print("Jzq@'UN/-bn");
      cSVPrinter0.printComment("");
      assertEquals(42L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList0.add("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList1.add("");
      arrayList0.add("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat2);
      cSVPrinter0.flush();
      arrayList1.add("");
      arrayList2.add("<string-builder></string-builder>");
      StringBuilder stringBuilder1 = new StringBuilder();
      Random.setNextRandom(35);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) arrayList0;
      objectArray0[1] = (Object) cSVFormat1;
      objectArray0[2] = (Object) quote0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) quote0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      StringBuilder stringBuilder1 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.MINIMAL;
      cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      cSVFormat2.withRecordSeparator('s');
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat4 = cSVFormat2.withDelimiter('{');
      cSVFormat3.withDelimiter(' ');
      CSVFormat cSVFormat5 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder1, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add((String) null);
      MockFile mockFile0 = new MockFile("Y]X:-O<%RHq");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVFormat cSVFormat6 = cSVFormat4.withSkipHeaderRecord(false);
      CSVPrinter cSVPrinter1 = cSVFormat6.print(stringBuilder1);
      cSVPrinter0.printComment("");
      arrayList0.add(" RJUmkz.c");
      cSVPrinter1.printRecord((Iterable<?>) arrayList0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringBuilder0, cSVFormat6);
      cSVPrinter0.close();
      assertNotSame(cSVPrinter0, cSVPrinter1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('G');
      cSVFormat0.withIgnoreSurroundingSpaces(true);
      cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat.newFormat('G');
      arrayList1.add("");
      MockFile mockFile0 = new MockFile(".<ixZ^0<*GI{i");
      mockFile0.setExecutable(true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.printComment("Nr ");
      assertEquals(5L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat3 = CSVFormat.newFormat('m');
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat3);
      cSVPrinter0.getOut();
      cSVPrinter1.close();
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) "NewValue";
      Character character0 = new Character('m');
      cSVFormat0.withEscape(character0);
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVPrinter0;
      cSVFormat2.format(objectArray0);
      cSVPrinter1.printRecords(objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      StringBuilder stringBuilder1 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      cSVFormat2.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator('8');
      cSVFormat2.withIgnoreEmptyLines(false);
      cSVFormat3.withIgnoreEmptyLines(false);
      cSVFormat1.withDelimiter('8');
      cSVFormat3.withDelimiter(' ');
      CSVFormat cSVFormat4 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat2);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("5x).&Rl");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add((String) null);
      cSVPrinter0.printRecord((Iterable<?>) arrayList1);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringBuilder1);
      cSVPrinter1.getOut();
      cSVPrinter0.close();
      assertEquals("\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("<string-builder></string-bilder>");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Boolean boolean0 = new Boolean("");
      arrayList0.add((String) null);
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("YZsexi}9Y[l,;yG!");
      cSVFormat1.withDelimiter('D');
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      ArrayList<String> arrayList1 = new ArrayList<String>();
      MockFile mockFile0 = new MockFile("F;*nhOU,.biF!?");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat1);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "<string-builder></string-bilder>";
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList1);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList2.add("A");
      ArrayList<String> arrayList3 = new ArrayList<String>();
      Function<String, String> function0 = Function.identity();
      Comparator<String> comparator0 = Comparator.comparing((Function<? super String, ? extends String>) function0);
      arrayList3.sort(comparator0);
      arrayList3.add("g[s$WV'%ky''");
      Character character0 = new Character('3');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A");
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringBuffer0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) function0;
      objectArray0[1] = (Object) comparator0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "g[s$WV'%ky''";
      objectArray0[4] = (Object) arrayList2;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) "A";
      objectArray0[7] = (Object) arrayList1;
      objectArray0[8] = (Object) "g[s$WV'%ky''";
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(325, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add((String) null);
      arrayList0.add("<string-builder></string-builder>");
      MockFile mockFile0 = new MockFile("h,g>RI]%%Lvb/K\" ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(mockPrintStream0);
      cSVPrinter0.printComment("h,g>RI]%%Lvb/K\" ");
      arrayList0.add("h,g>RI]%%Lvb/K\" ");
      cSVPrinter1.printRecord((Iterable<?>) arrayList0);
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator(":io+mmt=9@wqB.cM");
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintStream0, cSVFormat2);
      cSVPrinter2.close();
      assertEquals(60L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EvoSuiteXStream.fromString("<string-builder></string-builder>");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat0.withQuotePolicy(quote0);
      arrayList0.add("");
      arrayList0.add("Unexpected Quote value: ");
      MockFile mockFile0 = new MockFile("org.apache.commons.csv.CSVPrinter$1");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);
      cSVPrinter0.flush();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ValueLong valueLong0 = ValueLong.get(0L);
      SimpleResultSet simpleResultSet0 = (SimpleResultSet)valueLong0.getResultSet();
      ValueResultSet valueResultSet0 = ValueResultSet.getCopy(simpleResultSet0, (-1466));
      valueResultSet0.getResultSet();
      cSVPrinter0.printRecords((ResultSet) simpleResultSet0);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      cSVPrinter0.close();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      Character character0 = new Character('4');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat2);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      StringBuilder stringBuilder1 = (StringBuilder)cSVPrinter0.getOut();
      cSVPrinter0.close();
      cSVPrinter0.close();
      Object object0 = new Object();
      cSVPrinter0.flush();
      arrayList2.add("<string-builder></string-builder>");
      arrayList2.add("<string-builder></string-builder>");
      cSVPrinter0.printRecord((Iterable<?>) arrayList2);
      StringBuilder stringBuilder2 = new StringBuilder("<string-builder></string-builder>");
      Object[] objectArray0 = new Object[4];
      Object object1 = new Object();
      objectArray0[0] = object1;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) stringBuilder1;
      objectArray0[3] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.NON_NUMERIC;
      cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) arrayList2;
      cSVFormat1.format(objectArray0);
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = cSVFormat2.print(stringBuilder0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals("\r\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[20];
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) "NewValue";
      cSVFormat0.format(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(20, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat1);
      cSVPrinter0.flush();
      arrayList0.add(";");
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      assertEquals(1, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("}p5XV'y;P7C.*RJ");
      arrayList0.add("<string-builder></string-builder>");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("");
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      Object object0 = new Object();
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat1);
      cSVPrinter0.flush();
      arrayList0.add((String) null);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      assertEquals("\"\"\r\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[20];
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) "NewValue";
      cSVFormat0.format(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(20, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      System.setCurrentTimeMillis(33L);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringBuilder0);
      ArrayBlockingQueue<MockFileReader> arrayBlockingQueue0 = new ArrayBlockingQueue<MockFileReader>(18, true);
      cSVPrinter0.printRecords((Iterable<?>) arrayBlockingQueue0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat1);
      cSVPrinter0.flush();
      arrayList0.add((String) null);
      cSVPrinter0.printComment("`O?I~HsVI");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add((String) null);
      arrayList0.add("<string-builder></string-builder>");
      arrayList0.add("<string-builder></string-builder>");
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      assertEquals(3, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      cSVPrinter0.getOut();
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat0);
      cSVPrinter1.close();
      assertNotSame(cSVPrinter1, cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add((String) null);
      arrayList0.add("<string-builder></string-builder>");
      arrayList0.add("<string-builder></string-builder>");
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      StringBuilder stringBuilder1 = new StringBuilder();
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("<string-builder></string-builder>");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat1);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat1);
      cSVPrinter0.print("<string-builder></string-builder>");
      cSVPrinter0.flush();
      arrayList0.add("<string-builder></string-builder>");
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat1);
      arrayList0.add(";");
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      assertEquals(1, arrayList0.size());
  }
}
