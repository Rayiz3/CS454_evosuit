/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 06:23:00 GMT 2023
 */

package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArchiveUtils_ESTest extends ArchiveUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("m\"kaN(;_dsm");
      cpioArchiveEntry0.getRemoteDeviceMaj();
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)5;
      cpioArchiveEntry0.getChksum();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[8] = (byte)5;
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, (byte)5, (byte)0, byteArray0, (byte)5, (byte)5);
      cpioArchiveEntry0.getRemoteDeviceMaj();
      ArchiveUtils.isEqual(byteArray0, (int) (byte)5, (int) (byte)0, byteArray0, (int) (byte)5, (int) (byte)5, false);
      String string0 = ArchiveUtils.toString((ArchiveEntry) cpioArchiveEntry0);
      assertEquals("-       0 m\"kaN(;_dsm", string0);
      
      boolean boolean1 = ArchiveUtils.isEqualWithNull(byteArray0, (byte)5, (byte)5, byteArray0, (byte)5, (byte)0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, 0, 0, byteArray0, 1, 1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, 2, 2, byteArray0, 0, 0);
      assertTrue(boolean0);
      
      String string0 = ArchiveUtils.toAsciiString(byteArray0, 0, 2);
      assertEquals("\u0000\u0000", string0);
      
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("Ky%# [93<lFSl[m%}", 8589934592L);
      arArchiveEntry0.getLastModifiedDate();
      String string1 = ArchiveUtils.toString((ArchiveEntry) arArchiveEntry0);
      assertEquals("- 8589934592 Ky%# [93<lFSl[m%}", string1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("<fU&");
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, (-1875), (-1875), byteArray0, (-1875), (-1875));
      boolean boolean1 = ArchiveUtils.isArrayZero(byteArray0, (-1875));
      assertTrue(boolean1);
      
      boolean boolean2 = ArchiveUtils.isEqualWithNull(byteArray0, 2, 2, byteArray0, (-3093), (-2));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("W.yxJd%_+ ^0_ra");
      ArchiveUtils.isEqualWithNull(byteArray0, (-1156), (-1156), byteArray0, (-1866), (-1156));
      ArchiveUtils.isArrayZero(byteArray0, (-1866));
      ArchiveUtils.toAsciiString(byteArray0);
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, 3, 100, byteArray0, 10, 0);
      assertFalse(boolean0);
      
      String string0 = ArchiveUtils.sanitize("W.yxJd%_+ ^0_ra");
      assertEquals("W.yxJd%_+ ^0_ra", string0);
      
      ArchiveUtils.isEqual(byteArray0, 1621, 1621, byteArray0, (-1121), 0, false);
      MockFile mockFile0 = new MockFile("W.yxJd%_+ ^0_ra");
      mockFile0.getCanonicalFile();
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "org.apache.commons.compress.utils.ArchiveUtils");
      ArchiveUtils.toString((ArchiveEntry) cpioArchiveEntry0);
      String string1 = ArchiveUtils.toString((ArchiveEntry) cpioArchiveEntry0);
      assertEquals("-       0 org.apache.commons.compress.utils.ArchiveUtils", string1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, 2, (byte)0, byteArray0, 2, 2);
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      ArchiveUtils.toAsciiString(byteArray0, 2, 2);
      boolean boolean1 = ArchiveUtils.isEqual(byteArray0, 4644, (-3456), byteArray0, 2278, 2278, false);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[2] = (byte) (-1);
      ArchiveUtils.isEqual(byteArray0, 3, 3, byteArray0, 3, (int) (byte) (-1), true);
      ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.isArrayZero(byteArray0, 38);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\u0000\u0000\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("e", "\u0000\u0000\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("US-ASCII");
      ArchiveUtils.sanitize("US-ASCII");
      ArchiveUtils.toString((ArchiveEntry) jarArchiveEntry0);
      ArchiveUtils.toString((ArchiveEntry) jarArchiveEntry0);
      String string0 = "i";
      ArchiveUtils.sanitize("i");
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, (-4024), (-1), byteArray0, (-4024), 2174);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4025
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[1] = (byte)0;
      ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.sanitize("<noz?o@SIrE]");
      ArchiveUtils.isEqual(byteArray0, 3, 3, byteArray0, (-2469), (int) (byte)0, true);
      ArchiveUtils.sanitize("r");
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      assertFalse(sevenZArchiveEntry0.getHasAccessDate());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("<fU&");
      byte[] byteArray1 = ArchiveUtils.toAsciiBytes("Gzip-compressed data is corrupt (CRC32 error)");
      ArchiveUtils.isEqual(byteArray1, byteArray1, true);
      ArchiveUtils.toAsciiString(byteArray1);
      ArchiveUtils.isEqualWithNull(byteArray1, 4, 100, byteArray0, 1, 100);
      String string0 = ArchiveUtils.sanitize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("<fU&");
      cpioArchiveEntry0.setGID((-127L));
      String string0 = ArchiveUtils.toString((ArchiveEntry) cpioArchiveEntry0);
      assertEquals("-       0 <fU&", string0);
      
      cpioArchiveEntry0.getRemoteDeviceMaj();
      cpioArchiveEntry0.getDeviceMaj();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-42);
      byteArray0[3] = (byte)4;
      byteArray0[3] = (byte) (-28);
      boolean boolean0 = ArchiveUtils.matchAsciiBuffer("-       0 <fU&", byteArray0);
      ArchiveUtils.toAsciiString(byteArray0);
      boolean boolean1 = ArchiveUtils.isArrayZero(byteArray0, 93);
      assertFalse(boolean1);
      
      boolean boolean2 = ArchiveUtils.isEqualWithNull(byteArray0, (byte) (-28), (byte)0, byteArray0, 2, 45);
      boolean boolean3 = ArchiveUtils.isEqual(byteArray0, 19, (int) (byte) (-28), byteArray0, (int) (byte)4, (int) (byte) (-42), false);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = ArchiveUtils.sanitize("a^wnIjUY_U;dXfCM");
      assertEquals("?a^wnIjUY_U;dXfCM", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("<fU&");
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0);
      ArchiveUtils.isEqualWithNull(byteArray0, (-1191), (-1191), byteArray0, (-1875), (-1191));
      ArchiveUtils.isArrayZero(byteArray0, (-1875));
      ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      ArchiveUtils.toAsciiString(byteArray0);
      boolean boolean1 = ArchiveUtils.isEqualWithNull(byteArray0, 3, 100, (byte[]) null, 10, 0);
      assertFalse(boolean1 == boolean0);
      
      String string0 = ArchiveUtils.sanitize("org.apache.commons.compress.utils.ArchiveUtils");
      assertEquals("org.apache.commons.compress.utils.ArchiveUtils", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte) (-31);
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      assertTrue(boolean0);
      
      ArchiveUtils.toAsciiString(byteArray0);
      String string0 = ArchiveUtils.sanitize("=");
      assertEquals("=", string0);
      
      boolean boolean1 = ArchiveUtils.isEqualWithNull(byteArray0, (byte)0, 0, byteArray0, (byte) (-31), (byte)0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-1);
      ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.sanitize("");
      String string0 = ArchiveUtils.sanitize("\uFFFD\uFFFD\uFFFD");
      assertEquals("???", string0);
      
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.isEqual(byteArray0, (int) (byte) (-31), (int) (byte) (-1), byteArray0, (int) (byte) (-1), (int) (byte) (-1), true);
      System.setCurrentTimeMillis(975L);
      String string1 = ArchiveUtils.sanitize("");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[2] = (byte) (-1);
      ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.sanitize("\u0000\u0000\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000");
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString(byteArray0, 647, (int) (byte) (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte) (-31);
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.isEqual(byteArray0, 30, (int) (byte) (-31), byteArray0, (int) (byte) (-31), (int) (byte) (-31), true);
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("org.apache.commons.compress.utils.ArchiveUtils", (String) null);
      String string0 = ArchiveUtils.toString((ArchiveEntry) dumpArchiveEntry0);
      assertEquals("-       0 org.apache.commons.compress.utils.ArchiveUtils", string0);
      
      boolean boolean1 = ArchiveUtils.isEqualWithNull(byteArray0, 1, (byte) (-31), byteArray0, (-2038), (byte) (-31));
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-1);
      ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.sanitize("");
      ArchiveUtils.isEqual(byteArray0, 3, 1047, byteArray0, (-2469), (int) (byte) (-1), true);
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqual(byteArray0, (int) (byte) (-1), 13, byteArray0, (int) (byte) (-1), (int) (byte) (-31), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -32
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[2] = (byte) (-1);
      ArchiveUtils.isEqual(byteArray0, 3, 1069, byteArray0, 1069, (int) (byte) (-1), true);
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, (byte) (-1), (byte) (-1), byteArray0, (byte) (-1), 987);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("<fU&");
      cpioArchiveEntry0.setGID((-127L));
      String string0 = ArchiveUtils.toString((ArchiveEntry) cpioArchiveEntry0);
      assertEquals("-       0 <fU&", string0);
      
      cpioArchiveEntry0.getRemoteDeviceMaj();
      cpioArchiveEntry0.getDeviceMaj();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-42);
      byteArray0[3] = (byte)4;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-86);
      ArchiveUtils.matchAsciiBuffer("-       0 <fU&", byteArray0);
      ArchiveUtils.toAsciiString(byteArray0);
      boolean boolean0 = ArchiveUtils.isArrayZero(byteArray0, 93);
      boolean boolean1 = ArchiveUtils.isEqual(byteArray0, byteArray0, false);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)32;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte) (-7);
      boolean boolean0 = ArchiveUtils.matchAsciiBuffer("", byteArray0);
      assertFalse(boolean0);
      
      ArchiveUtils.toAsciiString(byteArray0);
      byte[] byteArray1 = ArchiveUtils.toAsciiBytes("\u0000\u0001\u0001\u0000\uFFFDS\uFFFD");
      boolean boolean1 = ArchiveUtils.isEqual(byteArray0, 1, (int) (byte) (-7), byteArray1, (int) (byte)1, (int) (byte)32, false);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte) (-1);
      byte[] byteArray1 = ArchiveUtils.toAsciiBytes("");
      ArchiveUtils.isEqual(byteArray1, byteArray0, true);
      ArchiveUtils.toAsciiString(byteArray1);
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, 75, (byte) (-1), byteArray0, (byte) (-1), 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("<fU&");
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, 2, 2, byteArray0, 2, 467);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("<fU&");
      cpioArchiveEntry0.setGID((-127L));
      ArchiveUtils.toString((ArchiveEntry) cpioArchiveEntry0);
      cpioArchiveEntry0.getRemoteDeviceMaj();
      cpioArchiveEntry0.getDeviceMaj();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-42);
      byteArray0[3] = (byte)4;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-86);
      ArchiveUtils.matchAsciiBuffer("-       0 <fU&", byteArray0);
      ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.isArrayZero(byteArray0, 93);
      ArchiveUtils.isEqualWithNull(byteArray0, (byte) (-28), (byte)0, byteArray0, 2, 45);
      byte[] byteArray1 = new byte[13];
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqual(byteArray0, 0, 4, byteArray1, (int) (byte)97, 131, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 97
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)32;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte) (-7);
      ArchiveUtils.matchAsciiBuffer("", byteArray0);
      String string0 = ArchiveUtils.toAsciiString(byteArray0);
      byte[] byteArray1 = ArchiveUtils.toAsciiBytes("org.apache.commons.compress.archivers.zip.StreamCompressor$DataOutputCompressor");
      ArchiveUtils.isEqual(byteArray1, (int) (byte)83, 793, byteArray0, 793, (int) (byte) (-67));
      ArchiveUtils.isEqual(byteArray1, byteArray1);
      String string1 = ArchiveUtils.toAsciiString(byteArray0);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[4] = (byte) (-34);
      String string0 = ArchiveUtils.toAsciiString(byteArray0, (int) (byte)1, (int) (byte)0);
      assertEquals("", string0);
      
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("<fU&");
      cpioArchiveEntry0.setGID((-127L));
      ArchiveUtils.toString((ArchiveEntry) cpioArchiveEntry0);
      cpioArchiveEntry0.getRemoteDeviceMaj();
      cpioArchiveEntry0.getDeviceMaj();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)4;
      cpioArchiveEntry0.isPipe();
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte)127;
      ArchiveUtils.toAsciiString(byteArray0);
      boolean boolean0 = ArchiveUtils.isArrayZero(byteArray0, (byte) (-42));
      boolean boolean1 = ArchiveUtils.isEqual(byteArray0, 34, (int) (byte) (-10), byteArray0, 0, (int) (byte)4);
      assertFalse(boolean1 == boolean0);
      
      String string0 = ArchiveUtils.toString((ArchiveEntry) cpioArchiveEntry0);
      assertEquals("-       0 <fU&", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ArchiveUtils.toAsciiString(byteArray0, (int) (byte)0, (int) (byte)0);
      ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      System.setCurrentTimeMillis((-1711L));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      int int0 = 93;
      // Undeclared exception!
      try { 
        ArchiveUtils.isArrayZero(byteArray0, 93);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "");
      String string0 = ArchiveUtils.toString((ArchiveEntry) cpioArchiveEntry0);
      assertEquals("d       0 ", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("<fU&");
      cpioArchiveEntry0.setGID((-127L));
      ArchiveUtils.toString((ArchiveEntry) cpioArchiveEntry0);
      cpioArchiveEntry0.getRemoteDeviceMaj();
      cpioArchiveEntry0.getDeviceMaj();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte)127;
      FileSystemHandling.shouldAllThrowIOExceptions();
      cpioArchiveEntry0.setInode((-279L));
      ArchiveUtils.isEqual(byteArray0, (int) (byte) (-10), (int) (byte)127, byteArray0, (-900), (int) (byte) (-10), false);
      ArchiveUtils.toString((ArchiveEntry) cpioArchiveEntry0);
      ArchiveUtils.isEqual(byteArray0, (int) (byte) (-86), (int) (byte)97, byteArray0, (-573), (-900));
      ArchiveUtils.isEqual(byteArray0, byteArray0);
      ArchiveUtils.sanitize("-       0 <fU&");
      System.setCurrentTimeMillis(8192L);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      String string0 = ArchiveUtils.toString((ArchiveEntry) cpioArchiveEntry0);
      cpioArchiveEntry0.getRemoteDeviceMaj();
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte)88;
      ArchiveUtils.matchAsciiBuffer("-       0 ", byteArray0);
      ArchiveUtils.toAsciiString(byteArray0);
      boolean boolean0 = ArchiveUtils.isArrayZero(byteArray0, 125);
      assertFalse(boolean0);
      
      String string1 = ArchiveUtils.sanitize("-       0 ");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ArchiveUtils.matchAsciiBuffer("", byteArray0);
      ArchiveUtils.toAsciiString(byteArray0);
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqual(byteArray0, 495, 495, byteArray0, 32, 495, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 495
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = ArchiveUtils.sanitize("\"1+^");
      assertEquals("\"1+^", string0);
      
      byte[] byteArray0 = new byte[10];
      boolean boolean0 = ArchiveUtils.isArrayZero(byteArray0, (-9985));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = ArchiveUtils.sanitize("[y?");
      assertEquals("[y?", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)109;
      // Undeclared exception!
      try { 
        ArchiveUtils.matchAsciiBuffer("AES_ENCRYPTED", byteArray0, (int) (byte)109, 46);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 109
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)97;
      ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.isArrayZero(byteArray0, 125);
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, 125, 2951, byteArray0, 2253, 125);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 125
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("flZ");
      assertArrayEquals(new byte[] {(byte)102, (byte)108, (byte)90}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      // Undeclared exception!
      try { 
        ArchiveUtils.isArrayZero((byte[]) null, 498);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte) (-26);
      byteArray0[7] = (byte)74;
      byteArray0[8] = (byte) (-14);
      boolean boolean0 = ArchiveUtils.isEqual((byte[]) null, 494, (-322), byteArray0, (-322), (int) (byte) (-14));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      String string0 = ArchiveUtils.toAsciiString(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)48;
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, (-1857), (-1), byteArray0, (int) (byte)87, 486);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("");
      mockFile0.toURL();
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "");
      String string0 = ArchiveUtils.toString((ArchiveEntry) tarArchiveEntry0);
      assertEquals("d       0 /", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ArchiveUtils.isEqualWithNull((byte[]) null, (-32), (-32), (byte[]) null, 171, (-32));
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqual((byte[]) null, 171, 171, (byte[]) null, (-32), 171);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("<fU&");
      cpioArchiveEntry0.setGID((-127L));
      ArchiveUtils.toString((ArchiveEntry) cpioArchiveEntry0);
      cpioArchiveEntry0.getRemoteDeviceMaj();
      cpioArchiveEntry0.getDeviceMaj();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte)127;
      cpioArchiveEntry0.setInode((-279L));
      ArchiveUtils.isEqual(byteArray0, (int) (byte) (-10), (int) (byte)127, byteArray0, (-900), (int) (byte) (-10), false);
      ArchiveUtils.toString((ArchiveEntry) cpioArchiveEntry0);
      ArchiveUtils.isEqual(byteArray0, (int) (byte) (-86), (int) (byte)97, byteArray0, (-573), (-900));
      ArchiveUtils.isEqual(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, (-1803), (byte)97, byteArray0, (-365), 689);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1803
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      String string0 = ArchiveUtils.toString((ArchiveEntry) sevenZArchiveEntry0);
      assertEquals("-       0 null", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, (int) (byte)2, (int) (byte)2, byteArray0, (int) (byte)2, (-834), false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, 2, (byte)0, byteArray0, 2, 2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, 2, 2, byteArray0, 2, 2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      String string0 = ArchiveUtils.toAsciiString(byteArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, (-147), (byte)0, byteArray0, (-147), (-147));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -294
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqual((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }
}
