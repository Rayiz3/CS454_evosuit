/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 15 22:57:40 GMT 2023
 */

package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import org.apache.commons.codec.binary.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[5] = (byte) (-33);
      byteArray0[8] = (byte)0;
      StringUtils.newStringUtf16Le(byteArray0);
      StringUtils.getBytesUsAscii("\u9FB3\u01B3\uFFFD\u0000\uFFFD");
      StringUtils.newStringIso8859_1(byteArray0);
      StringUtils.getBytesUtf16Be("\u9FB3\u01B3\uFFFD\u0000\uFFFD");
      byte[] byteArray1 = StringUtils.getBytesUnchecked((String) null, "\u00B3\u009F\u00B3\u00018\u00DF\u0000\u0000\u0000");
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUsAscii("+lLg0Z$b:DT");
      StringUtils.newStringUtf16(byteArray0);
      StringUtils.newStringUtf16(byteArray0);
      StringUtils.newStringUtf16(byteArray0);
      StringUtils.getBytesUtf8("\u2B6C\u4C67\u305A\u2462\u3A44\uFFFD");
      StringUtils stringUtils0 = new StringUtils();
      byte[] byteArray1 = StringUtils.getBytesUtf16("");
      StringUtils.newStringUtf16(byteArray0);
      StringUtils.getBytesIso8859_1("\u2B6C\u4C67\u305A\u2462\u3A44\uFFFD");
      StringUtils.getBytesUtf8("+lLg0Z$b:DT");
      byte[] byteArray2 = StringUtils.getBytesUtf16Be("");
      StringUtils.newStringUtf16Be(byteArray2);
      StringUtils.newStringUsAscii(byteArray1);
      StringUtils.equals((CharSequence) "+lLg0Z$b:DT", (CharSequence) "\u2B6C\u4C67\u305A\u2462\u3A44\uFFFD");
      StringUtils.newStringIso8859_1(byteArray2);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      // Undeclared exception!
      try { 
        StringUtils.equals((CharSequence) charBuffer0, (CharSequence) "\u2B6C\u4C67\u305A\u2462\u3A44\uFFFD");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf8("d;NK\"E2@;~|]");
      StringUtils.newStringUtf16Be(byteArray0);
      byte[] byteArray1 = StringUtils.getBytesUtf16Le("\u643B\u4E4B\u2245\u3240\u3B7E\u7C5D");
      StringUtils.getByteBufferUtf8("");
      StringUtils.getBytesUsAscii("B<~{EoZ+0NUC");
      StringUtils.getByteBufferUtf8("");
      StringUtils.getBytesUsAscii("");
      StringUtils.newStringUtf16Le(byteArray0);
      StringUtils.newStringUsAscii(byteArray1);
      StringUtils.getBytesUsAscii((String) null);
      StringUtils.equals((CharSequence) "d;NK\"E2@;~|]", (CharSequence) "\u643B\u4E4B\u2245\u3240\u3B7E\u7C5D");
      byte[] byteArray2 = StringUtils.getBytesUtf16Le("7S.}");
      StringUtils.getBytesUtf8("B<~{EoZ+0NUC");
      StringUtils.newStringUsAscii(byteArray2);
      StringUtils.equals((CharSequence) "d;NK\"E2@;~|]", (CharSequence) null);
      boolean boolean0 = StringUtils.equals((CharSequence) "B<~{EoZ+0NUC", (CharSequence) "");
      assertFalse(boolean0);
      
      StringUtils.newString((byte[]) null, (String) null);
      StringUtils.getBytesUtf16Be("");
      byte[] byteArray3 = new byte[0];
      StringUtils.newStringUtf16Be(byteArray3);
      boolean boolean1 = StringUtils.equals((CharSequence) null, (CharSequence) "");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesIso8859_1("({+,|");
      StringUtils.equals((CharSequence) "({+,|", (CharSequence) null);
      byte[] byteArray1 = StringUtils.getBytesUtf16Le("");
      StringUtils.newStringUsAscii(byteArray1);
      StringUtils.newStringUtf8(byteArray0);
      StringUtils.newStringUsAscii(byteArray0);
      StringUtils.newStringUtf16Le(byteArray0);
      StringUtils.getBytesUsAscii("org.apache.commons.codec.binary.StringUtils");
      StringUtils.getBytesIso8859_1("\"");
      StringUtils.getBytesUsAscii("({+,|");
      StringUtils.equals((CharSequence) "\"", (CharSequence) null);
      StringUtils.newStringIso8859_1(byteArray0);
      byte[] byteArray2 = StringUtils.getBytesUtf16Be("org.apache.commons.codec.binary.StringUtils");
      assertNotSame(byteArray2, byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf16Be("");
      byte[] byteArray1 = StringUtils.getBytesIso8859_1("");
      StringUtils.newStringUsAscii(byteArray0);
      StringUtils.getByteBufferUtf8("");
      StringUtils.getBytesUsAscii("");
      StringUtils.newStringUtf16Be(byteArray0);
      StringUtils stringUtils0 = new StringUtils();
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte) (-94);
      byteArray2[1] = (byte)1;
      byteArray2[2] = (byte)71;
      byteArray2[3] = (byte)76;
      byteArray2[4] = (byte)0;
      byteArray2[5] = (byte)3;
      byteArray2[6] = (byte)40;
      StringUtils.newStringUtf16Le(byteArray2);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      StringUtils.equals((CharSequence) "", (CharSequence) charBuffer0);
      StringUtils.getByteBufferUtf8("");
      StringUtils.newStringUtf8(byteArray1);
      StringUtils.newStringUtf16Be(byteArray1);
      byte[] byteArray3 = StringUtils.getBytesUtf16Le("[ycEX83X9B3Ku%");
      assertNotSame(byteArray3, byteArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringUtils.getBytesIso8859_1("({+,|");
      byte[] byteArray0 = StringUtils.getBytesUtf16Le(": ");
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      StringUtils.equals((CharSequence) "({+,|", (CharSequence) charBuffer0);
      // Undeclared exception!
      try { 
        StringUtils.newString(byteArray0, ")k@s");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // )k@s: java.io.UnsupportedEncodingException: )k@s
         //
         verifyException("org.apache.commons.codec.binary.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-49);
      StringUtils.newStringUtf16Le(byteArray0);
      byte[] byteArray1 = StringUtils.getBytesUtf8("\uFFFD");
      String string0 = StringUtils.newStringIso8859_1(byteArray1);
      String string1 = StringUtils.newStringUtf16Le(byteArray1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesIso8859_1("({+;,|");
      StringUtils.newStringUtf16Le(byteArray0);
      StringUtils.getBytesIso8859_1("\u7B28\u3B2B\u7C2C");
      StringUtils.getBytesUsAscii("\u7B28\u3B2B\u7C2C");
      StringUtils.equals((CharSequence) "\u7B28\u3B2B\u7C2C", (CharSequence) "({+;,|");
      StringUtils.getBytesUtf8("({+;,|");
      // Undeclared exception!
      try { 
        StringUtils.getBytesUnchecked("", "D_H-oIe");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // D_H-oIe: java.io.UnsupportedEncodingException: D_H-oIe
         //
         verifyException("org.apache.commons.codec.binary.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesIso8859_1("({+,|");
      StringUtils.newStringIso8859_1(byteArray0);
      StringUtils stringUtils0 = new StringUtils();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringUtils.getBytesUsAscii((String) null);
      // Undeclared exception!
      try { 
        StringUtils.getBytesUnchecked("oYMGQ5XMWxsqYZ#", "oYMGQ5XMWxsqYZ#");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // oYMGQ5XMWxsqYZ#: java.io.UnsupportedEncodingException: oYMGQ5XMWxsqYZ#
         //
         verifyException("org.apache.commons.codec.binary.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf8("");
      StringUtils.newStringUtf16Be(byteArray0);
      StringUtils.newStringUtf8(byteArray0);
      // Undeclared exception!
      try { 
        StringUtils.newString(byteArray0, "i9~-@rJl_~");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // i9~-@rJl_~: java.io.UnsupportedEncodingException: i9~-@rJl_~
         //
         verifyException("org.apache.commons.codec.binary.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "({+,|";
      byte[] byteArray0 = StringUtils.getBytesIso8859_1("({+,|");
      String string1 = ": ";
      StringUtils.getBytesUtf16Le(": ");
      // Undeclared exception!
      try { 
        StringUtils.newString(byteArray0, ": ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // : : java.io.UnsupportedEncodingException: : 
         //
         verifyException("org.apache.commons.codec.binary.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringUtils.getBytesUtf8((String) null);
      StringUtils stringUtils0 = new StringUtils();
      StringUtils.getBytesUtf16Le("V<9q`}0|b3'EuHq");
      String string0 = StringUtils.newStringUtf16Be((byte[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.newStringUsAscii(byteArray0);
      assertNotNull(string0);
      
      StringUtils.equals((CharSequence) null, (CharSequence) null);
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf16Be("oYMGQ5XMWxsqYZ#");
      assertEquals(30, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesUtf16("%_F59x1SK%yDsQGoE");
      StringUtils.newStringUsAscii(byteArray0);
      StringUtils.getByteBufferUtf8("\uFFFD\uFFFD\u0000%\u0000_\u0000F\u00005\u0000\u00009\u0000x\u00001\u0000S\u0000K\u0000%\u0000y\u0000D\u0000s\u0000Q\u0000G\u0000o\u0000E");
      byte[] byteArray1 = StringUtils.getBytesUtf16Be("9COKnkK2xX?2");
      StringUtils.getByteBufferUtf8((String) null);
      String string0 = StringUtils.newStringUtf16(byteArray1);
      String string1 = StringUtils.newStringIso8859_1(byteArray1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytesIso8859_1("I");
      byte[] byteArray1 = StringUtils.getBytesUtf16Be("2WY0~A");
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      String string0 = StringUtils.newStringUtf16(byteArray0);
      assertEquals("\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getBytesUnchecked("", "");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // : java.io.UnsupportedEncodingException: 
         //
         verifyException("org.apache.commons.codec.binary.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }
}
