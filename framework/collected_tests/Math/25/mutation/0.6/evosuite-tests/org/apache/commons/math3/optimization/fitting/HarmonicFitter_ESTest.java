/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 22:42:46 GMT 2023
 */

package org.apache.commons.math3.optimization.fitting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.optimization.fitting.HarmonicFitter;
import org.apache.commons.math3.optimization.fitting.WeightedObservedPoint;
import org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HarmonicFitter_ESTest extends HarmonicFitter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(levenbergMarquardtOptimizer0);
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[4];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(0.03998844111357016, (-10.717729591753168), 0.03998844111357016);
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(0.03998844111357016, 0.03998844111357016, 0.03998844111357016);
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(0.03998844111357016, 27.32307421081716, 5302.252595740808);
      weightedObservedPointArray0[2] = weightedObservedPoint2;
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(0.88, 0.88, (-10.717729591753168));
      weightedObservedPointArray0[3] = weightedObservedPoint3;
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      WeightedObservedPoint weightedObservedPoint4 = new WeightedObservedPoint(0.21075661133312093, (-10.717729591753168), 0.21075661133312093);
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser1 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      harmonicFitter_ParameterGuesser1.guess();
      harmonicFitter_ParameterGuesser0.guess();
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser2 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      assertFalse(harmonicFitter_ParameterGuesser2.equals((Object)harmonicFitter_ParameterGuesser1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(levenbergMarquardtOptimizer0);
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[4];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(0.03998844111357016, 0.9800000000000006, 0.03998844111357016);
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(0.03998844111357016, 0.03998844111357016, 0.03998844111357016);
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(0.03998844111357016, 1.2200000000000009, 5302.252595740808);
      weightedObservedPointArray0[2] = weightedObservedPoint2;
      weightedObservedPointArray0[3] = weightedObservedPoint2;
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser1 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      harmonicFitter_ParameterGuesser1.guess();
      harmonicFitter_ParameterGuesser1.guess();
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser2 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      assertFalse(harmonicFitter_ParameterGuesser2.equals((Object)harmonicFitter_ParameterGuesser0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(levenbergMarquardtOptimizer0);
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[4];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(0.03998844111357016, (-10.717729591753168), 0.03998844111357016);
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(0.03998844111357016, 0.03998844111357016, 0.03998844111357016);
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(0.03998844111357016, 1.2200000000000009, 5302.252595740808);
      weightedObservedPointArray0[2] = weightedObservedPoint2;
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(0.8800000000000006, 0.8800000000000006, (-10.717729591753168));
      weightedObservedPointArray0[3] = weightedObservedPoint3;
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      harmonicFitter_ParameterGuesser0.guess();
      harmonicFitter_ParameterGuesser0.guess();
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser1 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser2 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      assertFalse(harmonicFitter_ParameterGuesser2.equals((Object)harmonicFitter_ParameterGuesser0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(levenbergMarquardtOptimizer0);
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(0.0, 0.0, 0.8333333333333334);
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(0.0, (-3853.5022), 0.0);
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(0.0, (-1575.05520078749), (-988.6));
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(0.0, 37.0312, 5302.252595740808);
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[8];
      weightedObservedPointArray0[0] = weightedObservedPoint1;
      weightedObservedPointArray0[1] = weightedObservedPoint0;
      weightedObservedPointArray0[2] = weightedObservedPoint3;
      weightedObservedPointArray0[3] = weightedObservedPoint3;
      weightedObservedPointArray0[4] = weightedObservedPoint1;
      weightedObservedPointArray0[5] = weightedObservedPoint3;
      weightedObservedPointArray0[6] = weightedObservedPoint1;
      weightedObservedPointArray0[7] = weightedObservedPoint0;
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      harmonicFitter_ParameterGuesser0.guess();
      harmonicFitter_ParameterGuesser0.guess();
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser1 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      assertFalse(harmonicFitter_ParameterGuesser1.equals((Object)harmonicFitter_ParameterGuesser0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(levenbergMarquardtOptimizer0);
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(0.0, 0.0, 0.8333333333333334);
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(230.583, 0.8333333333333334, 230.583);
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(1.290000000000001, 0.0, 1.290000000000001);
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(0.0, (-111.620857198134), (-0.0016630840011587578));
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[4];
      weightedObservedPointArray0[0] = weightedObservedPoint3;
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      weightedObservedPointArray0[2] = weightedObservedPoint2;
      weightedObservedPointArray0[3] = weightedObservedPoint3;
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      harmonicFitter_ParameterGuesser0.guess();
      // Undeclared exception!
      try { 
        harmonicFitter0.fit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample contains 0 observed points, at least 4 are required
         //
         verifyException("org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(levenbergMarquardtOptimizer0);
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(1.2500000000000009, (-2422.0), Double.POSITIVE_INFINITY);
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint((-52.08215777511252), (-890.49611691493), 0.405);
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[8];
      weightedObservedPointArray0[0] = weightedObservedPoint1;
      weightedObservedPointArray0[1] = weightedObservedPoint0;
      weightedObservedPointArray0[2] = weightedObservedPoint0;
      weightedObservedPointArray0[3] = weightedObservedPoint1;
      weightedObservedPointArray0[4] = weightedObservedPoint1;
      weightedObservedPointArray0[5] = weightedObservedPoint1;
      weightedObservedPointArray0[6] = weightedObservedPoint1;
      weightedObservedPointArray0[7] = weightedObservedPoint1;
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      harmonicFitter_ParameterGuesser0.guess();
      harmonicFitter_ParameterGuesser0.guess();
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser1 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      assertFalse(harmonicFitter_ParameterGuesser1.equals((Object)harmonicFitter_ParameterGuesser0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(levenbergMarquardtOptimizer0);
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[7];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(2806.33925, 2806.33925, 2806.33925);
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(2806.33925, 2806.33925, 0.5);
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(0.5, 0.2019243285769137, 0.2019243285769137);
      weightedObservedPointArray0[2] = weightedObservedPoint2;
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(2806.33925, 0.2019243285769137, 0.5);
      weightedObservedPointArray0[3] = weightedObservedPoint3;
      WeightedObservedPoint weightedObservedPoint4 = new WeightedObservedPoint(0.2019243285769137, 2806.33925, 2806.33925);
      weightedObservedPointArray0[4] = weightedObservedPoint4;
      WeightedObservedPoint weightedObservedPoint5 = new WeightedObservedPoint(0.2019243285769137, 0.5, 2806.33925);
      weightedObservedPointArray0[5] = weightedObservedPoint5;
      WeightedObservedPoint weightedObservedPoint6 = new WeightedObservedPoint(1.1900000000000008, (-1589.70391100772), (-2334.03242308));
      weightedObservedPointArray0[6] = weightedObservedPoint6;
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser1 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      harmonicFitter_ParameterGuesser1.guess();
      WeightedObservedPoint weightedObservedPoint7 = new WeightedObservedPoint(615.3069453793966, 0.5, (-111.843402674));
      WeightedObservedPoint weightedObservedPoint8 = new WeightedObservedPoint(9.0, 1.1800000000000008, 615.3069453793966);
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser2 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      harmonicFitter_ParameterGuesser1.guess();
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser3 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      assertFalse(harmonicFitter_ParameterGuesser3.equals((Object)harmonicFitter_ParameterGuesser2));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(levenbergMarquardtOptimizer0);
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[4];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint((-28.945491726608083), 0.9800000000000006, (-28.945491726608083));
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint((-28.945491726608083), (-28.945491726608083), (-28.945491726608083));
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      weightedObservedPointArray0[2] = weightedObservedPoint1;
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(0.9800000000000006, (-10.717729591753168), (-10.717729591753168));
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      // Undeclared exception!
      try { 
        harmonicFitter_ParameterGuesser0.guess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(levenbergMarquardtOptimizer0);
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[4];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint((-28.945491726608083), 0.9800000000000006, (-28.945491726608083));
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint((-28.945491726608083), (-28.945491726608083), (-28.945491726608083));
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint((-2680.0), (-615.4), 0.9800000000000006);
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      // Undeclared exception!
      try { 
        harmonicFitter_ParameterGuesser0.guess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(levenbergMarquardtOptimizer0);
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[4];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint((-28.945491726608083), 0.9800000000000006, (-28.945491726608083));
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint((-28.945491726608083), (-28.945491726608083), (-28.945491726608083));
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      weightedObservedPointArray0[2] = weightedObservedPoint1;
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(0.8800000000000006, 0.8800000000000006, 0.9800000000000006);
      weightedObservedPointArray0[3] = weightedObservedPoint2;
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      harmonicFitter_ParameterGuesser0.guess();
      harmonicFitter_ParameterGuesser0.guess();
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser1 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      assertFalse(harmonicFitter_ParameterGuesser1.equals((Object)harmonicFitter_ParameterGuesser0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(levenbergMarquardtOptimizer0);
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[4];
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      // Undeclared exception!
      try { 
        harmonicFitter_ParameterGuesser0.guess();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(levenbergMarquardtOptimizer0);
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[4];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint((-28.945491726608083), 0.9800000000000006, (-28.945491726608083));
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint((-28.945491726608083), (-28.945491726608083), (-28.945491726608083));
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      weightedObservedPointArray0[2] = weightedObservedPoint1;
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(0.8800000000000006, 0.8800000000000006, 0.9800000000000006);
      weightedObservedPointArray0[3] = weightedObservedPoint2;
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      harmonicFitter_ParameterGuesser0.guess();
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser1 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      assertFalse(harmonicFitter_ParameterGuesser1.equals((Object)harmonicFitter_ParameterGuesser0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(levenbergMarquardtOptimizer0);
      WeightedObservedPoint[] weightedObservedPointArray0 = new WeightedObservedPoint[4];
      WeightedObservedPoint weightedObservedPoint0 = new WeightedObservedPoint(0.03998844111357016, 0.9800000000000006, 0.03998844111357016);
      weightedObservedPointArray0[0] = weightedObservedPoint0;
      WeightedObservedPoint weightedObservedPoint1 = new WeightedObservedPoint(0.03998844111357016, 0.03998844111357016, 0.03998844111357016);
      weightedObservedPointArray0[1] = weightedObservedPoint1;
      WeightedObservedPoint weightedObservedPoint2 = new WeightedObservedPoint(0.03998844111357016, 1.2200000000000009, 5302.252595740808);
      weightedObservedPointArray0[2] = weightedObservedPoint2;
      WeightedObservedPoint weightedObservedPoint3 = new WeightedObservedPoint(0.8800000000000006, 0.8800000000000006, 0.9800000000000006);
      weightedObservedPointArray0[3] = weightedObservedPoint3;
      HarmonicFitter.ParameterGuesser harmonicFitter_ParameterGuesser0 = new HarmonicFitter.ParameterGuesser(weightedObservedPointArray0);
      double[] doubleArray0 = harmonicFitter_ParameterGuesser0.guess();
      assertArrayEquals(new double[] {2651.106303649847, 5.324681152368531, (-0.8768878191147479)}, doubleArray0, 0.01);
      
      double[] doubleArray1 = harmonicFitter_ParameterGuesser0.guess();
      assertArrayEquals(new double[] {2651.106303649847, 5.324681152368531, (-0.8768878191147479)}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void testPreconditions1testPreconditions1_13()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(levenbergMarquardtOptimizer0);
      double[] doubleArray0 = new double[6];
      harmonicFitter0.getObservations();
      doubleArray0[0] = 1658.746575061;
      doubleArray0[1] = 2.800552834259E-8;
      doubleArray0[2] = 4721.67622349;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 603.9;
      doubleArray0[5] = (-3250.7810388378316);
      harmonicFitter0.fit(doubleArray0);
      // Undeclared exception!
      try { 
        harmonicFitter0.fit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample contains 0 observed points, at least 4 are required
         //
         verifyException("org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser", e);
      }
  }

  @Test(timeout = 4000)
  public void testPreconditions1_14()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      HarmonicFitter harmonicFitter0 = new HarmonicFitter(levenbergMarquardtOptimizer0);
      // Undeclared exception!
      try { 
        harmonicFitter0.fit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample contains 0 observed points, at least 4 are required
         //
         verifyException("org.apache.commons.math3.optimization.fitting.HarmonicFitter$ParameterGuesser", e);
      }
  }
}
