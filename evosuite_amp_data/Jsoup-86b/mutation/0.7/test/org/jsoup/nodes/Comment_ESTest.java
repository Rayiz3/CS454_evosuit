/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 19:06:36 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Comment_ESTest extends Comment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comment comment0 = new Comment("]/vm%MBS\" .j]k;");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      assertNull(xmlDeclaration0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comment comment0 = new Comment("?8>]dZAj:x", "?8>]dZAj:x");
      boolean boolean0 = comment0.isXmlDeclaration();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comment comment0 = new Comment("@FU\"kgx\"7wg`");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(2156);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(false);
      // Undeclared exception!
      try { 
        comment0.outerHtmlHead((Appendable) null, 1, document_OutputSettings2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Comment", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comment comment0 = new Comment("!e`.?z|w");
      boolean boolean0 = comment0.isXmlDeclaration();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comment comment0 = new Comment("!?xml version='1.0'");
      comment0.clone();
      comment0.toString();
      comment0.nextSibling();
      comment0.getData();
      comment0.isXmlDeclaration();
      // Undeclared exception!
      try { 
        comment0.replaceChild((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comment comment0 = new Comment("'N6ItjCZ$", "'N6ItjCZ$");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "'N6ItjCZ$");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(90);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(90);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      charset0.decode(byteBuffer1);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      comment0.traverse(nodeVisitor0);
      document_OutputSettings2.outline(true);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      charset0.aliases();
      Charset.defaultCharset();
      comment0.toString();
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.outline(false);
      comment0.outerHtmlHead(stringBuilder0, 90, document_OutputSettings4);
      comment0.isXmlDeclaration();
      comment0.isXmlDeclaration();
      comment0.asXmlDeclaration();
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings2.outline(false);
      document_OutputSettings5.outline(true);
      comment0.outerHtmlTail(stringBuilder0, 1441, document_OutputSettings5);
      comment0.asXmlDeclaration();
      comment0.clearAttributes();
      comment0.nodeName();
      comment0.isXmlDeclaration();
      comment0.getData();
      comment0.outerHtmlTail(stringBuilder0, 2147483645, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comment comment0 = new Comment("?AttributeValue_unquoted", "?AttributeValue_unquoted");
      String string0 = comment0.toString();
      assertEquals("\n<!--?AttributeValue_unquoted-->", string0);
      
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      assertNotNull(xmlDeclaration0);
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comment comment0 = new Comment("<!--");
      assertEquals(0, comment0.siblingIndex());
      
      // Undeclared exception!
      try { 
        comment0.asXmlDeclaration();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comment comment0 = new Comment("<1");
      boolean boolean0 = comment0.isXmlDeclaration();
      assertEquals("#comment", comment0.nodeName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comment comment0 = new Comment("MM_ w&");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      assertEquals("#comment", comment0.nodeName());
      assertNotNull(xmlDeclaration0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comment comment0 = new Comment("?>.uA");
      comment0.outerHtml();
      // Undeclared exception!
      try { 
        comment0.asXmlDeclaration();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comment comment0 = new Comment("light", "light");
      assertEquals("#comment", comment0.nodeName());
  }
}
