/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 13:40:43 GMT 2023
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.function.ToDoubleFunction;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.testcarver.testcase.EvoSuiteXStream;
import org.h2.tools.SimpleResultSet;
import org.h2.value.ValueLong;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Object[] objectArray0 = new Object[6];
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("~0K>p9}<2&]Q_");
      arrayList1.add("Unexpected Quote value: ");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("~0K>p9}<2&]Q_");
      Character.valueOf('O');
      Character character0 = Character.valueOf('O');
      cSVFormat1.withCommentStart(character0);
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringBuilder0);
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      cSVFormat2.withEscape(character0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printComment("<string-builder></string-builder>");
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals("\"~0K>p9}<2&]Q_\",~0K>p9}<2&]Q_,~0K>p9}<2&]Q_,~0K>p9}<2&]Q_,~0K>p9}<2&]Q_,~0K>p9}<2&]Q_\r\n\"~0K>p9}<2&]Q_\"\r\n\"~0K>p9}<2&]Q_\"\r\n\"~0K>p9}<2&]Q_\"\r\n\"~0K>p9}<2&]Q_\"\r\n\"~0K>p9}<2&]Q_\"\r\n\"~0K>p9}<2&]Q_\"\r\n\"~0K>p9}<2&]Q_\",~0K>p9}<2&]Q_,~0K>p9}<2&]Q_,~0K>p9}<2&]Q_,~0K>p9}<2&]Q_,~0K>p9}<2&]Q_\r\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringBuilder0;
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator.comparingDouble((ToDoubleFunction<? super Object>) toDoubleFunction0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      Character.valueOf('U');
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("'Z<LX3d(%|vf");
      CSVPrinter cSVPrinter1 = cSVFormat1.print(stringBuilder0);
      cSVPrinter1.printRecords(objectArray0);
      CSVFormat.newFormat('U');
      Object object0 = new Object();
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringBuilder0, cSVFormat1);
      cSVPrinter1.printRecord(objectArray0);
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringBuilder0;
      arrayList0.add("VALUES");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringBuilder0);
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("Unexpected Quote value: ");
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat2);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter1.printRecord(objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      ValueLong.get(2232L);
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('F');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('e');
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringBuilder0);
      cSVPrinter0.printRecords((ResultSet) simpleResultSet0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super Object>) toDoubleFunction0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat4);
      cSVFormat4.withCommentStart('-');
      Character character0 = Character.valueOf('-');
      cSVFormat2.withCommentStart(character0);
      cSVFormat2.print(stringBuilder0);
      CSVFormat cSVFormat5 = CSVFormat.DEFAULT;
      cSVFormat5.withEscape(character0);
      Object[] objectArray0 = new Object[23];
      objectArray0[0] = (Object) comparator0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) cSVPrinter1;
      Object object1 = new Object();
      objectArray0[4] = object1;
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter1.printComment("<string-builder></string-builder>");
      cSVPrinter1.printRecords((Iterable<?>) arrayList0);
      Random.setNextRandom(206);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      ValueLong valueLong0 = ValueLong.get(2232L);
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('F');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('F');
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringBuilder0);
      CSVFormat cSVFormat5 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat3);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat1;
      objectArray0[1] = (Object) valueLong0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      objectArray0[4] = (Object) cSVFormat4;
      objectArray0[5] = (Object) stringBuilder0;
      objectArray0[6] = (Object) stringBuilder0;
      cSVPrinter0.printRecord(objectArray0);
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter1));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      ValueLong.get(2232L);
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('F');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVFormat cSVFormat4 = cSVFormat3.withRecordSeparator('F');
      CSVFormat cSVFormat5 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = cSVFormat4.print(stringBuilder0);
      cSVFormat2.withNullString("");
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat3);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVPrinter1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      cSVPrinter1.printRecord(objectArray0);
      LinkedBlockingQueue<MockFileReader> linkedBlockingQueue0 = new LinkedBlockingQueue<MockFileReader>();
      cSVPrinter1.printRecords((Iterable<?>) linkedBlockingQueue0);
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ValueLong valueLong0 = ValueLong.get(183L);
      ResultSet resultSet0 = valueLong0.getResultSet();
      cSVPrinter0.printRecords(resultSet0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add((String) null);
      arrayList0.add("A");
      arrayList0.add("org.apache.commons.csv.CSVPrinter");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("A");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringBuffer0);
      arrayList0.add((String) null);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVPrinter1;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) stringBuilder0;
      objectArray0[5] = (Object) cSVFormat1;
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "org.apache.commons.csv.CSVPrinter";
      objectArray0[8] = (Object) "org.apache.commons.csv.CSVPrinter";
      cSVPrinter0.printRecords(objectArray0);
      CSVPrinter cSVPrinter2 = cSVFormat0.print(stringBuilder0);
      CSVPrinter cSVPrinter3 = new CSVPrinter(stringBuffer0, cSVFormat1);
      cSVPrinter3.printRecords((Iterable<?>) arrayList0);
      cSVPrinter2.printComment("");
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter3));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      StringBuilder stringBuilder1 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('I');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringBuilder0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "<string-builder></string-builder>";
      objectArray0[1] = (Object) stringBuilder1;
      objectArray0[2] = (Object) stringBuilder0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) stringBuilder0;
      cSVPrinter0.getOut();
      Object object1 = new Object();
      Object object2 = new Object();
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withRecordSeparator("R3*CE1qO&\"lC]H5");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("<string-builder></string-builder>");
      CSVFormat cSVFormat2 = cSVFormat1.withEscape((Character) null);
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat2);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("");
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList2.add("");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) stringBuilder0;
      objectArray0[2] = (Object) arrayList0;
      Object object1 = new Object();
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      ValueLong valueLong0 = ValueLong.get(1L);
      SimpleResultSet simpleResultSet0 = (SimpleResultSet)valueLong0.getResultSet();
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('F');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("");
      Quote quote0 = Quote.NONE;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringBuilder0);
      cSVPrinter0.printRecords((ResultSet) simpleResultSet0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "<string-builder></string-builder>";
      objectArray0[1] = (Object) arrayList0;
      objectArray0[2] = (Object) cSVPrinter0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      Object object2 = new Object();
      objectArray0[6] = object2;
      cSVPrinter0.printRecord(objectArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat2);
      cSVPrinter1.printComment("c[T;(k=97H 4h%");
      LinkedBlockingDeque<Object> linkedBlockingDeque0 = new LinkedBlockingDeque<Object>();
      CSVPrinter cSVPrinter2 = cSVFormat0.print(stringBuilder0);
      cSVPrinter2.printRecords((Iterable<?>) linkedBlockingDeque0);
      cSVPrinter1.printComment("");
      cSVPrinter1.printComment("");
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('I');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringBuilder0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "<string-builder></string-builder>";
      objectArray0[1] = (Object) stringBuilder0;
      objectArray0[2] = (Object) stringBuilder0;
      Object object0 = new Object();
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("<string-builder></string-builder>");
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('#');
      CSVPrinter cSVPrinter1 = cSVFormat1.print(stringBuilder0);
      Character character0 = Character.valueOf('h');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat3 = cSVFormat1.withCommentStart(character0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringBuilder0, cSVFormat3);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) stringBuilder0;
      cSVPrinter2.printRecord(objectArray0);
      cSVPrinter2.printComment("\nHAVING ");
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter2.printRecord(objectArray0);
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      stringBuilder0.append("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      cSVPrinter0.printComment("tbd");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringBuilder0;
      arrayList0.add("<string-builder></string-builder>");
      arrayList0.add("VrLUS");
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat0);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      cSVPrinter0.getOut();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteChar('7');
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringBuilder0, cSVFormat2);
      cSVPrinter2.printRecord(objectArray0);
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("C");
      cSVFormat1.withRecordSeparator("");
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat2);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      cSVPrinter1.printRecords(objectArray0);
      assertEquals("CCCCCC", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[6];
      objectArray0[3] = (Object) stringBuilder0;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      Character character0 = Character.valueOf('4');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(stringBuilder0);
      cSVPrinter1.printRecords(objectArray0);
      cSVPrinter1.printRecord(objectArray0);
      assertFalse(cSVPrinter1.equals((Object)cSVPrinter0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[6];
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("RESTRICT");
      arrayList0.add("RESTRICT");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringBuilder0);
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(".T|,");
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat1);
      cSVPrinter0.close();
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals("\".T|,\",\".T|,\",\".T|,\",\".T|,\",\".T|,\",\".T|,\"\r\n\"\",,,,,\r\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      cSVPrinter0.printRecord(objectArray0);
      assertEquals("\t\t\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Object[] objectArray0 = new Object[6];
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("~0K>p9}<2&]Q_");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      Character.valueOf('e');
      CSVFormat cSVFormat1 = CSVFormat.newFormat('Q');
      CSVPrinter cSVPrinter1 = cSVFormat1.print(stringBuilder0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList1);
      assertTrue(arrayList1.contains("~0K>p9}<2&]Q_"));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Boolean boolean0 = new Boolean("<string-builder></string-builder>");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('#');
      CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ValueLong valueLong0 = ValueLong.get(183L);
      ResultSet resultSet0 = valueLong0.getResultSet();
      cSVPrinter0.printRecords(resultSet0);
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('I');
      CSVPrinter cSVPrinter1 = cSVFormat2.print(stringBuilder0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter1));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("<string-builder></string-builder>");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("<string-builder></string-builder>");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      cSVPrinter0.printRecords(objectArray0);
      System.setCurrentTimeMillis(16777216L);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      assertTrue(arrayList0.contains("<string-builder></string-builder>"));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("h`IY)z.;McK`|");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Object object0 = new Object();
      LinkedBlockingQueue<MockFileReader> linkedBlockingQueue0 = new LinkedBlockingQueue<MockFileReader>();
      cSVPrinter0.printRecords((Iterable<?>) linkedBlockingQueue0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("<string-builder></btringbuilder>");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('L');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringBuilder0);
      Object object0 = new Object();
      PriorityQueue<MockFileReader> priorityQueue0 = new PriorityQueue<MockFileReader>();
      PriorityQueue<MockFileReader> priorityQueue1 = new PriorityQueue<MockFileReader>();
      PriorityQueue<MockFileReader> priorityQueue2 = new PriorityQueue<MockFileReader>(priorityQueue1);
      cSVPrinter0.printRecords((Iterable<?>) priorityQueue2);
      cSVPrinter0.printComment("<string-builder></btringbuilder>");
      assertEquals("<string-builder></btringbuilder>L <string-builder></btringbuilder>\r\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EvoSuiteXStream.fromString("<string-builder></string-builder>");
      EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      cSVFormat1.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines(true);
      cSVFormat0.withDelimiter('\t');
      cSVFormat0.withDelimiter('<');
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('d');
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter1, 27);
      CSVPrinter cSVPrinter0 = new CSVPrinter(bufferedWriter0, cSVFormat2);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("B");
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList2.add("<string-builder></string-builder>");
      arrayList2.add("NewValue");
      arrayList0.add("eE8Z)M ;x$0[1g");
      cSVPrinter0.printRecord((Iterable<?>) arrayList1);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      try { 
        cSVPrinter0.flush();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("A");
      arrayList0.add("B");
      arrayList0.add("C");
      arrayList0.add("NewValue");
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) arrayList0;
      objectArray0[1] = (Object) stringBuilder0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) "<string-builder></string-builder>";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "B";
      objectArray0[6] = (Object) stringBuilder0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("<string-builder></string-builder>");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("<string-builder></string-builder>");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      cSVPrinter0.printRecords(objectArray0);
      assertEquals("\"<string-builder></string-builder>\"\r\n\"<string-builder></string-builder>\"\r\n\"<string-builder></string-builder>\"\r\n\"<string-builder></string-builder>\"\r\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) stringBuilder0;
      arrayList0.add("<string-builder></string-builder>");
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.printRecord(objectArray0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat0);
      Character.valueOf('4');
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuotePolicy(quote0);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("<string-builder></string-builder>");
      CSVPrinter cSVPrinter2 = cSVFormat2.print(stringBuilder0);
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter2.printRecord(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("<string-builder></string-builder>");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList2.add("");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) arrayList1;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals("\r\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("<string-builder></string-builder>");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      cSVPrinter0.printRecords(objectArray0);
      assertEquals("\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("<string-builder></string-builder>");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList0.add("<string-builder></string-builder>");
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat0);
      cSVPrinter0.flush();
      cSVPrinter1.close();
      cSVPrinter0.printRecords((Iterable<?>) arrayList1);
      cSVPrinter0.printComment("<string-builder></string-builder>");
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter1));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("<string-builder></string-builder>");
      Object[] objectArray0 = new Object[6];
      Object[] objectArray1 = new Object[1];
      stringBuilder0.reverse();
      CSVFormat cSVFormat0 = CSVFormat.newFormat('`');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringBuilder0);
      cSVPrinter0.printComment("<string-builder></string-builder>");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(">Q}iL&Pc!a");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat1);
      cSVPrinter0.close();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      Object object1 = new Object();
      cSVPrinter0.printRecord(objectArray0);
      assertEquals("\">Q}iL&Pc!a\",>Q}iL&Pc!a,>Q}iL&Pc!a\r\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EvoSuiteXStream.fromString("<string-builder></string-builder>");
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('a');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat3 = cSVFormat0.withDelimiter('N');
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('N');
      CSVFormat cSVFormat5 = CSVFormat.DEFAULT;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("/B");
      MockPrintStream mockPrintStream0 = new MockPrintStream("/B");
      CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat1);
      cSVPrinter0.close();
      Quote quote0 = Quote.MINIMAL;
      cSVFormat0.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter1 = cSVFormat4.print(stringBuilder0);
      cSVPrinter0.printComment("<string-builder></string-builder>");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVPrinter0;
      cSVPrinter0.printRecord(objectArray0);
      Character character0 = new Character('N');
      CSVFormat cSVFormat6 = cSVFormat5.withCommentStart(character0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintStream0, cSVFormat6);
      cSVPrinter2.printComment("/B");
      assertFalse(cSVPrinter2.equals((Object)cSVPrinter1));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("<string-builder></string-builder>");
      arrayList0.add("<string-builder></string-builder>");
      arrayList0.add("O3J?S|!9>II}");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter0.getOut();
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Boolean boolean0 = new Boolean("<string-builder></string-builder>");
      arrayList0.add(" ON ");
      arrayList0.add("A");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringBuilder0);
      arrayList0.add((String) null);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      assertEquals(3, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("<string-builder></string-builder>");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[4];
      Object object1 = new Object();
      cSVPrinter0.printRecord(objectArray0);
      assertEquals("\"<string-builder></string-builder>\",<string-builder></string-builder>,<string-builder></string-builder>,<string-builder></string-builder>\r\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Object[] objectArray0 = new Object[6];
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("h`IY)z.;McK`|");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("h`IY)z.;McK`|");
      Object object0 = new Object();
      cSVPrinter0.printRecords(objectArray0);
      assertEquals("h`IY)z.;McK`|\r\nh`IY)z.;McK`|\r\nh`IY)z.;McK`|\r\nh`IY)z.;McK`|\r\nh`IY)z.;McK`|\r\nh`IY)z.;McK`|\r\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      cSVFormat1.withCommentStart('I');
      CSVPrinter cSVPrinter1 = cSVFormat1.print(stringBuilder0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat1;
      cSVPrinter0.printRecords(objectArray0);
      assertFalse(cSVPrinter0.equals((Object)cSVPrinter1));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Object[] objectArray0 = new Object[3];
      cSVPrinter0.printRecord(objectArray0);
      assertEquals("\"\"\t\t\r\n", stringBuilder0.toString());
  }
}
