/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 20:56:48 GMT 2023
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang3.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.testcarver.testcase.EvoSuiteXStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LocaleUtils_ESTest extends LocaleUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("us_+ZH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: us_+ZH
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("us_ENa");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: us_ENa
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("fr__P");
      assertEquals("fr__P", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("us_EN");
      assertEquals("us", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("us_EN_a");
      assertEquals("us", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("us_E-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: us_E-
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = (Locale)EvoSuiteXStream.fromString("<locale>en</locale>");
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertTrue(boolean0);
      
      LocaleUtils.countriesByLanguage("no");
      LocaleUtils.countriesByLanguage("*!y1F5V");
      Locale locale1 = new Locale("no", "wL");
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0, locale1);
      assertTrue(list0.contains(locale1));
      assertEquals(2, list0.size());
      
      List<Locale> list1 = LocaleUtils.languagesByCountry("JP");
      assertFalse(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = (Locale)EvoSuiteXStream.fromString("<locale>en</locale>");
      LocaleUtils.isAvailableLocale(locale0);
      LocaleUtils.languagesByCountry("<locale>en</locale>");
      LocaleUtils.languagesByCountry("pl");
      LocaleUtils.languagesByCountry("GB");
      LocaleUtils.countriesByLanguage("c.D.m*'AD'Apdc`nu");
      LocaleUtils.countriesByLanguage("ja");
      LocaleUtils.availableLocaleList();
      LocaleUtils.countriesByLanguage("Invalid locale format: ");
      LocaleUtils.countriesByLanguage("Must have underscore after the country if starts with underscore and is at least 5 chars");
      Locale locale1 = new Locale("th", "7rofNT@R=:Ma*0B3[");
      LocaleUtils.localeLookupList(locale0, locale1);
      List<Locale> list0 = LocaleUtils.languagesByCountry("");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      Locale locale1 = Locale.ROOT;
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0, locale1);
      assertEquals(3, list0.size());
      assertTrue(list0.contains(locale1));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Set<Locale> set0 = LocaleUtils.availableLocaleSet();
      // Undeclared exception!
      try { 
        Locale.lookup((List<Locale.LanguageRange>) null, set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = (Locale)EvoSuiteXStream.fromString("<locale>en</locale>");
      LocaleUtils.isAvailableLocale(locale0);
      List<Locale> list0 = LocaleUtils.localeLookupList((Locale) null);
      EvoSuiteXStream.fromString("<locale>qq</locale>");
      EvoSuiteXStream.fromString("<locale>en</locale>");
      LocaleUtils.countriesByLanguage("<locale>qq</locale>");
      LocaleUtils.countriesByLanguage("iCL+g>uqi*er|#Ky");
      LocaleUtils.countriesByLanguage("Z|Wc(Xq?@!2M};6CB");
      LocaleUtils.countriesByLanguage("da");
      LocaleUtils.countriesByLanguage("da");
      List<Locale> list1 = LocaleUtils.countriesByLanguage("Y[Dl,)$FTj");
      assertTrue(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("u4=_ENa");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: u4=_ENa
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("zet");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: zet
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      List<Locale> list0 = LocaleUtils.languagesByCountry("BE");
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void testLanguagesByCountrytestCountriesByLanguage_14()  throws Throwable  {
      Locale locale0 = (Locale)EvoSuiteXStream.fromString("<locale>en</locale>");
      LocaleUtils.isAvailableLocale(locale0);
      LocaleUtils.languagesByCountry((String) null);
      LocaleUtils.languagesByCountry((String) null);
      LocaleUtils.languagesByCountry("GB");
      LocaleUtils.languagesByCountry("GB");
      LocaleUtils.languagesByCountry("ZZ");
      LocaleUtils.languagesByCountry("ZZ");
      LocaleUtils.languagesByCountry("CH");
      LocaleUtils.languagesByCountry("CH");
      LocaleUtils.SyncAvoid localeUtils_SyncAvoid0 = new LocaleUtils.SyncAvoid();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("org.apache.commons.lang3.LocaleUtils");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: org.apache.commons.lang3.LocaleUtils
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: B
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EvoSuiteXStream.fromString("<locale>en</locale>");
      LocaleUtils.isAvailableLocale((Locale) null);
      LocaleUtils.languagesByCountry("Z==w*3rcbi|");
      LocaleUtils.languagesByCountry("<locale>en</locale>");
      LocaleUtils.languagesByCountry("GB");
      LocaleUtils.languagesByCountry("JAVA_1_5");
      LocaleUtils.languagesByCountry("Z==w*3rcbi|");
      LocaleUtils.languagesByCountry((String) null);
      LocaleUtils.languagesByCountry("CH");
      LocaleUtils.languagesByCountry("ZZ");
      LocaleUtils.languagesByCountry((String) null);
      boolean boolean0 = LocaleUtils.isAvailableLocale((Locale) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      LocaleUtils.isAvailableLocale(locale0);
      Locale.getISOLanguages();
      Locale locale1 = (Locale)EvoSuiteXStream.fromString("<locale>en</locale>");
      List<Locale> list0 = new LinkedList<Locale>();
      LocaleUtils.localeLookupList(locale1);
      LocaleUtils.languagesByCountry("<locale>en</locale>");
      LocaleUtils.languagesByCountry("");
      LocaleUtils.languagesByCountry("~(Q");
      List<Locale> list1 = LocaleUtils.languagesByCountry("TH");
      assertFalse(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = LocaleUtils.isAvailableLocale((Locale) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      List<Locale> list0 = LocaleUtils.languagesByCountry("gE");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocaleUtils.languagesByCountry("8E");
      List<Locale> list0 = LocaleUtils.countriesByLanguage("mt");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = (Locale)EvoSuiteXStream.fromString("<locale>en</locale>");
      LocaleUtils.isAvailableLocale(locale0);
      LocaleUtils.countriesByLanguage("<locale>en</locale>");
      LocaleUtils.countriesByLanguage((String) null);
      LocaleUtils.countriesByLanguage("");
      LocaleUtils.countriesByLanguage("<locale>en</locale>");
      LocaleUtils.countriesByLanguage("zz");
      LocaleUtils.countriesByLanguage("<locale>en</locale>");
      LocaleUtils.countriesByLanguage("it");
      List<Locale> list0 = LocaleUtils.countriesByLanguage("|uhruMUTzx_je[U:");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      List<Locale> list0 = LocaleUtils.countriesByLanguage("d1v?lG5P]=");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      List<Locale> list0 = LocaleUtils.countriesByLanguage("sr");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      List<Locale> list0 = LocaleUtils.countriesByLanguage((String) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      List<Locale> list0 = LocaleUtils.languagesByCountry("us_EN-a");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      List<Locale> list0 = LocaleUtils.languagesByCountry((String) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void testConstructor_28()  throws Throwable  {
      Locale locale0 = (Locale)EvoSuiteXStream.fromString("<locale>en</locale>");
      LocaleUtils.isAvailableLocale(locale0);
      LocaleUtils localeUtils0 = new LocaleUtils();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0, locale0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = new Locale("us_EN-a", "us_EN-a", "us_EN-a");
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0, locale0);
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      List<Locale> list0 = LocaleUtils.localeLookupList((Locale) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0, locale0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("no");
      assertEquals("", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("us_EN-a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: us_EN-a
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      List<Locale> list0 = LocaleUtils.availableLocaleList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("ID");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ID
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale((String) null);
      assertNull(locale0);
  }
}
