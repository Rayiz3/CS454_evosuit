/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 10:49:21 GMT 2023
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thoughtworks.xstream.io.StreamException;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Consumer;
import org.apache.commons.csv.CSVRecord;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.testcarver.testcase.EvoSuiteXStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVRecord_ESTest extends CSVRecord_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[16];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-2084322362));
      hashMap0.put("{P#\"z+Hpa2)KIm", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "{P#\"z+Hpa2)KIm", 1655L);
      boolean boolean0 = cSVRecord0.isSet("{P#\"z+Hpa2)KIm");
      assertTrue(boolean0);
      assertEquals(1655L, cSVRecord0.getRecordNumber());
      assertEquals("[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[0];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(213);
      hashMap0.put("M,2yNdOm)/];dBgMjWB", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 1666L);
      boolean boolean0 = cSVRecord0.isSet("M,2yNdOm)/];dBgMjWB");
      assertFalse(boolean0);
      
      cSVRecord0.isMapped("}*/t{Wzg93>#J{6u");
      cSVRecord0.isMapped("");
      assertEquals(1666L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[16];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("{P#\"z+Hpa2)KIm", (Integer) null);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "{P#\"z+Hpa2)KIm", 2417L);
      // Undeclared exception!
      try { 
        cSVRecord0.isSet("{P#\"z+Hpa2)KIm");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(178);
      hashMap0.put("M,2yNdOm)/];dBgMjWB", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "}*/t{Wzg93>#J{6u", 178);
      boolean boolean0 = cSVRecord0.isSet("M,2yNdOm)/];dBgMjWB");
      assertFalse(boolean0);
      assertEquals(178L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[7];
      hashMap0.put("No header mapping was specified, the record values can't be accessed by name", (Integer) null);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "No header mapping was specified, the record values can't be accessed by name", 3114L);
      boolean boolean0 = cSVRecord0.isMapped("No header mapping was specified, the record values can't be accessed by name");
      assertEquals(3114L, cSVRecord0.getRecordNumber());
      assertTrue(boolean0);
      assertEquals(7, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String string0 = "FLOAT8";
      Integer integer0 = new Integer(1578);
      hashMap0.put("FLOAT8", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "FLOAT8", (-1172L));
      // Undeclared exception!
      try { 
        cSVRecord0.get("FLOAT8");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1578
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "{P#\"z+Hpa2)KIm", 1553L);
      boolean boolean0 = cSVRecord0.isMapped("{P#\"z+Hpa2)KIm");
      assertEquals(1553L, cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, (Map<String, Integer>) null, "B! *d", 299L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertTrue(boolean0);
      assertEquals(299L, cSVRecord0.getRecordNumber());
      assertEquals("[]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[31];
      String string0 = ")P5v!m+WM0{01Gg";
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, ")P5v!m+WM0{01Gg", 0L);
      // Undeclared exception!
      try { 
        cSVRecord0.get(")P5v!m+WM0{01Gg");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No header mapping was specified, the record values can't be accessed by name
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[0];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "fourth", 2016L);
      cSVRecord0.iterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cSVRecord0.forEach(consumer0);
      CSVRecord cSVRecord1 = new CSVRecord(stringArray0, hashMap0, "No header mapping was specified, the record values can't be accessed by name", 488L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertTrue(boolean0);
      
      cSVRecord1.get("fourth");
      cSVRecord1.toString();
      cSVRecord0.size();
      String[] stringArray1 = cSVRecord0.values();
      assertEquals(2016L, cSVRecord0.getRecordNumber());
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "{P#\"z+Hpa2)KIm", 1658L);
      boolean boolean0 = cSVRecord0.isSet("{P#\"z+Hpa2)KIm");
      assertFalse(boolean0);
      assertEquals(1658L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[0];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(377);
      hashMap0.put("org.apache.commons.csv.CSVRecord", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "org.apache.commons.csv.CSVRecord", 16L);
      cSVRecord0.iterator();
      cSVRecord0.isConsistent();
      cSVRecord0.isConsistent();
      // Undeclared exception!
      try { 
        cSVRecord0.get(377);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 377
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[0];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "khjtg", 1687L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertTrue(boolean0);
      
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals(1687L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "", 1658L);
      assertEquals("[]", cSVRecord0.toString());
      assertEquals(1658L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[0];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, (String) null, 504L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertTrue(boolean0);
      
      cSVRecord0.get("first");
      cSVRecord0.toString();
      cSVRecord0.size();
      assertEquals(504L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "{P#\"z+Hpa2)KIm", 1664L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertEquals(1664L, cSVRecord0.getRecordNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[0];
      Integer integer0 = new Integer(79);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "TABLE_CLASS", 960L);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>(hashMap0);
      CSVRecord cSVRecord1 = new CSVRecord(stringArray0, hashMap0, "No header mapping was specified, the record values can't be accessed by name", (-4769L));
      boolean boolean0 = cSVRecord1.isConsistent();
      cSVRecord1.getComment();
      boolean boolean1 = cSVRecord1.isMapped(" Fa[Z7uc");
      assertFalse(boolean1 == boolean0);
      assertEquals((-4769L), cSVRecord1.getRecordNumber());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[5];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[0], 3114L);
      assertEquals(3114L, cSVRecord0.getRecordNumber());
      assertEquals("[null, null, null, null, null]", cSVRecord0.toString());
      
      boolean boolean0 = cSVRecord0.isMapped(stringArray0[2]);
      assertFalse(boolean0);
      assertEquals(3114L, cSVRecord0.getRecordNumber());
      assertEquals(5, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "{P#\"z+Hpa2)KIm", 1658L);
      cSVRecord0.get("{P#\"z+Hpa2)KIm");
      assertEquals(1658L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[1] = "";
      stringArray0[2] = "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[3] = "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[4] = "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[5] = "IS";
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "XmU|0j", 0L);
      cSVRecord0.isConsistent();
      cSVRecord0.isConsistent();
      // Undeclared exception!
      try { 
        EvoSuiteXStream.fromString("#^['o*w'p>s ~");
        fail("Expecting exception: StreamException");
      
      } catch(StreamException e) {
         //
         // 
         //
         verifyException("com.thoughtworks.xstream.io.xml.XppReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[7];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[0], 3114L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertEquals(3114L, cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[5];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[0], 3114L);
      cSVRecord0.spliterator();
      boolean boolean0 = cSVRecord0.isMapped(stringArray0[2]);
      assertEquals(3114L, cSVRecord0.getRecordNumber());
      assertFalse(cSVRecord0.isConsistent());
      assertFalse(boolean0);
  }
}
