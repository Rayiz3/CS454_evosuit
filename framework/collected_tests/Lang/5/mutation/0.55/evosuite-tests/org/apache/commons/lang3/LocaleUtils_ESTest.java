/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 21:13:30 GMT 2023
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang3.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.testcarver.testcase.EvoSuiteXStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LocaleUtils_ESTest extends LocaleUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("us_ENE_a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: us_ENE_a
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("us_EN_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: us_EN_
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("fr__POSIX");
      assertEquals("fr", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("us_eN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: us_eN
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("us_En");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: us_En
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("lbi");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: lbi
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      LocaleUtils.isAvailableLocale(locale0);
      Locale locale1 = LocaleUtils.toLocale("us_EN");
      LocaleUtils.languagesByCountry("&l3` LAk5#RWnbJ4t<");
      LocaleUtils.languagesByCountry("");
      LocaleUtils.countriesByLanguage("JP");
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale1);
      LocaleUtils.countriesByLanguage("&l3` LAk5#RWnbJ4t<");
      LocaleUtils.countriesByLanguage("@B3PA*pi$'D;G|Sk42}");
      List<Locale> list0 = LocaleUtils.countriesByLanguage("tm<98o");
      LocaleUtils.SyncAvoid localeUtils_SyncAvoid0 = new LocaleUtils.SyncAvoid();
      Locale locale2 = Locale.GERMAN;
      LocaleUtils.localeLookupList(locale2, locale2);
      List<Locale> list1 = LocaleUtils.languagesByCountry("JP");
      assertFalse(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertTrue(boolean0);
      
      Locale locale1 = LocaleUtils.toLocale("us_EN");
      LocaleUtils.languagesByCountry("&l3` LAk5#RWnbJ4t<");
      LocaleUtils.languagesByCountry("");
      LocaleUtils.languagesByCountry("6.0");
      LocaleUtils.languagesByCountry("TH");
      LocaleUtils.languagesByCountry("&l3` LAk5#RWnbJ4t<");
      LocaleUtils.languagesByCountry((String) null);
      List<Locale> list0 = LocaleUtils.localeLookupList(locale1, locale1);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = (Locale)EvoSuiteXStream.fromString("<locale>en</locale>");
      LocaleUtils.isAvailableLocale(locale0);
      LocaleUtils.languagesByCountry("<locale>en</locale>");
      LocaleUtils.languagesByCountry("z&pu{");
      LocaleUtils.languagesByCountry("YU5PQZz2V<;u7_Gwc5u");
      LocaleUtils.countriesByLanguage("mt");
      LocaleUtils.countriesByLanguage("z&pu{");
      LocaleUtils.countriesByLanguage("ja");
      List<Locale> list0 = LocaleUtils.countriesByLanguage(".u}F1q(.!{YP<T,bB");
      LocaleUtils.countriesByLanguage("<locale>en</locale>");
      LocaleUtils.localeLookupList(locale0, locale0);
      List<Locale> list1 = LocaleUtils.languagesByCountry("us_EN_a");
      assertNotSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocaleUtils.languagesByCountry("<locale>en</locale>");
      LocaleUtils.languagesByCountry("GB");
      LocaleUtils.languagesByCountry("ZZ");
      List<Locale> list0 = LocaleUtils.countriesByLanguage("th");
      LocaleUtils.countriesByLanguage("mk");
      LocaleUtils.countriesByLanguage("fr");
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      List<Locale> list1 = LocaleUtils.languagesByCountry("th");
      assertFalse(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = LocaleUtils.isAvailableLocale((Locale) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      Locale locale1 = Locale.CHINESE;
      List<Locale> list0 = LocaleUtils.localeLookupList(locale1, locale0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("dNwh~m/X{tf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: dNwh~m/X{tf
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = (Locale)EvoSuiteXStream.fromString("<locale>en</locale>");
      LocaleUtils.isAvailableLocale(locale0);
      LocaleUtils.isAvailableLocale(locale0);
      LocaleUtils.countriesByLanguage("jdc=b`|<&7!-dq,wCoq");
      LocaleUtils.countriesByLanguage("jdc=b`|<&7!-dq,wCoq");
      LocaleUtils.countriesByLanguage("");
      LocaleUtils.countriesByLanguage("");
      LocaleUtils.countriesByLanguage("");
      LocaleUtils.countriesByLanguage("Invalid locale format: ");
      LocaleUtils.countriesByLanguage("jdc=b`|<&7!-dq,wCoq");
      List<Locale> list0 = LocaleUtils.countriesByLanguage("ro");
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocaleUtils.SyncAvoid localeUtils_SyncAvoid0 = new LocaleUtils.SyncAvoid();
      Locale locale0 = Locale.CANADA_FRENCH;
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0, locale0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      List<Locale> list0 = LocaleUtils.languagesByCountry("ME");
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EvoSuiteXStream.fromString("<locale>en</locale>");
      Locale locale0 = Locale.GERMANY;
      LocaleUtils.isAvailableLocale(locale0);
      LocaleUtils.languagesByCountry("<locale>en</locale>");
      LocaleUtils.languagesByCountry("BE");
      List<Locale> list0 = LocaleUtils.languagesByCountry("GB");
      LocaleUtils.languagesByCountry("Invalid locale format: ");
      LocaleUtils.languagesByCountry("SG");
      LocaleUtils.languagesByCountry((String) null);
      LocaleUtils.languagesByCountry("JAVA_1_1");
      List<Locale> list1 = LocaleUtils.languagesByCountry((String) null);
      assertFalse(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("us_EN");
      assertEquals("us", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("usEN_a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: usEN_a
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = (Locale)EvoSuiteXStream.fromString("<locale>en</locale>");
      LocaleUtils.isAvailableLocale(locale0);
      LocaleUtils.countriesByLanguage((String) null);
      LocaleUtils.languagesByCountry(":;4G(9<Y");
      LocaleUtils.languagesByCountry((String) null);
      List<Locale> list0 = LocaleUtils.languagesByCountry("<locale>en</locale>");
      LocaleUtils.languagesByCountry("ZZ");
      LocaleUtils.languagesByCountry("z)M\fMS=2Cqbhiq;/}^");
      LocaleUtils.languagesByCountry("l$m3gdUn~ZXACdc(sV");
      List<Locale> list1 = LocaleUtils.languagesByCountry((String) null);
      assertTrue(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      List<Locale> list0 = LocaleUtils.languagesByCountry("S^rhYSz}.;ek]N@'N'");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      List<Locale> list0 = LocaleUtils.countriesByLanguage((String) null);
      assertEquals(0, list0.size());
      
      LocaleUtils.countriesByLanguage("vi");
      LocaleUtils.SyncAvoid localeUtils_SyncAvoid0 = new LocaleUtils.SyncAvoid();
      Locale locale0 = Locale.CANADA_FRENCH;
      List<Locale> list1 = LocaleUtils.localeLookupList(locale0, locale0);
      assertEquals(2, list1.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = (Locale)EvoSuiteXStream.fromString("<locale>en</locale>");
      LocaleUtils.isAvailableLocale(locale0);
      LocaleUtils.languagesByCountry((String) null);
      LocaleUtils.countriesByLanguage("<locale>en</locale>");
      LocaleUtils.countriesByLanguage("");
      LocaleUtils.countriesByLanguage("F");
      List<Locale> list0 = LocaleUtils.countriesByLanguage("CN");
      LocaleUtils.countriesByLanguage("},QDx");
      LocaleUtils.countriesByLanguage("7nZbYi#-T:4|l0x/C");
      List<Locale> list1 = LocaleUtils.countriesByLanguage("<locale>en</locale>");
      assertTrue(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Set<Locale> set0 = LocaleUtils.availableLocaleSet();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      List<Locale> list0 = LocaleUtils.countriesByLanguage("org.apache.commons.lang3.LocaleUtils$SyncAvoid");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      List<Locale> list0 = LocaleUtils.countriesByLanguage("S^rhYSz}.;ek]N@'N'");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      List<Locale> list0 = LocaleUtils.languagesByCountry("'U]`f#n|^~=5y");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      List<Locale> list0 = LocaleUtils.languagesByCountry((String) null);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocaleUtils localeUtils0 = new LocaleUtils();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Locale locale0 = Locale.US;
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0, locale0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("us_EN_a");
      assertEquals("a", locale0.getVariant());
      
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0, locale0);
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      List<Locale> list0 = LocaleUtils.localeLookupList((Locale) null, (Locale) null);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0, locale0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale("hi");
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("Invalid locale format: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: Invalid locale format: 
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      List<Locale> list0 = LocaleUtils.availableLocaleList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocaleUtils.toLocale("P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: P
         //
         verifyException("org.apache.commons.lang3.LocaleUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale((String) null);
      assertNull(locale0);
  }
}
