/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 14:14:53 GMT 2023
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVFormat_ESTest extends CSVFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) cSVFormat0;
      objectArray0[5] = (Object) cSVFormat0;
      objectArray0[6] = (Object) cSVFormat0;
      objectArray0[7] = (Object) cSVFormat0;
      objectArray0[8] = (Object) cSVFormat0;
      cSVFormat0.format(objectArray0);
      CSVFormat cSVFormat1 = CSVFormat.newFormat(':');
      cSVFormat1.format(objectArray0);
      boolean boolean0 = cSVFormat0.equals(objectArray0[5]);
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('f');
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("+");
      boolean boolean1 = cSVFormat0.equals(cSVFormat3);
      assertFalse(boolean1 == boolean0);
      
      CSVFormat cSVFormat4 = cSVFormat2.withCommentMarker(',');
      cSVFormat0.equals("+");
      CSVFormat cSVFormat5 = cSVFormat4.withDelimiter('f');
      assertEquals("f", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat5.equals((Object)cSVFormat4));
      assertEquals('f', cSVFormat5.getDelimiter());
      assertFalse(cSVFormat5.isNullStringSet());
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertEquals(',', (char)cSVFormat5.getCommentMarker());
      
      Character character0 = Character.valueOf(']');
      CSVFormat cSVFormat6 = cSVFormat1.withQuote(character0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat6.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(':', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat6.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("`ZTb=S8kJU|");
      cSVFormat0.equals(cSVFormat1);
      CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
      cSVFormat2.hashCode();
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals("`ZTb=S8kJU|", cSVFormat2.getNullString());
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      String string0 = cSVFormat1.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false Header:[null]", string0);
      
      cSVFormat0.format(stringArray0);
      Object object0 = new Object();
      cSVFormat0.equals(object0);
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator('$');
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('{');
      boolean boolean0 = cSVFormat2.equals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false Header:[null]");
      assertFalse(boolean0);
      
      Character character0 = new Character('L');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('L');
      CSVFormat cSVFormat5 = cSVFormat4.withDelimiter('$');
      assertEquals('$', cSVFormat5.getDelimiter());
      assertEquals("$", cSVFormat5.getRecordSeparator());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("");
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertFalse(boolean0);
      
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter(']');
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals(']', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('5');
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals('5', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat1.format(stringArray0);
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('5', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("NL*:?&~qq.?P`P+=");
      cSVFormat1.hashCode();
      assertEquals("\n", cSVFormat1.getRecordSeparator());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreSurroundingSpaces(true);
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      boolean boolean0 = cSVFormat0.equals(cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Character.valueOf('y');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.getIgnoreSurroundingSpaces();
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('y');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('y');
      cSVFormat1.getDelimiter();
      cSVFormat2.getQuoteCharacter();
      assertEquals('y', (char)cSVFormat2.getEscapeCharacter());
      
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator(',');
      cSVFormat3.getIgnoreSurroundingSpaces();
      cSVFormat3.getIgnoreEmptyLines();
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
      assertEquals(",", cSVFormat3.getRecordSeparator());
      
      CSVFormat cSVFormat4 = CSVFormat.newFormat(',');
      CSVFormat cSVFormat5 = CSVFormat.EXCEL;
      boolean boolean0 = cSVFormat4.equals(cSVFormat5);
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(boolean0);
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat5.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('8');
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      
      CSVFormat cSVFormat3 = CSVFormat.newFormat('8');
      boolean boolean0 = cSVFormat3.equals(cSVFormat1);
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertEquals('8', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('8', cSVFormat3.getDelimiter());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.withCommentMarker('@');
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(boolean0);
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object object0 = new Object();
      cSVFormat0.equals(object0);
      CSVFormat cSVFormat1 = CSVFormat.newFormat('k');
      assertEquals('k', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      
      CSVFormat cSVFormat2 = cSVFormat0.withNullString(":21EpWjS4zaVXJz");
      cSVFormat2.equals(cSVFormat0);
      Character character0 = new Character('d');
      CSVFormat cSVFormat3 = cSVFormat0.withQuote(character0);
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Character.valueOf('y');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "j $n%";
      cSVFormat0.getIgnoreSurroundingSpaces();
      cSVFormat0.getIgnoreEmptyLines();
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("j $n%");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
      boolean boolean0 = cSVFormat1.equals(cSVFormat2);
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(boolean0);
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('S');
      cSVFormat0.withCommentMarker('S');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('#');
      cSVFormat2.getDelimiter();
      cSVFormat2.getEscapeCharacter();
      cSVFormat0.getDelimiter();
      cSVFormat2.getEscapeCharacter();
      cSVFormat0.getQuoteCharacter();
      cSVFormat2.getIgnoreSurroundingSpaces();
      CSVFormat cSVFormat3 = cSVFormat0.withNullString("");
      cSVFormat3.getIgnoreEmptyLines();
      cSVFormat1.hashCode();
      String string0 = cSVFormat3.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> NullString=<> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
      
      CSVFormat cSVFormat4 = cSVFormat2.withDelimiter(',');
      assertEquals('#', (char)cSVFormat4.getCommentMarker());
      assertEquals(',', cSVFormat4.getDelimiter());
      
      cSVFormat3.withSkipHeaderRecord(false);
      CSVFormat cSVFormat5 = CSVFormat.EXCEL;
      CSVFormat cSVFormat6 = cSVFormat5.withAllowMissingColumnNames(true);
      assertTrue(cSVFormat6.getAllowMissingColumnNames());
      
      boolean boolean0 = cSVFormat0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Character.valueOf('D');
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.getDelimiter();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat0.DEFAULT.withIgnoreSurroundingSpaces(false);
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      
      cSVFormat0.getQuoteCharacter();
      cSVFormat1.getIgnoreSurroundingSpaces();
      cSVFormat1.getIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat1.withNullString("'c1");
      Object object0 = new Object();
      boolean boolean0 = cSVFormat3.equals(object0);
      assertFalse(boolean0);
      
      String string0 = cSVFormat3.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> NullString=<'c1> RecordSeparator=<\r\n> SkipHeaderRecord:false", string0);
      
      CSVFormat cSVFormat4 = cSVFormat1.withDelimiter(',');
      assertEquals(',', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertTrue(cSVFormat4.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Object object0 = new Object();
      CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      boolean boolean0 = cSVFormat1.equals(cSVFormat0);
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(boolean0);
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(':', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      char char0 = 'F';
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('F');
      Character character0 = Character.valueOf('F');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      cSVFormat1.equals(cSVFormat2);
      // Undeclared exception!
      try { 
        cSVFormat2.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('F')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\\');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
      cSVFormat1.getIgnoreSurroundingSpaces();
      cSVFormat0.getIgnoreEmptyLines();
      cSVFormat1.hashCode();
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<\\> SkipHeaderRecord:false", string0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('@');
      cSVFormat2.TDF.hashCode();
      assertEquals('@', cSVFormat2.getDelimiter());
      
      CSVFormat cSVFormat3 = CSVFormat.MYSQL;
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(false);
      cSVFormat4.equals(cSVFormat1);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      
      CSVFormat cSVFormat5 = cSVFormat3.withCommentMarker((Character) null);
      assertTrue(cSVFormat5.equals((Object)cSVFormat3));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
      cSVFormat0.hashCode();
      assertEquals(':', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('5');
      String[] stringArray0 = new String[0];
      cSVFormat0.withHeader(stringArray0);
      String string0 = cSVFormat0.toString();
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals("Delimiter=<5> SkipHeaderRecord:false", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('s');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('c');
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker(']');
      cSVFormat1.getDelimiter();
      CSVFormat cSVFormat4 = CSVFormat.RFC4180;
      cSVFormat4.getEscapeCharacter();
      cSVFormat3.getQuoteCharacter();
      cSVFormat4.getCommentMarker();
      CSVFormat cSVFormat5 = cSVFormat1.withAllowMissingColumnNames(false);
      cSVFormat2.getIgnoreSurroundingSpaces();
      assertEquals('c', (char)cSVFormat2.getCommentMarker());
      
      cSVFormat5.getIgnoreEmptyLines();
      Character character0 = new Character(']');
      CSVFormat cSVFormat6 = CSVFormat.RFC4180;
      cSVFormat0.equals(cSVFormat5);
      Character character1 = new Character('c');
      Character.valueOf('i');
      cSVFormat1.withAllowMissingColumnNames(false);
      assertEquals('s', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      boolean boolean0 = cSVFormat0.equals(cSVFormat0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.TDF.withSkipHeaderRecord(true);
      Character character0 = new Character('=');
      cSVFormat0.withCommentMarker(character0);
      cSVFormat1.hashCode();
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('6');
      assertEquals("6", cSVFormat1.getRecordSeparator());
      
      Character character0 = new Character('6');
      CSVFormat cSVFormat2 = cSVFormat0.withQuote(character0);
      boolean boolean0 = cSVFormat0.equals(cSVFormat2);
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(boolean0);
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals(',', cSVFormat2.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat0.EXCEL.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('`');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('!');
      CSVFormat cSVFormat3 = cSVFormat0.RFC4180.withCommentMarker('2');
      cSVFormat1.getDelimiter();
      cSVFormat0.getEscapeCharacter();
      cSVFormat2.getIgnoreSurroundingSpaces();
      cSVFormat3.getIgnoreEmptyLines();
      String string0 = cSVFormat2.toString();
      assertEquals("Delimiter=<,> Escape=<!> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
      
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter(',');
      cSVFormat1.equals(cSVFormat3);
      CSVFormat cSVFormat5 = cSVFormat3.withDelimiter('.');
      Character character0 = Character.valueOf('$');
      cSVFormat3.withCommentMarker(character0);
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertTrue(cSVFormat3.equals((Object)cSVFormat4));
      
      cSVFormat1.withQuote((Character) null);
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('-');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(boolean0);
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullStringSet());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker('\"');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('\"')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      // Undeclared exception!
      try { 
        cSVFormat0.withEscape('\r');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character cannot be a line break
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('b');
      CSVFormat cSVFormat2 = cSVFormat1.RFC4180.withSkipHeaderRecord(true);
      assertTrue(cSVFormat2.getSkipHeaderRecord());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(boolean0);
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('b', (char)cSVFormat1.getEscapeCharacter());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('^');
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker('o');
      cSVFormat1.getQuoteCharacter();
      cSVFormat2.getCommentMarker();
      CSVFormat cSVFormat4 = cSVFormat2.withAllowMissingColumnNames(false);
      cSVFormat4.getIgnoreSurroundingSpaces();
      assertTrue(cSVFormat4.equals((Object)cSVFormat2));
      assertEquals('^', (char)cSVFormat4.getEscapeCharacter());
      
      cSVFormat3.hashCode();
      assertEquals('\t', cSVFormat3.getDelimiter());
      
      Character character0 = Character.valueOf('^');
      CSVFormat cSVFormat5 = cSVFormat1.withQuote(character0);
      assertFalse(cSVFormat5.isNullStringSet());
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.getIgnoreSurroundingSpaces();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertFalse(boolean0);
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      boolean boolean0 = cSVFormat0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker(':');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same (':')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('!');
      cSVFormat1.equals(cSVFormat0);
      Object object0 = new Object();
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat1.hashCode();
      boolean boolean0 = cSVFormat1.equals(cSVFormat0);
      assertFalse(boolean0);
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
      CSVFormat cSVFormat1 = CSVFormat.newFormat(':');
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertTrue(boolean0);
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(':', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
      boolean boolean0 = cSVFormat1.equals(cSVFormat0);
      assertFalse(boolean0);
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('4', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Object object0 = new Object();
      boolean boolean0 = cSVFormat0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      // Undeclared exception!
      try { 
        cSVFormat0.DEFAULT.parse((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('B');
      cSVFormat1.hashCode();
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('#');
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('#');
      cSVFormat3.getDelimiter();
      cSVFormat3.getEscapeCharacter();
      Character character0 = cSVFormat1.getQuoteCharacter();
      assertEquals('\"', (char)character0);
      
      cSVFormat3.getCommentMarker();
      CSVFormat cSVFormat4 = cSVFormat1.withAllowMissingColumnNames(false);
      assertTrue(cSVFormat4.equals((Object)cSVFormat1));
      
      cSVFormat2.getIgnoreSurroundingSpaces();
      cSVFormat3.getIgnoreEmptyLines();
      cSVFormat2.hashCode();
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('!');
      CSVFormat cSVFormat3 = cSVFormat2.withHeader((String[]) null);
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('f');
      cSVFormat4.getDelimiter();
      CSVFormat cSVFormat5 = cSVFormat3.withHeader((String[]) null);
      Character character0 = Character.valueOf('3');
      cSVFormat0.EXCEL.withQuote(character0);
      cSVFormat5.MYSQL.withIgnoreEmptyLines(true);
      cSVFormat5.getEscapeCharacter();
      CSVFormat cSVFormat6 = cSVFormat5.withIgnoreSurroundingSpaces(true);
      cSVFormat3.getQuoteCharacter();
      CSVFormat cSVFormat7 = cSVFormat0.withQuote('\\');
      cSVFormat7.getCommentMarker();
      CSVFormat cSVFormat8 = cSVFormat1.withAllowMissingColumnNames(true);
      cSVFormat8.RFC4180.withAllowMissingColumnNames(true);
      cSVFormat8.getIgnoreSurroundingSpaces();
      cSVFormat7.getIgnoreEmptyLines();
      assertEquals('\\', (char)cSVFormat7.getQuoteCharacter());
      
      CSVFormat cSVFormat9 = cSVFormat4.withRecordSeparator('\\');
      String string0 = cSVFormat9.toString();
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertEquals("Delimiter=<,> Escape=<!> QuoteChar=<\"> CommentStart=<f> RecordSeparator=<\\> EmptyLines:ignored SkipHeaderRecord:false", string0);
      assertFalse(cSVFormat3.equals((Object)cSVFormat6));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('#');
      assertEquals('#', (char)cSVFormat2.getCommentMarker());
      
      char char0 = cSVFormat1.getDelimiter();
      assertEquals(',', char0);
      
      cSVFormat0.getEscapeCharacter();
      Character character0 = cSVFormat1.getQuoteCharacter();
      assertEquals('\"', (char)character0);
      
      cSVFormat0.getCommentMarker();
      CSVFormat cSVFormat3 = cSVFormat1.withAllowMissingColumnNames(false);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat4 = cSVFormat3.withQuoteMode(quoteMode0);
      cSVFormat4.getIgnoreSurroundingSpaces();
      cSVFormat1.getIgnoreEmptyLines();
      cSVFormat4.hashCode();
      assertEquals('\\', (char)cSVFormat4.getEscapeCharacter());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.hashCode();
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedWriter pipedWriter0 = new PipedWriter();
      cSVFormat0.TDF.print(pipedWriter0);
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('#');
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('#');
      char char0 = cSVFormat3.getDelimiter();
      assertEquals(',', char0);
      
      cSVFormat3.getEscapeCharacter();
      cSVFormat3.getQuoteCharacter();
      cSVFormat3.getCommentMarker();
      Character character0 = cSVFormat2.getCommentMarker();
      assertEquals('#', (char)character0);
      
      boolean boolean0 = cSVFormat3.getIgnoreSurroundingSpaces();
      boolean boolean1 = cSVFormat2.getIgnoreEmptyLines();
      assertFalse(boolean1 == boolean0);
      
      cSVFormat0.getHeader();
      cSVFormat0.isQuoteCharacterSet();
      cSVFormat1.hashCode();
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      // Undeclared exception!
      try { 
        cSVFormat0.withDelimiter('\"');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('\"')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('X');
      String string0 = cSVFormat1.toString();
      assertEquals("Delimiter=<\t> Escape=<\\> CommentStart=<X> RecordSeparator=<\n> SkipHeaderRecord:false", string0);
      
      Character character0 = new Character('X');
      CSVFormat cSVFormat2 = cSVFormat0.withQuote(character0);
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.RFC4180.format(objectArray0);
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[0];
      cSVFormat0.EXCEL.format(objectArray0);
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[14];
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'null' in [null, null, null, null, null, null, null, null, null, null, null, null, null, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withEscape('!');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('!');
      char char0 = cSVFormat1.getDelimiter();
      assertEquals(',', char0);
      
      Character character0 = cSVFormat1.getEscapeCharacter();
      assertEquals('!', (char)character0);
      
      cSVFormat1.getQuoteCharacter();
      boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
      boolean boolean1 = cSVFormat1.getIgnoreEmptyLines();
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = cSVFormat0.getSkipHeaderRecord();
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.MYSQL.withAllowMissingColumnNames(false);
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.EXCEL.withNullString("d ?NS I");
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", string0);
      
      cSVFormat0.hashCode();
      assertTrue(cSVFormat0.isEscapeCharacterSet());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('A');
      char char0 = cSVFormat1.getDelimiter();
      assertEquals(',', char0);
      
      Character character0 = new Character(',');
      cSVFormat2.getQuoteCharacter();
      cSVFormat0.getIgnoreEmptyLines();
      CSVFormat cSVFormat3 = cSVFormat1.withNullString("#(j_");
      assertEquals('\\', (char)cSVFormat3.getEscapeCharacter());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      
      boolean boolean0 = cSVFormat2.getAllowMissingColumnNames();
      assertEquals('A', (char)cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(boolean0);
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('d');
      String string0 = cSVFormat1.toString();
      assertEquals("Delimiter=<,> Escape=<d> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
      
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('d');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('d');
      cSVFormat0.getDelimiter();
      cSVFormat3.getEscapeCharacter();
      cSVFormat0.getQuoteCharacter();
      cSVFormat0.getCommentMarker();
      cSVFormat3.getIgnoreSurroundingSpaces();
      cSVFormat3.getIgnoreEmptyLines();
      cSVFormat0.withNullString("");
      boolean boolean0 = cSVFormat2.getAllowMissingColumnNames();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      // Undeclared exception!
      try { 
        cSVFormat0.format((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.getIgnoreSurroundingSpaces();
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('9');
      CSVFormat cSVFormat4 = CSVFormat.newFormat('*');
      char char0 = cSVFormat4.getDelimiter();
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.getIgnoreEmptyLines());
      assertEquals('*', char0);
      
      Character character0 = cSVFormat3.getEscapeCharacter();
      assertEquals('9', (char)character0);
      
      cSVFormat1.DEFAULT.withEscape('A');
      CSVFormat cSVFormat5 = CSVFormat.TDF;
      String string0 = cSVFormat1.RFC4180.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false", string0);
      
      cSVFormat5.getQuoteCharacter();
      cSVFormat0.getCommentMarker();
      boolean boolean0 = cSVFormat3.getIgnoreSurroundingSpaces();
      assertFalse(boolean0);
      
      cSVFormat5.getIgnoreEmptyLines();
      cSVFormat2.getHeader();
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('*', (char)cSVFormat2.getQuoteCharacter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isNullStringSet());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('I');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      // Undeclared exception!
      try { 
        cSVFormat1.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('I')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.MYSQL.withSkipHeaderRecord(true);
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('Z');
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('Z', (char)cSVFormat1.getQuoteCharacter());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
      // Undeclared exception!
      try { 
        cSVFormat0.withEscape(':');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same (':')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('4');
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('4', (char)cSVFormat1.getCommentMarker());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[14];
      CSVFormat cSVFormat1 = CSVFormat.newFormat('z');
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      
      String string0 = cSVFormat1.format(stringArray0);
      assertEquals("zzzzzzzzzzzzz", string0);
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void testEscapedControlCharacter_75()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withEscape('\\');
      cSVFormat0.withEscape('!');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('!');
      char char0 = cSVFormat1.getDelimiter();
      assertEquals(',', char0);
      
      Character character0 = cSVFormat1.getEscapeCharacter();
      assertEquals('!', (char)character0);
      
      Character character1 = cSVFormat1.getQuoteCharacter();
      assertEquals('\"', (char)character1);
      
      cSVFormat1.getCommentMarker();
      boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
      boolean boolean1 = cSVFormat1.getIgnoreEmptyLines();
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(boolean1 == boolean0);
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      PipedReader pipedReader0 = new PipedReader(4400);
      cSVFormat0.EXCEL.parse(pipedReader0);
      String[] stringArray0 = new String[0];
  }
}
