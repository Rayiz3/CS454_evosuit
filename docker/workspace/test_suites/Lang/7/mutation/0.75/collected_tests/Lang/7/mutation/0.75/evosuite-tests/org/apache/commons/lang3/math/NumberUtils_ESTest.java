/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 21:18:17 GMT 2023
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      NumberUtils.isNumber("-123E2.12");
      NumberUtils.isNumber("-0x1");
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 174.79;
      doubleArray0[2] = 2615.72;
      doubleArray0[3] = 3449.0;
      NumberUtils.max(doubleArray0);
      NumberUtils.isNumber("");
      NumberUtils.min(doubleArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)16;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte) (-17);
      NumberUtils.min(byteArray0);
      try { 
        NumberUtils.createNumber("-V0XH");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -V0XH is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      NumberUtils.createNumber("0X24748364");
      boolean boolean0 = NumberUtils.isNumber("Yb");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xaR_G`~!Lp^cZ8");
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 27.0;
      doubleArray0[1] = (-2279.2969);
      doubleArray0[2] = -0.0;
      doubleArray0[3] = 1831.0733838;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (-3236.72);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1831.0733838, double0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 65;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(65, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0.12N4E5");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      try { 
        NumberUtils.createNumber("%9egcEs\"6");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"%9egcEs\"6\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "1.1L";
      NumberUtils.isNumber("1.1L");
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1072.95390665;
      NumberUtils.min(doubleArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)48;
      NumberUtils.min(byteArray0);
      try { 
        NumberUtils.createNumber("1.1L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 1.1L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.1E-70F");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0.kg;81,");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.kg;81, is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1l");
      assertEquals((-1L), number0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1.1E700F");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      NumberUtils.createNumber("1.");
      boolean boolean0 = NumberUtils.isNumber("0x9*'k");
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-298.0F);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = 627.743F;
      floatArray0[3] = 121.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 1293.0F;
      floatArray0[6] = (-523.6303F);
      floatArray0[7] = (-3110.0F);
      floatArray0[8] = 1.0F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1293.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-700");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234E5l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("12345l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      try { 
        NumberUtils.createNumber("%\"|yT:P.WKSSrtyl");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // %\"|yT:P.WKSSrtyl is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      try { 
        NumberUtils.createNumber("w]D=K,w9Sxx#0E0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1.1E-700F");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234.5f");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234.5d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xc!uA,YcB");
      boolean boolean1 = NumberUtils.isDigits("0xc!uA,YcB");
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)48;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)48, short0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-221.23F");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-221.23F");
      assertEquals((-221.23F), number0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("12345678901234567890L");
      assertEquals((short)2770, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Number number0 = NumberUtils.createNumber(".776313862157E308");
      assertEquals(7.76313862157E307, number0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.797693138623157E308");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("123.4E21D");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("0xf-");
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-766);
      intArray0[2] = 3419;
      intArray0[3] = 31;
      intArray0[4] = 0;
      intArray0[5] = (-1);
      intArray0[6] = 48;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-766), int0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1894);
      shortArray0[1] = (short)664;
      shortArray0[2] = (short)31;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)664, short0);
      
      boolean boolean1 = NumberUtils.isNumber("0xf-");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xf`-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("123.4E21D");
      assertEquals(1.234E23, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-1.1E-700F");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      try { 
        NumberUtils.createNumber("12e3.4E5");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 12e3.4E5 is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      try { 
        NumberUtils.createNumber("1pOIeLE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 1pOIeLE is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      NumberUtils.isNumber("0yx@I&cl6@D_ebV");
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2133.8977877;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(2133.8977877, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("123.4E5");
      assertEquals(1.234E7F, number0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      try { 
        NumberUtils.createNumber("d");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // d is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float[] floatArray0 = new float[0];
      String string0 = "q";
      NumberUtils.isNumber("q");
      NumberUtils.toShort((String) null, (short)3221);
      // Undeclared exception!
      try { 
        NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      try { 
        NumberUtils.createNumber("s`stE_g3Pk~@AqF");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // s`stE_g3Pk~@AqF is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-3627L);
      doubleArray0[1] = (double) (-3627L);
      doubleArray0[2] = (double) (-3627L);
      NumberUtils.max(doubleArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-3198);
      NumberUtils.min(intArray0);
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xABC123");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      try { 
        NumberUtils.createNumber("ZU\"`73W5V!2}YVJwv.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      try { 
        NumberUtils.createNumber("t9UNk0|}7?tU 3<\"n{E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // t9UNk0|}7?tU 3<\"n{E is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xw=e#] ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      NumberUtils.max((-3627L), (-3627L), (-3627L));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte) (-127);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)119, byte0);
      
      boolean boolean0 = NumberUtils.isNumber("0xg;f-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+I1!4DM:");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null);
      assertEquals((byte)0, byte0);
      
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)numberUtils0.SHORT_ZERO;
      NumberUtils.isNumber("lDT`d>7");
      NumberUtils.isNumber("lDT`d>7");
      NumberUtils.isNumber("ZLqYO!/!;h");
      NumberUtils.createNumber((String) null);
      NumberUtils.createLong((String) null);
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("??C7;p<y}V2");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1846.09F);
      floatArray0[1] = (-1.2345F);
      NumberUtils.min((-1.2345F), (-1.2345F), (-1846.09F));
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      try { 
        NumberUtils.createNumber("oof");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // oof is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0X1.8");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1.8\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)numberUtils0.BYTE_ZERO;
      longArray0[1] = (long) (byte)numberUtils0.BYTE_ONE;
      longArray0[2] = (long) (int)numberUtils0.INTEGER_ONE;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) numberUtils0.INTEGER_MINUS_ONE;
      intArray0[1] = (int) (byte)numberUtils0.BYTE_ZERO;
      intArray0[2] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_ZERO;
      NumberUtils.createBigDecimal((String) null);
      shortArray0[2] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[3] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[4] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[5] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[6] = (short)1063;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1063, short0);
      
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
      
      boolean boolean0 = NumberUtils.isDigits("0");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[3] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[4] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[5] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[6] = (byte)57;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)57, byte0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      NumberUtils.isDigits("P%R$v*W3");
      int[] intArray0 = new int[7];
      intArray0[0] = (-10408512);
      intArray0[1] = 76;
      intArray0[2] = 8;
      intArray0[3] = 4;
      intArray0[4] = 491;
      intArray0[5] = 46;
      intArray0[6] = (-288101920);
      NumberUtils.max(intArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-23);
      NumberUtils.max(byteArray0);
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      try { 
        NumberUtils.createNumber("2{gB jwcMy~9cpl");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 2{gB jwcMy~9cpl is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0xThe Array must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"The Array must not be null\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      try { 
        NumberUtils.createNumber("nir%XkBBGJ]5~.L}}<");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // nir%XkBBGJ]5~.L}}< is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      try { 
        NumberUtils.createNumber(".1rK2345");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = Float.NaN;
      floatArray0[2] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.isNumber("+m5QAf.<");
      NumberUtils.toInt((String) null);
      int[] intArray0 = new int[7];
      intArray0[0] = 46;
      intArray0[1] = (int) numberUtils0.INTEGER_ZERO;
      intArray0[2] = (int) (short)numberUtils0.SHORT_ZERO;
      intArray0[3] = (int) numberUtils0.INTEGER_ONE;
      intArray0[4] = (int) numberUtils0.INTEGER_ZERO;
      intArray0[5] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[6] = (int) (byte)numberUtils0.BYTE_ZERO;
      NumberUtils.min(intArray0);
      Float float0 = new Float((-855.4754F));
      assertEquals((-855.4754F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      try { 
        NumberUtils.createNumber("IkU!O$<V[3'z\"L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // IkU!O$<V[3'z\"L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("4");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--0X");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E8[5DAV+=. &7C");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("123.4ED");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[3];
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[1] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[2] = (short) numberUtils0.SHORT_ONE;
      shortArray0[3] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[4] = (short) numberUtils0.SHORT_ONE;
      shortArray0[5] = (short)86;
      shortArray0[6] = (short) (-5679);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)86, short0);
      
      byteArray0[0] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_ONE;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)1, byte0);
      
      byte byte1 = NumberUtils.min((byte) numberUtils0.BYTE_ZERO, (byte)85, (byte)13);
      assertEquals((byte)0, byte1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, 3669.0176F);
      assertEquals(3669.0176F, float0, 0.01F);
      
      NumberUtils.isNumber("0X-0X123.4ED");
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)numberUtils0.BYTE_ZERO;
      byte byte0 = NumberUtils.max((byte) numberUtils0.BYTE_ONE, (byte) numberUtils0.BYTE_ONE, (byte)120);
      assertEquals((byte)120, byte0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (int)numberUtils0.INTEGER_MINUS_ONE;
      floatArray0[1] = (-855.4754F);
      floatArray0[2] = 306.166F;
      floatArray0[3] = 1.0F;
      floatArray0[4] = (float) (short)numberUtils0.SHORT_MINUS_ONE;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-855.4754F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.createInteger((String) null);
      NumberUtils.isNumber("xS9C2QQ%Hi`s!");
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      try { 
        NumberUtils.createNumber("e!xi87DhHOE*l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // e!xi87DhHOE*l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-10);
      int int0 = NumberUtils.min((-10), (-10), (-10));
      assertEquals((-10), int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--l|~6o#");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("shs]FFaSHn`E?]");
      assertEquals((byte)0, byte0);
      
      long long0 = NumberUtils.min((-345L), (-345L), (-2378L));
      assertEquals((-2378L), long0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-3236);
      shortArray0[1] = (short)124;
      shortArray0[2] = (short) (-2430);
      short short0 = NumberUtils.max((short) (-3236), (short) (-3236), (short)124);
      assertEquals((short)124, short0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("S:>Vju05=(G");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)70;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)70, short0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      short[] shortArray0 = new short[17];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      long long0 = NumberUtils.max((-3627L), (-3627L), (-3627L));
      assertEquals((-3627L), long0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)960;
      short short0 = NumberUtils.min(shortArray0);
      short short1 = NumberUtils.toShort("DD1(8WJ:", (short)960);
      assertTrue(short1 == short0);
      
      NumberUtils.toFloat("0x", (float) (-3627L));
      long[] longArray0 = new long[4];
      longArray0[0] = (-3627L);
      longArray0[1] = (long) (short)960;
      longArray0[2] = (long) (short)960;
      longArray0[3] = (long) (short)960;
      NumberUtils.createDouble((String) null);
      boolean boolean0 = NumberUtils.isNumber("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".1rK2345");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (byte)numberUtils0.BYTE_MINUS_ONE;
      floatArray0[1] = (float) (byte)numberUtils0.BYTE_ONE;
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[3] = (double) Float.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-3258);
      int int0 = NumberUtils.max((-3258), (-3258), (-3258));
      assertEquals((-3258), int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("q");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (short)numberUtils0.SHORT_MINUS_ONE;
      doubleArray0[1] = (double) (int)numberUtils0.INTEGER_ZERO;
      doubleArray0[2] = (double) (float)numberUtils0.FLOAT_MINUS_ONE;
      doubleArray0[3] = (double) (float)numberUtils0.FLOAT_MINUS_ONE;
      doubleArray0[4] = (double) (float)numberUtils0.FLOAT_ZERO;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[1] = (int) (byte)numberUtils0.BYTE_ZERO;
      intArray0[2] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[3] = (int) (byte)numberUtils0.BYTE_ZERO;
      NumberUtils.max(intArray0);
      short short0 = NumberUtils.max((short)4270, (short) numberUtils0.SHORT_MINUS_ONE, (short)4270);
      assertEquals((short)4270, short0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (long)numberUtils0.LONG_ZERO;
      doubleArray0[1] = (double) (long)numberUtils0.LONG_MINUS_ONE;
      double double0 = NumberUtils.toDouble((String) null);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)numberUtils0.BYTE_MINUS_ONE;
      floatArray0[1] = (float) (long)numberUtils0.LONG_ZERO;
      floatArray0[2] = (float) (byte)numberUtils0.BYTE_MINUS_ONE;
      floatArray0[3] = (float) (byte)numberUtils0.BYTE_ONE;
      floatArray0[4] = (float) (int)numberUtils0.INTEGER_ZERO;
      floatArray0[5] = (float) (int)numberUtils0.INTEGER_ONE;
      floatArray0[6] = (float) numberUtils0.FLOAT_MINUS_ONE;
      short short0 = NumberUtils.max((short)0, (short) numberUtils0.SHORT_ZERO, (short) (-1));
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)0, (byte)0, (byte)0);
      assertEquals((byte)0, byte0);
      
      float[] floatArray0 = new float[2];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      long long0 = NumberUtils.max((-3627L), (-3627L), (-3627L));
      assertEquals((-3627L), long0);
      
      byte byte0 = NumberUtils.max((byte)0, (byte)0, (byte)0);
      assertEquals((byte)0, byte0);
      
      float float0 = NumberUtils.toFloat("-0X 1111", (float) (-3627L));
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-3627L);
      floatArray0[1] = (-3627.0F);
      float float1 = NumberUtils.min(floatArray0);
      assertEquals(float1, float0, 0.01F);
      assertEquals((-3627.0F), float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      long long0 = NumberUtils.max((-3627L), (-3627L), (-3627L));
      assertEquals((-3627L), long0);
      
      NumberUtils.toFloat("1s(%TueQ2{Zo7y", Float.NaN);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-51);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte) (-4), byte0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = 5160.091F;
      floatArray0[1] = (float) (byte) (-94);
      floatArray0[2] = (float) (-3627L);
      floatArray0[3] = (float) (byte) (-51);
      floatArray0[4] = (float) (byte) (-4);
      floatArray0[5] = (float) (-3627L);
      floatArray0[6] = (float) (byte) (-127);
      floatArray0[7] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[3] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = (-545.230125);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 110;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 110;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) (-3627L);
      doubleArray0[5] = 42.0;
      NumberUtils.max(doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 110;
      intArray0[1] = 110;
      intArray0[2] = 110;
      intArray0[3] = 110;
      intArray0[4] = 110;
      intArray0[5] = 110;
      intArray0[6] = 110;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(110, int0);
      
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(110.0, double0, 0.01);
      
      byte byte0 = NumberUtils.min((byte)65, (byte)65, (byte) (-7));
      assertEquals((byte) (-7), byte0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)97, (byte)97, (byte)97);
      assertEquals((byte)97, byte0);
      
      int int0 = NumberUtils.min((int) (byte)97, (int) (byte)97, 65);
      assertEquals(65, int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.max((byte) numberUtils0.BYTE_ONE, (byte)97, (byte) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((byte)97, byte0);
      
      int int0 = NumberUtils.min(2445, 1348, (int) numberUtils0.INTEGER_MINUS_ONE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x1111 ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[9];
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_ZERO;
      NumberUtils.min(shortArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[1] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[2] = (byte) numberUtils0.BYTE_ZERO;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) numberUtils0.FLOAT_MINUS_ONE;
      floatArray0[1] = (float) (byte)numberUtils0.BYTE_MINUS_ONE;
      floatArray0[2] = (float) (byte)numberUtils0.BYTE_ONE;
      floatArray0[3] = (float) (int)numberUtils0.INTEGER_ONE;
      floatArray0[4] = (float) (long)numberUtils0.LONG_ZERO;
      floatArray0[5] = (float) (byte)numberUtils0.BYTE_MINUS_ONE;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
      
      byteArray0[3] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[4] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[5] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[2] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[7] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[8] = (byte) (-119);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)1, byte0);
      
      intArray0[0] = 2;
      intArray0[1] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[2] = (int) numberUtils0.INTEGER_ZERO;
      boolean boolean0 = NumberUtils.isNumber("-0x1111 ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.max((long) numberUtils0.INTEGER_ZERO, (long) numberUtils0.LONG_ZERO, 13L);
      assertEquals(13L, long0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.max((long) numberUtils0.BYTE_ZERO, (long) numberUtils0.BYTE_ONE, (long) numberUtils0.LONG_ONE);
      float float0 = new Long((long) numberUtils0.INTEGER_MINUS_ONE);
      assertEquals((-1L), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0X123.4ED");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-123.4ED\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_139()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[3] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[4] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[5] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[6] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[7] = (byte) numberUtils0.BYTE_ZERO;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-1), byte0);
      
      float float0 = NumberUtils.toFloat("-0X11d11", (float) numberUtils0.INTEGER_MINUS_ONE);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)45;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_142()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.toLong((String) null, 0L);
      short short0 = NumberUtils.max((short) numberUtils0.SHORT_ONE, (short)111, (short) (-704));
      assertEquals((short)111, short0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      try { 
        NumberUtils.createNumber("cfTeKzZ,`|QD : m/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // cfTeKzZ,`|QD : m/ is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      try { 
        NumberUtils.createNumber("123.4ED");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 123.4ED is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      try { 
        NumberUtils.createNumber(" is not a valid number.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  is not a valid number. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      try { 
        NumberUtils.createNumber("$+pvgJP]2gQO`3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      try { 
        NumberUtils.createNumber("8<!qn0B1Fc'XGZ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 8<!qn0B1Fc'XGZ is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = 1632.1671669;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[4];
      floatArray0[0] = 5.4F;
      floatArray0[1] = (float) (int)numberUtils0.INTEGER_ZERO;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[3] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[4] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[5] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[6] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[7] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[8] = (byte) numberUtils0.BYTE_ZERO;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)1, byte0);
      
      floatArray0[2] = (float) numberUtils0.FLOAT_ONE;
      floatArray0[3] = (float) (short)numberUtils0.SHORT_ZERO;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = 1667.0F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 8.0;
      double double0 = NumberUtils.min(8.0, 8.0, 8.0);
      assertEquals(8.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1234;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      short[] shortArray0 = new short[11];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)32;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)32, byte0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[9];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[1] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[2] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[3] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[4] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[5] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[6] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[7] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[8] = (byte) (-119);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)1, byte0);
      
      intArray0[0] = 32;
      intArray0[1] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[2] = (int) numberUtils0.INTEGER_ZERO;
      intArray0[3] = (int) (short)numberUtils0.SHORT_ZERO;
      intArray0[4] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[5] = (int) (short)numberUtils0.SHORT_ONE;
      intArray0[6] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[7] = (int) numberUtils0.INTEGER_ZERO;
      intArray0[8] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int[] intArray0 = new int[18];
      intArray0[0] = (-2313);
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.toShort("0x11def");
      assertEquals((short)0, short0);
      
      long long0 = NumberUtils.toLong("0x11def");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0X1.8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xJl-0D!TI}h/e]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("8<!qn0B1Fc'XGZ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0Xa");
      assertFalse(boolean0);
      
      byte byte0 = NumberUtils.min((byte)35, (byte)35, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_171()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (byte)numberUtils0.BYTE_MINUS_ONE;
      floatArray0[1] = (float) (long)numberUtils0.LONG_ZERO;
      floatArray0[2] = (float) (byte)numberUtils0.BYTE_MINUS_ONE;
      floatArray0[3] = (float) (byte)numberUtils0.BYTE_ONE;
      floatArray0[4] = (float) (int)numberUtils0.INTEGER_ZERO;
      floatArray0[5] = (float) (int)numberUtils0.INTEGER_ONE;
      floatArray0[6] = (float) numberUtils0.FLOAT_MINUS_ONE;
      floatArray0[7] = (float) (int)numberUtils0.INTEGER_ONE;
      floatArray0[8] = (-1234.5F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      float[] floatArray0 = new float[18];
      floatArray0[0] = (-1.4296484F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      try { 
        NumberUtils.createNumber("createFloat(String) failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // createFloat(String) failed is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_176()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.min((short)9925, (short)45, (short)45);
      assertEquals((short)45, short0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Su;tE:_q,q(*i1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)48;
      shortArray0[1] = (short)12362;
      short short0 = NumberUtils.min((short)48, (short)12362, (short)48);
      assertEquals((short)48, short0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      float float0 = NumberUtils.toFloat("JvYwfh}p{cIO-wN,");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      float float0 = NumberUtils.toFloat("&_.+?Y:ZvB&HU", (-3820.8F));
      assertEquals((-3820.8F), float0, 0.01F);
      
      double double0 = NumberUtils.max(0.0, (double) (-3820.8F), (double) (-3820.8F));
      assertEquals(0.0, double0, 0.01);
      
      short short0 = NumberUtils.min((short)551, (short)551, (short)70);
      assertEquals((short)70, short0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("\u0001tY=");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.max((int) numberUtils0.BYTE_MINUS_ONE, (int) numberUtils0.BYTE_ONE, (int) numberUtils0.SHORT_ONE);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.min(336L, (long) numberUtils0.SHORT_MINUS_ONE, 336L);
      assertEquals((-1L), long0);
      
      int int0 = NumberUtils.max((int) numberUtils0.SHORT_ZERO, (int) numberUtils0.SHORT_ONE, 8);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)numberUtils0.SHORT_ONE;
      int[] intArray0 = new int[2];
      intArray0[0] = 110;
      intArray0[1] = (int) numberUtils0.INTEGER_ONE;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1.0, double0, 0.01);
      
      int int0 = NumberUtils.max(intArray0);
      assertEquals(110, int0);
      
      doubleArray0[1] = (double) (int)numberUtils0.INTEGER_ONE;
      doubleArray0[2] = (double) (int)numberUtils0.INTEGER_ZERO;
      doubleArray0[3] = (double) (int)numberUtils0.INTEGER_MINUS_ONE;
      doubleArray0[4] = (double) (float)numberUtils0.FLOAT_MINUS_ONE;
      doubleArray0[5] = (double) (byte)numberUtils0.BYTE_ONE;
      doubleArray0[6] = (double) (float)numberUtils0.FLOAT_ONE;
      NumberUtils.max(doubleArray0);
      byte byte0 = NumberUtils.min((byte) numberUtils0.BYTE_ZERO, (byte) (-20), (byte) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((byte) (-20), byte0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.min((byte) numberUtils0.BYTE_MINUS_ONE, (byte) numberUtils0.BYTE_ONE, (byte)8);
      // Undeclared exception!
      try { 
        NumberUtils.createLong("0Xjava.vm.vendor");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.vm.vendor\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)53;
      NumberUtils.min((byte)100, (byte)53, (byte)100);
      try { 
        NumberUtils.createNumber(".");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short) numberUtils0.BYTE_ONE, (short) (-2628), (short) numberUtils0.BYTE_ONE);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short)2403, (short) (-3039), (short) numberUtils0.BYTE_ONE);
      assertEquals((short)2403, short0);
      
      short short1 = NumberUtils.max((short)0, (short) numberUtils0.SHORT_ONE, (short) numberUtils0.BYTE_ZERO);
      assertEquals((short)1, short1);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_192()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)numberUtils0.SHORT_ZERO;
      longArray0[1] = (long) numberUtils0.LONG_ZERO;
      longArray0[2] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      longArray0[3] = (long) (byte)numberUtils0.BYTE_ZERO;
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 5833L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      long[] longArray0 = new long[5];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_195()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)numberUtils0.BYTE_ZERO;
      longArray0[1] = (long) (byte)numberUtils0.BYTE_ZERO;
      longArray0[2] = (long) (short)numberUtils0.SHORT_ONE;
      longArray0[3] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      longArray0[4] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      longArray0[5] = (long) (int)numberUtils0.INTEGER_ONE;
      longArray0[6] = (long) (int)numberUtils0.INTEGER_ZERO;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1L, long0);
      
      long long1 = NumberUtils.toLong("--", (long) numberUtils0.BYTE_ZERO);
      assertFalse(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = (-4248L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      long[] longArray0 = new long[5];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.toLong("-0x11def", (long) numberUtils0.LONG_ONE);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-4235.185F);
      float float0 = NumberUtils.max((-4235.185F), (-4235.185F), (-4235.185F));
      assertEquals((-4235.185F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      NumberUtils.toInt("-0X11d11");
      byte[] byteArray0 = new byte[12];
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.toDouble("1+zXZ(3l*");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("To");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"To\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
