/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 17 08:39:40 GMT 2023
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(4.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(complex1);
      try { 
        complex2.nthRoot((-2345));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,345
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(-0.0, 1075.9387293185682);
      Complex complex2 = complex0.atan();
      Complex complex3 = new Complex((-1232.34744193), (-2219.5467334435));
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex2.tan();
      complex2.nthRoot(17);
      Complex complex6 = complex4.sqrt();
      Complex complex7 = Complex.INF;
      complex7.sqrt();
      Complex complex8 = complex6.subtract(complex5);
      Object object0 = new Object();
      Complex complex9 = complex8.asin();
      complex9.divide(complex1);
      complex4.tanh();
      complex1.abs();
      Complex complex10 = Complex.I;
      try { 
        complex10.nthRoot((-4461));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,461
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(2063.48, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex3.INF.sqrt1z();
      assertEquals(Double.NEGATIVE_INFINITY, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex2.ONE.add(complex1);
      assertEquals(2064.48, complex5.getReal(), 0.01);
      assertTrue(complex5.isInfinite());
      
      complex0.atan();
      Complex complex6 = Complex.I;
      String string0 = complex2.toString();
      assertEquals("(1.0, 0.0)", string0);
      
      Object object0 = new Object();
      Complex complex7 = complex0.exp();
      Object object1 = new Object();
      Complex complex8 = new Complex(2742.2, Double.POSITIVE_INFINITY);
      Object object2 = new Object();
      Complex complex9 = new Complex(5417.5147810817725, 5417.5147810817725);
      Complex complex10 = complex8.asin();
      Complex complex11 = Complex.ZERO;
      Complex complex12 = Complex.ZERO;
      Complex complex13 = complex10.divide(complex12);
      assertSame(complex10, complex3);
      assertSame(complex13, complex7);
      
      List<Complex> list0 = complex9.nthRoot(1416);
      assertEquals(1416, list0.size());
      assertFalse(list0.contains(complex0));
      
      Complex complex14 = complex8.sqrt();
      assertEquals(Double.POSITIVE_INFINITY, complex8.getImaginary(), 0.01);
      assertTrue(complex14.equals((Object)complex4));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(1197.2039093179, 1613.50341);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = new Complex((-2384.73994), (-821.71467));
      Complex complex6 = complex2.asin();
      assertEquals(8.299014732268855, complex6.getImaginary(), 0.01);
      
      Complex complex7 = Complex.ONE;
      complex2.equals(complex0);
      Complex complex8 = complex4.multiply(complex5);
      assertFalse(complex8.equals((Object)complex4));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract(complex0);
      complex1.nthRoot(124);
      List<Complex> list0 = complex1.nthRoot(124);
      assertEquals(124, list0.size());
      assertTrue(list0.contains(complex1));
      
      Complex complex2 = new Complex(6.556710652198369, 124);
      Complex complex3 = Complex.I;
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.subtract(complex3);
      Complex complex6 = complex5.ZERO.exp();
      assertTrue(complex6.equals((Object)complex0));
      
      Object object0 = new Object();
      Complex complex7 = complex3.asin();
      Complex complex8 = complex4.divide(complex5);
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      
      boolean boolean0 = complex4.equals(complex7);
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(0.8813735870195428, complex7.getImaginary(), 0.01);
      assertTrue(complex4.equals((Object)complex8));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(0.0);
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.cosh();
      try { 
        complex0.nthRoot((-265));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -265
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      assertTrue(complex1.isNaN());
      
      double double0 = complex1.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      Complex complex2 = complex0.multiply(complex1);
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.asin();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      assertFalse(complex1.isInfinite());
      assertEquals(0.7071067811865475, complex1.getImaginary(), 0.01);
      assertEquals(0.7071067811865476, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      assertSame(complex2, complex1);
      
      Complex complex3 = complex0.asin();
      assertEquals(1.5707963267948966, complex3.getReal(), 0.01);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(1921.0525883535);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.hashCode();
      Complex complex1 = complex0.multiply((double) 6);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(6.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      String string0 = complex0.ONE.toString();
      assertEquals("(1.0, 0.0)", string0);
      
      Complex complex3 = complex2.multiply((double) 124);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
      
      Complex complex4 = complex0.divide(complex1);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.negate();
      try { 
        complex0.nthRoot((-2861));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,861
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.cosh();
      List<Complex> list0 = complex0.I.nthRoot(1495);
      assertFalse(list0.contains(complex0));
      assertEquals(1495, list0.size());
      
      Complex complex1 = new Complex(1169.14682340874, 1.5707745417769634);
      assertFalse(complex1.isInfinite());
      assertEquals(1.5707745417769634, complex1.getImaginary(), 0.01);
      assertEquals(1169.14682340874, complex1.getReal(), 0.01);
      
      Complex complex2 = complex0.cosh();
      boolean boolean0 = complex2.equals(complex0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = (Complex)complex0.INF.readResolve();
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      
      Complex complex2 = complex0.sqrt();
      assertSame(complex2, complex0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.conjugate();
      Complex complex1 = complex0.asin();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(Double.NaN);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.557407724654902, complex1.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      
      Complex complex2 = complex0.asin();
      assertEquals(1.5707963267948966, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex0.sqrt();
      assertEquals(1.0, complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sqrt1z();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.NaN.divide(complex2);
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex3.isNaN());
      
      Complex complex4 = Complex.INF;
      assertEquals(Double.POSITIVE_INFINITY, complex4.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.cos();
      try { 
        complex0.nthRoot((-2861));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,861
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = new Object();
      Complex complex1 = Complex.I;
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(boolean0);
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.acos();
      assertEquals((-0.8813735870195429), complex1.getImaginary(), 0.01);
      
      Complex complex2 = Complex.ZERO;
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = new Complex(3628.73267, 3628.73267);
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = Complex.ONE;
      Object object0 = complex5.readResolve();
      Complex complex6 = complex3.INF.asin();
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      
      Complex complex7 = Complex.ONE;
      complex7.equals(object0);
      Complex complex8 = complex5.multiply(complex3);
      assertTrue(complex8.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.cos();
      try { 
        complex0.nthRoot((-3341));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,341
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      List<Complex> list0 = complex0.nthRoot(2161);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(complex0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.atan();
      try { 
        complex0.nthRoot((-2873));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,873
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      List<Complex> list0 = complex0.nthRoot(3431);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(complex0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-3090.154892), (-0.5411961001461972));
      Complex complex1 = new Complex((-3090.154892), (-3090.154892));
      Complex complex2 = new Complex((-1.3065629648763764), (-1354.62099));
      Complex complex3 = Complex.ONE;
      Object object0 = new Object();
      Complex complex4 = complex3.asin();
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex4.getReal(), 0.01);
      
      Complex complex5 = complex2.divide(complex3);
      assertEquals((-1.3065629648763764), complex5.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.nthRoot((-467));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -467
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = (Complex)complex1.readResolve();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.divide(complex0);
      Complex complex5 = complex1.multiply(complex4);
      assertNotSame(complex5, complex4);
      assertTrue(complex1.equals((Object)complex2));
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertSame(complex5, complex3);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.acos();
      assertEquals((-0.8813735870195429), complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.asin();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.conjugate();
      assertEquals(0.0, complex1.getReal(), 0.01);
      
      Complex complex2 = complex0.asin();
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-1.2246467991473532E-16), (-0.54119610015));
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 590.7498);
      Complex complex2 = new Complex((-1.2246467991473532E-16), Double.POSITIVE_INFINITY);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex2.subtract(complex3);
      assertEquals(Double.NEGATIVE_INFINITY, complex5.getReal(), 0.01);
      
      Complex complex6 = complex4.subtract(complex1);
      assertTrue(complex6.equals((Object)complex5));
      assertEquals((-0.5411961001500458), complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex0.tan();
      assertEquals((-9.259185419127106E-17), complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals((-0.4938928360718479), complex7.getImaginary(), 0.01);
      
      boolean boolean0 = complex2.isNaN();
      assertTrue(complex2.isInfinite());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(1921.0525883535);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1921.0525883535, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.hashCode();
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(complex0);
      complex1.I.negate();
      complex0.NaN.sinh();
      complex1.add(complex0);
      try { 
        complex0.nthRoot((-1208));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,208
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-1.2246467991473532E-16), (-0.5411961001461971));
      complex0.ONE.toString();
      Complex complex1 = new Complex((-1.414213562373095), (-1.3065629648763764));
      Complex complex2 = new Complex(1.2246467991473532E-16, 1.3065629648763764);
      Complex complex3 = new Complex((-1.3065629648763764), (-1.2246467991473532E-16));
      Complex complex4 = Complex.ZERO;
      assertFalse(complex4.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.toString();
      assertEquals("(1.0, 0.0)", string0);
      
      Complex complex1 = complex0.asin();
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-1.2246467991473532E-16), (-0.5411961001461971));
      Complex complex1 = new Complex(0.08371849358081818, 0.08371849358081818);
      Complex complex2 = new Complex((-1.3065629648763764), 1.073741824E9);
      Complex complex3 = new Complex(717.94734, (-1336.670203341504));
      Complex complex4 = complex0.add(complex2);
      assertEquals((-1.3065629648763766), complex4.getReal(), 0.01);
      assertEquals(1.0737418234588039E9, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex3.tanh();
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      
      Complex complex6 = Complex.ONE;
      complex3.subtract(complex1);
      Complex complex7 = complex0.subtract(complex2);
      assertEquals((-1.073741824541196E9), complex7.getImaginary(), 0.01);
      assertEquals(1.3065629648763761, complex7.getReal(), 0.01);
      
      Complex complex8 = Complex.ZERO;
      Object object0 = complex8.readResolve();
      Complex complex9 = complex1.sin();
      assertEquals(0.08391394479131277, complex9.getReal(), 0.01);
      assertEquals(0.08352276820297105, complex9.getImaginary(), 0.01);
      
      Complex complex10 = Complex.ZERO;
      boolean boolean0 = complex3.equals(complex10);
      assertFalse(complex10.equals((Object)complex6));
      assertTrue(complex10.equals((Object)object0));
      assertFalse(complex3.isInfinite());
      assertEquals(717.94734, complex3.getReal(), 0.01);
      assertEquals((-1336.670203341504), complex3.getImaginary(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.tanh();
      complex1.I.getArgument();
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      
      Complex complex2 = complex0.sqrt();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.equals((Object)complex0));
      assertFalse(complex2.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.ONE.exp();
      assertEquals(2.718281828459045, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      
      Complex complex3 = complex0.asin();
      assertEquals(1.5707963267948966, complex3.getReal(), 0.01);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = (Complex)complex0.readResolve();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex1.isInfinite());
      
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.divide(complex2);
      assertEquals(0.6366197723675814, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex2.multiply(3458.0);
      assertFalse(complex4.equals((Object)complex2));
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      
      Complex complex5 = Complex.INF;
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.atan();
      boolean boolean0 = complex1.equals(complex7);
      assertFalse(complex7.equals((Object)complex1));
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertTrue(complex7.isNaN());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      ComplexField complexField0 = complex0.getField();
      assertNotNull(complexField0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.tanh();
      assertFalse(complex1.isNaN());
      assertEquals(0.761594155955765, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      assertEquals(0.8414709848078965, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.asin();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-1.2246467991473532E-16), (-0.5411961001461971));
      Complex complex1 = new Complex(0.08371849358081818, 0.08371849358081818);
      Complex complex2 = complex1.atan();
      assertEquals(0.08332406018888697, complex2.getImaginary(), 0.01);
      assertEquals(0.08410634767405571, complex2.getReal(), 0.01);
      
      Complex complex3 = new Complex(1890.156941, (-0.5411961001461971));
      Complex complex4 = new Complex((-1.8477590650225735), 1.3065629648763764);
      Complex complex5 = complex0.add(complex3);
      complex4.ZERO.pow(complex0);
      complex4.add(complex0);
      complex5.subtract(complex4);
      assertEquals(1890.156941, complex5.getReal(), 0.01);
      
      Complex complex6 = Complex.INF;
      Complex complex7 = complex4.subtract(complex6);
      assertEquals(Double.NEGATIVE_INFINITY, complex7.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.exp();
      Complex complex1 = complex0.asin();
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.pow(complex1);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      List<Complex> list0 = complex0.nthRoot(3424);
      assertEquals(3424, list0.size());
      assertTrue(list0.contains(complex0));
      assertEquals(0.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.atan();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      
      List<Complex> list0 = complex0.nthRoot(2161);
      assertTrue(list0.contains(complex0));
      assertEquals(2161, list0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sqrt1z();
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.multiply(5417.9546804465745);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.divide(complex0);
      assertEquals(1.5707963267948966, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      assertEquals(0.7853981633974483, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.asin();
      assertEquals(1.5707963267948966, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.divide(complex0);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertTrue(complex2.isNaN());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      List<Complex> list0 = complex0.nthRoot(3424);
      assertEquals(3424, list0.size());
      assertTrue(list0.contains(complex0));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cosh();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      
      Complex complex2 = complex0.multiply((-1456.805445042145));
      assertFalse(complex2.isInfinite());
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sin();
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = Complex.INF;
      boolean boolean0 = complex0.equals(complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sinh();
      assertTrue(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      
      List<Complex> list0 = complex0.nthRoot(18);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(complex0));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.subtract(complex1);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      
      List<Complex> list0 = complex0.nthRoot(2161);
      assertTrue(list0.contains(complex0));
      assertEquals(2161, list0.size());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.createComplex((-2174), Double.POSITIVE_INFINITY);
      complex0.multiply((double) (-2174));
      try { 
        complex0.nthRoot((-2174));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,174
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }
}
