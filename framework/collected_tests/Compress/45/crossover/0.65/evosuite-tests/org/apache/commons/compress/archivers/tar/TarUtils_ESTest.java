/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 09:56:28 GMT 2023
 */

package org.apache.commons.compress.archivers.tar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TarUtils_ESTest extends TarUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byte byte0 = (byte)5;
      int int0 = 0;
      TarUtils.formatLongOctalOrBinaryBytes((-127L), byteArray0, 0, (byte)5);
      ZipEncoding zipEncoding0 = TarUtils.FALLBACK_ENCODING;
      TarUtils.parseName(byteArray0, 0, (int) (byte)5, zipEncoding0);
      // Undeclared exception!
      try { 
        TarUtils.parseOctal(byteArray0, 0, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid byte -1 at offset 0 in '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD' len=5
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[36];
      TarUtils.formatLongOctalOrBinaryBytes((-392L), byteArray0, (byte)8, (byte)8);
      int int0 = TarUtils.formatLongOctalOrBinaryBytes(2305843008945262730L, byteArray0, 16, 16);
      assertEquals(32, int0);
      
      long long0 = TarUtils.parseOctalOrBinary(byteArray0, 16, 16);
      assertEquals(2305843008945262730L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[38];
      TarUtils.formatLongOctalOrBinaryBytes((byte)5, byteArray0, (byte)5, (byte)5);
      TarUtils.formatLongOctalOrBinaryBytes(10, byteArray0, (byte)5, 10);
      // Undeclared exception!
      try { 
        TarUtils.parseOctalOrBinary(byteArray0, 10, 2147483644);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483643
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[35];
      TarUtils.formatLongOctalOrBinaryBytes((-141L), byteArray0, (byte)8, (byte)8);
      int int0 = TarUtils.formatLongOctalOrBinaryBytes(8589934616L, byteArray0, 16, (byte)8);
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[35];
      TarUtils.formatLongOctalOrBinaryBytes((-141L), byteArray0, (byte)8, (byte)8);
      // Undeclared exception!
      try { 
        TarUtils.parseOctalOrBinary(byteArray0, (byte)8, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // At offset 8, 16 byte binary number exceeds maximum signed long value
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      TarUtils.formatLongOctalOrBinaryBytes((-121L), byteArray0, (byte)5, (byte)5);
      ZipEncoding zipEncoding0 = TarUtils.FALLBACK_ENCODING;
      ZipEncoding zipEncoding1 = TarUtils.FALLBACK_ENCODING;
      TarUtils.parseName(byteArray0, 2, (int) (byte)5, zipEncoding1);
      TarUtils.parseOctal(byteArray0, 2, 10);
      TarUtils.parseBoolean(byteArray0, (byte)5);
      TarUtils.computeCheckSum(byteArray0);
      TarUtils.parseName(byteArray0, 2, (-2798), zipEncoding0);
      TarUtils.parseOctalOrBinary(byteArray0, 10, 10);
      // Undeclared exception!
      try { 
        TarUtils.formatLongOctalOrBinaryBytes(403L, byteArray0, 9, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[39];
      TarUtils.formatLongOctalOrBinaryBytes((-127L), byteArray0, (byte)7, (byte)7);
      ZipEncoding zipEncoding0 = TarUtils.FALLBACK_ENCODING;
      TarUtils.parseName(byteArray0, 2, (int) (byte)7, zipEncoding0);
      TarUtils.parseOctal(byteArray0, 2, 14);
      TarUtils.formatUnsignedOctalString((byte)7, byteArray0, (byte)7, (byte)7);
      TarUtils.formatNameBytes("", byteArray0, 14, (int) (byte)7, zipEncoding0);
      int int0 = (-1885);
      // Undeclared exception!
      try { 
        TarUtils.parseOctalOrBinary(byteArray0, (byte)7, (-1885));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length -1885 must be at least 2
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte byte0 = (byte)3;
      byte[] byteArray0 = new byte[6];
      TarUtils.parseOctal(byteArray0, (byte)3, (byte)3);
      // Undeclared exception!
      try { 
        TarUtils.formatLongOctalOrBinaryBytes((-1105L), byteArray0, (byte)3, (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1105 is too large for 0 byte field.
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      TarUtils.formatLongOctalOrBinaryBytes((-168L), byteArray0, (byte)5, (byte)5);
      // Undeclared exception!
      try { 
        TarUtils.parseOctalOrBinary(byteArray0, 9, 9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid byte 88 at offset 0 in 'X{NUL}{NUL}{NUL}{NUL}{NUL}{NUL}{NUL}{NUL}' len=9
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      TarUtils.formatLongOctalOrBinaryBytes((byte)5, byteArray0, 0, (byte)5);
      ZipEncoding zipEncoding0 = TarUtils.FALLBACK_ENCODING;
      TarUtils.parseName(byteArray0, 0, (int) (byte)5, zipEncoding0);
      // Undeclared exception!
      try { 
        TarUtils.parseOctalOrBinary(byteArray0, (byte)5, (-1362));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length -1362 must be at least 2
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      int int0 = TarUtils.formatLongOctalOrBinaryBytes((-100L), byteArray0, 0, (byte)5);
      assertEquals(5, int0);
      
      ZipEncoding zipEncoding0 = TarUtils.FALLBACK_ENCODING;
      String string0 = TarUtils.parseName(byteArray0, 0, (int) (byte)5, zipEncoding0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-100), (byte)0, (byte)0}, byteArray0);
      assertEquals("\u00FF\u00FF\u00FF\u00FF\u009C", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      int int0 = TarUtils.formatLongOctalOrBinaryBytes((byte)9, byteArray0, (byte)9, (byte)9);
      assertEquals(18, int0);
      
      ZipEncoding zipEncoding0 = TarUtils.FALLBACK_ENCODING;
      String string0 = TarUtils.parseName(byteArray0, (int) (byte)9, (int) (byte)9, zipEncoding0);
      assertEquals("00000011 ", string0);
      
      boolean boolean0 = TarUtils.parseBoolean(byteArray0, (byte)9);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      TarUtils.formatLongOctalOrBinaryBytes((-100L), byteArray0, 0, (byte)5);
      // Undeclared exception!
      try { 
        TarUtils.parseOctal(byteArray0, 0, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid byte -1 at offset 0 in '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD' len=5
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[56];
      int int0 = TarUtils.formatLongOctalOrBinaryBytes((byte)8, byteArray0, (byte)8, (byte)8);
      assertEquals(16, int0);
      
      long long0 = TarUtils.parseOctalOrBinary(byteArray0, (byte)8, 16);
      assertEquals(8L, long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      int int0 = TarUtils.formatLongOctalOrBinaryBytes((byte)3, byteArray0, 1, (byte)3);
      assertEquals(4, int0);
      
      long long0 = TarUtils.parseOctalOrBinary(byteArray0, (byte)3, (byte)3);
      assertArrayEquals(new byte[] {(byte)0, (byte)48, (byte)51, (byte)32, (byte)0, (byte)0}, byteArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ZipEncoding zipEncoding0 = TarUtils.FALLBACK_ENCODING;
      String string0 = TarUtils.parseName(byteArray0, 2, 2, zipEncoding0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[44];
      TarUtils.formatLongOctalOrBinaryBytes((-151L), byteArray0, (byte)8, (byte)8);
      int int0 = TarUtils.formatLongOctalOrBinaryBytes(8589934616L, byteArray0, 16, (byte)8);
      assertEquals(24, int0);
      
      long long0 = TarUtils.parseOctalOrBinary(byteArray0, 16, (byte)8);
      assertEquals(8589934616L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[36];
      TarUtils.formatLongOctalOrBinaryBytes((-144L), byteArray0, (byte)8, (byte)8);
      long long0 = TarUtils.parseOctalOrBinary(byteArray0, (byte)8, (byte)8);
      assertEquals((-144L), long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)87;
      int int0 = TarUtils.formatLongOctalOrBinaryBytes((-100L), byteArray0, 1, (byte)5);
      assertArrayEquals(new byte[] {(byte) (-59), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte) (-100), (byte)0}, byteArray0);
      assertEquals(6, int0);
      
      ZipEncoding zipEncoding0 = TarUtils.FALLBACK_ENCODING;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)87;
      int int1 = TarUtils.formatNameBytes("tN#@+G4", byteArray1, 1, (-15), zipEncoding0);
      assertArrayEquals(new byte[] {(byte)87, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals((-14), int1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        TarUtils.formatLongOctalOrBinaryBytes(8589934616L, byteArray0, (-1793), (byte) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 8589934616 is too large for -1 byte field.
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      TarUtils.formatLongOctalOrBinaryBytes((byte)3, byteArray0, 1, (byte)3);
      // Undeclared exception!
      try { 
        TarUtils.parseOctalOrBinary(byteArray0, (byte)3, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      int int0 = TarUtils.formatLongOctalOrBinaryBytes((byte)3, byteArray0, (byte)3, (byte)3);
      assertEquals(6, int0);
      
      long long0 = TarUtils.parseOctalOrBinary(byteArray0, (byte)3, (byte)3);
      assertEquals(3L, long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)48, (byte)51, (byte)32}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      boolean boolean0 = TarUtils.parseBoolean(byteArray0, (byte)5);
      assertFalse(boolean0);
      
      ZipEncoding zipEncoding0 = TarUtils.FALLBACK_ENCODING;
      int int0 = TarUtils.formatNameBytes("\"WCB|ynO+{P@~B", byteArray0, (int) (byte)5, (int) (byte)5, zipEncoding0);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      int int0 = TarUtils.formatLongOctalOrBinaryBytes((-158L), byteArray0, (byte)5, (byte)5);
      assertEquals(10, int0);
      
      long long0 = TarUtils.parseOctalOrBinary(byteArray0, (byte)5, 10);
      assertEquals((-173722837188608L), long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      TarUtils.formatLongOctalOrBinaryBytes((-100L), byteArray0, 1, (byte)5);
      ZipEncoding zipEncoding0 = TarUtils.FALLBACK_ENCODING;
      // Undeclared exception!
      try { 
        TarUtils.parseOctalOrBinary(byteArray0, (byte)5, (byte)5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      int int0 = TarUtils.formatLongOctalOrBinaryBytes((byte)5, byteArray0, (byte)5, (byte)5);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-59);
      byteArray0[0] = (byte) (-1);
      TarUtils.formatLongOctalOrBinaryBytes((-100L), byteArray0, 1, (byte)5);
      ZipEncoding zipEncoding0 = TarUtils.FALLBACK_ENCODING;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-59);
      byteArray1[2] = (byte)5;
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        TarUtils.formatLongOctalOrBinaryBytes((byte) (-23), byteArray0, (byte) (-23), (byte) (-23));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -23 is too large for -23 byte field.
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = TarUtils.parseBoolean(byteArray0, 1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      // Undeclared exception!
      try { 
        TarUtils.formatLongOctalOrBinaryBytes(72057594037927936L, byteArray0, (byte)5, (byte)5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 72057594037927936 is too large for 5 byte field.
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      long long0 = TarUtils.parseOctalOrBinary(byteArray0, 2, 2);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      int int0 = TarUtils.formatLongOctalOrBinaryBytes((byte) (-1), byteArray0, (byte)5, (byte)5);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        TarUtils.formatLongOctalOrBinaryBytes((-100L), byteArray0, (byte)3, (byte)3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = TarUtils.parseName((byte[]) null, (-302), (-302));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      TarUtils.parseBoolean(byteArray0, (byte)5);
      ZipEncoding zipEncoding0 = TarUtils.DEFAULT_ENCODING;
      // Undeclared exception!
      try { 
        TarUtils.formatNameBytes("", byteArray0, (int) (byte)5, (int) (byte)5, zipEncoding0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        TarUtils.parseOctal(byteArray0, (-285), (-285));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Length -285 must be at least 2
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ZipEncoding zipEncoding0 = TarUtils.FALLBACK_ENCODING;
      // Undeclared exception!
      try { 
        TarUtils.formatNameBytes("cp", byteArray0, 1049, 1049, zipEncoding0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        TarUtils.formatOctalBytes((-1L), (byte[]) null, (-1243), (-1243));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1=1777777777777777777777 will not fit in octal number buffer of length -1245
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)29;
      // Undeclared exception!
      try { 
        TarUtils.formatNameBytes("At offset ", byteArray0, (-1852), (int) (byte)29);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ZipEncoding zipEncoding0 = TarUtils.FALLBACK_ENCODING;
      // Undeclared exception!
      try { 
        TarUtils.formatNameBytes("S/db! }8;/~yo~^o3W", byteArray0, (-918), 4, zipEncoding0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[35];
      ZipEncoding zipEncoding0 = TarUtils.FALLBACK_ENCODING;
      // Undeclared exception!
      try { 
        TarUtils.formatNameBytes("", byteArray0, (-262), (-262), zipEncoding0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      // Undeclared exception!
      try { 
        TarUtils.formatLongOctalOrBinaryBytes((byte) (-28), byteArray0, (byte) (-28), 17);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[36];
      int int0 = TarUtils.formatLongOctalOrBinaryBytes((byte)8, byteArray0, (byte)8, (byte)8);
      assertEquals(16, int0);
      
      long long0 = TarUtils.parseOctalOrBinary(byteArray0, (byte)8, (byte)8);
      assertEquals(8L, long0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        TarUtils.formatLongOctalOrBinaryBytes((byte) (-6), byteArray0, (byte) (-6), (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -6 is too large for 0 byte field.
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        TarUtils.parseName((byte[]) null, 126, 126);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      int int0 = TarUtils.formatLongOctalOrBinaryBytes(2, byteArray0, 2, 2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)50, (byte)32, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        TarUtils.formatLongOctalOrBinaryBytes((byte)5, byteArray0, (byte)5, (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5=5 will not fit in octal number buffer of length -1
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        TarUtils.verifyCheckSum((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        TarUtils.formatCheckSumOctalBytes(440, byteArray0, 440, 440);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 877
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        TarUtils.formatLongOctalOrBinaryBytes((byte)0, byteArray0, (byte)0, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ZipEncoding zipEncoding0 = TarUtils.DEFAULT_ENCODING;
      // Undeclared exception!
      try { 
        TarUtils.formatNameBytes("ckE*t", (byte[]) null, 1462, 1462, zipEncoding0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      long long0 = TarUtils.computeCheckSum(byteArray0);
      assertEquals(0L, long0);
  }
}
