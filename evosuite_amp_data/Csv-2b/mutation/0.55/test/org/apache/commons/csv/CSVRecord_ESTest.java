/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 11:22:34 GMT 2023
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.csv.CSVRecord;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVRecord_ESTest extends CSVRecord_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-2845));
      hashMap0.put("first", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "first", 95L);
      boolean boolean0 = cSVRecord0.isSet("first");
      assertEquals(95L, cSVRecord0.getRecordNumber());
      assertTrue(boolean0);
  }

  @Test
  public void test01() {}
// Defects4J: flaky method
//   @Test(timeout = 4000)
//   public void test01()  throws Throwable  {
//       String[] stringArray0 = new String[1];
//       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
//       hashMap0.clear();
//       Integer integer0 = new Integer(111);
//       hashMap0.put("first", integer0);
//       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "first", 95L);
//       cSVRecord0.spliterator();
//       boolean boolean0 = cSVRecord0.isSet("first");
//       assertEquals(95L, cSVRecord0.getRecordNumber());
//       assertFalse(boolean0);
//   }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(1);
      hashMap0.put("2*ZQ{{IIx_jnQp%H", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "2*ZQ{{IIx_jnQp%H", 1L);
      boolean boolean0 = cSVRecord0.isSet("2*ZQ{{IIx_jnQp%H");
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("first", (Integer) null);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "first", 95L);
      // Undeclared exception!
      try { 
        cSVRecord0.isSet("first");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[1];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "org.apache.commons.csv.CSVRecord", 1L);
      boolean boolean0 = cSVRecord0.isSet("org.apache.commons.csv.CSVRecord");
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[5];
      Integer integer0 = new Integer(114);
      hashMap0.put("FYjDjDrj?!xW", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[0], 411L);
      // Undeclared exception!
      try { 
        cSVRecord0.get("FYjDjDrj?!xW");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 114
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String string0 = "&gt;";
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, (Map<String, Integer>) null, "&gt;", 1324L);
      // Undeclared exception!
      try { 
        cSVRecord0.get("&gt;");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No header mapping was specified, the record values can't be accessed by name
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[8];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.clone();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "+irst", 95L);
      assertEquals(8, cSVRecord0.size());
      
      cSVRecord0.get(0);
      assertEquals(95L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[4];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[0], 847L);
      CSVRecord cSVRecord1 = new CSVRecord(stringArray0, hashMap0, "eo>/p", 847L);
      cSVRecord1.isConsistent();
      boolean boolean0 = cSVRecord0.isConsistent();
      assertFalse(boolean0);
      
      cSVRecord0.get("n22RD}S@b gUC1");
      cSVRecord0.getComment();
      int int0 = cSVRecord0.size();
      assertEquals(847L, cSVRecord0.getRecordNumber());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>", 10L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertFalse(boolean0);
      
      cSVRecord0.toString();
      assertEquals(10L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[5];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "first", 100L);
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals(5, cSVRecord0.size());
      assertEquals(100L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[8];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "org.apache.commons.csv.CSVRecord", 0L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertEquals(8, cSVRecord0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "]\"b", 95L);
      cSVRecord0.values();
      cSVRecord0.isMapped("IjNYS");
      assertEquals(95L, cSVRecord0.getRecordNumber());
      assertFalse(cSVRecord0.isConsistent());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[7];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[0], 436L);
      boolean boolean0 = cSVRecord0.isSet(stringArray0[4]);
      assertEquals(436L, cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
      assertFalse(cSVRecord0.isConsistent());
  }

  @Test
  public void test14() {}
// Defects4J: flaky method
//   @Test(timeout = 4000)
//   public void test14()  throws Throwable  {
//       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
//       String[] stringArray0 = new String[7];
//       CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[0], 436L);
//       cSVRecord0.spliterator();
//       boolean boolean0 = cSVRecord0.isSet(stringArray0[4]);
//       assertEquals(436L, cSVRecord0.getRecordNumber());
//       assertFalse(boolean0);
//       assertEquals(7, cSVRecord0.size());
//   }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "first", 95L);
      cSVRecord0.getComment();
      assertFalse(cSVRecord0.isConsistent());
      assertEquals(95L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "first", 0L);
      cSVRecord0.get("first");
      assertEquals("[null]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>", 10L);
      cSVRecord0.isConsistent();
      boolean boolean0 = cSVRecord0.isConsistent();
      assertFalse(boolean0);
      assertEquals(10L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "]{jA]", 1329L);
      assertEquals("[]", cSVRecord0.toString());
      assertEquals(1329L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "first", (-2173L));
      boolean boolean0 = cSVRecord0.isConsistent();
      assertTrue(boolean0);
      assertEquals((-2173L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[5];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[0], 458L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertFalse(boolean0);
      assertEquals(458L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[2];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[0], 436L);
      assertEquals(436L, cSVRecord0.getRecordNumber());
      assertEquals(2, cSVRecord0.size());
  }
}
