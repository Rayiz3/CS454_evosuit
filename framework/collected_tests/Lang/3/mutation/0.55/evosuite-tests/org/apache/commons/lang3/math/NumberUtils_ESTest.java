/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 20:28:58 GMT 2023
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      float[] floatArray0 = new float[5];
      double[] doubleArray0 = new double[5];
      NumberUtils.isNumber("0x1eE+|00f*01");
      NumberUtils.createNumber("-1l");
      NumberUtils.min(floatArray0);
      NumberUtils.isNumber("-1l");
      NumberUtils.isNumber("0XFqw6R]`#bb4M>");
      NumberUtils.min(doubleArray0);
      NumberUtils.isNumber("0x1eE+|00f*01");
      short[] shortArray0 = new short[6];
      NumberUtils.max(shortArray0);
      NumberUtils.min(shortArray0);
      NumberUtils.max(doubleArray0);
      Integer integer0 = NumberUtils.INTEGER_MINUS_ONE;
      NumberUtils.createNumber("1.1E700F");
      int[] intArray0 = new int[1];
      NumberUtils.min(intArray0);
      NumberUtils.createBigInteger("0");
      NumberUtils.max(intArray0);
      NumberUtils.max(floatArray0);
      byte[] byteArray0 = new byte[19];
      NumberUtils.max(byteArray0);
      long[] longArray0 = new long[3];
      NumberUtils.min(longArray0);
      String string0 = ".0";
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      NumberUtils.isNumber("1.1E700F");
      NumberUtils.min(byteArray0);
      NumberUtils.max(longArray0);
      try { 
        NumberUtils.createNumber("0XFqw6R]`#bb4M>");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Fqw6R]`#bb4M>\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      NumberUtils.isNumber("0E.");
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("011E170F");
      assertEquals(1.1E171, number0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.1E-70F");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.1L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.9");
      assertEquals(0.9F, number0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-491.141);
      doubleArray0[1] = 5.699999809265137;
      doubleArray0[2] = 1024.7980011;
      doubleArray0[3] = (-287.4);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-3153.47158);
      doubleArray0[6] = 3238.0000565;
      doubleArray0[7] = 27.0;
      double double0 = NumberUtils.max(doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = (-287.4);
      doubleArray1[2] = 5.699999809265137;
      double double1 = NumberUtils.min(doubleArray1);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0.~");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.~ is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = (short)423;
      NumberUtils.min(shortArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short)423;
      doubleArray0[1] = (double) (short)0;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = 468.8262939453125;
      doubleArray0[4] = (double) (short)0;
      doubleArray0[5] = (double) (short)0;
      doubleArray0[6] = (double) (short)0;
      doubleArray0[7] = (double) (short)0;
      NumberUtils.max(doubleArray0);
      NumberUtils.isNumber("234E5");
      try { 
        NumberUtils.createNumber("HSEWuLj'I(e{6");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"HSEW\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-700F");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xfM9T'<#");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      NumberUtils.isNumber("1e233.4ED");
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1eE+00001");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("4E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      NumberUtils.isNumber("0W");
      boolean boolean0 = NumberUtils.isNumber("-0x\"");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)61;
      NumberUtils.max(byteArray0);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-102), byte0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte) (-88);
      longArray0[1] = (long) (byte)65;
      longArray0[2] = (long) (byte)61;
      longArray0[3] = (long) (byte) (-102);
      longArray0[4] = (-2642L);
      longArray0[5] = (long) (byte) (-102);
      longArray0[6] = (long) (byte)65;
      longArray0[7] = (long) (byte) (-102);
      long long0 = NumberUtils.max(longArray0);
      assertEquals(65L, long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Number number0 = NumberUtils.createNumber(".0");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-C}oQDNw7Q^h.@egXUE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -C}oQDNw7Q^h.@egXUE is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1d");
      assertEquals(1.0, number0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x9");
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1354);
      shortArray0[1] = (short) (-2092);
      shortArray0[2] = (short)215;
      shortArray0[3] = (short)51;
      shortArray0[4] = (short) (-10);
      shortArray0[5] = (short) (-10);
      shortArray0[6] = (short)2794;
      shortArray0[7] = (short) (-1497);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-2092), short0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      try { 
        NumberUtils.createNumber("rZ}o(f[.VgZl");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // rZ}o(f[.VgZl is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234E5l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      try { 
        NumberUtils.createNumber("GcJTpw4K;EebPJ${g");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // GcJTpw4K;EebPJ${g is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("34l");
      assertEquals(34L, number0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234.5f");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      try { 
        NumberUtils.createNumber("eEb:+hqMU=raL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // eEb:+hqMU=raL is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-0xA");
      assertEquals((short) (-10), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".5F");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4179.83;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-2255.381946);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-200");
      assertEquals(1.1E-200, number0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      try { 
        NumberUtils.createNumber("`rBF");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // `rBF is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      NumberUtils.isNumber("@$");
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3371.3476247962067);
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.1E-200");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1l");
      assertEquals((-1L), number0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      try { 
        NumberUtils.createNumber("--0Xr@<p_H_)$5CfA*ul");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // --0Xr@<p_H_)$5CfA*ul is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      NumberUtils.isNumber("n");
      short short0 = NumberUtils.toShort((String) null, (short) (-1281));
      assertEquals((short) (-1281), short0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short) (-1281);
      intArray0[1] = (int) (short) (-1281);
      intArray0[2] = (int) (short) (-1281);
      intArray0[3] = (int) (short) (-1281);
      intArray0[4] = (int) (short) (-1281);
      int int0 = NumberUtils.min(intArray0);
      int int1 = NumberUtils.max(intArray0);
      assertTrue(int1 == int0);
      assertEquals((-1281), int1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      try { 
        NumberUtils.createNumber(".");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+h`1=lO");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 2356.576F;
      floatArray0[1] = 6.0F;
      floatArray0[2] = 1077.8F;
      floatArray0[3] = (-2073.023F);
      floatArray0[4] = Float.NaN;
      floatArray0[5] = (-986.0F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 172.2F;
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      try { 
        NumberUtils.createNumber("YjY13T0.nwm(\"t2");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      try { 
        NumberUtils.createNumber("NetBSD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // NetBSD is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      try { 
        NumberUtils.createNumber("e*%s~yHt/__^l}H<R#}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // e*%s~yHt/__^l}H<R#} is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      try { 
        NumberUtils.createNumber("h[3'eEga:u");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // h[3'eEga:u is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0xPEX}wU@O(frD3(p$uBT");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"PEX}w\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("01l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      try { 
        NumberUtils.createNumber("The Array must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      try { 
        NumberUtils.createNumber("o4l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // o4l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)numberUtils0.SHORT_ONE;
      NumberUtils.isNumber("0x");
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.7976931348623159e+308");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      try { 
        NumberUtils.createNumber("D");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // D is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Array cannot be empty.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Array cannot be empty. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("8");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("1");
      assertEquals((byte)1, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[1] = (int) numberUtils0.INTEGER_MINUS_ONE;
      intArray0[2] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[3] = (int) (byte)numberUtils0.BYTE_ZERO;
      intArray0[5] = (int) numberUtils0.INTEGER_MINUS_ONE;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1, int0);
      
      Float float0 = NumberUtils.FLOAT_MINUS_ONE;
      int int1 = NumberUtils.min(intArray0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      Float float0 = new Float((float) numberUtils0.BYTE_MINUS_ONE);
      NumberUtils.min((byte)34, (byte) numberUtils0.BYTE_ZERO, (byte) (-117));
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("esJcexyDU02");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.createInteger((String) null);
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger(",t.?[zUf");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \",t.?[zUf\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("C^");
      assertEquals((byte)0, byte0);
      
      NumberUtils.createNumber((String) null);
      NumberUtils.createDouble((String) null);
      boolean boolean0 = NumberUtils.isDigits("TRue");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.toByte((String) null, (byte) (-127));
      assertEquals((byte) (-127), byte0);
      
      boolean boolean0 = NumberUtils.isDigits("-#");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("123.4E+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1234.5f");
      assertEquals(1234.5F, number0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)46, (byte)46, (byte)46);
      assertEquals((byte)46, byte0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)46;
      floatArray0[1] = (float) (byte)46;
      floatArray0[2] = (float) (byte)46;
      floatArray0[3] = (float) (byte)46;
      floatArray0[4] = (float) (byte)46;
      floatArray0[5] = (float) (byte)46;
      floatArray0[6] = (float) (byte)46;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(46.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("esx");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x`BI");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      boolean boolean0 = NumberUtils.isNumber("123.4E5");
      assertTrue(boolean0);
      
      byte byte0 = NumberUtils.max((byte) numberUtils0.BYTE_MINUS_ONE, (byte)17, (byte)16);
      assertEquals((byte)17, byte0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("-#/RUo.%V#*]W5@-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      boolean boolean0 = NumberUtils.isNumber("123.4E5");
      assertTrue(boolean0);
      
      NumberUtils.createNumber("123.4E5");
      Float float0 = new Float((float) numberUtils0.BYTE_ZERO);
      byte byte0 = NumberUtils.min((byte) numberUtils0.BYTE_ONE, (byte) (-10), (byte) (-10));
      assertEquals((byte) (-10), byte0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null, (double) (byte)120);
      assertEquals(120.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)4;
      byte byte0 = NumberUtils.min((byte)4, (byte)4, (byte)4);
      assertEquals((byte)4, byte0);
      
      boolean boolean0 = NumberUtils.isDigits("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.max((-2115), (int) numberUtils0.BYTE_MINUS_ONE, 1154);
      NumberUtils.toByte("-", (byte) numberUtils0.BYTE_ZERO);
      try { 
        NumberUtils.createNumber("-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // - is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 1603;
      intArray0[1] = 46;
      intArray0[2] = 46;
      int int0 = NumberUtils.max(46, 46, 1603);
      assertEquals(1603, int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      float[] floatArray0 = new float[14];
      floatArray0[1] = 830.4F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(830.4F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = NumberUtils.max(shortArray0);
      long[] longArray0 = new long[6];
      longArray0[0] = 1287L;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)0;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1287L, long0);
      
      short short1 = NumberUtils.min((short)0, (short)0, (short)0);
      assertTrue(short1 == short0);
      assertEquals((short)0, short1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[9];
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[2] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[3] = (short)125;
      shortArray0[4] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[5] = (short) numberUtils0.SHORT_ONE;
      short short0 = new Short((short) (-1));
      doubleArray0[0] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      doubleArray0[1] = (double) (int)numberUtils0.INTEGER_ONE;
      doubleArray0[2] = (double) (short)numberUtils0.SHORT_ONE;
      doubleArray0[3] = (double) (long)numberUtils0.LONG_MINUS_ONE;
      doubleArray0[4] = (double) numberUtils0.DOUBLE_ONE;
      doubleArray0[5] = (double) (long)numberUtils0.LONG_ZERO;
      NumberUtils.isNumber("baP;p");
      doubleArray0[6] = (double) (int)numberUtils0.INTEGER_ZERO;
      doubleArray0[7] = (double) (float)numberUtils0.FLOAT_MINUS_ONE;
      NumberUtils.min(doubleArray0);
      NumberUtils.max((double) (short)125, (double) numberUtils0.BYTE_ONE, (double) numberUtils0.LONG_ZERO);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short) (-1);
      intArray0[1] = (int) numberUtils0.INTEGER_ZERO;
      intArray0[2] = (int) (short)125;
      intArray0[3] = 43;
      NumberUtils.min(intArray0);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-2765L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_087()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[9];
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[1] = (short)2182;
      shortArray0[2] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[3] = (short)125;
      shortArray0[4] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[5] = (short) numberUtils0.SHORT_ONE;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)2182, short0);
      
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) (int)numberUtils0.INTEGER_ONE;
      doubleArray0[2] = (double) (short)numberUtils0.SHORT_ONE;
      doubleArray0[3] = (double) (long)numberUtils0.LONG_MINUS_ONE;
      doubleArray0[4] = (double) numberUtils0.DOUBLE_ONE;
      doubleArray0[5] = (double) (long)numberUtils0.LONG_ZERO;
      NumberUtils.isNumber("baP;p");
      doubleArray0[6] = (double) (int)numberUtils0.INTEGER_ZERO;
      doubleArray0[7] = (double) (float)numberUtils0.FLOAT_MINUS_ONE;
      doubleArray0[8] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (byte)numberUtils0.BYTE_ZERO;
      longArray0[1] = (long) (short)0;
      longArray0[2] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      longArray0[3] = (long) (short) (-1);
      longArray0[4] = (long) (byte)numberUtils0.BYTE_MINUS_ONE;
      longArray0[5] = 1L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.max((byte)0, (byte) numberUtils0.BYTE_MINUS_ONE, (byte)81);
      NumberUtils.isNumber("e9l+^|r+fU;W$");
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.toShort("0");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      short short0 = NumberUtils.toShort("w$\"P6 ", (short)6);
      assertEquals((short)6, short0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (int)numberUtils0.INTEGER_ZERO;
      floatArray0[1] = (float) (int)numberUtils0.INTEGER_ZERO;
      floatArray0[2] = (float) (short)numberUtils0.SHORT_ZERO;
      floatArray0[3] = (float) (int)numberUtils0.INTEGER_ZERO;
      NumberUtils.max(floatArray0);
      boolean boolean0 = NumberUtils.isNumber("&KBC-E.l2Q!CsaN.]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1822107333;
      doubleArray0[1] = (double) 1822107333;
      doubleArray0[2] = (double) 1822107333;
      doubleArray0[3] = (double) (-397);
      doubleArray0[4] = (double) (-397);
      doubleArray0[5] = (double) 1822107333;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1.822107333E9, double0, 0.01);
      
      byte byte0 = NumberUtils.toByte("eL\"]VG`");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertTrue(byte1 == byte0);
      assertEquals((byte)0, byte1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      boolean boolean0 = NumberUtils.isNumber("-0x1eE+00001");
      assertFalse(boolean0);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)numberUtils0.SHORT_ONE;
      longArray0[1] = (long) (int)numberUtils0.INTEGER_ONE;
      longArray0[2] = (long) (int)numberUtils0.INTEGER_ZERO;
      longArray0[3] = (long) numberUtils0.LONG_ONE;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("4.1");
      assertEquals(4.1F, number0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int[] intArray0 = new int[15];
      intArray0[0] = 270;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("-0XYjY13T0.nwm(\"t2");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"XYjY13\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.max((-416), 97, (-416));
      assertEquals(97, int0);
      
      short short0 = NumberUtils.toShort("L+NX");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.max((byte) (-1), (byte) numberUtils0.BYTE_MINUS_ONE, (byte) (-93));
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("0x12345678");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-4537);
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      long[] longArray0 = new long[2];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)numberUtils0.SHORT_ONE;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1, int0);
      
      NumberUtils.createNumber((String) null);
      float float0 = NumberUtils.min((float) numberUtils0.INTEGER_MINUS_ONE, (float) numberUtils0.INTEGER_MINUS_ONE, (-2604.9F));
      assertEquals((-2604.9F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2504.147);
      doubleArray0[1] = 1353.3657401;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1353.3657401, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)numberUtils0.SHORT_ZERO;
      doubleArray0[1] = 1.1E200;
      NumberUtils.max(doubleArray0);
      NumberUtils.max((short) numberUtils0.BYTE_ONE, (short) numberUtils0.SHORT_ONE, (short) (-3662));
      NumberUtils.max((float) numberUtils0.BYTE_ONE, (-10.5F), (float) (short)1);
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long[] longArray0 = new long[12];
      longArray0[0] = 465L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      try { 
        NumberUtils.createNumber("--.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // --. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("123.4E5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("?^IE:2Rx&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = NumberUtils.min(18, 65, (-955));
      assertEquals((-955), int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      try { 
        NumberUtils.createNumber("minimum(short,short,short) 1 failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // minimum(short,short,short) 1 failed is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) numberUtils0.SHORT_ONE;
      shortArray0[1] = (short)1796;
      shortArray0[2] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[3] = (short) (-2761);
      shortArray0[4] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[5] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-2761), short0);
      
      short short1 = NumberUtils.max((short)8, (short) numberUtils0.BYTE_MINUS_ONE, (short)79);
      assertEquals((short)79, short1);
      
      float float0 = NumberUtils.max(1.234E8F, (-1957.9F), (-107.033F));
      assertEquals(1.234E8F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.createBigInteger((String) null);
      NumberUtils.max((long) numberUtils0.SHORT_MINUS_ONE, (-1847L), (-2373L));
      NumberUtils.toDouble("(double)");
      NumberUtils.toInt((String) null);
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.createNumber((String) null);
      double double0 = NumberUtils.toDouble("(double)");
      assertEquals(0.0, double0, 0.01);
      
      NumberUtils.createFloat((String) null);
      short short0 = NumberUtils.min((short)2170, (short)1251, (short) numberUtils0.SHORT_MINUS_ONE);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      short short0 = NumberUtils.min((short)47, (short)82, (short) (-1390));
      assertEquals((short) (-1390), short0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)46;
      shortArray0[1] = (short)46;
      shortArray0[2] = (short)48;
      short short0 = NumberUtils.min((short)48, (short)46, (short)46);
      assertEquals((short)46, short0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      try { 
        NumberUtils.createNumber("}=mjfc<yS^se@");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // }=mjfc<yS^se@ is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      try { 
        NumberUtils.createNumber("[vnZsDb;o~,B9:XX\"L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // [vnZsDb;o~,B9:XX\"L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      try { 
        NumberUtils.createNumber("min(byte[]) failed for array length 2");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long[] longArray0 = new long[13];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.max((-1151L), (-1L), 1760L);
      assertEquals(1760L, long0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0X11E0-7e00");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-11E0-7e00\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      try { 
        NumberUtils.createNumber("!85(t9");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"!85(t9\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)numberUtils0.SHORT_ONE;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1, int0);
      
      int int1 = NumberUtils.toInt("7d,@9)[8Uq3");
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)91;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xa123.E5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      boolean boolean0 = NumberUtils.isNumber("0x0x#D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x|F>`v7WaQT");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x.M");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xA");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0X");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_144()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      boolean boolean0 = NumberUtils.isNumber("-0x1eE+00001");
      assertFalse(boolean0);
      
      float float0 = NumberUtils.toFloat((String) null);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--e+0^00o");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.toInt("--1eE+00001", (int) numberUtils0.BYTE_ONE);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = NumberUtils.min((-821), 43, 43);
      assertEquals((-821), int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float float0 = NumberUtils.max((float) numberUtils0.FLOAT_MINUS_ONE, (float) numberUtils0.SHORT_ONE, (float) numberUtils0.FLOAT_ZERO);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_149()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short)45, (short) numberUtils0.SHORT_MINUS_ONE, (short) (-1837));
      assertEquals((short)45, short0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_150()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short) numberUtils0.BYTE_ZERO, (short) numberUtils0.SHORT_ONE, (short) numberUtils0.SHORT_ONE);
      assertEquals((short)1, short0);
      
      float float0 = NumberUtils.max((-10.0F), (-2552.0F), (-2552.0F));
      assertEquals((-10.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) numberUtils0.SHORT_ONE;
      shortArray0[1] = (short) numberUtils0.SHORT_ZERO;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_152()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) numberUtils0.SHORT_ONE;
      shortArray0[1] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[2] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[3] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[4] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[5] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[6] = (short) (byte)numberUtils0.BYTE_ONE;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1), short0);
      
      double double0 = NumberUtils.min((double) numberUtils0.BYTE_ONE, (double) numberUtils0.LONG_ONE, 2.90103777015544);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      NumberUtils.toLong("-0X-#1.23");
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-#");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.min((long) numberUtils0.BYTE_ONE, (long) numberUtils0.BYTE_ZERO, (long) numberUtils0.SHORT_ZERO);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      long long0 = NumberUtils.min((-540L), 1L, 213L);
      assertEquals((-540L), long0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-540L);
      floatArray0[1] = (float) 213L;
      floatArray0[2] = (float) (-540L);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-540.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      NumberUtils.toByte("C^");
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("C^");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_160()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.toByte("--1eE+00001", (byte) numberUtils0.BYTE_ONE);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 716.0F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      float float0 = NumberUtils.toFloat("V");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("-0X11E0-7e00");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_167()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[9];
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[1] = (short)2182;
      shortArray0[2] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[3] = (short)125;
      shortArray0[4] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[5] = (short) numberUtils0.SHORT_ONE;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)2182, short0);
      
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) (int)numberUtils0.INTEGER_ONE;
      doubleArray0[2] = (double) (short)numberUtils0.SHORT_ONE;
      doubleArray0[3] = (double) (long)numberUtils0.LONG_MINUS_ONE;
      doubleArray0[4] = (double) numberUtils0.DOUBLE_ONE;
      doubleArray0[5] = (double) (long)numberUtils0.LONG_ZERO;
      doubleArray0[6] = (double) (int)numberUtils0.INTEGER_ZERO;
      doubleArray0[7] = (double) (float)numberUtils0.FLOAT_MINUS_ONE;
      doubleArray0[8] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[5] = (-2861.668407400714);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-2861.668407400714), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_171()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.toLong("u6KSvt2", (long) numberUtils0.SHORT_ONE);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null, 1053L);
      assertEquals(1053L, long0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-2478);
      int int0 = NumberUtils.max(intArray0);
      assertEquals((-2478), int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int int0 = NumberUtils.min(1822107333, (-397), (-397));
      assertEquals((-397), int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-106);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_175()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[3] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[4] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[5] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[6] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[7] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[8] = (byte) numberUtils0.BYTE_ONE;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)1, byte0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[1] = (-2145686589);
      intArray0[2] = (int) (byte)1;
      intArray0[3] = (int) (byte)1;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int[] intArray0 = new int[13];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_177()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[2] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[3] = (short) numberUtils0.SHORT_ONE;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      short[] shortArray0 = new short[13];
      shortArray0[8] = (short)904;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)904, short0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1.1E200");
      assertEquals((-1.1E200), number0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.max((long) numberUtils0.BYTE_ONE, (long) numberUtils0.SHORT_ZERO, (long) numberUtils0.SHORT_ZERO);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.toDouble("kbk.T82]?i_");
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("DRe");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_185()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.min((long) numberUtils0.LONG_ONE, (long) numberUtils0.SHORT_ONE, (-1193L));
      assertEquals((-1193L), long0);
  }
}
