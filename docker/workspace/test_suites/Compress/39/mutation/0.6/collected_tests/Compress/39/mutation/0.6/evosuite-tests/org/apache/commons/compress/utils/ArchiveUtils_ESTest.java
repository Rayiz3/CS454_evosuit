/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 06:16:23 GMT 2023
 */

package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArchiveUtils_ESTest extends ArchiveUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("", 4294967294L);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("");
      String string0 = ArchiveUtils.toString((ArchiveEntry) cpioArchiveEntry0);
      ArchiveUtils.isArrayZero(byteArray0, (-9965));
      String string1 = ArchiveUtils.sanitize("");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("org.apache.commons.compress.utils.ArchiveUtils", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, (int) (byte)0, 1496, byteArray0, 2, (-609), false);
      assertFalse(boolean0);
      
      ArchiveUtils.sanitize("");
      String string0 = ArchiveUtils.sanitize("org.apache.commons.compress.utils.ArchiveUtils");
      assertEquals("org.apache.commons.compress.utils.ArchiveUtils", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, 1, 1, byteArray0, (int) (byte)2, (int) (byte)0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)2;
      System.setCurrentTimeMillis((byte)2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, 1, 1, byteArray0, 1, 1807, false);
      assertFalse(boolean0);
      
      boolean boolean1 = ArchiveUtils.isEqual(byteArray0, (int) (byte)2, (int) (byte)2, byteArray0, (int) (byte)0, 1807, true);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = ArchiveUtils.sanitize("Header format: ");
      assertEquals("Header format: ", string0);
      
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, (-2933), (int) (byte)0, byteArray0, (int) (byte)0, (int) (byte)2, true);
      assertTrue(boolean0);
      
      ArchiveUtils.toAsciiString(byteArray0, 1, (int) (byte)2);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)124;
      byteArray1[1] = (byte)20;
      byteArray1[2] = (byte)2;
      byteArray1[3] = (byte)7;
      byteArray1[4] = (byte)20;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)20;
      byteArray1[7] = (byte)2;
      byteArray1[8] = (byte)2;
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqual(byteArray0, (int) (byte)20, (int) (byte)2, byteArray1, (int) (byte)124, 97, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, 1, (byte)0, byteArray0, (byte)0, 1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArchiveUtils.sanitize("Q%\"88q");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-54);
      byte byte0 = (byte) (-104);
      byteArray0[3] = (byte) (-104);
      ArchiveUtils.toAsciiString(byteArray0, 1, 2);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", (byte)2);
      ArchiveUtils.sanitize("z'c,PMa@Y2U.");
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqual(byteArray0, 1000, 16877, byteArray0, (int) (byte) (-104), (-1829), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -829
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byte byte1 = (byte)116;
      ArchiveUtils.isEqual(byteArray0, byteArray0);
      ArchiveUtils.toAsciiString(byteArray0, 1, (int) (byte)0);
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("", 1L);
      ArchiveUtils.toString((ArchiveEntry) arArchiveEntry0);
      System.setCurrentTimeMillis((byte)116);
      int int0 = (-330);
      int int1 = 2253;
      int int2 = (-529);
      ArchiveUtils.isEqual(byteArray0, 860, 2253, byteArray0, 3260, (-529));
      // Undeclared exception!
      try { 
        ArchiveUtils.isArrayZero(byteArray0, 3260);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)0;
      boolean boolean0 = ArchiveUtils.isArrayZero(byteArray0, (byte)0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = ArchiveUtils.isEqualWithNull(byteArray0, 918, (-19), (byte[]) null, 918, (-19));
      assertTrue(boolean1 == boolean0);
      
      System.setCurrentTimeMillis(2323L);
      System.setCurrentTimeMillis((-915L));
      ArchiveUtils.sanitize("BNdi&,0 s;v?-l)5@29");
      String string0 = ArchiveUtils.sanitize("F4BC2\"X:-H`}?M");
      assertEquals("F4BC2\"?X:-H`}?M", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)69;
      byteArray0[3] = (byte)41;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-26);
      byteArray0[7] = (byte)102;
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("<1%A");
      tarArchiveEntry0.setSize((byte)41);
      tarArchiveEntry0.setDevMajor(2089);
      ArchiveUtils.toString((ArchiveEntry) tarArchiveEntry0);
      ArchiveUtils.toAsciiString(byteArray0);
      boolean boolean1 = ArchiveUtils.isEqual(byteArray0, (int) (byte)32, (int) (byte)32, byteArray0, 9559, (int) (byte) (-26), true);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)102;
      tarArchiveEntry0.setUserName("");
      String string0 = ArchiveUtils.toString((ArchiveEntry) tarArchiveEntry0);
      tarArchiveEntry0.getDirectoryEntries();
      boolean boolean2 = ArchiveUtils.isEqual(byteArray0, (int) (byte)0, 4427, byteArray0, (-13), 0, true);
      assertTrue(boolean2 == boolean1);
      
      String string1 = ArchiveUtils.sanitize("-      41 <1%A");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)0;
      boolean boolean0 = ArchiveUtils.isArrayZero(byteArray0, (byte)0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = ArchiveUtils.isEqualWithNull(byteArray0, 2, 2, byteArray0, 206, (byte)0);
      assertTrue(boolean1);
      
      System.setCurrentTimeMillis(14);
      System.setCurrentTimeMillis((-915L));
      boolean boolean2 = ArchiveUtils.isEqual(byteArray0, 4711, (-1052), byteArray0, 45, 4711, false);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, 1, 1, byteArray0, 1, (byte)0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte) (-101);
      byteArray0[6] = (byte)25;
      ArchiveUtils.isEqualWithNull(byteArray0, (byte)109, (-33), byteArray0, (byte)35, 15);
      ArchiveUtils.isArrayZero(byteArray0, (-105));
      System.setCurrentTimeMillis(2108L);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-115);
      ArchiveUtils.toAsciiString(byteArray0);
      byte[] byteArray1 = new byte[1];
      String string0 = ArchiveUtils.toAsciiString(byteArray1, (int) (byte)0, (int) (byte)0);
      assertEquals("", string0);
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("\u0000\uFFFD\uFFFD\u0000\u0000\u0000", (byte) (-115));
      String string1 = ArchiveUtils.sanitize("\u0000\uFFFD\uFFFD\u0000\u0000\u0000");
      assertEquals("??????", string1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)0;
      ArchiveUtils.isArrayZero(byteArray0, (-5866));
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, 1, 1, byteArray0, (-5866), 9604);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5866
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArchiveUtils.sanitize("");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)101;
      byteArray0[3] = (byte)20;
      byteArray0[3] = (byte)13;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)97;
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, (byte)20, (byte) (-97), byteArray0, (byte)101, (byte)20);
      assertFalse(boolean0);
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", false);
      String string0 = ArchiveUtils.toString((ArchiveEntry) tarArchiveEntry0);
      assertEquals("-       0 ", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-26);
      byteArray0[7] = (byte)102;
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("Unsupported 7z version (%d,%d)");
      tarArchiveEntry0.setSize((byte)102);
      tarArchiveEntry0.setDevMajor((byte)0);
      String string0 = ArchiveUtils.toString((ArchiveEntry) tarArchiveEntry0);
      assertEquals("-     102 Unsupported 7z version (%d,%d)", string0);
      
      ArchiveUtils.toAsciiString(byteArray0);
      boolean boolean1 = ArchiveUtils.isEqualWithNull(byteArray0, 1, 1, byteArray0, 7, 1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte) (-19);
      byteArray0[5] = (byte)46;
      ArchiveUtils.toAsciiString(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      boolean boolean0 = ArchiveUtils.isEqual(byteArray1, byteArray1);
      assertTrue(boolean0);
      
      String string0 = ArchiveUtils.toAsciiString(byteArray1, (int) (byte)0, (int) (byte)0);
      assertEquals("", string0);
      
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)32;
      byteArray2[1] = (byte)32;
      byteArray2[2] = (byte) (-31);
      byteArray2[3] = (byte) (-11);
      byteArray2[4] = (byte)32;
      boolean boolean1 = ArchiveUtils.isArrayZero(byteArray0, (byte) (-115));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-26);
      byteArray0[7] = (byte)102;
      ArchiveUtils.isEqual(byteArray0, byteArray0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("<1%A");
      tarArchiveEntry0.setSize((byte)41);
      tarArchiveEntry0.setDevMajor(2089);
      ArchiveUtils.toString((ArchiveEntry) tarArchiveEntry0);
      ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.isEqual(byteArray0, (int) (byte)32, (int) (byte)32, byteArray0, 9559, (int) (byte) (-26), true);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)102;
      byteArray1[1] = (byte)100;
      byteArray1[2] = (byte)102;
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray1, (byte)69, 1, byteArray1, 100, (byte)69);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 69
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, (int) (byte)0, (int) (byte)0, byteArray0, (int) (byte)0, (int) (byte)2, true);
      String string0 = ArchiveUtils.toAsciiString(byteArray0, (int) (byte)2, (int) (byte)0);
      assertEquals("", string0);
      
      boolean boolean1 = ArchiveUtils.isEqualWithNull(byteArray0, (byte)0, 758, byteArray0, (byte)0, (byte)2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)69;
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, (-26), (byte)0, byteArray0, (byte)0, 1612);
      boolean boolean1 = ArchiveUtils.isArrayZero(byteArray0, (byte)69);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArchiveUtils.sanitize("");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)100;
      byteArray0[3] = (byte)13;
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte)97;
      ArchiveUtils.isEqualWithNull(byteArray0, (byte)20, (byte) (-97), byteArray0, (byte)101, (byte)20);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)110;
      ArchiveUtils.toAsciiString(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = ArchiveUtils.sanitize("\u0004n");
      assertEquals("?n", string0);
      
      boolean boolean0 = ArchiveUtils.matchAsciiBuffer("r%fSp[", byteArray0, (-2701), (-1252));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = ArchiveUtils.sanitize("z^n8CT^)ry<,u");
      assertEquals("z^n8CT^)ry?<,u", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)27;
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-32);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)116;
      byteArray1[1] = (byte)116;
      byteArray1[2] = (byte)27;
      ArchiveUtils.isEqual(byteArray0, byteArray1);
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqual(byteArray1, 3, (int) (byte)98, byteArray0, 7, (int) (byte)116);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-29);
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = ArchiveUtils.isEqual(byteArray0, (-1100), (int) (byte) (-29), byteArray0, 100, (int) (byte) (-29));
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-29);
      byte[] byteArray1 = new byte[4];
      byteArray1[2] = (byte) (-29);
      ArchiveUtils.isEqual(byteArray0, byteArray1);
      ArchiveUtils.isEqual(byteArray1, (int) (byte)98, 3612, byteArray0, (int) (byte)0, (int) (byte)0);
      String string0 = ArchiveUtils.sanitize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0, "ZipEightByteInteger value: ");
      String string0 = ArchiveUtils.toString((ArchiveEntry) tarArchiveEntry0);
      assertEquals("d       0 ZipEightByteInteger value: /", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-26);
      byteArray0[7] = (byte)98;
      ArchiveUtils.isEqual(byteArray0, byteArray0);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("<1%A");
      tarArchiveEntry0.setSize((byte)46);
      tarArchiveEntry0.setDevMajor(2089);
      String string0 = ArchiveUtils.toString((ArchiveEntry) tarArchiveEntry0);
      String string1 = ArchiveUtils.toAsciiString(byteArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArjArchiveEntry arjArchiveEntry0 = new ArjArchiveEntry();
      String string0 = ArchiveUtils.toString((ArchiveEntry) arjArchiveEntry0);
      assertEquals("-       0 null", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0);
      boolean boolean1 = ArchiveUtils.isEqual(byteArray0, (-2539), (int) (byte) (-26), byteArray0, 497, (int) (byte) (-12));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = ArchiveUtils.isArrayZero(byteArray0, (-10018));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte) (-64);
      byte byte0 = (byte) (-7);
      byteArray0[2] = (byte) (-7);
      byte byte1 = (byte)19;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte) (-21);
      byte byte2 = (byte) (-10);
      byteArray0[5] = (byte) (-10);
      byte byte3 = (byte) (-15);
      byteArray0[6] = (byte) (-15);
      ArchiveUtils.isArrayZero(byteArray0, (byte) (-115));
      ArchiveUtils.isEqual(byteArray0, 501, (int) (byte) (-7), byteArray0, (int) (byte) (-15), (int) (byte)19);
      ArchiveUtils.isEqual(byteArray0, (int) (byte) (-21), (int) (byte) (-64), byteArray0, (int) (byte) (-15), (int) (byte) (-15));
      // Undeclared exception!
      try { 
        ArchiveUtils.matchAsciiBuffer((String) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)69;
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, (-26), (byte)0, byteArray0, (byte)0, (byte)0);
      boolean boolean1 = ArchiveUtils.isArrayZero(byteArray0, (byte)69);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ArchiveUtils.isEqualWithNull(byteArray0, (byte)0, (byte)0, byteArray0, 178, (byte)0);
      // Undeclared exception!
      try { 
        ArchiveUtils.isArrayZero(byteArray0, 178);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-18);
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, (byte)0, (byte)0, byteArray0, (byte)0, 45);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = ArchiveUtils.sanitize("c3|J@Vobox");
      assertEquals("c3|J@Vobox", string0);
      
      ArchiveUtils.isEqualWithNull(byteArray0, (-20), (-20), byteArray0, (-61), (-20));
      boolean boolean1 = ArchiveUtils.matchAsciiBuffer("[L~JEw4h-", byteArray0);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ArchiveUtils.matchAsciiBuffer("[L~JEw4h-", byteArray0, (-20), (-120));
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, (int) (byte)3, (int) (byte)3, byteArray0, (int) (byte)3, 9, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)5;
      boolean boolean0 = ArchiveUtils.matchAsciiBuffer(":qC[&M{Ue", byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString(byteArray0, (-6271), (-6271));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-19);
      String string0 = ArchiveUtils.toAsciiString(byteArray0);
      assertEquals("\uFFFD\uFFFD\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = ArchiveUtils.sanitize("N@Q(c}A=Pqp4");
      assertEquals("N@Q(c}A=Pqp4", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, (byte)97, (byte)97, byteArray0, (byte)0, (-1404));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1307
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, 1, 1, byteArray0, 1, 1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiBytes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, (byte)97, (byte)97, byteArray0, (byte)0, (byte)97);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 97
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ArjArchiveEntry arjArchiveEntry0 = new ArjArchiveEntry();
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqual((byte[]) null, 37, 37, (byte[]) null, 161, 161);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, 3015, (byte)97, byteArray0, (byte)0, 3015);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3015
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }
}
