/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 17 00:25:19 GMT 2023
 */

package org.apache.commons.math.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(8.264462849183474E-6);
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(3.945247871835613E88, 3.945247871835613E88, 57);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 39,452,478,718,356,130,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 2147483607;
      int int1 = 2147483607;
      BigFraction bigFraction0 = BigFraction.getReducedFraction(2147483607, 2147483607);
      bigFraction0.intValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      bigFraction0.pow(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      BigFraction bigFraction2 = null;
      // Undeclared exception!
      try { 
        bigFraction1.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(87.94, 0.0, (-823));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 87.94 to fraction after -823 iterations
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(691062, 2520);
      bigFraction0.percentageValue();
      int int0 = 11;
      BigFraction bigFraction1 = BigFraction.getReducedFraction(11, 11);
      bigFraction1.getDenominatorAsInt();
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction((double) 1, 11);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 1 to fraction (-9,223,372,036,854,775,808/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.longValue();
      BigFraction bigFraction1 = new BigFraction((double) 0L);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction2.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((long) 317390);
      bigFraction0.toString();
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      BigFraction bigFraction3 = BigFraction.getReducedFraction(0, (-514));
      double double0 = bigFraction2.percentageValue();
      assertEquals(800.0, double0, 0.01);
      
      BigFraction bigFraction4 = new BigFraction(4.116164446561962E-8, 1457);
      assertTrue(bigFraction4.equals((Object)bigFraction3));
      
      BigFraction bigFraction5 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction6 = bigFraction5.multiply(bigFraction0);
      assertEquals((short)0, bigFraction6.shortValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.longValue();
      BigFraction bigFraction1 = new BigFraction((double) 0L);
      bigFraction1.TWO_QUARTERS.getDenominatorAsLong();
      BigFraction bigFraction2 = new BigFraction(625.0588998052781, 4112);
      BigFraction bigFraction3 = bigFraction0.add(bigFraction1);
      assertSame(bigFraction3, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      bigFraction0.bigDecimalValue();
      // Undeclared exception!
      try { 
        bigFraction2.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = bigFraction0.reduce();
      BigFraction bigFraction2 = bigFraction1.ZERO.multiply(493);
      bigFraction2.TWO_QUARTERS.percentageValue();
      BigFraction bigFraction3 = bigFraction2.TWO_FIFTHS.subtract(493);
      bigFraction3.TWO_FIFTHS.toString();
      bigFraction1.ONE_HALF.doubleValue();
      bigFraction0.compareTo(bigFraction1);
      // Undeclared exception!
      try { 
        bigFraction3.divide(bigFraction2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.0);
      bigFraction0.ONE_THIRD.longValue();
      BigFraction bigFraction1 = new BigFraction((double) 0L);
      BigFraction bigFraction2 = bigFraction0.add(9007199254740976L);
      assertEquals((short) (-15), bigFraction2.shortValue());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.divide(bigInteger0);
      BigFraction bigFraction3 = new BigFraction(5.427474798125331E-5, 629);
      BigFraction bigFraction4 = bigFraction1.abs();
      assertTrue(bigFraction4.equals((Object)bigFraction3));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2165.924453306402), 2147193800);
      assertEquals((short) (-2165), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.ONE;
      // Undeclared exception!
      try { 
        bigFraction0.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(5.427474798125331E-5);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.ONE_QUARTER.pow(bigInteger0);
      Random.setNextRandom(2163);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = (-889);
      BigFraction bigFraction0 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.pow((long) (-889));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.longValue();
      bigFraction0.longValue();
      BigFraction bigFraction1 = new BigFraction((double) 0L);
      BigFraction bigFraction2 = bigFraction1.multiply(bigFraction0);
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 1993L);
      BigFraction bigFraction1 = bigFraction0.subtract((-1L));
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      BigFraction bigFraction2 = bigFraction1.multiply(bigFraction0);
      bigFraction0.subtract(bigInteger0);
      bigFraction1.hashCode();
      BigFraction bigFraction3 = bigFraction2.divide(14);
      bigFraction0.getNumeratorAsInt();
      bigFraction0.longValue();
      BigFraction bigFraction4 = bigFraction0.subtract((-2147483645));
      int int0 = bigFraction3.getDenominatorAsInt();
      assertEquals((byte) (-44), bigFraction3.byteValue());
      assertEquals(7, int0);
      
      BigFraction bigFraction5 = bigFraction2.subtract((-195));
      BigFraction bigFraction6 = bigFraction5.divide(bigFraction2);
      assertEquals((short)1, bigFraction6.shortValue());
      
      BigFraction bigFraction7 = bigFraction4.subtract(bigInteger0);
      int int1 = bigFraction1.compareTo(bigFraction7);
      assertEquals((-1), int1);
      assertEquals((short)1989, bigFraction7.shortValue());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1134.6480938734), 1026);
      assertEquals((short) (-1134), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1134.6480938734), 317415);
      assertEquals((short) (-1134), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.longValue();
      BigFraction bigFraction1 = new BigFraction(0L);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction0.subtract(bigInteger0);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.getNumeratorAsInt();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      double double0 = bigFraction1.doubleValue();
      assertEquals(1.0, double0, 0.01);
      
      Object object0 = new Object();
      boolean boolean0 = bigFraction0.equals(bigFraction1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-1.0), (-898));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -1 to fraction (-9,223,372,036,854,775,806/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.reciprocal();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) 317415, 317415);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 317,415 to fraction (9,223,372,036,854,458,394/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = new BigFraction(57, 57, 57);
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      BigFraction bigFraction3 = bigFraction0.multiply(bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertEquals((short)14, bigFraction3.shortValue());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(317415, 1855425871872L);
      String string0 = bigFraction0.toString();
      assertEquals("105805 / 618475290624", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 317415);
      assertEquals((short) (-10265), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-583.7));
      assertEquals((short) (-583), bigFraction0.shortValue());
      
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction1.MINUS_ONE.divide((-142));
      assertEquals((short)0, bigFraction2.shortValue());
      
      BigFraction bigFraction3 = bigFraction0.multiply(bigFraction1);
      assertEquals((short) (-233), bigFraction3.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction2));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.TWO.add(2226);
      assertEquals((byte) (-76), bigFraction1.byteValue());
      
      bigFraction0.longValue();
      BigFraction bigFraction2 = new BigFraction((double) 10L);
      assertTrue(bigFraction2.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(351, 1977);
      bigFraction0.ONE.doubleValue();
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.reciprocal();
      BigFraction bigFraction2 = BigFraction.ONE;
      BigFraction bigFraction3 = bigFraction1.ONE_QUARTER.add((long) 1977);
      bigFraction2.FOUR_FIFTHS.bigDecimalValue();
      BigFraction bigFraction4 = bigFraction0.ZERO.subtract(bigFraction2);
      BigFraction bigFraction5 = bigFraction0.ZERO.subtract(bigFraction1);
      BigFraction bigFraction6 = bigFraction4.THREE_FIFTHS.negate();
      BigFraction bigFraction7 = bigFraction6.TWO_QUARTERS.subtract(1977);
      int int0 = bigFraction0.getDenominatorAsInt();
      assertEquals(659, int0);
      
      BigFraction bigFraction8 = bigFraction0.divide(351);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction9 = bigFraction8.THREE_FIFTHS.add(bigInteger0);
      bigFraction9.ZERO.multiply(bigInteger0);
      bigFraction8.ONE_HALF.divide(351);
      bigFraction5.hashCode();
      bigFraction8.ONE_THIRD.subtract((-2320L));
      BigFraction bigFraction10 = bigFraction3.MINUS_ONE.divide((long) 659);
      bigFraction10.THREE_FIFTHS.add(bigInteger0);
      int int1 = bigFraction8.compareTo(bigFraction4);
      assertEquals(1, int1);
      
      bigFraction1.getDenominator();
      BigFraction bigFraction11 = bigFraction2.MINUS_ONE.pow(bigInteger0);
      BigFraction bigFraction12 = bigFraction3.negate();
      assertEquals((short) (-1977), bigFraction12.shortValue());
      
      BigFraction bigFraction13 = bigFraction5.divide(1);
      assertTrue(bigFraction13.equals((Object)bigFraction5));
      assertEquals((byte) (-1), bigFraction13.byteValue());
      
      BigFraction bigFraction14 = bigFraction11.add(1171);
      assertEquals((short)1170, bigFraction14.shortValue());
      
      bigFraction11.abs();
      bigFraction2.subtract(351);
      double double0 = bigFraction7.percentageValue();
      assertEquals((-197650.0), double0, 0.01);
      assertFalse(bigFraction4.equals((Object)bigFraction5));
      assertEquals((byte) (-1), bigFraction4.byteValue());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.TWO_QUARTERS.negate();
      bigFraction0.longValue();
      BigFraction bigFraction1 = new BigFraction((double) 0L);
      Random.setNextRandom(1428);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.TWO.divide(2147483647L);
      BigFraction bigFraction1 = BigFraction.TWO;
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      assertEquals((byte)0, bigFraction2.byteValue());
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      
      bigFraction1.toString();
      assertFalse(bigFraction1.equals((Object)bigFraction2));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = BigFraction.ONE;
      BigFraction bigFraction2 = bigFraction0.MINUS_ONE.subtract(bigFraction1);
      bigFraction2.MINUS_ONE.abs();
      BigFraction bigFraction3 = null;
      try {
        bigFraction3 = new BigFraction((double) 2140052908, 2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,140,052,908 to fraction (-2,140,052,907/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.FOUR_FIFTHS.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-453.371), (-898));
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertEquals((short) (-23552), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = bigFraction0.pow(144);
      bigFraction1.ONE_QUARTER.floatValue();
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      bigFraction1.MINUS_ONE.intValue();
      BigFraction bigFraction2 = bigFraction1.divide(bigFraction0);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)1, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      float float0 = bigFraction0.THREE_QUARTERS.floatValue();
      assertEquals(0.75F, float0, 0.01F);
      
      String string0 = bigFraction0.toString();
      assertEquals("1 / 4", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      boolean boolean0 = bigFraction0.ONE.equals(bigFraction1);
      assertFalse(boolean0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction2 = BigFraction.TWO_QUARTERS;
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction2.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.longValue();
      bigFraction0.ZERO.getDenominatorAsLong();
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1190, (-494));
      assertEquals((byte) (-2), bigFraction0.byteValue());
      
      BigFraction bigFraction1 = new BigFraction((-3334.752), 1190);
      assertEquals((byte) (-6), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = BigFraction.ONE_QUARTER;
      bigFraction0.ONE.subtract(bigFraction1);
      bigFraction0.longValue();
      // Undeclared exception!
      try { 
        bigFraction1.divide((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.getDenominator();
      BigFraction bigFraction1 = BigFraction.ZERO;
      int int0 = bigFraction0.compareTo(bigFraction1);
      assertEquals(1, int0);
      
      bigFraction0.getNumerator();
      BigFraction bigFraction2 = bigFraction0.reciprocal();
      assertEquals((short)2, bigFraction2.shortValue());
      
      BigFraction bigFraction3 = bigFraction0.subtract(bigFraction1);
      assertSame(bigFraction3, bigFraction0);
      
      bigFraction1.multiply(4);
      assertFalse(bigFraction1.equals((Object)bigFraction3));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.ZERO.pow(9007199254740992L);
      Random.setNextRandom((-2147483646));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      bigFraction1.ONE_HALF.abs();
      bigFraction1.ONE.pow(4294967295L);
      double double0 = bigFraction1.THREE_QUARTERS.percentageValue();
      assertEquals(75.0, double0, 0.01);
      
      BigFraction bigFraction2 = new BigFraction((-172.75), (-1329));
      assertEquals((short) (-173), bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      // Undeclared exception!
      try { 
        bigFraction0.TWO_FIFTHS.bigDecimalValue((-898), (-898));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1637.3);
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      BigFraction bigFraction2 = bigFraction1.multiply(bigFraction0);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((byte)0, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.THREE_QUARTERS.multiply(bigFraction1);
      assertEquals((short)0, bigFraction2.shortValue());
      
      BigFraction bigFraction3 = BigFraction.getReducedFraction((-5529), 154);
      String string0 = bigFraction3.toString();
      assertEquals("-5529 / 154", string0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction4 = bigFraction3.add(bigInteger0);
      bigFraction4.longValue();
      BigFraction bigFraction5 = bigFraction0.subtract(6765L);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
      assertEquals((short) (-6764), bigFraction5.shortValue());
      
      bigFraction3.getField();
      assertEquals((byte) (-35), bigFraction3.byteValue());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      long long0 = bigFraction0.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      String string0 = bigFraction0.toString();
      assertEquals("1 / 2", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2L), (-2L));
      BigFraction bigFraction1 = bigFraction0.add(9007199254740976L);
      assertEquals((short) (-15), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      bigFraction0.ONE_QUARTER.hashCode();
      bigFraction0.toString();
      String string0 = bigFraction0.toString();
      assertEquals("1 / 4", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.MINUS_ONE.getDenominatorAsInt();
      bigFraction0.longValue();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Non-terminating decimal expansion; no exact representable decimal result.
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      String string0 = bigFraction0.toString();
      assertEquals("-1", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.add(bigInteger0);
      assertEquals((byte)10, bigFraction1.byteValue());
      
      float float0 = bigFraction0.TWO_FIFTHS.floatValue();
      assertEquals(0.4F, float0, 0.01F);
      
      String string0 = bigFraction0.toString();
      assertEquals("1 / 2", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = new BigFraction((-927));
      bigFraction1.THREE_FIFTHS.percentageValue();
      bigFraction0.ONE_THIRD.add(bigFraction1);
      BigFraction bigFraction2 = bigFraction0.ONE_QUARTER.add(0L);
      bigFraction2.THREE_QUARTERS.hashCode();
      bigFraction0.TWO.reciprocal();
      bigFraction0.toString();
      bigFraction2.getDenominatorAsInt();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(1023);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      // Undeclared exception!
      try { 
        bigFraction0.TWO_QUARTERS.bigDecimalValue((-10));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction2 = bigFraction1.divide(bigFraction0);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((short)1, bigFraction2.shortValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(75025L);
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.ZERO.add(bigFraction1);
      float float0 = bigFraction0.floatValue();
      assertEquals(75025.0F, float0, 0.01F);
      
      BigInteger bigInteger0 = bigFraction2.getNumerator();
      assertEquals((byte)4, bigInteger0.byteValue());
      
      BigFraction bigFraction3 = bigFraction2.add(2);
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction2));
      assertEquals((short)2, bigFraction3.shortValue());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.subtract((-974));
      BigFraction bigFraction1 = bigFraction0.subtract(613555800);
      assertEquals((short) (-7769), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-516.4498012188044));
      bigFraction0.ONE_FIFTH.getNumeratorAsInt();
      String string0 = bigFraction0.toString();
      assertEquals("-2271370246410717 / 4398046511104", string0);
      assertEquals((short) (-516), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.TWO_QUARTERS.getDenominatorAsLong();
      String string0 = bigFraction0.toString();
      assertEquals("10", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      BigFraction bigFraction2 = BigFraction.MINUS_ONE;
      String string0 = bigFraction2.TWO_FIFTHS.toString();
      assertEquals("2 / 5", string0);
      
      BigFraction bigFraction3 = bigFraction2.add(bigFraction0);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((short) (-2), bigFraction3.shortValue());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.TWO_FIFTHS.getNumeratorAsLong();
      String string0 = bigFraction0.toString();
      assertEquals("1 / 2", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      int int0 = bigFraction0.MINUS_ONE.compareTo(bigFraction1);
      assertEquals((-1), int0);
      
      bigFraction0.longValue();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      
      BigFraction bigFraction2 = new BigFraction((double) 317415);
      assertEquals((short) (-10265), bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2974.091));
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.subtract(5040L);
      assertEquals((byte)81, bigFraction1.byteValue());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction0.divide(bigInteger0);
      assertEquals((short) (-2974), bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(5.427474798125331E-5);
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.THREE_QUARTERS.add(bigFraction1);
      assertEquals((short)1, bigFraction2.shortValue());
      
      String string0 = bigFraction0.toString();
      assertEquals("119351433 / 2199023255552", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.TWO.multiply(2147352583);
      assertEquals((short)14, bigFraction1.shortValue());
      
      String string0 = bigFraction0.toString();
      assertEquals("1 / 4", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.ONE.pow((-191));
      bigFraction1.THREE_FIFTHS.floatValue();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.toString();
      BigInteger bigInteger1 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.multiply(2502L);
      bigFraction1.ONE.getField();
      // Undeclared exception!
      try { 
        bigFraction0.MINUS_ONE.bigDecimalValue((-2836));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      Object object0 = new Object();
      boolean boolean0 = bigFraction0.equals(object0);
      assertEquals((byte)10, bigFraction0.byteValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(1670, 1670);
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      int int0 = bigFraction0.compareTo(bigFraction1);
      assertEquals(1, int0);
      
      BigFraction bigFraction2 = bigFraction1.ONE.add(bigFraction0);
      bigFraction1.TWO.getField();
      double double0 = bigFraction1.pow((-281.0));
      assertEquals(2.185237487587341E62, double0, 0.01);
      
      BigFraction bigFraction3 = bigFraction0.TWO_FIFTHS.multiply((long) 1);
      long long0 = bigFraction0.getNumeratorAsLong();
      assertEquals(1L, long0);
      
      BigFraction bigFraction4 = bigFraction0.subtract((long) 1);
      bigFraction2.pow((-4115));
      assertEquals((short)2, bigFraction2.shortValue());
      
      BigFraction bigFraction5 = bigFraction4.multiply(2292);
      assertTrue(bigFraction5.equals((Object)bigFraction4));
      assertFalse(bigFraction5.equals((Object)bigFraction3));
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.THREE_QUARTERS.pow(3254.86761112004);
      double double0 = bigFraction0.THREE_FIFTHS.pow(0.018750696067355577);
      assertEquals(0.9904673901358167, double0, 0.01);
      
      bigFraction0.ONE_HALF.bigDecimalValue();
      String string0 = bigFraction0.toString();
      assertEquals("1 / 2", string0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(317415, 317415);
      assertEquals((short)1, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      bigFraction0.subtract(bigInteger0);
      assertEquals((short)10, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      double double0 = bigFraction0.ONE_HALF.percentageValue();
      assertEquals(50.0, double0, 0.01);
      
      String string0 = bigFraction0.toString();
      assertEquals("1 / 4", string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.ONE_HALF.getField();
      BigFraction bigFraction1 = new BigFraction(0.371698260307312);
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      Object object0 = new Object();
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction2 = BigFraction.ONE_QUARTER;
      boolean boolean0 = bigFraction1.equals(bigFraction2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      double double0 = bigFraction0.doubleValue();
      assertEquals(0.5, double0, 0.01);
  }
}
