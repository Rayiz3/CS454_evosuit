/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 11:01:46 GMT 2023
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thoughtworks.xstream.security.ForbiddenClassException;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiFunction;
import org.apache.commons.csv.CSVRecord;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.testcarver.testcase.EvoSuiteXStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVRecord_ESTest extends CSVRecord_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(2315);
      hashMap0.put((String) null, integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, (String) null, 1L);
      // Undeclared exception!
      try { 
        cSVRecord0.get((String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2315
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[2];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-2596));
      hashMap0.put((String) null, integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, (String) null, (-864L));
      boolean boolean0 = cSVRecord0.isSet((String) null);
      assertEquals("[null, null]", cSVRecord0.toString());
      assertEquals((-864L), cSVRecord0.getRecordNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</strinU>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      hashMap1.values();
      Integer integer0 = new Integer(3703);
      hashMap0.put((String) null, integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, (String) null, 947L);
      cSVRecord0.iterator();
      boolean boolean0 = cSVRecord0.isSet((String) null);
      CSVRecord cSVRecord1 = new CSVRecord(stringArray0, hashMap1, (String) null, 947L);
      boolean boolean1 = cSVRecord0.isConsistent();
      assertTrue(boolean1 == boolean0);
      
      cSVRecord0.getComment();
      int int0 = cSVRecord1.size();
      assertEquals(947L, cSVRecord1.getRecordNumber());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[3];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(255);
      hashMap0.put((String) null, integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, (String) null, 262L);
      boolean boolean0 = cSVRecord0.isSet((String) null);
      assertEquals(262L, cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
      assertEquals(3, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[1];
      hashMap0.put("<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>", (Integer) null);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>", (-1L));
      // Undeclared exception!
      try { 
        cSVRecord0.isSet("<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, (String) null, 270L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertFalse(boolean0);
      
      cSVRecord0.getComment();
      int int0 = cSVRecord0.size();
      assertEquals(270L, cSVRecord0.getRecordNumber());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, ">.}>NNsoB-DKaQ%^2R", 3178L);
      cSVRecord0.isMapped(">.}>NNsoB-DKaQ%^2R");
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals(3178L, long0);
      
      cSVRecord0.get("gmoq`{(t>N8?^6eU=");
      boolean boolean0 = cSVRecord0.isSet("go8DcYbVor}@ u4Ncj");
      assertFalse(boolean0);
      assertEquals("[]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[2] = "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[3] = "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[4] = "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>", (-1148L));
      cSVRecord0.iterator();
      cSVRecord0.isConsistent();
      cSVRecord0.spliterator();
      cSVRecord0.get("B");
      cSVRecord0.getRecordNumber();
      Integer integer0 = new Integer(1);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(".D$r;+NT", integer0, biFunction0);
      CSVRecord cSVRecord1 = new CSVRecord(stringArray0, hashMap0, "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>", (-1148L));
      cSVRecord1.isConsistent();
      // Undeclared exception!
      try { 
        cSVRecord0.get((-2013));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2013
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "No header mapping was specified, the record values can't be accessed by name";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "No header mapping was specified, the record values can't be accessed by name", 3166L);
      CSVRecord cSVRecord1 = new CSVRecord(stringArray0, hashMap0, "No header mapping was specified, the record values can't be accessed by name", 3166L);
      cSVRecord1.isMapped("A");
      String string0 = cSVRecord0.toString();
      assertEquals("[No header mapping was specified, the record values can't be accessed by name, null]", string0);
      
      cSVRecord0.isMapped("fourth");
      cSVRecord1.isMapped("fourth");
      assertEquals(3166L, cSVRecord1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "Q4!Z6Dg(H'f", (-3523L));
      boolean boolean0 = cSVRecord0.isConsistent();
      assertEquals((-3523L), cSVRecord0.getRecordNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[5];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, (String) null, 1L);
      boolean boolean0 = cSVRecord0.isSet((String) null);
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertFalse(cSVRecord0.isConsistent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[8];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "wrong schema", 276L);
      boolean boolean0 = cSVRecord0.isMapped("wrong schema");
      assertFalse(boolean0);
      assertEquals(276L, cSVRecord0.getRecordNumber());
      assertEquals("[null, null, null, null, null, null, null, null]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "C";
      stringArray0[2] = "C";
      stringArray0[3] = "C";
      stringArray0[4] = "C";
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "iR-\"`&YY0SE k{", 2771L);
      cSVRecord0.isConsistent();
      cSVRecord0.spliterator();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord1 = new CSVRecord(stringArray0, hashMap0, "3h}[zB\"l-`Ze", 633L);
      boolean boolean0 = cSVRecord1.isConsistent();
      cSVRecord1.isConsistent();
      boolean boolean1 = cSVRecord0.isConsistent();
      assertFalse(boolean1 == boolean0);
      
      cSVRecord0.values();
      assertEquals(2771L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[2];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, (String) null, 255L);
      cSVRecord0.get((String) null);
      assertEquals(255L, cSVRecord0.getRecordNumber());
      assertEquals(2, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[23];
      String string0 = null;
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, (String) null, (-3523L));
      // Undeclared exception!
      try { 
        cSVRecord0.get("+Pjlmp");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No header mapping was specified, the record values can't be accessed by name
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "Qdq", (-61441L));
      assertEquals("[]", cSVRecord0.toString());
      assertEquals((-61441L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[1];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[0], (-3523L));
      assertEquals((-3523L), cSVRecord0.getRecordNumber());
      assertFalse(cSVRecord0.isConsistent());
      
      boolean boolean0 = cSVRecord0.isMapped(stringArray0[0]);
      assertEquals((-3523L), cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
      assertEquals("[null]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[2];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "w(hmZOI$dVeMx/KOW|5", (-331L));
      boolean boolean0 = cSVRecord0.isConsistent();
      assertEquals((-331L), cSVRecord0.getRecordNumber());
      assertTrue(boolean0);
      assertEquals("[null, null]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[2] = "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[3] = "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[4] = "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>", (-1148L));
      cSVRecord0.iterator();
      cSVRecord0.isConsistent();
      // Undeclared exception!
      try { 
        EvoSuiteXStream.fromString("<org.apache.commons.csv.CSVRecord>\n  <values>\n    <string>first</string>\n    <string>second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>");
        fail("Expecting exception: ForbiddenClassException");
      
      } catch(ForbiddenClassException e) {
         //
         // org.apache.commons.csv.CSVRecord
         //
         verifyException("com.thoughtworks.xstream.security.NoTypePermission", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[14];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[0], (-3547L));
      boolean boolean0 = cSVRecord0.isConsistent();
      assertFalse(boolean0);
      assertEquals((-3547L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[14];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[0], (-3523L));
      cSVRecord0.iterator();
      boolean boolean0 = cSVRecord0.isMapped(stringArray0[0]);
      assertFalse(boolean0);
      assertEquals("[null, null, null, null, null, null, null, null, null, null, null, null, null, null]", cSVRecord0.toString());
      assertEquals((-3523L), cSVRecord0.getRecordNumber());
  }
}
