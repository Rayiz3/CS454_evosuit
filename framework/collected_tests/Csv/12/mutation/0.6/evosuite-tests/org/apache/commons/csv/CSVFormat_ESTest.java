/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 17:51:55 GMT 2023
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.Locale;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVFormat_ESTest extends CSVFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('l');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('l');
      cSVFormat2.getDelimiter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[6] = (Object) cSVFormat1;
      objectArray0[7] = (Object) cSVFormat2;
      cSVFormat0.RFC4180.format(objectArray0);
      cSVFormat1.equals(cSVFormat2);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Js*;q0_+]3+Oi/D?g";
      stringArray0[2] = "hello,\r\n\r\nworld,\n";
      stringArray0[3] = "\"QHn^K=_?";
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat2.print(stringWriter0);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      // Undeclared exception!
      try { 
        cSVFormat0.DEFAULT.withDelimiter('\r');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The delimiter cannot be a line break
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      CSVFormat cSVFormat1 = CSVFormat.newFormat('l');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(':');
      cSVFormat2.getDelimiter();
      assertEquals(":", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isNullStringSet());
      
      boolean boolean0 = cSVFormat1.equals((Object) null);
      CSVFormat cSVFormat3 = CSVFormat.newFormat('l');
      boolean boolean1 = cSVFormat1.equals(cSVFormat3);
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(boolean1 == boolean0);
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertEquals('l', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      CSVFormat cSVFormat1 = CSVFormat.newFormat('l');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('l');
      cSVFormat0.getDelimiter();
      boolean boolean0 = cSVFormat1.equals(cSVFormat2);
      assertFalse(boolean0);
      assertEquals("l", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isNullStringSet());
      
      boolean boolean1 = cSVFormat1.equals("+*a;q\"_+]3+Oi/D?g");
      assertFalse(boolean1);
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('l', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      boolean boolean0 = cSVFormat2.equals(cSVFormat1);
      assertFalse(boolean0);
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('-');
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat1.hashCode();
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('-', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\"QHn^K=_?";
      stringArray0[1] = "block";
      stringArray0[2] = "Me";
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(stringArray0);
      StringReader stringReader0 = new StringReader("KcU)pR|");
      cSVFormat0.parse(stringReader0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      cSVFormat2.toString();
      cSVFormat1.hashCode();
      Character character0 = new Character('\r');
      // Undeclared exception!
      try { 
        cSVFormat2.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start marker character cannot be a line break
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('_');
      char char0 = cSVFormat1.getDelimiter();
      assertEquals('\t', char0);
      
      Character character0 = new Character('_');
      Character character1 = Character.valueOf('w');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape(character1);
      boolean boolean0 = cSVFormat1.equals(cSVFormat2);
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("Kb4");
      boolean boolean0 = cSVFormat1.equals(cSVFormat0);
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(boolean0);
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      cSVFormat1.getHeader();
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      boolean boolean1 = cSVFormat0.equals(object0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(":");
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("elp8q@V)");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);
      cSVFormat1.equals(cSVFormat3);
      boolean boolean0 = cSVFormat2.equals(cSVFormat3);
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(boolean0);
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertEquals("\r\n", cSVFormat3.getRecordSeparator());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("elp8q@V)");
      cSVFormat0.equals(cSVFormat1);
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("elp8q@V)", cSVFormat1.getNullString());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Kb4");
      cSVFormat1.equals(cSVFormat0);
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("Kb4", cSVFormat1.getNullString());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Requested memory: ");
      assertEquals("Requested memory: ", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Requested memory: ";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      cSVFormat2.getHeader();
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals("Requested memory: ", cSVFormat2.getNullString());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("\r\n", cSVFormat2.getRecordSeparator());
      assertEquals(',', cSVFormat1.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      
      cSVFormat0.equals(cSVFormat1);
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('\\');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('\\');
      cSVFormat1.getDelimiter();
      cSVFormat0.getEscapeCharacter();
      cSVFormat0.getQuoteCharacter();
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("\n/* group sorted */");
      Object[] objectArray0 = new Object[1];
      String string0 = cSVFormat3.format(objectArray0);
      assertEquals("\"\"\n/* group sorted */", string0);
      
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat4 = cSVFormat1.withQuoteMode(quoteMode0);
      boolean boolean0 = cSVFormat2.equals(quoteMode0);
      assertFalse(boolean0);
      
      cSVFormat0.getQuoteCharacter();
      cSVFormat4.hashCode();
      cSVFormat4.getHeader();
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.hashCode();
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      boolean boolean0 = cSVFormat0.equals(cSVFormat0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", string0);
      
      Character character0 = new Character('f');
      CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
      cSVFormat1.hashCode();
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertFalse(boolean0);
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('`');
      StringReader stringReader0 = new StringReader("3N");
      cSVFormat0.MYSQL.withRecordSeparator("Y");
      cSVFormat0.toString();
      Character character0 = Character.valueOf('`');
      // Undeclared exception!
      try { 
        cSVFormat0.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('`')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('#');
      cSVFormat1.getQuoteCharacter();
      CSVFormat cSVFormat2 = cSVFormat1.withNullString(" SurroundingSpaces:ignored");
      cSVFormat2.getIgnoreEmptyLines();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9");
      CSVFormat cSVFormat3 = cSVFormat1.RFC4180.withQuote('-');
      assertEquals('-', (char)cSVFormat3.getQuoteCharacter());
      assertEquals(',', cSVFormat3.getDelimiter());
      
      CSVFormat cSVFormat4 = cSVFormat2.withDelimiter('#');
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames(false);
      assertEquals('#', cSVFormat5.getDelimiter());
      
      cSVFormat2.hashCode();
      cSVFormat2.hashCode();
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("#", cSVFormat2.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Kb4");
      cSVFormat1.hashCode();
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals("Kb4", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('R');
      Character character0 = Character.valueOf('R');
      // Undeclared exception!
      try { 
        cSVFormat0.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('R')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Kb4");
      String[] stringArray0 = new String[1];
      boolean boolean0 = cSVFormat1.equals(cSVFormat0);
      assertFalse(boolean0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      String string0 = cSVFormat2.toString();
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("Delimiter=<,> QuoteChar=<\"> NullString=<Kb4> RecordSeparator=<\r\n> SkipHeaderRecord:false Header:[null]", string0);
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      boolean boolean0 = cSVFormat1.equals(cSVFormat0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('u');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(boolean0);
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('u', (char)cSVFormat1.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('#');
      assertEquals("#", cSVFormat1.getRecordSeparator());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      
      CSVFormat cSVFormat2 = CSVFormat.newFormat('h');
      boolean boolean0 = cSVFormat2.getIgnoreEmptyLines();
      boolean boolean1 = cSVFormat2.equals(cSVFormat0);
      assertTrue(boolean1 == boolean0);
      
      Character character0 = new Character('r');
      CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
      CSVFormat cSVFormat4 = cSVFormat2.withDelimiter('p');
      cSVFormat4.getQuoteCharacter();
      assertEquals('p', cSVFormat4.getDelimiter());
      
      cSVFormat3.getIgnoreEmptyLines();
      cSVFormat0.hashCode();
      cSVFormat3.hashCode();
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertEquals('h', cSVFormat3.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('#');
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      
      cSVFormat1.hashCode();
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('\\');
      cSVFormat0.getDelimiter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character character0 = new Character('\\');
      CSVFormat cSVFormat2 = cSVFormat1.TDF.withEscape(character0);
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      
      cSVFormat0.getIgnoreEmptyLines();
      cSVFormat1.hashCode();
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat1.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('d');
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(boolean0);
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('d', (char)cSVFormat1.getQuoteCharacter());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = new Character('h');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      cSVFormat1.equals(cSVFormat0);
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      // Undeclared exception!
      try { 
        cSVFormat0.EXCEL.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('\\');
      assertEquals('\\', (char)cSVFormat1.getCommentMarker());
      
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('!');
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('!');
      cSVFormat2.getDelimiter();
      assertEquals('!', (char)cSVFormat2.getEscapeCharacter());
      
      cSVFormat0.getEscapeCharacter();
      cSVFormat0.getQuoteCharacter();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) cSVFormat2;
      Object object0 = new Object();
      objectArray0[2] = objectArray0[0];
      cSVFormat3.format(objectArray0);
      CSVFormat cSVFormat4 = cSVFormat3.withNullString("\n");
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat4.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat5 = cSVFormat3.withIgnoreSurroundingSpaces(false);
      cSVFormat5.getEscapeCharacter();
      String string0 = cSVFormat4.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> CommentStart=<!> NullString=<\n> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
      
      cSVFormat4.getQuoteCharacter();
      cSVFormat3.getIgnoreEmptyLines();
      Locale.getISOCountries();
      boolean boolean0 = cSVFormat3.isNullStringSet();
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertTrue(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Requested memory: ");
      String string0 = cSVFormat1.toString();
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("Delimiter=<,> QuoteChar=<\"> NullString=<Requested memory: > RecordSeparator=<\r\n> SkipHeaderRecord:false", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      StringReader stringReader0 = new StringReader("");
      cSVFormat1.parse(stringReader0);
      Character character0 = new Character('D');
      CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('\\');
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      CSVFormat cSVFormat4 = cSVFormat0.withCommentMarker('A');
      cSVFormat3.getDelimiter();
      CSVFormat cSVFormat5 = cSVFormat2.withQuote('A');
      CSVFormat cSVFormat6 = CSVFormat.newFormat('1');
      CSVFormat cSVFormat7 = cSVFormat5.withNullString("The quoteChar character and the delimiter cannot be the same ('");
      assertEquals('A', (char)cSVFormat7.getQuoteCharacter());
      
      cSVFormat6.getEscapeCharacter();
      assertFalse(cSVFormat6.getSkipHeaderRecord());
      assertEquals('1', cSVFormat6.getDelimiter());
      assertFalse(cSVFormat6.getIgnoreEmptyLines());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      
      CSVFormat cSVFormat8 = cSVFormat4.withIgnoreSurroundingSpaces(false);
      String string0 = cSVFormat8.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> CommentStart=<A> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
      
      cSVFormat3.getQuoteCharacter();
      cSVFormat3.getCommentMarker();
      cSVFormat3.getIgnoreSurroundingSpaces();
      boolean boolean0 = cSVFormat1.getIgnoreEmptyLines();
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('k');
      String string0 = cSVFormat1.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> CommentStart=<k> RecordSeparator=<\r\n> SkipHeaderRecord:false", string0);
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'null' in [null, null, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('\\');
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('t');
      cSVFormat2.getDelimiter();
      boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
      boolean boolean1 = cSVFormat3.equals(cSVFormat0);
      assertFalse(boolean1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat2;
      objectArray0[1] = (Object) cSVFormat0;
      objectArray0[2] = (Object) cSVFormat2;
      objectArray0[3] = (Object) cSVFormat1;
      objectArray0[4] = (Object) cSVFormat0;
      cSVFormat2.format(objectArray0);
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      
      Character.valueOf('G');
      Character character0 = Character.valueOf('e');
      cSVFormat3.withEscape(character0);
      cSVFormat0.getAllowMissingColumnNames();
      CSVFormat cSVFormat5 = cSVFormat4.withSkipHeaderRecord(false);
      boolean boolean2 = cSVFormat3.equals(cSVFormat5);
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertTrue(cSVFormat4.equals((Object)cSVFormat5));
      assertTrue(boolean2 == boolean0);
      assertTrue(cSVFormat4.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.isNullStringSet());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('#');
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertFalse(boolean0);
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertEquals('#', (char)cSVFormat1.getCommentMarker());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('#');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('#');
      cSVFormat2.getDelimiter();
      Character character0 = new Character('\\');
      CSVFormat cSVFormat3 = cSVFormat2.TDF.withEscape(character0);
      boolean boolean0 = cSVFormat1.getIgnoreEmptyLines();
      cSVFormat1.equals(cSVFormat2);
      Character character1 = new Character('\\');
      Character.valueOf('#');
      CSVFormat cSVFormat4 = cSVFormat0.withEscape(character0);
      boolean boolean1 = cSVFormat4.getAllowMissingColumnNames();
      assertFalse(boolean1 == boolean0);
      
      CSVFormat cSVFormat5 = cSVFormat2.withSkipHeaderRecord(false);
      cSVFormat3.equals(character1);
      Object object0 = new Object();
      boolean boolean2 = cSVFormat3.equals(object0);
      assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat3.isNullStringSet());
      assertFalse(boolean2);
      assertTrue(cSVFormat2.equals((Object)cSVFormat5));
      assertFalse(cSVFormat0.equals((Object)cSVFormat4));
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('l');
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('l');
      CSVFormat cSVFormat3 = CSVFormat.EXCEL;
      boolean boolean0 = cSVFormat2.equals(cSVFormat1);
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals('l', (char)cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals("l", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('#');
      boolean boolean0 = cSVFormat1.equals(cSVFormat0);
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(boolean0);
      assertEquals('#', (char)cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = new Character(',');
      // Undeclared exception!
      try { 
        cSVFormat0.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('+');
      Character character0 = new Character('+');
      // Undeclared exception!
      try { 
        cSVFormat1.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('+')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withAllowMissingColumnNames(true);
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      
      cSVFormat0.hashCode();
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      boolean boolean0 = cSVFormat0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object object0 = new Object();
      boolean boolean0 = cSVFormat0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      
      cSVFormat0.hashCode();
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('O');
      // Undeclared exception!
      try { 
        cSVFormat1.withDelimiter('O');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('O')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withEscape('\\');
      cSVFormat0.withEscape('!');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('!');
      char char0 = cSVFormat1.getDelimiter();
      assertEquals(',', char0);
      
      String string0 = cSVFormat0.DEFAULT.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
      
      Character character0 = cSVFormat1.getEscapeCharacter();
      assertEquals('!', (char)character0);
      
      Character character1 = cSVFormat1.getQuoteCharacter();
      assertEquals('\"', (char)character1);
      
      cSVFormat1.getCommentMarker();
      boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
      boolean boolean1 = cSVFormat1.getIgnoreEmptyLines();
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('\\');
      CSVFormat cSVFormat3 = CSVFormat.TDF;
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('t');
      cSVFormat2.getDelimiter();
      CSVFormat cSVFormat5 = cSVFormat2.MYSQL.withQuote('e');
      assertEquals('e', (char)cSVFormat5.getQuoteCharacter());
      
      CSVFormat cSVFormat6 = CSVFormat.newFormat('z');
      assertFalse(cSVFormat6.getAllowMissingColumnNames());
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      assertEquals('z', cSVFormat6.getDelimiter());
      
      CSVFormat cSVFormat7 = cSVFormat2.withNullString("The quoteChar character and the delimiter cannot be the same ('");
      Character character0 = cSVFormat7.getEscapeCharacter();
      assertEquals('\\', (char)character0);
      
      String string0 = cSVFormat4.MYSQL.toString();
      assertEquals("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", string0);
      
      cSVFormat1.getQuoteCharacter();
      cSVFormat7.getCommentMarker();
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertEquals("\r\n", cSVFormat7.getRecordSeparator());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      
      boolean boolean0 = cSVFormat4.getIgnoreSurroundingSpaces();
      assertEquals('t', (char)cSVFormat4.getCommentMarker());
      assertFalse(cSVFormat4.isNullStringSet());
      assertTrue(boolean0);
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      
      cSVFormat0.getIgnoreEmptyLines();
      assertFalse(cSVFormat0.isCommentMarkerSet());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat0.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('#');
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals('#', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat(':');
      cSVFormat0.hashCode();
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals(':', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = cSVFormat0.getHeader();
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      char char0 = '\\';
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker('\\');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('\\')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[8];
      String string0 = cSVFormat0.RFC4180.format(objectArray0);
      assertEquals("\"\",,,,,,,", string0);
  }

  @Test(timeout = 4000)
  public void testEscapedControlCharacter_67()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withEscape('\\');
      cSVFormat0.withEscape('!');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('!');
      char char0 = cSVFormat1.getDelimiter();
      assertEquals(',', char0);
      
      Character character0 = cSVFormat1.getEscapeCharacter();
      assertEquals('!', (char)character0);
      
      Character character1 = cSVFormat1.getQuoteCharacter();
      assertEquals('\"', (char)character1);
      
      cSVFormat1.getCommentMarker();
      boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
      boolean boolean1 = cSVFormat1.getIgnoreEmptyLines();
      assertFalse(boolean1 == boolean0);
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.RFC4180.parse(pipedReader0);
      String[] stringArray0 = new String[1];
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.getQuoteCharacter();
      boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();
      assertTrue(boolean0);
  }
}
