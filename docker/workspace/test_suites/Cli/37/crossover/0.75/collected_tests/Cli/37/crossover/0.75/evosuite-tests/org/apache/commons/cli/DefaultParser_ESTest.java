/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 00:57:21 GMT 2023
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.Properties;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultParser_ESTest extends DefaultParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "t1";
      stringArray0[1] = "t1";
      stringArray0[2] = "t1";
      stringArray0[3] = "t1";
      stringArray0[4] = "t1";
      stringArray0[5] = "t1";
      stringArray0[6] = "t1";
      stringArray0[7] = "t1";
      stringArray0[8] = "t1";
      defaultParser0.parse(options0, stringArray0, true);
      Properties properties0 = new Properties();
      Option option0 = new Option("t1", "1", true, "t1");
      options0.toString();
      options0.addOption(option0);
      defaultParser0.parse(options0, stringArray0, properties0, false);
      defaultParser0.handleConcatenatedOptions("t1");
      try { 
        defaultParser0.handleConcatenatedOptions("t1");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option: t1
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t");
      option_Builder0.numberOfArgs(16);
      option_Builder0.optionalArg(true);
      Option option0 = option_Builder0.build();
      Options options1 = options0.addOption(option0);
      DefaultParser defaultParser1 = new DefaultParser();
      Properties properties0 = new Properties();
      options0.getOptionGroups();
      Properties properties1 = new Properties();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-t1";
      stringArray0[1] = "-t";
      stringArray0[2] = "-t1";
      stringArray0[3] = "-t1";
      defaultParser0.parse(options0, stringArray0, properties1, true);
      DefaultParser defaultParser2 = new DefaultParser();
      defaultParser0.parse(options1, stringArray0);
      defaultParser0.handleConcatenatedOptions("org.apache.commons.cli.TypeHandler");
      assertFalse(defaultParser0.equals((Object)defaultParser2));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Options options1 = options0.addOption("1", "1", true, "1");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "--=anUU/hSr$Q=]ET";
      stringArray0[1] = "--=anUU/hSr$Q=]ET";
      options1.getOption("3Ch");
      stringArray0[2] = "XX9";
      stringArray0[3] = "-1";
      stringArray0[4] = "XX9";
      stringArray0[5] = "1";
      stringArray0[6] = "1";
      stringArray0[7] = "XX9";
      stringArray0[8] = "XX9";
      CommandLine commandLine0 = defaultParser0.parse(options1, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      Option.Builder option_Builder1 = option_Builder0.numberOfArgs(99);
      Option.Builder option_Builder2 = option_Builder1.optionalArg(true);
      Option option0 = option_Builder2.build();
      options0.addOption(option0);
      Options options1 = options0.addOption("", "\" {O", true, "\" {O");
      DefaultParser defaultParser1 = new DefaultParser();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Missing required option: b";
      stringArray0[1] = "\" {O";
      stringArray0[2] = "-t1";
      stringArray0[3] = "--=>nUUYhS=$Q=]ET";
      stringArray0[4] = "t1";
      stringArray0[5] = "-t1";
      stringArray0[6] = "";
      CommandLine commandLine0 = defaultParser1.parse(options1, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t");
      OptionGroup optionGroup0 = new OptionGroup();
      Options options1 = options0.addOptionGroup(optionGroup0);
      options1.getMatchingOptions("-0mI'~s}CNaJ=6g");
      Option.Builder option_Builder1 = option_Builder0.numberOfArgs((-2));
      Option option0 = option_Builder1.build();
      options1.addOption(option0);
      options0.getRequiredOptions();
      DefaultParser defaultParser1 = new DefaultParser();
      Properties properties0 = new Properties();
      Options options2 = new Options();
      defaultParser1.handleConcatenatedOptions("t");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "[tR*[\"";
      stringArray0[1] = "t";
      stringArray0[2] = "-t1";
      CommandLine commandLine0 = defaultParser0.parse(options1, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t");
      option_Builder0.optionalArg(true);
      Option option0 = option_Builder0.build();
      Options options1 = options0.addOption(option0);
      String[] stringArray0 = Locale.getISOCountries();
      defaultParser0.parse(options1, stringArray0);
      Properties properties0 = new Properties();
      properties0.keySet();
      Properties properties1 = new Properties();
      defaultParser0.parse(options1, stringArray0, properties1, true);
      defaultParser0.handleConcatenatedOptions("-t1");
      defaultParser0.parse(options0, stringArray0);
      DefaultParser defaultParser1 = new DefaultParser();
      DefaultParser defaultParser2 = new DefaultParser();
      Options options2 = options1.addOption("t", "-JM5l=U", true, "-JM5l=U");
      defaultParser2.parse(options2, stringArray0);
      OptionGroup optionGroup0 = new OptionGroup();
      options0.addOptionGroup(optionGroup0);
      defaultParser1.parse(options1, (String[]) null, properties1, true);
      defaultParser1.handleConcatenatedOptions("-j");
      assertFalse(defaultParser1.equals((Object)defaultParser0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      options0.getOptionGroups();
      Options options1 = options0.addOption("t", "t");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-t1";
      Options options2 = new Options();
      Properties properties0 = new Properties();
      CommandLine commandLine0 = defaultParser0.parse(options2, stringArray0, properties0, true);
      CommandLine commandLine1 = defaultParser0.parse(options1, stringArray0, properties0, true);
      assertFalse(commandLine1.equals((Object)commandLine0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t");
      options0.getMatchingOptions("t");
      Option.Builder option_Builder1 = option_Builder0.numberOfArgs((-2));
      Option option0 = option_Builder1.build();
      options0.addOption(option0);
      options0.getRequiredOptions();
      DefaultParser defaultParser1 = new DefaultParser();
      Properties properties0 = new Properties();
      Options options1 = new Options();
      Properties properties1 = new Properties();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-t1";
      // Undeclared exception!
      try { 
        defaultParser1.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-/=>,UYS$Q=]ET";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -/=>,UYS$Q=]ET
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t");
      Option.Builder option_Builder1 = option_Builder0.numberOfArgs(99);
      Option.Builder option_Builder2 = option_Builder1.optionalArg(true);
      Option option0 = option_Builder2.build();
      options0.addOption(option0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "t";
      stringArray0[1] = "-t1";
      options0.getMatchingOptions("t");
      stringArray0[2] = "-t1";
      stringArray0[3] = "t";
      stringArray0[4] = "t1_path";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t");
      Option.Builder option_Builder1 = option_Builder0.numberOfArgs(99);
      Option.Builder option_Builder2 = option_Builder1.optionalArg(true);
      Option option0 = option_Builder2.build();
      Options options1 = options0.addOption(option0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "t";
      stringArray0[1] = "-t1";
      stringArray0[2] = "-JM5l=U";
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -JM5l=U
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      options0.addOption("", "", false, "");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--=>nUUYhS=$Q=]ET";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: --=>nUUYhS=$Q=]ET
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      options0.addOption("XX9", "XX9", true, "XX9");
      options0.addRequiredOption("XX9", "-t1", true, "XX9");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--=anUU/hSr$Q=]ET";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Ambiguous option: '--'  (could be: 'XX9', '-t1')
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("");
      Option.Builder option_Builder1 = option_Builder0.hasArg();
      options0.hasOption("");
      Option.builder("");
      Option option0 = option_Builder1.build();
      Options options1 = options0.addOption(option0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "t1_path";
      stringArray0[2] = "";
      stringArray0[3] = "t1_path";
      defaultParser0.parse(options1, stringArray0);
      defaultParser0.handleConcatenatedOptions("--M5l=U");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("");
      Option.Builder option_Builder1 = option_Builder0.hasArg();
      Option.Builder option_Builder2 = option_Builder0.numberOfArgs(61);
      option_Builder1.optionalArg(false);
      option_Builder2.argName("t1_path");
      Option option0 = option_Builder1.build();
      Options options1 = options0.addOption(option0);
      String[] stringArray0 = Locale.getISOLanguages();
      FileSystemHandling.shouldAllThrowIOExceptions();
      option0.getValues();
      defaultParser0.parse(options1, (String[]) null);
      Properties properties0 = new Properties();
      properties0.keySet();
      defaultParser0.stopAtNonOption = true;
      defaultParser0.parse(options0, stringArray0, properties0, true);
      defaultParser0.parse(options0, stringArray0);
      defaultParser0.handleConcatenatedOptions("--yes");
      defaultParser0.handleConcatenatedOptions("t1_path");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.builder("ly60om");
      Option option0 = new Option("", "--");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      optionGroup1.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      optionGroup0.setRequired(true);
      defaultParser0.parse(options1, (String[]) null);
      try { 
        defaultParser0.handleConcatenatedOptions("--@");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: --@
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Properties properties0 = new Properties();
      OptionGroup optionGroup0 = new OptionGroup();
      Properties properties1 = new Properties();
      Object object0 = new Object();
      properties1.put(optionGroup0, object0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Exception found converting ";
      stringArray0[1] = "t1_pa-:oth";
      stringArray0[1] = "Exception found converting ";
      stringArray0[3] = "Exception found converting ";
      stringArray0[4] = "t1_pa-:oth";
      stringArray0[5] = "Exception found converting ";
      stringArray0[6] = "t1_pa-:oth";
      stringArray0[7] = "The option '";
      stringArray0[8] = "t1_pa-:oth";
      defaultParser0.parse(options0, stringArray0, properties0, true);
      defaultParser0.handleConcatenatedOptions("$7O#");
      defaultParser0.handleConcatenatedOptions("The option '");
      defaultParser0.handleConcatenatedOptions("Unrecognized option: ");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      option_Builder0.hasArg();
      Option.Builder option_Builder1 = option_Builder0.numberOfArgs(1);
      Option.Builder option_Builder2 = option_Builder1.optionalArg(true);
      Option.Builder option_Builder3 = option_Builder0.argName((String) null);
      Option option0 = option_Builder3.build();
      Options options1 = options0.addOption(option0);
      Option.builder();
      option_Builder1.hasArg(true);
      option_Builder2.build();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "t1_path";
      stringArray0[1] = "-t1";
      stringArray0[2] = "-M5l=U";
      stringArray0[3] = "t1";
      stringArray0[4] = "-t1";
      stringArray0[5] = "t1";
      stringArray0[6] = "t1_path";
      stringArray0[7] = "";
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultParser0.parse(options0, stringArray0);
      defaultParser0.handleConcatenatedOptions("t1");
      Properties properties0 = new Properties();
      defaultParser0.parse(options1, stringArray0, properties0, true);
      defaultParser0.handleConcatenatedOptions("t1_path");
      defaultParser0.handleConcatenatedOptions("-t1");
      defaultParser0.handleConcatenatedOptions("Missing argument for option: ");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-M5l=U";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -M5l=U
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("t1_path", "t1", true, "t1");
      String[] stringArray0 = new String[22];
      stringArray0[0] = "-t1";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      option_Builder0.hasArg();
      Option.Builder option_Builder1 = option_Builder0.numberOfArgs(1);
      option_Builder1.optionalArg(true);
      Option.Builder option_Builder2 = option_Builder0.argName((String) null);
      Option option0 = option_Builder2.build();
      Options options1 = options0.addOption(option0);
      Option.builder("t1");
      Option.builder();
      Option.Builder option_Builder3 = Option.builder("");
      option_Builder3.hasArg(true);
      option_Builder3.build();
      options1.addOption(option0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "t1_path";
      stringArray0[1] = "-t1";
      stringArray0[2] = "-M5l=U";
      stringArray0[3] = "last";
      stringArray0[4] = "-t1";
      stringArray0[5] = "t1";
      stringArray0[6] = "t1_path";
      stringArray0[7] = "";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      defaultParser0.handleConcatenatedOptions("?Dd\"RE,/x:gs?w");
      Properties properties0 = new Properties();
      CommandLine commandLine1 = defaultParser0.parse(options1, stringArray0, properties0, true);
      assertFalse(commandLine1.equals((Object)commandLine0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--M5l=U";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: --M5l=U
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-,";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -,
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[0];
      Properties properties0 = new Properties();
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, properties0, true);
      assertNotNull(commandLine0);
      
      defaultParser0.handleConcatenatedOptions("--M5l=U");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[0];
      Properties properties0 = new Properties();
      Object object0 = new Object();
      properties0.put("t1", object0);
      DefaultParser defaultParser0 = new DefaultParser();
      try { 
        defaultParser0.parse(options0, stringArray0, properties0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Default option wasn't defined
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[0];
      options0.addRequiredOption("f", "f", false, "f");
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing required option: f
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--1.5";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: --1.5
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option option0 = new Option("Wl", "--");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup0);
      CommandLine commandLine0 = defaultParser0.parse(options0, (String[]) null);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option option0 = new Option("", "--");
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup0);
      defaultParser0.parse(options1, (String[]) null);
      defaultParser0.handleConcatenatedOptions("--");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ",~y7>Tq$ZO:gB-ybA";
      Properties properties0 = new Properties();
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, properties0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option option0 = new Option("", "--");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[0];
      defaultParser0.parse(options0, stringArray0, true);
      defaultParser0.handleConcatenatedOptions(" 1NI$");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      defaultParser0.handleConcatenatedOptions("3");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      options0.addOption("", ")!", true, "");
      String[] stringArray0 = new String[0];
      defaultParser0.parse(options0, stringArray0);
      defaultParser0.handleConcatenatedOptions("--WS");
      defaultParser0.handleConcatenatedOptions("--ZA");
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      options0.addRequiredOption("t1", "t1", true, "t1");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-t1";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option: t1
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "t1";
      stringArray0[1] = "t1";
      stringArray0[2] = "t1";
      stringArray0[3] = "t1";
      stringArray0[4] = "t1";
      stringArray0[5] = "t1";
      stringArray0[6] = "H:?iN/E,j.;qyfJ1}";
      stringArray0[7] = "t1";
      stringArray0[8] = "t1";
      defaultParser0.parse(options0, stringArray0, true);
      Properties properties0 = new Properties();
      Option option0 = new Option("t1", "1", true, "H:?iN/E,j.;qyfJ1}");
      options0.toString();
      option0.setArgName("Lz !4KG");
      Options options1 = options0.addOption(option0);
      defaultParser0.parse(options0, stringArray0, properties0, true);
      defaultParser0.handleConcatenatedOptions("t1");
      defaultParser0.parse(options1, stringArray0);
      defaultParser0.handleConcatenatedOptions("Lz !4KG");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      options0.addRequiredOption("t", "t", false, "t");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-t1";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -t1
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      CommandLine commandLine0 = defaultParser0.parse(options0, (String[]) null, false);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      CommandLine commandLine0 = defaultParser0.parse(options0, (String[]) null);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      // Undeclared exception!
      try { 
        defaultParser0.handleConcatenatedOptions(",~y7>}Tq$ZO:gB-ybA");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "p";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("t", "t", true, "t");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-t1";
      CommandLine commandLine0 = defaultParser0.parse(options1, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("t1", "t1", true, "t1");
      String[] stringArray0 = new String[5];
      stringArray0[1] = "-]t=uco|+";
      stringArray0[0] = "-t1";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("t1", "t1", true, "t1");
      String[] stringArray0 = new String[4];
      stringArray0[1] = "t1";
      stringArray0[0] = "-t1";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("t1", "t1", true, "t1");
      String[] stringArray0 = new String[22];
      stringArray0[0] = "-t1";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      options0.addOption("", "", true, "");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--=>nUUYhS=$Q=]ET";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("t1", "t1", true, "t1");
      String[] stringArray0 = new String[4];
      stringArray0[1] = "-t1";
      stringArray0[0] = "-t1";
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option: t1
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[0];
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("t1", "t1", true, "t1");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-t1";
      stringArray0[1] = "-";
      CommandLine commandLine0 = defaultParser0.parse(options1, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-i/RT2";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -i/RT2
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-t1";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -t1
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }
}
