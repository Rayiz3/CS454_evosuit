/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 05:56:28 GMT 2023
 */

package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.memory.MemoryArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArchiveUtils_ESTest extends ArchiveUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("", 117853008L);
      String string0 = ArchiveUtils.toString((ArchiveEntry) arArchiveEntry0);
      assertEquals("- 117853008 ", string0);
      
      String string1 = ArchiveUtils.sanitize("MTa");
      assertEquals("MTa", string1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[2] = (byte)1;
      byteArray0[1] = (byte)1;
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, (byte)0, (byte)0, byteArray0, (byte)1, (byte)1);
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)1;
      boolean boolean1 = ArchiveUtils.isEqual(byteArray0, byteArray1, false);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)45;
      byteArray0[0] = (byte)45;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-123);
      MockFile mockFile0 = new MockFile("netwTare");
      MockFile mockFile1 = new MockFile("netwTare", "netwTare");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      ArchiveUtils.toString((ArchiveEntry) tarArchiveEntry0);
      ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.isArrayZero(byteArray1, 33188);
      ArchiveUtils.isEqual(byteArray1, byteArray0, true);
      ArchiveUtils.sanitize("-       0 netwTare");
      byte[] byteArray2 = new byte[9];
      byteArray2[5] = (byte)45;
      byteArray2[1] = (byte)45;
      byteArray2[2] = (byte)45;
      byteArray0[6] = (byte) (-45);
      byteArray2[4] = (byte) (-123);
      byteArray0[2] = (byte) (-123);
      byteArray2[6] = (byte) (-123);
      byteArray2[7] = (byte)45;
      byteArray2[8] = (byte)45;
      ArchiveUtils.isEqualWithNull(byteArray2, 8, (byte)45, byteArray2, (byte)0, (byte)0);
      mockFile0.getAbsolutePath();
      ArchiveUtils.sanitize("-       0 netwTare");
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray2, 31, (-45), byteArray2, (byte) (-123), 189);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -168
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[33];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = ArchiveUtils.toAsciiBytes("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArchiveUtils.isEqualWithNull(byteArray1, (-3007), (-3007), byteArray0, (-3007), (-3007));
      MemoryArchiveEntry memoryArchiveEntry0 = new MemoryArchiveEntry("");
      String string0 = ArchiveUtils.toString((ArchiveEntry) memoryArchiveEntry0);
      assertEquals("-       0 ", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[5] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[14] = (byte)1;
      byte[] byteArray1 = new byte[4];
      byteArray1[3] = (byte)1;
      ArchiveUtils.isEqualWithNull(byteArray1, (byte)1, (byte)1, byteArray1, (-3801), (byte)0);
      String string0 = ArchiveUtils.sanitize("=CLtU>B");
      assertEquals("=CLtU>B", string0);
      
      ArjArchiveEntry arjArchiveEntry0 = new ArjArchiveEntry();
      String string1 = ArchiveUtils.toString((ArchiveEntry) arjArchiveEntry0);
      assertEquals("-       0 null", string1);
      
      String string2 = ArchiveUtils.toAsciiString(byteArray1, (int) (byte)0, (int) (byte)1);
      assertEquals("\u0000", string2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      String string0 = ArchiveUtils.toString((ArchiveEntry) sevenZArchiveEntry0);
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, 1, 4, byteArray0, 4, 1);
      String string1 = ArchiveUtils.sanitize("-       0 null");
      assertTrue(string1.equals((Object)string0));
      
      MockFile mockFile0 = new MockFile("-       0 null");
      MockFile mockFile1 = new MockFile(mockFile0, "-       0 null");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("-       0 null");
      ArchiveUtils.sanitize("");
      ArchiveUtils.toAsciiString(byteArray0);
      MemoryArchiveEntry memoryArchiveEntry0 = new MemoryArchiveEntry("-       0 null");
      memoryArchiveEntry0.getLastModifiedDate();
      ArchiveUtils.isArrayZero(byteArray0, 4);
      boolean boolean1 = ArchiveUtils.isArrayZero(byteArray0, (byte) (-45));
      assertTrue(boolean1 == boolean0);
      
      String string2 = ArchiveUtils.sanitize("`4X$[kxp");
      assertEquals("`4X$[kxp", string2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[5] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-110);
      byteArray1[2] = (byte)1;
      ArchiveUtils.isEqualWithNull(byteArray1, (byte)0, (byte)1, byteArray1, (-3801), (byte)0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ArchiveUtils.sanitize("T'E/P;}:x;");
      MockFile mockFile0 = new MockFile("&.p");
      MockFile mockFile1 = new MockFile(mockFile0, "&.p");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      ArchiveUtils.toString((ArchiveEntry) tarArchiveEntry0);
      tarArchiveEntry0.setMode(1012);
      mockFile0.delete();
      ArchiveUtils.toAsciiString(byteArray1);
      ArchiveUtils.toString((ArchiveEntry) tarArchiveEntry0);
      ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.isArrayZero(byteArray0, 32);
      ArchiveUtils.isEqual(byteArray0, byteArray0, false);
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString(byteArray0, (int) (byte)0, (-3801));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)45;
      byteArray0[8] = (byte)45;
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, 4, (byte) (-45), byteArray0, (byte)45, 4);
      ArchiveUtils.sanitize("1bi[9\"w");
      MockFile mockFile0 = new MockFile("P|I!FS[,p\"XR85oQ#<");
      MockFile mockFile1 = new MockFile(mockFile0, "1bi[9\"w");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("P|I!FS[,p\"XR85oQ#<", (byte)45);
      String string0 = ArchiveUtils.sanitize("P|I!FS[,p\"XR85oQ#<");
      assertEquals("P|I?!FS[,p\"XR85oQ#<", string0);
      
      ArchiveUtils.toAsciiString(byteArray0);
      MemoryArchiveEntry memoryArchiveEntry0 = new MemoryArchiveEntry("US-ASCII");
      memoryArchiveEntry0.getLastModifiedDate();
      boolean boolean1 = ArchiveUtils.isArrayZero(byteArray0, (byte)45);
      assertFalse(boolean1);
      
      boolean boolean2 = ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      assertFalse(boolean2 == boolean0);
      
      String string1 = ArchiveUtils.toAsciiString(byteArray0, 4, (int) (byte)0);
      assertEquals("", string1);
      
      System.setCurrentTimeMillis(50L);
      String string2 = ArchiveUtils.toString((ArchiveEntry) memoryArchiveEntry0);
      assertEquals("-       0 US-ASCII", string2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[5] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-110);
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)1;
      ArchiveUtils.isEqualWithNull(byteArray1, (byte)1, (byte)1, byteArray1, (byte)1, (byte)0);
      ArchiveUtils.sanitize("T'E/P;}:x;");
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      ArchiveUtils.toString((ArchiveEntry) tarArchiveEntry0);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte) (-110);
      byteArray2[2] = (byte)1;
      byteArray2[3] = (byte) (-110);
      byteArray2[4] = (byte) (-110);
      byteArray2[5] = (byte) (-110);
      ArchiveUtils.toAsciiString(byteArray1);
      ArchiveUtils.isArrayZero(byteArray2, 32);
      ArchiveUtils.isEqual(byteArray0, byteArray1, true);
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString(byteArray0, 2653, (int) (byte) (-110));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[5] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-81);
      ArchiveUtils.toAsciiString(byteArray0, (int) (byte)1, (int) (byte)1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArchiveUtils.toAsciiBytes("Q~_,mZCwpr\"xPq,Ot");
      ArchiveUtils.matchAsciiBuffer("dIW)^?fO", byteArray0);
      ArchiveUtils.toAsciiString(byteArray0);
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = true;
      ArchiveUtils.isEqual(byteArray0, byteArray1, true);
      // Undeclared exception!
      try { 
        ArchiveUtils.sanitize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[5] = (byte)1;
      byteArray0[1] = (byte)0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = ArchiveUtils.toAsciiBytes("");
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)1;
      byteArray2[1] = (byte)1;
      byteArray2[2] = (byte) (-81);
      byteArray2[0] = (byte)17;
      byteArray0[1] = (byte) (-81);
      byteArray2[5] = (byte)1;
      byteArray2[6] = (byte) (-81);
      byteArray2[7] = (byte) (-81);
      byteArray2[8] = (byte) (-81);
      ArchiveUtils.toAsciiString(byteArray2);
      ArchiveUtils.sanitize("");
      boolean boolean0 = ArchiveUtils.isEqual(byteArray1, byteArray0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[5] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-110);
      byteArray1[1] = (byte) (-110);
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)1;
      ArchiveUtils.isEqualWithNull(byteArray1, (byte)1, (byte)1, byteArray1, (-3801), (byte)0);
      ArchiveUtils.sanitize("T'E/P;}:x;");
      ArjArchiveEntry arjArchiveEntry0 = new ArjArchiveEntry();
      ArchiveUtils.toString((ArchiveEntry) arjArchiveEntry0);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-110);
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqual(byteArray2, (-1), 31, byteArray0, (-846), 2344);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[5] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-81);
      String string0 = ArchiveUtils.toAsciiString(byteArray0, (int) (byte)1, (int) (byte)1);
      assertEquals("\u0000", string0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = ArchiveUtils.toAsciiBytes("Q~_,mZCwpr\"xPq,Ot");
      ArchiveUtils.matchAsciiBuffer("dIW)^?fO", byteArray0);
      ArchiveUtils.toAsciiString(byteArray1);
      byte[] byteArray2 = new byte[0];
      ArchiveUtils.isEqual(byteArray2, byteArray0, false);
      String string1 = ArchiveUtils.sanitize("dIW)^?fO");
      assertEquals("dIW)^?fO", string1);
      
      boolean boolean0 = ArchiveUtils.isEqual(byteArray2, byteArray1, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)1;
      byteArray0[5] = (byte) (-9);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-81);
      ArchiveUtils.toAsciiString(byteArray0, (int) (byte)1, (int) (byte)0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-81);
      byteArray1[0] = (byte) (-9);
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, (-1220), 1040, byteArray0, 25, 918);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1220
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      mockFile0.createNewFile();
      mockFile0.setLastModified(0L);
      ArchiveUtils.sanitize("");
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte)1;
      ArchiveUtils.isEqualWithNull(byteArray0, (byte)1, (byte)0, byteArray0, (byte)0, 2866);
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("", 635L);
      ArchiveUtils.toString((ArchiveEntry) cpioArchiveEntry0);
      ArchiveUtils.isEqual(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString(byteArray0, 115, (int) (byte)1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      mockFile0.createNewFile();
      mockFile0.setLastModified(0L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte) (-46);
      ArchiveUtils.isEqualWithNull(byteArray0, 45, (byte) (-46), byteArray0, 164, (byte) (-46));
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-46);
      ArchiveUtils.isEqual(byteArray0, byteArray1, true);
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString(byteArray0, 249, 9568);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-31);
      ArchiveUtils.isEqual(byteArray0, byteArray0);
      ArchiveUtils.isEqual(byteArray0, byteArray0);
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, (int) (byte)0, 32, byteArray0, (int) (byte)63, 0);
      ArchiveUtils.toAsciiString(byteArray0);
      String string0 = ArchiveUtils.sanitize("\u0007\u0000/\u000E\uFFFD");
      assertEquals("??/??", string0);
      
      boolean boolean1 = ArchiveUtils.isEqual(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      
      ArchiveUtils.sanitize("62&:cbyw2-0{en(P1/");
      ArchiveUtils.sanitize("W^ZaSJ");
      boolean boolean2 = ArchiveUtils.matchAsciiBuffer("W^ZaSJ", byteArray0);
      boolean boolean3 = ArchiveUtils.isEqual(byteArray0, byteArray0, false);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-45);
      byteArray0[3] = (byte) (-110);
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, 4, (byte) (-45), byteArray0, (byte)45, 4);
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-110);
      byteArray1[1] = (byte)115;
      String string0 = ArchiveUtils.sanitize("1brb9\"w");
      assertEquals("1brb9\"w", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte) (-120);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("");
      String string0 = ArchiveUtils.toString((ArchiveEntry) jarArchiveEntry0);
      assertEquals("-      -1 ", string0);
      
      ArchiveUtils.isEqualWithNull(byteArray0, (-1), (-1944), byteArray0, (byte)1, (-1944));
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-36);
      byteArray1[1] = (byte) (-36);
      boolean boolean0 = ArchiveUtils.isEqual(byteArray1, byteArray1, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("");
      assertArrayEquals(new byte[] {}, byteArray0);
      
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)86;
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray1, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-45);
      byteArray0[3] = (byte) (-110);
      byte byte0 = (byte) (-103);
      ArchiveUtils.isEqualWithNull(byteArray0, 4, (byte) (-45), byteArray0, (byte)45, 4);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-110);
      byteArray1[1] = (byte)115;
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray1, 33, (byte) (-110), byteArray0, 3371, (-869));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -836
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      mockFile0.createNewFile();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)28;
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      assertTrue(boolean0);
      
      boolean boolean1 = ArchiveUtils.isEqualWithNull(byteArray0, (byte)28, (-1388), byteArray0, (-1388), (-1388));
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)0;
      ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.isArrayZero(byteArray0, (-1377));
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, (-1377), 1, byteArray0, (byte)96, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1377
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArchiveUtils.toAsciiString(byteArray0);
      // Undeclared exception!
      try { 
        ArchiveUtils.isArrayZero(byteArray0, 94);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = ArchiveUtils.sanitize("MDc<-}npvN;");
      assertEquals("MD?c<-}npvN;", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)91;
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      byte[] byteArray1 = new byte[0];
      boolean boolean1 = ArchiveUtils.isEqual(byteArray1, (int) (byte) (-22), (-777), byteArray0, (-777), (int) (byte)43);
      byte[] byteArray2 = new byte[0];
      byte[] byteArray3 = ArchiveUtils.toAsciiBytes("Ht]@H_**cP>R%");
      boolean boolean2 = ArchiveUtils.isEqual(byteArray3, byteArray2);
      assertFalse(boolean2 == boolean0);
      
      byte[] byteArray4 = new byte[2];
      byteArray4[0] = (byte)91;
      byteArray4[1] = (byte)15;
      boolean boolean3 = ArchiveUtils.matchAsciiBuffer("", byteArray4, (-4331), (-965));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = ArchiveUtils.sanitize("MDc<-}npvN;");
      assertEquals("MD?c<-}npvN;", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)70;
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray1, byteArray1);
      boolean boolean1 = ArchiveUtils.isEqual(byteArray1, byteArray0);
      ArchiveUtils.isEqual(byteArray0, (int) (byte)70, 881, byteArray1, (int) (byte) (-22), (-1480));
      ArchiveUtils.toAsciiString(byteArray1);
      ArchiveUtils.sanitize("");
      boolean boolean2 = ArchiveUtils.isEqual(byteArray0, byteArray1);
      ArchiveUtils.sanitize("");
      ArchiveUtils.sanitize("USER_READ");
      boolean boolean3 = ArchiveUtils.matchAsciiBuffer("E#4~f@<Ul9:s", byteArray0);
      assertTrue(boolean3 == boolean1);
      
      ArchiveUtils.isArrayZero(byteArray1, 0);
      boolean boolean4 = ArchiveUtils.isArrayZero(byteArray0, 125);
      assertFalse(boolean4 == boolean0);
      
      boolean boolean5 = ArchiveUtils.isArrayZero(byteArray0, (byte) (-22));
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte)64;
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, 2746, (int) (byte)64, byteArray0, 2746, (int) (byte) (-4));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte)100;
      byte[] byteArray1 = ArchiveUtils.toAsciiBytes("");
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray1, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-110);
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte) (-20);
      byteArray0[7] = (byte)46;
      byteArray0[8] = (byte)28;
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray1, true);
      assertFalse(boolean0);
      
      boolean boolean1 = ArchiveUtils.isEqual(byteArray1, (int) (byte) (-110), (int) (byte)28, byteArray0, (-504), (-1490), false);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArchiveUtils.sanitize("MDc<-}npvN;");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)91;
      ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      byte[] byteArray1 = new byte[0];
      ArchiveUtils.isEqual(byteArray1, (int) (byte) (-22), (-777), byteArray0, (-777), (int) (byte)43);
      byte[] byteArray2 = new byte[0];
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte) (-22);
      byteArray3[1] = (byte) (-22);
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqual(byteArray2, (int) (byte) (-1), (-1009), byteArray3, (-1545), 7, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2554
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      ArchiveUtils.isEqual(byteArray0, byteArray0);
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = ArchiveUtils.sanitize(".$lef");
      assertEquals(".$lef", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = ArchiveUtils.sanitize(">.");
      assertEquals(">?.", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[4] = (byte) (-127);
      byteArray0[1] = (byte) (-127);
      ArchiveUtils.toAsciiString(byteArray0, 0, 7);
      ArchiveUtils.sanitize("\u0000\uFFFD\u0000\u0000\uFFFD\u0000\u0000");
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-127);
      boolean boolean0 = ArchiveUtils.isArrayZero(byteArray0, (byte)120);
      assertFalse(boolean0);
      
      String string0 = ArchiveUtils.sanitize("1brb9\"w");
      assertEquals("1brb9\"w", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-31);
      ArchiveUtils.isEqual(byteArray0, byteArray0);
      ArchiveUtils.isEqual(byteArray0, byteArray0);
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, (int) (byte)63, 32, byteArray0, (int) (byte)63, 0);
      ArchiveUtils.toAsciiString(byteArray0);
      String string0 = ArchiveUtils.sanitize("\u0007?/\u000E\uFFFD");
      assertEquals("??/??", string0);
      
      boolean boolean1 = ArchiveUtils.isEqual(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      
      ArchiveUtils.sanitize("62&:cbyw2-0{en(P1/");
      ArchiveUtils.sanitize("W^ZaSJ");
      ArchiveUtils.matchAsciiBuffer("W^ZaSJ", byteArray0);
      boolean boolean2 = ArchiveUtils.isArrayZero(byteArray0, 0);
      ArchiveUtils.isArrayZero(byteArray0, 45);
      boolean boolean3 = ArchiveUtils.isArrayZero(byteArray0, 494);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = ArchiveUtils.toAsciiString(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = ArchiveUtils.sanitize("org.apache.commons.compress.archivers.tar.SparseFilesTest");
      assertEquals("org.apache.commons.compress.archivers.tar.SparseFilesTest", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "";
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("");
      int int0 = 173;
      int int1 = 0;
      int int2 = 261;
      ArchiveUtils.isEqual(byteArray0, 173, 0, byteArray0, 261, (-936));
      ArchiveUtils.sanitize("");
      // Undeclared exception!
      try { 
        ArchiveUtils.matchAsciiBuffer(" DW/h}}q/6{D1K", byteArray0, 261, 261);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 261
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-7);
      byteArray0[0] = (byte) (-7);
      ArchiveUtils.isEqual(byteArray0, (int) (byte) (-7), 49, byteArray0, (int) (byte) (-7), (-157));
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqual(byteArray0, 492, 505, byteArray0, (int) (byte) (-7), (int) (byte) (-7), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 485
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 100;
      byte[] byteArray0 = null;
      ArchiveUtils.isEqual((byte[]) null, 100, (-9976), (byte[]) null, (-9976), 100);
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqual((byte[]) null, (byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byte[] byteArray1 = ArchiveUtils.toAsciiBytes("");
      boolean boolean0 = ArchiveUtils.isEqual(byteArray1, byteArray0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = ArchiveUtils.toAsciiBytes("");
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray1, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-22);
      ArchiveUtils.isArrayZero(byteArray0, (byte) (-22));
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqual(byteArray0, (int) (byte) (-22), (int) (byte) (-22), byteArray0, 1419, (-1271), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1293
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile0.getCanonicalFile();
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile1);
      tarArchiveEntry0.setNames("0\"Z+r", "");
      String string0 = ArchiveUtils.toString((ArchiveEntry) tarArchiveEntry0);
      assertEquals("d       0 home/coinse/Documents/jylee/defects4j/framework/temp/", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte) (-38);
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = ArchiveUtils.toAsciiBytes("");
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray1, true);
      assertTrue(boolean0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("p&?`JO!cQ!WT/");
      String string0 = ArchiveUtils.toString((ArchiveEntry) zipArchiveEntry0);
      assertEquals("d      -1 p&?`JO!cQ!WT/", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, (byte)0, (byte)0, byteArray0, (byte)0, (byte)0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)0;
      boolean boolean0 = ArchiveUtils.matchAsciiBuffer("#1/", byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("");
      ArchiveUtils.matchAsciiBuffer("", byteArray0);
      ArchiveUtils.sanitize("US-ASCII");
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString(byteArray0, 1430, 1148);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = ArchiveUtils.toAsciiBytes("org.apache.commons.compress.archivers.zip.ZipMethod");
      boolean boolean0 = ArchiveUtils.isEqual(byteArray1, byteArray0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("arj");
      String string0 = ArchiveUtils.toAsciiString(byteArray0);
      assertEquals("arj", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      String string0 = ArchiveUtils.toString((ArchiveEntry) sevenZArchiveEntry0);
      assertEquals("-       0 null", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byte[] byteArray1 = ArchiveUtils.toAsciiBytes("");
      boolean boolean0 = ArchiveUtils.isEqual(byteArray1, byteArray0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      cpioArchiveEntry0.setRemoteDeviceMin(0L);
      cpioArchiveEntry0.setDeviceMin(1L);
      cpioArchiveEntry0.setUID(303L);
      ArchiveUtils.toString((ArchiveEntry) cpioArchiveEntry0);
      ArchiveUtils.toString((ArchiveEntry) cpioArchiveEntry0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-51);
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqual(byteArray0, (int) (byte) (-51), 1, byteArray0, 1, 657, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -51
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }
}
