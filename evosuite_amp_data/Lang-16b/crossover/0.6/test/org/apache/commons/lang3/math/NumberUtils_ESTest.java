/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 21:51:41 GMT 2023
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("345e01345790L");
      assertFalse(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-1414L);
      longArray0[1] = (-2039L);
      longArray0[2] = 1925L;
      longArray0[3] = 69L;
      longArray0[4] = (-640L);
      longArray0[5] = (-2140L);
      longArray0[6] = (-684L);
      longArray0[7] = 1952L;
      longArray0[8] = (-2844L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1952L, long0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-_84(L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -_84(L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-8L");
      assertEquals((-8L), number0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0.E+^");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.E+^ is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-700F");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0E0E7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.9");
      assertEquals(0.9F, number0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0E is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      NumberUtils.createNumber("-0x7");
      boolean boolean0 = NumberUtils.isNumber("VY}_.Vw");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0|llK");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("123.4ED");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xFalse result for (true, false, true)");
      assertFalse(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 3495;
      intArray0[1] = 114;
      intArray0[2] = 585;
      intArray0[3] = 0;
      intArray0[4] = (-576);
      intArray0[5] = 5;
      intArray0[6] = 49;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(3495, int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      try { 
        NumberUtils.createNumber("e0E7");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"e0E7\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0E7");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      NumberUtils.isNumber("0E7");
      Number number0 = NumberUtils.createNumber("0E7");
      assertNotNull(number0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)5;
      shortArray0[1] = (short) (-1433);
      shortArray0[2] = (short)32168;
      shortArray0[3] = (short)101;
      shortArray0[4] = (short) (-1337);
      shortArray0[5] = (short)3577;
      shortArray0[6] = (short)65;
      shortArray0[7] = (short) (-1072);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)32168, short0);
      
      boolean boolean0 = NumberUtils.isNumber("0E7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234.5f");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1234.5f");
      assertEquals(1234.5F, number0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("4e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234.5d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("24D");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x7");
      assertTrue(boolean0);
      
      boolean boolean1 = NumberUtils.isNumber("1.1L");
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("24D");
      assertEquals(24.0, number0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -0E is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-0E7");
      assertNotNull(number0);
      assertEquals((byte)0, number0.byteValue());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 273;
      boolean boolean0 = NumberUtils.isNumber("-0E7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-123E2.12");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.7976931348623157E308");
      assertEquals(1.7976931348623157E308, number0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("8E7");
      assertTrue(boolean0);
      
      boolean boolean1 = NumberUtils.isNumber("-0x9=P6");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-1973.9135F);
      floatArray0[1] = 3867.8F;
      floatArray0[2] = (-3459.3052F);
      floatArray0[3] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
      
      boolean boolean0 = NumberUtils.isNumber("0xfloat");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xE7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1l");
      assertEquals(1L, number0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("4.9E-324");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      try { 
        NumberUtils.createNumber(";-+!]S1Xi}2vzbD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ;-+!]S1Xi}2vzbD is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
      
      int[] intArray0 = new int[7];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
      
      NumberUtils.isNumber("./'?a");
      float[] floatArray0 = new float[5];
      float float0 = NumberUtils.min((float) 0, (float) 0, (float) 0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      try { 
        NumberUtils.createNumber("toFloat(Float5MAX_VALUE) failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // toFloat(Float5MAX_VALUE) failed is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      try { 
        NumberUtils.createNumber("y`1;>F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // y`1;>F is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("57");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      try { 
        NumberUtils.createNumber("dL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // dL is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      try { 
        NumberUtils.createNumber("EG}*f}\"\"k&ao}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // EG}*f}\"\"k&ao} is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      NumberUtils.isNumber("-0x5b?r*\u0001}");
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-103.0F);
      floatArray0[2] = 1.4F;
      floatArray0[3] = (-434.0F);
      floatArray0[4] = (-2364.6006F);
      floatArray0[5] = (-642.66F);
      floatArray0[6] = 0.0F;
      floatArray0[7] = (-1169.847F);
      floatArray0[8] = 1.0F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-2364.6006F), float0, 0.01F);
      
      boolean boolean0 = NumberUtils.isNumber("-0x5b?r*\u0001}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x11g");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xcreateFloat(String) failed");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xDW9<l40V@%7<z(I=$");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-.8");
      assertEquals((-0.8F), number0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      try { 
        NumberUtils.createNumber("8J9kO.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 233.08483;
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      try { 
        NumberUtils.createNumber("double");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // double is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xA blank string is not a valid number");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x<4l*;H");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[2] = 13.3F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1144.0F);
      floatArray0[5] = Float.NaN;
      floatArray0[6] = (-2144.4575F);
      NumberUtils.min(floatArray0);
      boolean boolean0 = NumberUtils.isNumber("0xu");
      assertFalse(boolean0);
      
      Float float0 = new Float(Float.NaN);
      float float1 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      try { 
        NumberUtils.createNumber("The Array must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      try { 
        NumberUtils.createNumber("b!\".$m=k.l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // b!\".$m=k.l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 13.3F;
      floatArray0[2] = 1.0F;
      floatArray0[3] = 522.56F;
      floatArray0[4] = (-1144.0F);
      floatArray0[5] = Float.NaN;
      floatArray0[6] = (-2144.4575F);
      NumberUtils.min(floatArray0);
      NumberUtils.isNumber("0xu");
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = Float.NaN;
      floatArray0[2] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-4247.808F);
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".12.3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      NumberUtils.toByte((String) null, (byte)65);
      NumberUtils.createNumber("--!yXk");
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x");
      assertFalse(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2863;
      intArray0[1] = 79;
      intArray0[2] = 5;
      intArray0[3] = (-231);
      intArray0[4] = (-219582598);
      intArray0[5] = 46;
      intArray0[6] = 2060;
      intArray0[7] = 111;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(2863, int0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 333.786501455;
      doubleArray0[1] = (double) 2060;
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = (double) 2863;
      doubleArray0[5] = (double) 79;
      doubleArray0[6] = (double) 2060;
      doubleArray0[7] = (double) (-231);
      doubleArray0[8] = (double) (-231);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-231.0), double0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 2060;
      floatArray0[1] = (float) 79;
      floatArray0[2] = (float) 2863;
      floatArray0[3] = (float) 111;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(79.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("eeb?9>%iZ`L@%*Z u%");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Array annot be empty.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Array annot be empty. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[2];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) numberUtils0.DOUBLE_ZERO;
      doubleArray0[1] = (double) (short)numberUtils0.SHORT_ONE;
      doubleArray0[3] = (double) (int)numberUtils0.INTEGER_ZERO;
      doubleArray0[4] = 2052.181901905;
      doubleArray0[5] = 3817.1096795344;
      doubleArray0[6] = (double) (int)numberUtils0.INTEGER_ONE;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      floatArray0[0] = (float) (long)numberUtils0.LONG_ZERO;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[2] = (short) numberUtils0.SHORT_ZERO;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1), short0);
      
      boolean boolean0 = NumberUtils.isNumber("0xu");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--123E+-212");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("1o/clU_-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0x.8v@3By");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-.8v@3By\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      try { 
        NumberUtils.createNumber("org.apache.commons.lang3.math.NumberUtils");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // org.apache.commons.lang3.math.NumberUtils is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-1O");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-.8v@3By");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("57");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)111, (byte)111, (byte)19);
      assertEquals((byte)19, byte0);
      
      short short0 = NumberUtils.min((short)121, (short)121, (short) (byte)19);
      assertEquals((short)19, short0);
      
      byte byte1 = new Byte((byte)19);
      assertTrue(byte1 == byte0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0`<!c*;H");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xu");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("8,pa1Vs419TF5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      try { 
        NumberUtils.createNumber("d");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // d is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Integer integer0 = new Integer(71);
      NumberUtils.min((short)873, (short)873, (short)873);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte) (-34);
      NumberUtils.max(byteArray0);
      Float float0 = NumberUtils.FLOAT_MINUS_ONE;
      assertEquals((-1.0F), (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[1];
      intArray0[0] = 1413;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1413, int0);
      
      Integer integer0 = new Integer((int) numberUtils0.INTEGER_MINUS_ONE);
      NumberUtils.createInteger((String) null);
      long long0 = NumberUtils.toLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-xf");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -xf is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      try { 
        NumberUtils.createNumber("toFloat(Float.MAX_VALUE) failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // toFloat(Float.MAX_VALUE) failed is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-.8v@3By");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -.8v@3By is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.createFloat((String) null);
      byte byte0 = NumberUtils.min((byte) numberUtils0.BYTE_ONE, (byte)17, (byte) (-40));
      assertEquals((byte) (-40), byte0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (long)numberUtils0.LONG_MINUS_ONE;
      Float float0 = new Float((float) numberUtils0.INTEGER_ONE);
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[1] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[2] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[3] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[4] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[5] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[6] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1), short0);
      
      byte byte0 = NumberUtils.toByte("--11d11", (byte) numberUtils0.BYTE_ZERO);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("111");
      assertEquals(111, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      try { 
        NumberUtils.createNumber(")g=fYz$)|Tz");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // )g=fYz$)|Tz is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = NumberUtils.max((-1075), (-1075), 8);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long[] longArray0 = new long[4];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
      
      byte byte0 = NumberUtils.min((byte)111, (byte)111, (byte)8);
      assertEquals((byte)8, byte0);
      
      int int0 = NumberUtils.max(2, (int) (byte)111, (-109));
      assertEquals(111, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("A blank string is not a valid number");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      int int0 = NumberUtils.max((int) numberUtils0.INTEGER_MINUS_ONE, 1102, 834);
      assertEquals(1102, int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.min((byte) numberUtils0.BYTE_ONE, (byte) numberUtils0.BYTE_MINUS_ONE, (byte)32);
      // Undeclared exception!
      try { 
        NumberUtils.createInteger("0x123.4ED");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"123.4ED\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.min((long) numberUtils0.LONG_MINUS_ONE, 1L, (long) numberUtils0.SHORT_ZERO);
      float[] floatArray0 = new float[8];
      NumberUtils.min(floatArray0);
      NumberUtils.max((byte) (-43), (byte) numberUtils0.BYTE_MINUS_ONE, (byte)22);
      // Undeclared exception!
      try { 
        NumberUtils.createLong("BP#");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"BP#\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.createBigInteger((String) null);
      NumberUtils.toShort("--");
      boolean boolean0 = NumberUtils.isNumber("--");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (long)numberUtils0.LONG_MINUS_ONE;
      floatArray0[1] = (float) (byte)numberUtils0.BYTE_ZERO;
      floatArray0[2] = (float) (short)numberUtils0.SHORT_ZERO;
      floatArray0[3] = (float) (byte)numberUtils0.BYTE_MINUS_ONE;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1.0F), float0, 0.01F);
      
      byte byte0 = NumberUtils.max((byte) numberUtils0.BYTE_ONE, (byte) numberUtils0.BYTE_ONE, (byte) numberUtils0.BYTE_ONE);
      assertEquals((byte)1, byte0);
      
      short short0 = NumberUtils.toShort((String) null);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 707.69502509;
      doubleArray0[1] = 1227.085215;
      doubleArray0[2] = 707.69502509;
      double double0 = NumberUtils.max(1227.085215, 1227.085215, 1227.085215);
      assertEquals(1227.085215, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)numberUtils0.SHORT_ONE;
      doubleArray0[1] = (double) (long)numberUtils0.LONG_ONE;
      doubleArray0[2] = (double) (int)numberUtils0.INTEGER_ZERO;
      doubleArray0[3] = (double) (int)numberUtils0.INTEGER_ONE;
      doubleArray0[4] = (double) (int)numberUtils0.INTEGER_MINUS_ONE;
      doubleArray0[5] = (-1.0);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = 512.17861701;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[3] = (byte) numberUtils0.BYTE_ONE;
      long[] longArray0 = new long[3];
      longArray0[0] = (long) numberUtils0.LONG_ZERO;
      longArray0[1] = (long) (byte)1;
      longArray0[2] = (long) numberUtils0.LONG_ZERO;
      NumberUtils.min(longArray0);
      byteArray0[4] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[5] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      NumberUtils.min((byte) (-22), (byte) (-22), (byte) (-22));
      boolean boolean0 = NumberUtils.isNumber("toFloat(Float.MAX_VALUE) failed");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)111, (byte)111, (byte)8);
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-4245L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.min((long) numberUtils0.BYTE_MINUS_ONE, (long) numberUtils0.BYTE_MINUS_ONE, (-180L));
      assertEquals((-180L), long0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)10;
      shortArray0[1] = (short) (-3534);
      short short0 = NumberUtils.min((short)10, (short) (-3534), (short)10);
      assertEquals((short) (-3534), short0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      NumberUtils.min((short)89, (short)89, (short)89);
      try { 
        NumberUtils.createNumber("05x-.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      try { 
        NumberUtils.createNumber("max(short[]) failed fr array length 5");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)84;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      NumberUtils.createDouble((String) null);
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)numberUtils0.BYTE_ONE;
      longArray0[1] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      longArray0[2] = (long) (int)numberUtils0.INTEGER_ONE;
      NumberUtils.max(longArray0);
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int[] intArray0 = new int[12];
      intArray0[6] = 97;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(97, int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[5];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[3] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[6] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[7] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[8] = (byte) numberUtils0.BYTE_ZERO;
      NumberUtils.max(byteArray0);
      intArray0[0] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[1] = (int) numberUtils0.INTEGER_ONE;
      NumberUtils.createInteger("0x11d11");
      long long0 = NumberUtils.toLong("a");
      assertEquals(0L, long0);
      
      NumberUtils.toLong("Uu7}k'%$", 0L);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)46, byte0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1533;
      intArray0[1] = 45;
      intArray0[2] = 7;
      intArray0[4] = 125;
      intArray0[5] = 70;
      intArray0[6] = 0;
      intArray0[7] = 6;
      int int0 = NumberUtils.min(7, 45, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = new Integer(71);
      NumberUtils.createInteger((String) null);
      long long0 = NumberUtils.toLong("11d");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[3] = (-67L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-67L), long0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float float0 = NumberUtils.toFloat("H}Iv8!DLk?", (float) numberUtils0.SHORT_ZERO);
      assertEquals(0.0F, float0, 0.01F);
      
      double double0 = NumberUtils.toDouble("isNumber(String)/createNumber(String) 9 failed");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (int)numberUtils0.INTEGER_MINUS_ONE;
      floatArray0[1] = (float) (long)numberUtils0.LONG_ZERO;
      floatArray0[2] = (float) (long)numberUtils0.LONG_MINUS_ONE;
      floatArray0[3] = (float) (byte)numberUtils0.BYTE_ZERO;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[1] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) numberUtils0.BYTE_ONE;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-117), byte0);
      
      NumberUtils.createLong((String) null);
      int int0 = NumberUtils.max((int) numberUtils0.SHORT_MINUS_ONE, (int) (byte)0, (int) numberUtils0.INTEGER_MINUS_ONE);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long[] longArray0 = new long[8];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[1] = (short)102;
      shortArray0[2] = (short) numberUtils0.SHORT_ONE;
      shortArray0[3] = (short) numberUtils0.SHORT_ONE;
      shortArray0[5] = (short)102;
      shortArray0[6] = (short) (-996);
      shortArray0[7] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)102, short0);
      
      long long0 = NumberUtils.max((long) (short) (-996), 3605L, (-1681L));
      assertEquals(3605L, long0);
      
      byte byte0 = NumberUtils.toByte("-0x11a", (byte)24);
      assertEquals((byte)24, byte0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[3] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[4] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[5] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[6] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[7] = (byte) numberUtils0.BYTE_MINUS_ONE;
      float[] floatArray0 = new float[8];
      NumberUtils.createNumber((String) null);
      floatArray0[0] = (float) (byte)numberUtils0.BYTE_ONE;
      floatArray0[1] = (float) (short)numberUtils0.SHORT_ZERO;
      floatArray0[2] = (float) (byte)numberUtils0.BYTE_ZERO;
      floatArray0[3] = (float) (byte)1;
      floatArray0[4] = (float) (byte) (-1);
      floatArray0[5] = (float) (int)numberUtils0.INTEGER_ZERO;
      floatArray0[6] = (float) (int)numberUtils0.INTEGER_ZERO;
      floatArray0[7] = (float) (byte)numberUtils0.BYTE_ZERO;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
      
      long long0 = NumberUtils.min((long) (byte)0, (long) (byte) (-1), (long) numberUtils0.INTEGER_ONE);
      assertEquals((-1L), long0);
      
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("!yXk", (byte)8);
      assertEquals((byte)8, byte0);
      
      long long0 = NumberUtils.min(738L, (-1035L), (-1035L));
      assertEquals((-1035L), long0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_MINUS_ONE;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)numberUtils0.SHORT_ZERO;
      floatArray0[1] = 1.0F;
      floatArray0[2] = (float) numberUtils0.FLOAT_ONE;
      floatArray0[3] = (float) (byte)numberUtils0.BYTE_ONE;
      floatArray0[4] = (float) (short)numberUtils0.SHORT_ZERO;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      byte byte0 = NumberUtils.toByte("isNumber(String) 5 failed");
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.toByte("+f");
      assertEquals((byte)0, byte0);
      
      Byte byte1 = new Byte((byte) numberUtils0.BYTE_ONE);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (float)numberUtils0.FLOAT_ONE;
      doubleArray0[1] = (double) (long)numberUtils0.LONG_ZERO;
      doubleArray0[2] = (double) (byte)0;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      byte byte2 = NumberUtils.toByte("+f", (byte) (-1));
      assertEquals((byte) (-1), byte2);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      doubleArray0[1] = (double) (int)numberUtils0.INTEGER_MINUS_ONE;
      doubleArray0[2] = (double) (long)numberUtils0.LONG_MINUS_ONE;
      doubleArray0[3] = (double) (short)numberUtils0.SHORT_ZERO;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("yYU>Uw");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)536;
      shortArray0[1] = (short)536;
      shortArray0[2] = (short)536;
      shortArray0[3] = (short)536;
      shortArray0[4] = (short)536;
      shortArray0[5] = (short)536;
      shortArray0[6] = (short)536;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)536, short0);
      
      byte byte0 = NumberUtils.toByte("isNumber(String)/createNumber(String) 24 Neg failed", (byte)26);
      assertEquals((byte)26, byte0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-66);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      float[] floatArray0 = new float[18];
      floatArray0[0] = (-2722.6394F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      float[] floatArray0 = new float[18];
      floatArray0[0] = 2437.4536F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_161()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) numberUtils0.BYTE_ZERO;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
      
      int int0 = NumberUtils.toInt((String) null, 1300);
      assertEquals(1300, int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("isNumber(String)/createNumber(String) 6 Neg failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, (-792.19F));
      assertEquals((-792.19F), float0, 0.01F);
      
      double double0 = NumberUtils.toDouble((String) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)27;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.toShort("--");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      try { 
        NumberUtils.createNumber("n2_wft1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"n2_wft1\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.max((byte) numberUtils0.BYTE_ONE, (byte) numberUtils0.BYTE_MINUS_ONE, (byte) numberUtils0.BYTE_ONE);
      // Undeclared exception!
      try { 
        NumberUtils.createLong("K(TH9M");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"K(TH9M\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_ZERO;
      intArray0[1] = (int) (short)numberUtils0.SHORT_ZERO;
      intArray0[2] = (int) (short)numberUtils0.SHORT_ZERO;
      intArray0[3] = (int) numberUtils0.INTEGER_MINUS_ONE;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1), int0);
      
      int int1 = NumberUtils.toInt("RcqKc\ngc2K1-~cC?X|");
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = (-1);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      NumberUtils.toInt("/&15V_/juGxWzsrIp");
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_178()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.toByte("Pyg3#`JAP>[", (byte) numberUtils0.BYTE_ONE);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[1] = (int) numberUtils0.INTEGER_ONE;
      intArray0[2] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[3] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[4] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_181()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.max((byte) numberUtils0.BYTE_ONE, (byte)17, (byte) numberUtils0.BYTE_ONE);
      assertEquals((byte)17, byte0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = (-1793.67093243);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      float float0 = NumberUtils.toFloat("createInteger(String) failed", 410.0388F);
      assertEquals(410.0388F, float0, 0.01F);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)102;
      shortArray0[1] = (short) (-996);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)102, short0);
      
      long long0 = NumberUtils.max((long) (short)102, (long) (short)102, (long) (short)102);
      assertEquals(102L, long0);
      
      byte byte0 = NumberUtils.toByte("-0x11a", (byte)24);
      assertEquals((byte)24, byte0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 429.1712781011829;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-912.7889169334958);
      doubleArray0[4] = (-1597.0);
      doubleArray0[5] = 3817.1096795344;
      doubleArray0[6] = (-1.0);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(3817.1096795344, double0, 0.01);
      
      long long0 = NumberUtils.max(1L, (-1618L), 9L);
      assertEquals(9L, long0);
      
      short short0 = NumberUtils.max((short) (-2987), (short) (-2987), (short) (-630));
      assertEquals((short) (-630), short0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_ONE;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (byte)1;
      doubleArray0[1] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1.0, double0, 0.01);
      
      long long0 = NumberUtils.max(1858L, (long) numberUtils0.INTEGER_ONE, (-1L));
      assertEquals(1858L, long0);
      
      short short0 = NumberUtils.max((short) (byte)1, (short)43, (short)65);
      assertEquals((short)65, short0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_189()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short)14889, (short)120, (short)810);
      assertEquals((short)14889, short0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      try { 
        NumberUtils.createNumber("createNumber(String) 18 failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // createNumber(String) 18 failed is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.min((long) numberUtils0.LONG_MINUS_ONE, (long) numberUtils0.BYTE_ONE, (long) numberUtils0.SHORT_ZERO);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = NumberUtils.min(1326.0798653326935, 1326.0798653326935, 1326.0798653326935);
      assertEquals(1326.0798653326935, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-107);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 1713;
      NumberUtils.min(83, 1713, 1713);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_198()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.min((int) numberUtils0.SHORT_MINUS_ONE, (-1689), (-1));
      assertEquals((-1689), int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[2] = (short)536;
      shortArray0[3] = (short) numberUtils0.SHORT_MINUS_ONE;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)536, short0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      float float0 = NumberUtils.toFloat("0x11z");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_201()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.max((int) numberUtils0.INTEGER_MINUS_ONE, (int) numberUtils0.BYTE_MINUS_ONE, (-1820));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float float0 = NumberUtils.max((float) numberUtils0.INTEGER_ZERO, (float) numberUtils0.SHORT_ZERO, 1.0F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }
}
