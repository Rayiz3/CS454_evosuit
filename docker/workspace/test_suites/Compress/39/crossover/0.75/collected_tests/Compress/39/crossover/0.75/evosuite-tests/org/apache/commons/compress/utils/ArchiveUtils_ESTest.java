/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 05:53:08 GMT 2023
 */

package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipEncoding;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArchiveUtils_ESTest extends ArchiveUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)117;
      byteArray1[1] = (byte)9;
      byteArray1[2] = (byte)109;
      byteArray1[3] = (byte)66;
      byteArray1[4] = (byte)105;
      byteArray1[5] = (byte) (-35);
      byteArray1[6] = (byte)32;
      byteArray1[7] = (byte)7;
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)7;
      byteArray2[1] = (byte) (-35);
      byteArray2[2] = (byte)117;
      byteArray2[3] = (byte)66;
      byteArray2[4] = (byte)10;
      byteArray2[5] = (byte)9;
      byteArray2[6] = (byte)7;
      byteArray2[7] = (byte)32;
      boolean boolean0 = ArchiveUtils.isEqual(byteArray1, 0, (-269), byteArray2, 0, (-2434), false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-67);
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("h", 134630224L, (byte) (-67), (-27), (-27), 154L);
      arArchiveEntry0.getLastModifiedDate();
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("h", true);
      tarArchiveEntry0.setIds((-403), 199);
      ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      ArchiveUtils.sanitize("");
      tarArchiveEntry0.setIds((byte) (-67), 1);
      ArchiveUtils.isArrayZero(byteArray0, (byte) (-67));
      byte[] byteArray1 = new byte[0];
      ArchiveUtils.isEqual(byteArray1, byteArray0, true);
      ArchiveUtils.sanitize("/GZt>#>Y1o");
      ArchiveUtils.toString((ArchiveEntry) tarArchiveEntry0);
      ArchiveUtils.isEqual(byteArray0, byteArray1);
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray1, 100, 31, byteArray1, (byte) (-67), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 100
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-67);
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("h", 134630224L, (byte) (-67), (-27), (-27), 154L);
      arArchiveEntry0.getLastModifiedDate();
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("h", (byte) (-67));
      ArchiveUtils.toString((ArchiveEntry) arArchiveEntry0);
      MockFile mockFile0 = new MockFile("Y15Y7<%jG8:Vdt<?!!", "- 134630224 h");
      TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry(mockFile0, "");
      tarArchiveEntry1.setGroupName("US-ASCII");
      TarArchiveEntry tarArchiveEntry2 = new TarArchiveEntry("F,24m`ZW:[", (byte) (-67), false);
      tarArchiveEntry2.setIds(16, (byte) (-67));
      ArchiveUtils.isArrayZero(byteArray0, 1000);
      byte[] byteArray1 = new byte[0];
      ArchiveUtils.isEqual(byteArray0, byteArray1, true);
      ArchiveUtils.sanitize("US-ASCII");
      ArchiveUtils.toString((ArchiveEntry) tarArchiveEntry1);
      ArchiveUtils.isEqual(byteArray1, byteArray1);
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, 150, 63, byteArray1, 31, 33188);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 150
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)44;
      byte[] byteArray1 = new byte[8];
      byteArray1[7] = (byte)44;
      byteArray1[4] = (byte)44;
      byteArray1[5] = (byte)0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray2 = new byte[1];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      ArchiveUtils.isEqual(byteArray2, byteArray0);
      ArchiveUtils.sanitize("STORED");
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("STORED", false);
      tarArchiveEntry0.setIds((byte)44, (byte)44);
      ArchiveUtils.isArrayZero(byteArray1, 32);
      ArchiveUtils.isEqual(byteArray2, byteArray1, true);
      // Undeclared exception!
      try { 
        tarArchiveEntry0.writeEntryHeader(byteArray1, (ZipEncoding) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.tar.TarUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      String string0 = ArchiveUtils.toAsciiString(byteArray0, 0, 5);
      assertEquals("\u0000\u0000\u0000\u0000\u0000", string0);
      
      String string1 = ArchiveUtils.sanitize("7gHcb='O");
      assertEquals("7gHcb='O", string1);
      
      byte[] byteArray1 = new byte[9];
      ArchiveUtils.isEqualWithNull(byteArray1, 0, 1, byteArray0, 5, (byte)0);
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray1);
      MockFile mockFile0 = new MockFile("\u0000\u0000\u0000\u0000\u0000");
      boolean boolean1 = ArchiveUtils.isEqualWithNull(byteArray1, 2, 1, byteArray1, 1, (-1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byte byte0 = (byte)44;
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byte[] byteArray1 = new byte[8];
      byteArray1[7] = (byte)44;
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry((String) null, (byte)44, 63, 178, (byte)44, (byte)44);
      arArchiveEntry0.getLastModifiedDate();
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("apache-maven-2.2.1/boot/", (byte)44);
      ArchiveUtils.toString((ArchiveEntry) tarArchiveEntry0);
      ArchiveUtils.isEqual(byteArray0, byteArray0);
      tarArchiveEntry0.setGroupName("US-ASCII");
      tarArchiveEntry0.setIds(16877, 2585);
      ArchiveUtils.isArrayZero(byteArray1, 32);
      tarArchiveEntry0.setUserId(63);
      ArchiveUtils.isEqual(byteArray0, byteArray1, true);
      ArchiveUtils.sanitize("5B_#");
      ArchiveUtils.toString((ArchiveEntry) tarArchiveEntry0);
      ArchiveUtils.isEqual(byteArray1, byteArray1);
      ArchiveUtils.sanitize("redline.cpio");
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray1, 7, 16877, byteArray0, (-1), 1000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile1, "");
      String string0 = ArchiveUtils.toString((ArchiveEntry) cpioArchiveEntry0);
      assertEquals("d       0 ", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ArchiveUtils.toAsciiString(byteArray0, 0, 5);
      String string0 = ArchiveUtils.sanitize("7gHcb='O");
      assertEquals("7gHcb='O", string0);
      
      byte[] byteArray1 = new byte[9];
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray1, 0, 1, byteArray0, 5, (byte)0);
      assertTrue(boolean0);
      
      MockFile mockFile0 = new MockFile("\u0000\u0000\u0000\u0000\u0000");
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("7gHcb='O", (-1106L), 5, (byte)0, 5, 0L);
      arArchiveEntry0.getLastModifiedDate();
      arArchiveEntry0.getLastModifiedDate();
      ArchiveUtils.toString((ArchiveEntry) arArchiveEntry0);
      String string1 = ArchiveUtils.toString((ArchiveEntry) arArchiveEntry0);
      assertEquals("-   -1106 7gHcb='O", string1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = new byte[9];
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray1, 5, 0, byteArray0, 0, 5);
      assertTrue(boolean0);
      
      String string0 = ArchiveUtils.toAsciiString(byteArray0, 5, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, 1, 1, byteArray0, 1, (byte)0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byte[] byteArray1 = new byte[8];
      byteArray1[2] = (byte)44;
      byteArray1[3] = (byte)44;
      byteArray1[4] = (byte)44;
      byteArray1[5] = (byte)44;
      byteArray1[6] = (byte)44;
      byteArray1[7] = (byte)44;
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray1, (byte)0, (byte)0, byteArray0, 1, (byte)44);
      assertFalse(boolean0);
      
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)44;
      ArchiveUtils.sanitize("Y&,:/J59A@`]!N@`");
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("Y&,:/J59A@`]!N@`", 6, (byte)0, (byte)44, (byte)44, 0L);
      String string0 = ArchiveUtils.toString((ArchiveEntry) arArchiveEntry0);
      assertEquals("-       6 Y&,:/J59A@`]!N@`", string0);
      
      String string1 = ArchiveUtils.sanitize("!<arch>\n");
      assertEquals("!<arch>?", string1);
      
      String string2 = ArchiveUtils.sanitize("!<arch>?");
      assertEquals("!<arch>?", string2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte) (-36);
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, 2, 1603, byteArray0, (-9971), (byte)0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("W]Ibz", true);
      tarArchiveEntry0.setGroupId(57);
      TarArchiveEntry tarArchiveEntry1 = new TarArchiveEntry("TripleDES192", (byte)50, true);
      tarArchiveEntry1.setIds(49, (byte)50);
      ArchiveUtils.toString((ArchiveEntry) tarArchiveEntry0);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)50;
      ArchiveUtils.isArrayZero(byteArray0, 33188);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)50;
      byteArray1[1] = (byte)50;
      ArchiveUtils.isEqual(byteArray0, byteArray1, true);
      ArchiveUtils.sanitize("US-ASCII");
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, 1000, 195, byteArray0, 52, 1743);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1000
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-78);
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("", 134630224L, (byte) (-78), 100, (-13), 163L);
      String string0 = ArchiveUtils.toString((ArchiveEntry) arArchiveEntry0);
      assertEquals("- 134630224 ", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      ArchiveUtils.toAsciiString(byteArray0, (int) (byte)0, 0);
      ArchiveUtils.sanitize("");
      String string0 = ArchiveUtils.toAsciiString(byteArray0, 0, (int) (byte)0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-78);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", true);
      tarArchiveEntry0.setGroupId((int) (byte) (-78));
      tarArchiveEntry0.setIds(18, 18);
      ArchiveUtils.isArrayZero(byteArray0, (byte) (-78));
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      boolean boolean1 = ArchiveUtils.isEqualWithNull(byteArray0, 252, 0, byteArray0, 0, 31);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, 1, 0, byteArray0, 37, 0);
      assertTrue(boolean0);
      
      System.setCurrentTimeMillis(1);
      String string0 = ArchiveUtils.sanitize("8");
      assertEquals("8", string0);
      
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-78);
      byteArray1[1] = (byte) (-1);
      ArchiveUtils.isEqual(byteArray0, byteArray1);
      System.setCurrentTimeMillis(965);
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("8", 0L, 965, 56, (-156), 0L);
      String string1 = ArchiveUtils.toString((ArchiveEntry) arArchiveEntry0);
      assertEquals("-       0 8", string1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-78);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", true);
      tarArchiveEntry0.setGroupId((int) (byte) (-78));
      tarArchiveEntry0.setIds(18, 18);
      ArchiveUtils.toString((ArchiveEntry) tarArchiveEntry0);
      ArchiveUtils.isArrayZero(byteArray0, (byte) (-78));
      ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      tarArchiveEntry0.setGroupId(2798L);
      ArchiveUtils.sanitize("");
      ArchiveUtils.isEqualWithNull(byteArray0, 0, 18, byteArray0, 1, 1);
      System.setCurrentTimeMillis((byte) (-78));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-78);
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", true);
      tarArchiveEntry0.setGroupId((int) (byte) (-78));
      tarArchiveEntry0.setIds(18, 18);
      String string0 = ArchiveUtils.toString((ArchiveEntry) tarArchiveEntry0);
      ArchiveUtils.isArrayZero(byteArray0, (byte) (-78));
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      String string1 = ArchiveUtils.sanitize("-       0 ");
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean1 = ArchiveUtils.isEqualWithNull(byteArray0, 252, 0, byteArray0, 0, 1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[1] = (byte) (-73);
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, (-829), (byte)0, byteArray0, (byte)0, 1890);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byte[] byteArray1 = new byte[8];
      byteArray1[1] = (byte)44;
      byteArray1[2] = (byte)44;
      byteArray1[3] = (byte)44;
      byteArray1[4] = (byte)44;
      byteArray1[5] = (byte)44;
      byteArray1[6] = (byte)44;
      byteArray1[7] = (byte)44;
      ArchiveUtils.isEqualWithNull(byteArray1, (byte)0, (byte)0, byteArray0, 1, (byte)44);
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)44;
      ArchiveUtils.isEqual(byteArray2, byteArray0);
      int int0 = (-646);
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray2, (byte)0, (-49), byteArray2, 2278, (-646));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -646
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-78);
      String string0 = "Should have raised IOException - closeArchiveEntry() called with no open entry";
      ArchiveUtils.sanitize("Should have raised IOException - closeArchiveEntry() called with no open entry");
      ArchiveUtils.toAsciiString(byteArray0, 0, 5);
      ArchiveUtils.sanitize("");
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-78);
      byteArray1[1] = (byte) (-78);
      byteArray1[2] = (byte) (-78);
      byteArray1[3] = (byte) (-78);
      byteArray1[4] = (byte) (-78);
      byteArray1[5] = (byte) (-11);
      byteArray1[6] = (byte) (-78);
      byteArray1[7] = (byte) (-114);
      byteArray1[8] = (byte) (-78);
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray1, 2992, (byte) (-78), byteArray1, (-1457), (-398));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2594
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-78);
      byteArray0[3] = (byte)40;
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("", true);
      tarArchiveEntry0.setIds(18, 18);
      ArchiveUtils.toString((ArchiveEntry) tarArchiveEntry0);
      ArchiveUtils.isArrayZero(byteArray0, (byte) (-78));
      byte[] byteArray1 = new byte[23];
      byteArray1[0] = (byte) (-78);
      byteArray1[2] = (byte) (-78);
      byteArray1[3] = (byte) (-78);
      ArchiveUtils.isEqual(byteArray1, byteArray0, true);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)116;
      ArchiveUtils.toAsciiString(byteArray0, (int) (byte)0, 0);
      int int1 = (-1);
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString(byteArray0, 0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-28);
      String string0 = ArchiveUtils.sanitize("k5p-4");
      assertEquals("k5p-4", string0);
      
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0);
      boolean boolean1 = ArchiveUtils.matchAsciiBuffer("k5p-4", byteArray0);
      assertFalse(boolean1);
      
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)44;
      byteArray1[1] = (byte) (-28);
      byteArray1[2] = (byte)44;
      byteArray1[3] = (byte)44;
      byteArray1[4] = (byte) (-28);
      byteArray1[5] = (byte) (-28);
      byteArray1[7] = (byte) (-28);
      byteArray1[8] = (byte) (-28);
      boolean boolean2 = ArchiveUtils.isEqual(byteArray1, 966, 512, byteArray1, (int) (byte) (-28), (-963));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, 5, 0, byteArray0, 0, 5);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)40;
      byte byte0 = (byte) (-41);
      int int0 = (-3352);
      ArchiveUtils.isArrayZero(byteArray0, (-3352));
      ArchiveUtils.sanitize("US-ASCII");
      int int1 = 100;
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqual(byteArray0, (int) (byte) (-104), (-121), byteArray0, 100, (int) (byte) (-41), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -21
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = ArchiveUtils.sanitize("JU{");
      assertEquals("JU{", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte) (-20);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)124;
      byteArray1[1] = (byte)46;
      byteArray1[2] = (byte) (-53);
      byteArray1[3] = (byte) (-19);
      byteArray1[4] = (byte) (-19);
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray1, 179, (byte) (-19), byteArray0, (byte)121, (byte) (-19));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[6];
      ArchiveUtils.matchAsciiBuffer("US-ASCII", byteArray1);
      boolean boolean0 = ArchiveUtils.isArrayZero(byteArray0, (byte)0);
      assertTrue(boolean0);
      
      ArchiveUtils.isEqual(byteArray1, (-239), 45, byteArray0, 124, (int) (byte)0);
      ArchiveUtils.toAsciiString(byteArray1);
      ArchiveUtils.isEqual(byteArray0, (-1779), 1960, byteArray0, 1, (int) (byte)0, false);
      String string0 = ArchiveUtils.sanitize("US-ASCII");
      assertEquals("US-ASCII", string0);
      
      boolean boolean1 = ArchiveUtils.isEqual(byteArray1, byteArray1);
      ArchiveUtils.matchAsciiBuffer("org.apache.commons.compress.archivers.zip.X7875_NewUnix", byteArray1);
      ArchiveUtils.isEqual(byteArray1, byteArray1, true);
      boolean boolean2 = ArchiveUtils.isEqual(byteArray0, 824, (int) (byte)0, byteArray1, (int) (byte)0, (-3345), false);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = ArchiveUtils.sanitize("w[Z-|}I7NfTxWF6F");
      assertEquals("w[Z-|}I?7NfTxWF6F", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)30;
      byteArray0[0] = (byte)30;
      byte byte1 = (byte) (-9);
      byteArray0[1] = (byte) (-9);
      byte byte2 = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)7;
      byte byte3 = (byte)45;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)1;
      ArchiveUtils.isEqual(byteArray0, byteArray0);
      ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.sanitize("\u001E\uFFFD\u0001\u0007-\u0001");
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqual(byteArray0, 2048, (int) (byte)1, byteArray0, (int) (byte)30, 503);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2048
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ArchiveUtils.isArrayZero(byteArray0, (-2938));
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArchiveUtils.sanitize("1 O`");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)61;
      ArchiveUtils.isArrayZero(byteArray0, (byte)61);
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString(byteArray0, (int) (byte)61, (int) (byte)61);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ArchiveUtils.isArrayZero(byteArray0, 5);
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString(byteArray0, 5, 5);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte) (-39);
      ArchiveUtils.toAsciiString(byteArray0);
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, 97, (int) (byte) (-39), byteArray0, (int) (byte)107, (int) (byte)107);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)64;
      byte byte0 = (byte) (-52);
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte)109;
      byteArray0[8] = (byte) (-61);
      ArchiveUtils.isEqual(byteArray0, byteArray0);
      ArchiveUtils.isEqual(byteArray0, byteArray0);
      ArchiveUtils.isEqual(byteArray0, 508, (-1577), byteArray0, (int) (byte) (-86), (int) (byte)109);
      ArchiveUtils.matchAsciiBuffer("i1OC", byteArray0, (-1596), (-1596));
      // Undeclared exception!
      try { 
        ArchiveUtils.matchAsciiBuffer("i1OC", byteArray0, (-1596), 49);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1596
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("cxf]@9<{yk.J");
      assertEquals(12, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry("4u", (byte)39);
      ArchiveUtils.toString((ArchiveEntry) tarArchiveEntry0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)39;
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqual(byteArray0, (-590), (int) (byte)39, byteArray0, 232, 3007, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -590
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ArjArchiveEntry arjArchiveEntry0 = new ArjArchiveEntry();
      arjArchiveEntry0.getLastModifiedDate();
      String string0 = ArchiveUtils.toString((ArchiveEntry) arjArchiveEntry0);
      assertEquals("-       0 null", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = ArchiveUtils.sanitize("R3sDbpBh{5j");
      assertEquals("R3sDbpBh{5j", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.matchAsciiBuffer("", byteArray0);
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString(byteArray0, 484, 484);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      System.setCurrentTimeMillis(1);
      byte[] byteArray1 = new byte[2];
      byteArray1[1] = (byte)109;
      boolean boolean0 = ArchiveUtils.isEqual(byteArray1, byteArray0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)77;
      String string0 = ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.isEqual(byteArray0, 49, (int) (byte)32, byteArray0, (int) (byte) (-103), (-2887));
      ArchiveUtils.matchAsciiBuffer("\u00E4/", byteArray0);
      ArchiveUtils.sanitize("");
      ArchiveUtils.matchAsciiBuffer("US-ASCII", byteArray0, (int) (byte)45, (-1658));
      String string1 = ArchiveUtils.toAsciiString(byteArray0);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, (-9), (-9), byteArray0, (-9), (-9));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, (-16), (-16), byteArray0, (-16), (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -32
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString(byteArray0, 3574, 3574);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = new byte[21];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, 2, 2, byteArray0, 2, (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ArchiveUtils.isEqual((byte[]) null, (-185), 12, (byte[]) null, 12, (-185));
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)110;
      byteArray0[7] = (byte) (-24);
      byteArray0[8] = (byte)106;
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, 241, 36, byteArray0, (int) (byte)106, (-1626));
      assertFalse(boolean0);
  }
}
