/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 22:04:41 GMT 2023
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 1.0, 1.0);
      Vector3D vector3D1 = new Vector3D(1.5, 1.0, 1.0);
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(vector3D0, vector3D1);
      Vector1D vector1D0 = Vector1D.ZERO;
      line1.toSubSpace(vector3D1);
      Vector3D vector3D2 = new Vector3D(2.0, 5.043405669804488, 1.5);
      Vector3D vector3D3 = new Vector3D(1.0, 5.043405669804488, 1200.0);
      Vector3D vector3D4 = new Vector3D(1.0E-10, 2.0, 0.6859943405700354);
      Vector3D vector3D5 = Vector3D.POSITIVE_INFINITY;
      Line line2 = new Line(vector3D0, vector3D5);
      line1.toSubSpace(vector3D2);
      Line line3 = new Line(line0);
      Vector1D vector1D1 = line2.toSubSpace(vector3D4);
      assertFalse(vector1D1.equals((Object)vector1D0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 1.0, 1.0);
      Vector3D vector3D1 = new Vector3D(1.5, 1.0, 1.0);
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(line0);
      line1.toSubSpace(vector3D0);
      line1.toSubSpace(vector3D1);
      Vector3D vector3D2 = new Vector3D(2.0, 0.0, 0.0);
      Vector3D vector3D3 = new Vector3D(2.0, 0.5, 0.5);
      Line line2 = new Line(line0);
      vector3D3.orthogonal();
      Line line3 = new Line(line0);
      line3.toSubSpace(vector3D2);
      line3.toSubSpace(vector3D3);
      Vector3D vector3D4 = line0.intersection(line2);
      line0.toSubSpace(vector3D4);
      line2.toSubSpace(vector3D4);
      Vector3D vector3D5 = new Vector3D(1.5, vector3D4, 1.0, vector3D3);
      line3.toSubSpace(vector3D2);
      Vector1D vector1D0 = line2.toSubSpace(vector3D0);
      assertEquals(1.0, vector1D0.getX(), 0.01);
      
      boolean boolean0 = line0.isSimilarTo(line1);
      assertTrue(boolean0);
      
      line1.closestPoint(line3);
      Vector3D vector3D6 = line2.getDirection();
      assertEquals(1.0, vector3D6.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 1.0, 1.0);
      vector3D0.scalarMultiply((-1704.5498583030276));
      Vector3D vector3D1 = new Vector3D(1.5, 1.0, 1.0);
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(vector3D0, vector3D1);
      line1.toSubSpace(vector3D0);
      line1.toSubSpace(vector3D1);
      Vector3D vector3D2 = new Vector3D((-45.37512523077045), 0.0, 0.0);
      Vector3D vector3D3 = new Vector3D(1.0, 0.0, 0.0);
      Line line2 = new Line(vector3D1, vector3D3);
      Line line3 = new Line(vector3D2, vector3D3);
      line1.toSubSpace(vector3D0);
      line0.toSubSpace(vector3D3);
      Vector3D vector3D4 = line2.intersection(line0);
      assertNotNull(vector3D4);
      
      Vector3D.angle(vector3D2, vector3D0);
      line3.toSubSpace(vector3D4);
      line2.toSubSpace(vector3D3);
      Vector3D vector3D5 = line1.intersection(line0);
      assertNotNull(vector3D5);
      
      Vector3D vector3D6 = Vector3D.PLUS_I;
      Vector3D vector3D7 = new Vector3D(0.0, vector3D6, (-4615.2035980319), vector3D6, 0.0, vector3D5);
      line3.toSubSpace(vector3D7);
      Vector1D vector1D0 = line1.toSubSpace(vector3D0);
      assertEquals(1.0, vector1D0.getX(), 0.01);
      
      boolean boolean0 = line1.isSimilarTo(line3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = Vector3D.PLUS_I;
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(line0);
      boolean boolean0 = line1.isSimilarTo(line0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 1.0, 1.0);
      Vector3D vector3D1 = new Vector3D(1.5, 1.0, 1.0);
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(line0);
      line1.toSubSpace(vector3D0);
      line1.toSubSpace(vector3D1);
      Vector3D vector3D2 = new Vector3D(2.0, 0.0, 0.0);
      line1.isSimilarTo(line0);
      Vector1D vector1D0 = line1.toSubSpace(vector3D0);
      Vector3D vector3D3 = line0.toSpace(vector1D0);
      Vector3D vector3D4 = Vector3D.PLUS_I;
      Line line2 = new Line(vector3D2, vector3D4);
      line0.isSimilarTo(line2);
      line0.intersection(line2);
      Line line3 = null;
      try {
        line3 = new Line((Vector3D) null, vector3D3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 1.0, 1.0);
      Vector3D vector3D1 = new Vector3D(1.0, 3.141592653589793, 1.0);
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(vector3D1, vector3D0);
      line0.isSimilarTo(line1);
      Line line2 = null;
      try {
        line2 = new Line(vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      boolean boolean0 = line0.isSimilarTo(line0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      Vector3D vector3D1 = Vector3D.MINUS_I;
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(line0);
      double double0 = line0.distance(line1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      line0.wholeLine();
      boolean boolean0 = line0.isSimilarTo(line0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector1D vector1D0 = Vector1D.NEGATIVE_INFINITY;
      line0.toSpace(vector1D0);
      boolean boolean0 = line0.contains(vector3D0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.PLUS_I;
      Line line0 = new Line(vector3D1, vector3D0);
      Line line1 = new Line(line0);
      Vector3D vector3D2 = line0.closestPoint(line1);
      assertEquals(0.0, vector3D2.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 1.0, 1.0);
      Vector3D vector3D1 = new Vector3D(1.5, 1.0, 1.0);
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(vector3D0, vector3D1);
      line1.toSubSpace(vector3D0);
      line1.toSubSpace(vector3D1);
      Vector3D vector3D2 = new Vector3D(2.0, 0.0, 0.0);
      Vector3D vector3D3 = new Vector3D(7511.57515, (-4.068233003401932E-9), 1.0);
      Line line2 = new Line(vector3D1, vector3D3);
      Line line3 = new Line(vector3D0, vector3D2);
      line0.toSubSpace(vector3D2);
      Vector3D vector3D4 = new Vector3D(3.141592653489793, 1.0);
      Vector3D vector3D5 = new Vector3D(3.877626520917264E-14, vector3D2, 0.999992881162553, vector3D4, 0.0, vector3D2, 0.5, vector3D2);
      line3.toSubSpace(vector3D5);
      Vector3D vector3D6 = line0.intersection(line2);
      assertNotNull(vector3D6);
      
      Vector3D vector3D7 = Vector3D.crossProduct(vector3D1, vector3D4);
      line0.toSubSpace(vector3D7);
      line2.toSubSpace(vector3D5);
      Vector3D vector3D8 = line1.intersection(line0);
      assertNotNull(vector3D8);
      
      line3.toSubSpace(vector3D1);
      Vector1D vector1D0 = line2.toSubSpace(vector3D2);
      assertEquals(1.99999998226989, vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      double double0 = line0.distance(line0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 1.0, 1.0);
      Vector3D vector3D1 = new Vector3D(1.5, 1.5, 1.0);
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(vector3D0, vector3D1);
      line1.toSubSpace(vector3D0);
      Vector1D vector1D0 = line1.toSubSpace(vector3D1);
      assertEquals(2.1213203435596424, vector1D0.getX(), 0.01);
      
      Vector3D vector3D2 = new Vector3D(2.0, 0.0, 0.0);
      Vector3D vector3D3 = new Vector3D(2.0, 0.5, 0.5);
      Line line2 = new Line(vector3D2, vector3D3);
      Line line3 = new Line(vector3D2, vector3D3);
      line3.toSubSpace(vector3D0);
      Vector3D vector3D4 = line1.intersection(line0);
      assertNotNull(vector3D4);
      
      Line line4 = line2.revert();
      line2.toSubSpace(vector3D1);
      Vector3D vector3D5 = line0.intersection(line2);
      assertNotSame(line2, line4);
      assertNull(vector3D5);
      
      Vector1D vector1D1 = line1.toSubSpace(vector3D4);
      Vector1D vector1D2 = line3.toSubSpace(vector3D2);
      assertTrue(vector1D2.equals((Object)vector1D1));
      
      Vector3D vector3D6 = line3.getOrigin();
      assertFalse(vector3D6.equals((Object)vector3D3));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      line0.pointAt((-1429.22731041596));
      Vector3D vector3D1 = line0.closestPoint(line0);
      assertFalse(vector3D1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Line line1 = line0.revert();
      line0.closestPoint(line0);
      assertNotSame(line0, line1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Line line1 = new Line(vector3D0, vector3D0);
      line1.intersection(line0);
      double double0 = line0.distance(line1);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 1.0, 1.0);
      Vector3D vector3D1 = new Vector3D(1.5, 1.0, 1.0);
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(vector3D0, vector3D1);
      line1.toSubSpace(vector3D0);
      line1.toSubSpace(vector3D1);
      Vector3D vector3D2 = new Vector3D(2.0, 0.0, 0.0);
      Vector3D vector3D3 = new Vector3D(0.5, 1.2560739669470201E-15, (-659.6357));
      Line line2 = new Line(vector3D0, vector3D3);
      Line line3 = new Line(vector3D3, vector3D1);
      Vector3D vector3D4 = new Vector3D(0.5253501559470026, 0.5, (-1019.45));
      line2.toSubSpace(vector3D4);
      line1.toSubSpace(vector3D1);
      Line line4 = new Line(line2);
      line4.intersection(line0);
      line1.toSubSpace(vector3D3);
      line4.toSubSpace(vector3D3);
      Vector3D vector3D5 = line4.intersection(line1);
      assertNotNull(vector3D5);
      
      line2.toSubSpace(vector3D4);
      Vector1D vector1D0 = line3.toSubSpace(vector3D2);
      assertEquals(0.003027380169528946, vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Line line0 = null;
      try {
        line0 = new Line(vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Line line0 = null;
      Line line1 = null;
      try {
        line1 = new Line((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector1D vector1D0 = Vector1D.ZERO;
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = new Vector3D(2978.1958116373976, 2978.1958116373976, 2978.1958116373976);
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(line0);
      line1.intersection(line0);
      Line line2 = new Line(line0);
      assertFalse(line2.equals((Object)line1));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      line0.toSubSpace(vector3D0);
      boolean boolean0 = line0.isSimilarTo(line0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      boolean boolean0 = line0.contains(vector3D0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      boolean boolean0 = line0.contains(vector3D1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      double double0 = line0.getAbscissa(vector3D0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.closestPoint(line0);
      assertEquals(Double.NaN, vector3D1.getX(), 0.01);
  }
}
