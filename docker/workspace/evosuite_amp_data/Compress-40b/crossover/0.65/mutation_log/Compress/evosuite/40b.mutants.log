1:LVR:POS:0:org.apache.commons.compress.utils.BitInputStream:33:1 |==> 0
2:LVR:POS:NEG:org.apache.commons.compress.utils.BitInputStream:33:1 |==> -1
3:AOR:+(int,int):%(int,int):org.apache.commons.compress.utils.BitInputStream:33:MAXIMUM_CACHE_SIZE + 1 |==> MAXIMUM_CACHE_SIZE % 1
4:AOR:+(int,int):*(int,int):org.apache.commons.compress.utils.BitInputStream:33:MAXIMUM_CACHE_SIZE + 1 |==> MAXIMUM_CACHE_SIZE * 1
5:AOR:+(int,int):-(int,int):org.apache.commons.compress.utils.BitInputStream:33:MAXIMUM_CACHE_SIZE + 1 |==> MAXIMUM_CACHE_SIZE - 1
6:AOR:+(int,int):/(int,int):org.apache.commons.compress.utils.BitInputStream:33:MAXIMUM_CACHE_SIZE + 1 |==> MAXIMUM_CACHE_SIZE / 1
7:LVR:POS:0:org.apache.commons.compress.utils.BitInputStream:36:1 |==> 0
8:LVR:POS:NEG:org.apache.commons.compress.utils.BitInputStream:36:1 |==> -1
9:ROR:<=(int,int):<(int,int):org.apache.commons.compress.utils.BitInputStream:36:i <= MAXIMUM_CACHE_SIZE |==> i < MAXIMUM_CACHE_SIZE
10:ROR:<=(int,int):==(int,int):org.apache.commons.compress.utils.BitInputStream:36:i <= MAXIMUM_CACHE_SIZE |==> i == MAXIMUM_CACHE_SIZE
11:ROR:<=(int,int):TRUE(int,int):org.apache.commons.compress.utils.BitInputStream:36:i <= MAXIMUM_CACHE_SIZE |==> true
12:LVR:POS:0:org.apache.commons.compress.utils.BitInputStream:37:1 |==> 0
13:LVR:POS:NEG:org.apache.commons.compress.utils.BitInputStream:37:1 |==> -1
14:AOR:-(int,int):%(int,int):org.apache.commons.compress.utils.BitInputStream:37:i - 1 |==> i % 1
15:AOR:-(int,int):*(int,int):org.apache.commons.compress.utils.BitInputStream:37:i - 1 |==> i * 1
16:AOR:-(int,int):+(int,int):org.apache.commons.compress.utils.BitInputStream:37:i - 1 |==> i + 1
17:AOR:-(int,int):/(int,int):org.apache.commons.compress.utils.BitInputStream:37:i - 1 |==> i / 1
18:LVR:POS:0:org.apache.commons.compress.utils.BitInputStream:37:1 |==> 0
19:LVR:POS:NEG:org.apache.commons.compress.utils.BitInputStream:37:1 |==> -1
20:SOR:<<(long,int):>>(long,int):org.apache.commons.compress.utils.BitInputStream:37:MASKS[i - 1] << 1 |==> MASKS[i - 1] >> 1
21:SOR:<<(long,int):>>>(long,int):org.apache.commons.compress.utils.BitInputStream:37:MASKS[i - 1] << 1 |==> MASKS[i - 1] >>> 1
22:LVR:POS:0:org.apache.commons.compress.utils.BitInputStream:37:1 |==> 0
23:LVR:POS:NEG:org.apache.commons.compress.utils.BitInputStream:37:1 |==> -1
24:AOR:+(long,long):%(long,long):org.apache.commons.compress.utils.BitInputStream:37:(MASKS[i - 1] << 1) + 1 |==> (MASKS[i - 1] << 1) % 1
25:AOR:+(long,long):*(long,long):org.apache.commons.compress.utils.BitInputStream:37:(MASKS[i - 1] << 1) + 1 |==> (MASKS[i - 1] << 1) * 1
26:AOR:+(long,long):-(long,long):org.apache.commons.compress.utils.BitInputStream:37:(MASKS[i - 1] << 1) + 1 |==> (MASKS[i - 1] << 1) - 1
27:AOR:+(long,long):/(long,long):org.apache.commons.compress.utils.BitInputStream:37:(MASKS[i - 1] << 1) + 1 |==> (MASKS[i - 1] << 1) / 1
28:STD:<ASSIGN>:<NO-OP>:org.apache.commons.compress.utils.BitInputStream:37:MASKS[i] = (MASKS[i - 1] << 1) + 1 |==> <NO-OP>
29:LVR:0:POS:org.apache.commons.compress.utils.BitInputStream:43:0 |==> 1
30:LVR:0:NEG:org.apache.commons.compress.utils.BitInputStream:43:0 |==> -1
31:LVR:0:POS:org.apache.commons.compress.utils.BitInputStream:44:0 |==> 1
32:LVR:0:NEG:org.apache.commons.compress.utils.BitInputStream:44:0 |==> -1
33:STD:<CALL>:<NO-OP>:org.apache.commons.compress.utils.BitInputStream@close():59:in.close() |==> <NO-OP>
34:LVR:0:POS:org.apache.commons.compress.utils.BitInputStream@clearBitCache():67:0 |==> 1
35:LVR:0:NEG:org.apache.commons.compress.utils.BitInputStream@clearBitCache():67:0 |==> -1
36:STD:<ASSIGN>:<NO-OP>:org.apache.commons.compress.utils.BitInputStream@clearBitCache():67:bitsCached = 0 |==> <NO-OP>
37:LVR:0:POS:org.apache.commons.compress.utils.BitInputStream@clearBitCache():68:0 |==> 1
38:LVR:0:NEG:org.apache.commons.compress.utils.BitInputStream@clearBitCache():68:0 |==> -1
39:STD:<ASSIGN>:<NO-OP>:org.apache.commons.compress.utils.BitInputStream@clearBitCache():68:bitsCachedSize = 0 |==> <NO-OP>
40:LVR:0:POS:org.apache.commons.compress.utils.BitInputStream@readBits(int):82:0 |==> 1
41:LVR:0:NEG:org.apache.commons.compress.utils.BitInputStream@readBits(int):82:0 |==> -1
42:ROR:<(int,int):!=(int,int):org.apache.commons.compress.utils.BitInputStream@readBits(int):82:count < 0 |==> count != 0
43:ROR:<(int,int):<=(int,int):org.apache.commons.compress.utils.BitInputStream@readBits(int):82:count < 0 |==> count <= 0
44:ROR:<(int,int):FALSE(int,int):org.apache.commons.compress.utils.BitInputStream@readBits(int):82:count < 0 |==> false
45:ROR:>(int,int):!=(int,int):org.apache.commons.compress.utils.BitInputStream@readBits(int):82:count > MAXIMUM_CACHE_SIZE |==> count != MAXIMUM_CACHE_SIZE
46:ROR:>(int,int):>=(int,int):org.apache.commons.compress.utils.BitInputStream@readBits(int):82:count > MAXIMUM_CACHE_SIZE |==> count >= MAXIMUM_CACHE_SIZE
47:ROR:>(int,int):FALSE(int,int):org.apache.commons.compress.utils.BitInputStream@readBits(int):82:count > MAXIMUM_CACHE_SIZE |==> false
48:COR:||(boolean,boolean):!=(boolean,boolean):org.apache.commons.compress.utils.BitInputStream@readBits(int):82:count < 0 || count > MAXIMUM_CACHE_SIZE |==> count < 0 != count > MAXIMUM_CACHE_SIZE
49:COR:||(boolean,boolean):LHS(boolean,boolean):org.apache.commons.compress.utils.BitInputStream@readBits(int):82:count < 0 || count > MAXIMUM_CACHE_SIZE |==> count < 0
50:COR:||(boolean,boolean):RHS(boolean,boolean):org.apache.commons.compress.utils.BitInputStream@readBits(int):82:count < 0 || count > MAXIMUM_CACHE_SIZE |==> count > MAXIMUM_CACHE_SIZE
51:COR:||(boolean,boolean):TRUE(boolean,boolean):org.apache.commons.compress.utils.BitInputStream@readBits(int):82:count < 0 || count > MAXIMUM_CACHE_SIZE |==> true
52:ROR:<(int,int):!=(int,int):org.apache.commons.compress.utils.BitInputStream@readBits(int):85:bitsCachedSize < count |==> bitsCachedSize != count
53:ROR:<(int,int):<=(int,int):org.apache.commons.compress.utils.BitInputStream@readBits(int):85:bitsCachedSize < count |==> bitsCachedSize <= count
54:ROR:<(int,int):FALSE(int,int):org.apache.commons.compress.utils.BitInputStream@readBits(int):85:bitsCachedSize < count |==> false
55:LVR:0:POS:org.apache.commons.compress.utils.BitInputStream@readBits(int):87:0 |==> 1
56:LVR:0:NEG:org.apache.commons.compress.utils.BitInputStream@readBits(int):87:0 |==> -1
57:ROR:<(long,long):!=(long,long):org.apache.commons.compress.utils.BitInputStream@readBits(int):87:nextByte < 0 |==> nextByte != 0
58:ROR:<(long,long):<=(long,long):org.apache.commons.compress.utils.BitInputStream@readBits(int):87:nextByte < 0 |==> nextByte <= 0
59:ROR:<(long,long):FALSE(long,long):org.apache.commons.compress.utils.BitInputStream@readBits(int):87:nextByte < 0 |==> false
60:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.compress.utils.BitInputStream@readBits(int):90:byteOrder == ByteOrder.LITTLE_ENDIAN |==> false
61:SOR:<<(long,int):>>(long,int):org.apache.commons.compress.utils.BitInputStream@readBits(int):91:nextByte << bitsCachedSize |==> nextByte >> bitsCachedSize
62:SOR:<<(long,int):>>>(long,int):org.apache.commons.compress.utils.BitInputStream@readBits(int):91:nextByte << bitsCachedSize |==> nextByte >>> bitsCachedSize
63:STD:<ASSIGN>:<NO-OP>:org.apache.commons.compress.utils.BitInputStream@readBits(int):91:bitsCached |= (nextByte << bitsCachedSize) |==> <NO-OP>
64:LVR:POS:0:org.apache.commons.compress.utils.BitInputStream@readBits(int):93:8 |==> 0
65:LVR:POS:NEG:org.apache.commons.compress.utils.BitInputStream@readBits(int):93:8 |==> -8
66:STD:<ASSIGN>:<NO-OP>:org.apache.commons.compress.utils.BitInputStream@readBits(int):93:bitsCached <<= 8 |==> <NO-OP>
67:STD:<ASSIGN>:<NO-OP>:org.apache.commons.compress.utils.BitInputStream@readBits(int):94:bitsCached |= nextByte |==> <NO-OP>
68:LVR:POS:0:org.apache.commons.compress.utils.BitInputStream@readBits(int):96:8 |==> 0
69:LVR:POS:NEG:org.apache.commons.compress.utils.BitInputStream@readBits(int):96:8 |==> -8
70:STD:<ASSIGN>:<NO-OP>:org.apache.commons.compress.utils.BitInputStream@readBits(int):96:bitsCachedSize += 8 |==> <NO-OP>
71:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.commons.compress.utils.BitInputStream@readBits(int):101:byteOrder == ByteOrder.LITTLE_ENDIAN |==> false
72:LOR:&(long,long):^(long,long):org.apache.commons.compress.utils.BitInputStream@readBits(int):102:bitsCached & MASKS[count] |==> bitsCached ^ MASKS[count]
73:LOR:&(long,long):|(long,long):org.apache.commons.compress.utils.BitInputStream@readBits(int):102:bitsCached & MASKS[count] |==> bitsCached | MASKS[count]
74:STD:<ASSIGN>:<NO-OP>:org.apache.commons.compress.utils.BitInputStream@readBits(int):103:bitsCached >>>= count |==> <NO-OP>
75:AOR:-(int,int):%(int,int):org.apache.commons.compress.utils.BitInputStream@readBits(int):105:bitsCachedSize - count |==> bitsCachedSize % count
76:AOR:-(int,int):*(int,int):org.apache.commons.compress.utils.BitInputStream@readBits(int):105:bitsCachedSize - count |==> bitsCachedSize * count
77:AOR:-(int,int):+(int,int):org.apache.commons.compress.utils.BitInputStream@readBits(int):105:bitsCachedSize - count |==> bitsCachedSize + count
78:AOR:-(int,int):/(int,int):org.apache.commons.compress.utils.BitInputStream@readBits(int):105:bitsCachedSize - count |==> bitsCachedSize / count
79:SOR:>>(long,int):<<(long,int):org.apache.commons.compress.utils.BitInputStream@readBits(int):105:bitsCached >> (bitsCachedSize - count) |==> bitsCached << (bitsCachedSize - count)
80:SOR:>>(long,int):>>>(long,int):org.apache.commons.compress.utils.BitInputStream@readBits(int):105:bitsCached >> (bitsCachedSize - count) |==> bitsCached >>> (bitsCachedSize - count)
81:LOR:&(long,long):^(long,long):org.apache.commons.compress.utils.BitInputStream@readBits(int):105:(bitsCached >> (bitsCachedSize - count)) & MASKS[count] |==> (bitsCached >> (bitsCachedSize - count)) ^ MASKS[count]
82:LOR:&(long,long):|(long,long):org.apache.commons.compress.utils.BitInputStream@readBits(int):105:(bitsCached >> (bitsCachedSize - count)) & MASKS[count] |==> (bitsCached >> (bitsCachedSize - count)) | MASKS[count]
83:STD:<ASSIGN>:<NO-OP>:org.apache.commons.compress.utils.BitInputStream@readBits(int):107:bitsCachedSize -= count |==> <NO-OP>
