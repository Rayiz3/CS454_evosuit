/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 20:20:06 GMT 2023
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".1L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234E5l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-123E2.12");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0. c[9)T_e!-f3'I{dN4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0el");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0el is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
      
      boolean boolean0 = NumberUtils.isNumber("-0xafKi4CqA");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        NumberUtils.createNumber("BL:X&K^QVhAk.L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // BL:X&K^QVhAk.L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.7976931348623159e+308");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0E is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-700");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-TSKR90{M4mOYzXT:l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -TSKR90{M4mOYzXT:l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-0l");
      assertEquals(0L, number0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("11E700F");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-700F");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      try { 
        NumberUtils.createNumber("should throw NoSuchMethodException");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // should throw NoSuchMethodException is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-1E-E700");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1805.22);
      doubleArray0[1] = 5.099999904632568;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-134.86588112);
      doubleArray0[4] = 1532.056;
      doubleArray0[5] = 1.0E-4;
      doubleArray0[6] = (-202.98635464);
      doubleArray0[7] = (-3761.23);
      doubleArray0[8] = (-1.2345);
      NumberUtils.min(doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 2045;
      intArray0[1] = (-1431655763);
      intArray0[2] = (-2144902536);
      intArray0[3] = 2441;
      intArray0[4] = 68;
      intArray0[5] = 305419896;
      intArray0[6] = 2102;
      NumberUtils.max(intArray0);
      Number number0 = NumberUtils.createNumber("0.9");
      assertEquals(0.9F, number0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.9");
      assertEquals(0.9F, number0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("134D");
      assertEquals(134.0, number0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xf25678");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xeE=");
      assertFalse(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 114;
      intArray0[1] = (-800);
      intArray0[2] = (-412);
      intArray0[3] = (-1416);
      intArray0[4] = (-1181);
      intArray0[5] = 13;
      intArray0[6] = 70;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1416), int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234ED");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-eHs#z*.fY E*1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x2H3%=pf@Jv&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      try { 
        NumberUtils.createNumber("wp=9,s'0eg0M= ]+");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // wp=9,s'0eg0M= ]+ is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x12345678");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("001.1E200");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("EJ^o/=/^v\"o]1]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      try { 
        NumberUtils.createNumber("P,ztvQ/UG7j?B3\"4uD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // P,ztvQ/UG7j?B3\"4uD is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E200");
      assertEquals(1.1E200, number0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      Integer integer0 = new Integer(15);
      boolean boolean0 = NumberUtils.isNumber("-0xgx!Q`hIobF&5rbHT");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-122.0F);
      floatArray0[1] = (-122.0F);
      floatArray0[2] = (-3356.1057F);
      floatArray0[3] = 1.7F;
      floatArray0[4] = Float.NaN;
      floatArray0[5] = (-1.0F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
      
      float float1 = NumberUtils.max((-1.0F), (-122.0F), 0.0F);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("123.4E-D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+Y}Xk+c@.B)?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-122.0F);
      floatArray0[1] = 4356.588F;
      floatArray0[2] = (-3356.1057F);
      floatArray0[3] = 1.7F;
      floatArray0[4] = Float.NaN;
      floatArray0[5] = (-1.0F);
      NumberUtils.min(floatArray0);
      NumberUtils.max((-1.0F), 4356.588F, 0.0F);
      short[] shortArray0 = null;
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("1.1E-700");
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1164.0F);
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-eHs#z*.fY E*1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[10];
      floatArray0[0] = (float) (int)numberUtils0.INTEGER_ZERO;
      NumberUtils.min(floatArray0);
      NumberUtils.max(0.0F, (float) numberUtils0.INTEGER_ZERO, (float) numberUtils0.BYTE_ONE);
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Z7$Dg\">A<0};l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Z7$Dg\">A<0};l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
      
      byte[] byteArray0 = new byte[0];
      NumberUtils.toByte((String) null);
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("1<6\"r;oZV#dk7zxO");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      NumberUtils.isNumber("0;|");
      NumberUtils.createBigDecimal("0");
      long[] longArray0 = new long[3];
      longArray0[0] = 1386L;
      longArray0[1] = 147L;
      longArray0[2] = (-1730L);
      long long0 = new Long(147L);
      Double double0 = NumberUtils.createDouble("0");
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1234.5f");
      assertEquals(1234.5F, number0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1l");
      assertEquals(1L, number0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      try { 
        NumberUtils.createNumber("cTEm]gqhS>c=lbpEmL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // cTEm]gqhS>c=lbpEmL is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-1");
      assertEquals((short) (-1), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3799.0175167631;
      doubleArray0[1] = 3799.0175167631;
      doubleArray0[2] = (-1235.2328);
      NumberUtils.min(doubleArray0);
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      NumberUtils.createBigInteger((String) null);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)88;
      shortArray0[1] = (short)1236;
      shortArray0[2] = (short)8732;
      shortArray0[3] = (short) (-4589);
      shortArray0[4] = (short)532;
      shortArray0[5] = (short) (-2630);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)8732, short0);
      
      double double0 = NumberUtils.toDouble((String) null, 1314.110335318);
      assertEquals(1314.110335318, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)35;
      float float0 = NumberUtils.max((-990.46674F), (float) (byte)35, (-2452.63F));
      assertEquals(35.0F, float0, 0.01F);
      
      byte byte0 = NumberUtils.max((byte)35, (byte)35, (byte)35);
      assertEquals((byte)35, byte0);
      
      byte byte1 = NumberUtils.max((byte)108, (byte)125, (byte)16);
      assertEquals((byte)125, byte1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      try { 
        NumberUtils.createNumber("toFloat(Float.MIN_VALUE) failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // toFloat(Float.MIN_VALUE) failed is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      try { 
        NumberUtils.createNumber("---.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ---. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "fSlC3pQ1Mmy";
      NumberUtils.isNumber("0x");
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      try { 
        NumberUtils.createNumber(".");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      try { 
        NumberUtils.createNumber("e6Mo:oJB)~RU");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // e6Mo:oJB)~RU is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      try { 
        NumberUtils.createNumber("F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // F is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (-874.927);
      doubleArray0[3] = (-874.927);
      doubleArray0[4] = 4.9E-324;
      double double0 = NumberUtils.min(1.801338474958075, 1.801338474958075, 4.9E-324);
      assertEquals(4.9E-324, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)51;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)51, byte0);
      
      float float0 = NumberUtils.max((-2113.8F), (float) (byte) (-1), 1.234E8F);
      assertEquals(1.234E8F, float0, 0.01F);
      
      int int0 = NumberUtils.max((int) (byte)16, 107, 386);
      assertEquals(386, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      try { 
        NumberUtils.createNumber("os.}m");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // os.}m is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1314);
      shortArray0[1] = (short)2;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)2, short0);
      
      byte byte0 = NumberUtils.max((byte) (-65), (byte)41, (byte)41);
      assertEquals((byte)41, byte0);
      
      NumberUtils.createLong((String) null);
      short short1 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1314), short1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[19];
      doubleArray0[0] = (double) (float)numberUtils0.FLOAT_ZERO;
      double double0 = new Float((double) numberUtils0.SHORT_ONE);
      double double1 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double1, 0.01);
      
      byte byte0 = NumberUtils.max((byte) numberUtils0.BYTE_ONE, (byte) numberUtils0.BYTE_MINUS_ONE, (byte) (-121));
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-3429.7383F);
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0Xgk*`e0q;lnFlnxZ~d'!");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Xgk*`e0q;l\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1314);
      shortArray0[1] = (short)2;
      long long0 = NumberUtils.max((-1415L), (-1650L), (long) (short) (-1314));
      assertEquals((-1314L), long0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)35;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)35, byte0);
      
      long long0 = NumberUtils.max(1419L, 1871L, (long) (byte)35);
      assertEquals(1871L, long0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short) numberUtils0.SHORT_ZERO, (short) numberUtils0.BYTE_ZERO, (short) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("N");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234.5f");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0");
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      try { 
        NumberUtils.createNumber("&yh(Pou$OOpAnEP2");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-.12345");
      assertEquals((-0.12345F), number0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1314);
      shortArray0[1] = (short)2;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)2, short0);
      
      int int0 = NumberUtils.max(299, (-2161), 1966);
      assertEquals(1966, int0);
      
      boolean boolean0 = NumberUtils.isDigits(">(5#',r2qQq/-/E)vpV");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float float0 = NumberUtils.max(0.0F, (-2113.8F), (float) numberUtils0.LONG_ZERO);
      assertEquals(0.0F, float0, 0.01F);
      
      int int0 = NumberUtils.max(2725, (int) numberUtils0.SHORT_ONE, 8);
      assertEquals(2725, int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)35;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)35, byte0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)35;
      shortArray0[1] = (short) (byte)35;
      shortArray0[2] = (short) (byte)35;
      shortArray0[3] = (short) (byte)35;
      short short0 = NumberUtils.min(shortArray0);
      short short1 = NumberUtils.min((short)327, (short)327, (short) (byte)35);
      assertTrue(short1 == short0);
      assertEquals((short)35, short1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      boolean boolean0 = NumberUtils.isDigits("(z");
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_ONE;
      boolean boolean1 = NumberUtils.isDigits("01777777777777777777777");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      NumberUtils.createBigDecimal((String) null);
      int int0 = NumberUtils.toInt("0x0X-iUq");
      assertEquals(0, int0);
      
      double double0 = NumberUtils.toDouble("}MHs3Uf@", (-790.02172));
      assertEquals((-790.02172), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int[] intArray0 = new int[2];
      short[] shortArray0 = new short[2];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
      
      byte byte0 = NumberUtils.toByte("M_U4K$zIu");
      assertEquals((byte)0, byte0);
      
      long long0 = NumberUtils.toLong("Ar");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.max((byte) numberUtils0.BYTE_MINUS_ONE, (byte) numberUtils0.BYTE_ONE, (byte) numberUtils0.BYTE_ZERO);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.min((byte) (-40), (byte) numberUtils0.BYTE_ZERO, (byte) (-40));
      assertEquals((byte) (-40), byte0);
      
      byte byte1 = NumberUtils.max((byte) (-70), (byte) (-17), (byte) numberUtils0.BYTE_ZERO);
      assertEquals((byte)0, byte1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      short[] shortArray0 = new short[10];
      shortArray0[0] = (short)103;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.min((short) numberUtils0.BYTE_MINUS_ONE, (short)13, (short) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((short) (-1), short0);
      
      long long0 = NumberUtils.min((-1000L), 2642L, (long) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((-1000L), long0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[1] = (int) numberUtils0.INTEGER_MINUS_ONE;
      intArray0[2] = (int) numberUtils0.INTEGER_ONE;
      NumberUtils.createInteger((String) null);
      intArray0[3] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      NumberUtils.min(intArray0);
      NumberUtils.toDouble("vc{#", (double) (-1));
      NumberUtils.min((long) numberUtils0.LONG_ZERO, (long) numberUtils0.SHORT_MINUS_ONE, (-1121L));
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("/p`s`4N$X4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (long)numberUtils0.LONG_ONE;
      floatArray0[1] = (float) (short)numberUtils0.SHORT_ZERO;
      floatArray0[2] = (float) (int)numberUtils0.INTEGER_ONE;
      floatArray0[3] = (float) (long)numberUtils0.LONG_ONE;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (float)numberUtils0.FLOAT_MINUS_ONE;
      double double0 = new Double((-1.0));
      float float1 = NumberUtils.toFloat((String) null, 1.0F);
      assertEquals(1.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x0191E`200");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      boolean boolean0 = NumberUtils.isNumber("-0xArray cannot be empty.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xgx!QP`hIobF&5rbHT");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x-0x1ab");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0X6o:oJB)RU");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Array cannot be empty.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Array cannot be empty. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2050.47189298;
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (-3202.448);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[7];
      floatArray0[1] = (float) (long)numberUtils0.LONG_ONE;
      floatArray0[2] = (float) numberUtils0.FLOAT_MINUS_ONE;
      floatArray0[3] = (float) numberUtils0.FLOAT_MINUS_ONE;
      floatArray0[4] = (float) (int)numberUtils0.INTEGER_ONE;
      floatArray0[5] = (float) (byte)numberUtils0.BYTE_ONE;
      floatArray0[6] = (float) numberUtils0.FLOAT_MINUS_ONE;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
      
      short short0 = NumberUtils.max((short)1, (short)1832, (short) (-402));
      assertEquals((short)1832, short0);
      
      float float1 = NumberUtils.min((-5.0F), (float) numberUtils0.FLOAT_ONE, (-2451.2542F));
      assertEquals((-2451.2542F), float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-3665.831F);
      floatArray0[1] = (-2400.0F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals((-2400.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (long)numberUtils0.LONG_ZERO;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      short short0 = NumberUtils.max((short) numberUtils0.BYTE_MINUS_ONE, (short)1832, (short)8);
      assertEquals((short)1832, short0);
      
      float float1 = NumberUtils.min((float) (short)1832, 1.23F, 1.0F);
      assertEquals(1.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short) numberUtils0.SHORT_MINUS_ONE, (short)121, (short)121);
      assertEquals((short)121, short0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) numberUtils0.BYTE_ZERO;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
      
      float float0 = new Short((short) numberUtils0.BYTE_MINUS_ONE);
      short short1 = NumberUtils.min((short) numberUtils0.SHORT_ONE, (short)68, (short) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((short) (-1), short1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[2] = (byte)35;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)35, byte0);
      
      byte byte1 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("%%PYLO$(z\"2/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) (float)numberUtils0.FLOAT_ZERO;
      doubleArray0[2] = (double) numberUtils0.DOUBLE_ZERO;
      doubleArray0[3] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      doubleArray0[4] = (double) (short)numberUtils0.SHORT_ZERO;
      doubleArray0[5] = (double) numberUtils0.DOUBLE_ONE;
      doubleArray0[6] = (double) (long)numberUtils0.LONG_ONE;
      doubleArray0[7] = (double) (float)numberUtils0.FLOAT_MINUS_ONE;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = NumberUtils.toInt("0xGF", 191);
      assertEquals(191, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("01234");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.min((short) numberUtils0.BYTE_MINUS_ONE, (short)13, (short) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((short) (-1), short0);
      
      byte byte0 = NumberUtils.toByte("p(O0?u[r$B*ve6j4=QB");
      assertEquals((byte)0, byte0);
      
      long long0 = NumberUtils.toLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      short short0 = NumberUtils.min((short)48, (short) (-1351), (short)48);
      assertEquals((short) (-1351), short0);
      
      short short1 = NumberUtils.toShort((String) null, (short)2083);
      assertEquals((short)2083, short1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.min((byte) numberUtils0.BYTE_ZERO, (byte) numberUtils0.BYTE_MINUS_ONE, (byte) numberUtils0.BYTE_ZERO);
      assertEquals((byte)0, byte0);
      
      boolean boolean0 = NumberUtils.isNumber("q4_lx");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (int)numberUtils0.INTEGER_ZERO;
      doubleArray0[1] = (double) (byte)numberUtils0.BYTE_MINUS_ONE;
      doubleArray0[2] = (double) (short)numberUtils0.SHORT_ZERO;
      doubleArray0[3] = (double) (short)numberUtils0.SHORT_MINUS_ONE;
      byte byte0 = NumberUtils.min((byte)127, (byte)78, (byte)22);
      assertEquals((byte)22, byte0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[1] = (int) numberUtils0.INTEGER_MINUS_ONE;
      intArray0[2] = (int) numberUtils0.INTEGER_ONE;
      intArray0[3] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1), int0);
      
      double double0 = NumberUtils.toDouble("vc{#", (double) (-1));
      assertEquals((-1.0), double0, 0.01);
      
      long long0 = NumberUtils.min((long) numberUtils0.LONG_ZERO, (long) numberUtils0.SHORT_MINUS_ONE, (-1121L));
      assertEquals((-1121L), long0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 46;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 1249;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1249, int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[2] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[3] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) numberUtils0.INTEGER_ZERO;
      intArray0[1] = (int) (short)numberUtils0.SHORT_ZERO;
      intArray0[2] = (int) numberUtils0.INTEGER_ONE;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) numberUtils0.INTEGER_ONE;
      intArray0[5] = (int) (short)numberUtils0.SHORT_ZERO;
      intArray0[6] = (int) (short)1;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (float)numberUtils0.FLOAT_ZERO;
      doubleArray0[1] = (double) (int)numberUtils0.INTEGER_ONE;
      doubleArray0[2] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byte byte0 = new Byte((byte) numberUtils0.BYTE_MINUS_ONE);
      float float0 = NumberUtils.toFloat("0xcreateNumber(String) 18 failed");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      try { 
        NumberUtils.createNumber("os.name");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // os.name is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      try { 
        NumberUtils.createNumber("isNumber(String) 6 Neg failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // isNumber(String) 6 Neg failed is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.toInt((String) null, (-1422));
      assertEquals((-1422), int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createDouble("oCH?x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.max((double) numberUtils0.BYTE_MINUS_ONE, (double) numberUtils0.INTEGER_ONE, 1.1E200);
      assertEquals(1.1E200, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_130()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[1] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[2] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[3] = (int) (byte)numberUtils0.BYTE_ZERO;
      intArray0[4] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[5] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_131()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.toShort("toDouble(String,int) 2 failed");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.min((short) numberUtils0.BYTE_MINUS_ONE, (short) numberUtils0.SHORT_ONE, (short) numberUtils0.BYTE_MINUS_ONE);
      short short1 = NumberUtils.toShort((String) null, (short) numberUtils0.SHORT_MINUS_ONE);
      assertTrue(short1 == short0);
      assertEquals((short) (-1), short1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.min((short) numberUtils0.BYTE_MINUS_ONE, (short)68, (short) numberUtils0.SHORT_MINUS_ONE);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)35;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      double[] doubleArray0 = new double[3];
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)1;
      intArray0[1] = (int) numberUtils0.INTEGER_MINUS_ONE;
      intArray0[2] = (int) numberUtils0.INTEGER_ONE;
      intArray0[3] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[4] = (int) (byte)numberUtils0.BYTE_ZERO;
      intArray0[5] = (int) numberUtils0.INTEGER_ZERO;
      intArray0[6] = (int) (short)numberUtils0.SHORT_ONE;
      intArray0[7] = (int) (byte)numberUtils0.BYTE_ZERO;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1, int0);
      
      doubleArray0[0] = (double) (short)numberUtils0.SHORT_ONE;
      doubleArray0[1] = (double) (float)numberUtils0.FLOAT_MINUS_ONE;
      doubleArray0[2] = (double) (long)numberUtils0.LONG_ONE;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
      
      byteArray0[1] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = 0L;
      longArray0[2] = 94L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(94L, long0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      longArray0[1] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      longArray0[2] = (long) (byte)numberUtils0.BYTE_ONE;
      longArray0[3] = (long) (int)numberUtils0.INTEGER_ONE;
      longArray0[4] = (long) (int)numberUtils0.INTEGER_ZERO;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double double0 = NumberUtils.toDouble("i>6s\"G&L9,4n8%y");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 5.1;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)numberUtils0.SHORT_ONE;
      longArray0[1] = 784L;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 15.43576764666;
      doubleArray0[1] = (-3145.1034652578);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-3145.1034652578), double0, 0.01);
      
      longArray0[2] = (long) (byte)numberUtils0.BYTE_ZERO;
      longArray0[3] = (long) (short)numberUtils0.SHORT_ONE;
      longArray0[4] = (long) numberUtils0.LONG_ONE;
      longArray0[5] = (long) (byte)numberUtils0.BYTE_ZERO;
      longArray0[6] = (long) (int)numberUtils0.INTEGER_ZERO;
      longArray0[7] = (long) numberUtils0.LONG_ZERO;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (long)numberUtils0.LONG_ONE;
      floatArray0[1] = (float) (byte)numberUtils0.BYTE_ONE;
      floatArray0[2] = (float) numberUtils0.FLOAT_ZERO;
      floatArray0[3] = (float) (byte)numberUtils0.BYTE_ONE;
      floatArray0[4] = (float) (int)numberUtils0.INTEGER_MINUS_ONE;
      floatArray0[5] = (float) (byte)numberUtils0.BYTE_ZERO;
      floatArray0[6] = (float) (long)numberUtils0.LONG_ONE;
      floatArray0[7] = (float) (int)numberUtils0.INTEGER_ONE;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1.0F), float0, 0.01F);
      
      float float1 = NumberUtils.max((float) numberUtils0.SHORT_ONE, (float) numberUtils0.LONG_ONE, 1.4E-45F);
      assertNotEquals(float1, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      float[] floatArray0 = new float[15];
      floatArray0[0] = 42.0F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float float0 = NumberUtils.max((float) numberUtils0.INTEGER_ZERO, (float) numberUtils0.INTEGER_ZERO, (float) numberUtils0.BYTE_ONE);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      float[] floatArray0 = new float[22];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("A(Y4sRGO`}s8(");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("xW>/)Rt_~,9");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"xW\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (int)numberUtils0.INTEGER_ZERO;
      doubleArray0[1] = (double) (byte)numberUtils0.BYTE_MINUS_ONE;
      doubleArray0[2] = (double) (short)numberUtils0.SHORT_ZERO;
      doubleArray0[3] = (double) (short)numberUtils0.SHORT_MINUS_ONE;
      doubleArray0[4] = (double) (short)numberUtils0.SHORT_MINUS_ONE;
      doubleArray0[5] = (double) (long)numberUtils0.LONG_ZERO;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[2] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[3] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[4] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[5] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[6] = (short) (byte)numberUtils0.BYTE_ZERO;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_157()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short) numberUtils0.SHORT_ONE, (short) numberUtils0.SHORT_MINUS_ONE, (short)1832);
      assertEquals((short)1832, short0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("0X-iUq");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("#ff");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[3] = (byte) numberUtils0.BYTE_ZERO;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.toByte("01777777777777777777777");
      assertEquals((byte)0, byte0);
      
      long long0 = NumberUtils.toLong("--");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      short[] shortArray0 = new short[10];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("O:=O");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      long[] longArray0 = new long[15];
      longArray0[0] = 362L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      long[] longArray0 = new long[8];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      long[] longArray0 = new long[2];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_173()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.min((short)8, (short)1541, (short) numberUtils0.SHORT_ZERO);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      long long0 = NumberUtils.toLong("J*Eh?Y^/M");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0xg!QP`hIobF&5rbHT");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-g!QP`hIobF&5rbHT\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-#0");
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      try { 
        NumberUtils.createNumber("!gOh@=@j|fQDatO");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // !gOh@=@j|fQDatO is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Z,+)cOCV)^gr6");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_180()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.min((int) numberUtils0.BYTE_ZERO, (int) numberUtils0.INTEGER_ZERO, (int) numberUtils0.SHORT_ZERO);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_181()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.min(102, (int) numberUtils0.INTEGER_ONE, (int) numberUtils0.BYTE_ZERO);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short) numberUtils0.SHORT_ONE, (short) numberUtils0.SHORT_MINUS_ONE, (short) numberUtils0.BYTE_ONE);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float float0 = NumberUtils.toFloat("y#!e0Y%11t", (float) numberUtils0.INTEGER_ZERO);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("-#&yh(Pou,$OOpAnEP2");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"&yh\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("--k");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"k\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("0X-iUq");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_187()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.toByte("0X", (byte) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((byte) (-1), byte0);
  }
}
