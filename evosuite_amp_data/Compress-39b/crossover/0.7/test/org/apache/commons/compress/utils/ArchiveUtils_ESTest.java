/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 05:59:51 GMT 2023
 */

package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.zip.ZipEntry;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.archivers.arj.ArjArchiveEntry;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.archivers.jar.JarArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArchiveUtils_ESTest extends ArchiveUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("no current CPIO entry", 0L);
      arArchiveEntry0.getLastModifiedDate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      arArchiveEntry0.getLastModifiedDate();
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("org.apache.commons.compress.archivers.dump.DumpArchiveEntry$PERMISSION");
      MockDate mockDate0 = new MockDate();
      ArArchiveEntry arArchiveEntry1 = new ArArchiveEntry("!<arch>\n", 808471403L, (byte)111, 40, 40, (-136L));
      ArchiveUtils.toString((ArchiveEntry) arArchiveEntry1);
      boolean boolean0 = ArchiveUtils.isArrayZero(byteArray0, 40);
      assertFalse(boolean0);
      
      ArchiveUtils.isEqual(byteArray0, byteArray0);
      boolean boolean1 = ArchiveUtils.isEqual(byteArray0, byteArray0, false);
      String string0 = ArchiveUtils.sanitize("org.apache.commons.compress.archivers.dump.DumpArchiveEntry$PERMISSION");
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveEntry$PERMISSION", string0);
      
      String string1 = ArchiveUtils.toString((ArchiveEntry) arArchiveEntry0);
      assertEquals("-       0 no current CPIO entry", string1);
      
      boolean boolean2 = ArchiveUtils.isEqual(byteArray0, 60, (-1643), byteArray0, 40, (-1459), false);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)0;
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      assertTrue(boolean0);
      
      String string0 = ArchiveUtils.toAsciiString(byteArray0, (int) (byte)2, (int) (byte)2);
      assertEquals("\uFFFD\uFFFD", string0);
      
      String string1 = ArchiveUtils.sanitize("\uFFFD\uFFFD");
      assertEquals("??", string1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("no urent CPIO enty", 0L);
      arArchiveEntry0.getLastModifiedDate();
      ArchiveUtils.sanitize("no urent CPIO enty");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockDate mockDate0 = new MockDate();
      arArchiveEntry0.getLastModifiedDate();
      arArchiveEntry0.getLastModifiedDate();
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("org.apache.commons.compress.archivers.dump.DumpArchiveEntry$PERMISSION");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArArchiveEntry arArchiveEntry1 = new ArArchiveEntry("!<arch>\n", 808471393L, 29127, 40, 40, (-136L));
      arArchiveEntry1.getLastModifiedDate();
      String string0 = ArchiveUtils.toString((ArchiveEntry) arArchiveEntry1);
      assertEquals("- 808471393 !<arch>\n", string0);
      
      boolean boolean0 = ArchiveUtils.isArrayZero(byteArray0, 2020);
      boolean boolean1 = ArchiveUtils.isEqual(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      
      ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      System.setCurrentTimeMillis(0L);
      String string1 = ArchiveUtils.sanitize("org.apache.commons.compress.archivers.dump.DumpArchiveEntry$PERMISSION");
      assertEquals("org.apache.commons.compress.archivers.dump.DumpArchiveEntry$PERMISSION", string1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-24);
      byteArray0[6] = (byte) (-2);
      ArchiveUtils.isArrayZero(byteArray0, (byte)9);
      String string0 = ArchiveUtils.sanitize("");
      ArchiveUtils.isEqualWithNull(byteArray0, (byte)3, 509, byteArray0, (byte)0, (byte)0);
      ArchiveUtils.toAsciiBytes("");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("");
      String string1 = ArchiveUtils.sanitize("");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte) (-1);
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, (byte)1, 9474, byteArray0, 2972, (-1));
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-73);
      byte[] byteArray2 = ArchiveUtils.toAsciiBytes("");
      boolean boolean1 = ArchiveUtils.isEqual(byteArray1, byteArray2, true);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArchiveUtils.sanitize("xa0gHBDqBd\"N?");
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("xa0gHBDqBd\"N?");
      byte[] byteArray1 = new byte[2];
      byteArray1[1] = (byte)1;
      boolean boolean0 = ArchiveUtils.isEqual(byteArray1, byteArray1, true);
      ArchiveUtils.isEqual(byteArray1, byteArray0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("21-");
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)1;
      byteArray2[3] = (byte)1;
      byteArray2[4] = (byte)1;
      boolean boolean1 = ArchiveUtils.isArrayZero(byteArray2, 845);
      assertFalse(boolean1);
      
      ArchiveUtils.isEqual(byteArray2, byteArray1);
      String string0 = ArchiveUtils.sanitize("FILE");
      assertEquals("FILE", string0);
      
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      String string1 = ArchiveUtils.toString((ArchiveEntry) jarArchiveEntry0);
      assertEquals("-      -1 21-", string1);
      
      boolean boolean2 = ArchiveUtils.isEqualWithNull(byteArray1, (byte)1, (byte)0, byteArray2, (byte)0, (byte)1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      String string0 = ArchiveUtils.sanitize("E;;=kN yA[xIU\"+");
      assertEquals("E;;=kN yA[xIU\"+", string0);
      
      byte[] byteArray1 = ArchiveUtils.toAsciiBytes("E.%|w+*3=Dj._ZxZt");
      ArchiveUtils.isEqual(byteArray1, byteArray0, true);
      ArchiveUtils.sanitize("");
      boolean boolean0 = ArchiveUtils.isEqual(byteArray1, (int) (byte)1, (int) (byte)1, byteArray0, (int) (byte)1, (int) (byte)1);
      assertFalse(boolean0);
      
      String string1 = ArchiveUtils.sanitize("");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte) (-1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArchiveUtils.isEqualWithNull(byteArray0, (byte)1, (byte)1, byteArray0, (byte)0, 1850);
      byte[] byteArray1 = ArchiveUtils.toAsciiBytes(" ");
      ArchiveUtils.isEqual(byteArray0, byteArray1, false);
      ArchiveUtils.isEqual(byteArray0, byteArray1);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("");
      String string0 = ArchiveUtils.toString((ArchiveEntry) jarArchiveEntry0);
      assertEquals("-      -1 ", string0);
      
      boolean boolean0 = ArchiveUtils.isArrayZero(byteArray1, (-1590));
      assertTrue(boolean0);
      
      String string1 = ArchiveUtils.sanitize(" ");
      assertEquals(" ", string1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[5] = (byte) (-1);
      byteArray0[3] = (byte)102;
      byte[] byteArray1 = ArchiveUtils.toAsciiBytes("");
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray1);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("US-ASCII");
      boolean boolean1 = ArchiveUtils.isEqualWithNull(byteArray1, (-2102), (byte)0, byteArray0, (byte) (-1), 0);
      assertFalse(boolean1 == boolean0);
      
      String string0 = ArchiveUtils.toAsciiString(byteArray0, (int) (byte)1, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = ArchiveUtils.sanitize("K<KvA$~ +");
      assertEquals("K<KvA$~ +", string0);
      
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry("M6SVz+r:{1Q&QJ");
      String string1 = ArchiveUtils.toString((ArchiveEntry) zipArchiveEntry0);
      assertEquals("-      -1 M6SVz+r:{1Q&QJ", string1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = ArchiveUtils.toAsciiBytes("");
      boolean boolean0 = ArchiveUtils.isEqual(byteArray1, byteArray0, true);
      assertTrue(boolean0);
      
      boolean boolean1 = ArchiveUtils.isEqual(byteArray1, byteArray0);
      assertFalse(boolean1 == boolean0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("US-ASCII");
      jarArchiveEntry0.setComment("");
      String string0 = ArchiveUtils.toString((ArchiveEntry) jarArchiveEntry0);
      assertEquals("-      -1 US-ASCII", string0);
      
      String string1 = ArchiveUtils.toAsciiString(byteArray0, 0, 3);
      assertEquals("\u0000\u0000\u0000", string1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte)102;
      byte[] byteArray1 = ArchiveUtils.toAsciiBytes("");
      ArchiveUtils.isEqual(byteArray1, byteArray0, true);
      ArchiveUtils.isEqual(byteArray0, byteArray1);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("US-ASCII");
      jarArchiveEntry0.setComment("$<MNs@x");
      ArchiveUtils.toString((ArchiveEntry) jarArchiveEntry0);
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString(byteArray1, (int) (byte)0, 10);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte) (-1);
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, (byte)1, 9474, byteArray0, 2972, (-1));
      assertFalse(boolean0);
      
      ArjArchiveEntry arjArchiveEntry0 = new ArjArchiveEntry();
      arjArchiveEntry0.getName();
      arjArchiveEntry0.getLastModifiedDate();
      arjArchiveEntry0.getLastModifiedDate();
      arjArchiveEntry0.getLastModifiedDate();
      arjArchiveEntry0.getLastModifiedDate();
      ArchiveUtils.isEqual(byteArray0, 3469, 32, byteArray0, 224, (-1), false);
      String string0 = ArchiveUtils.sanitize("'}MkmwcvrcNimphPC");
      assertEquals("'?}MkmwcvrcNimphPC", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)1;
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte) (-1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte byte1 = (byte)0;
      ArchiveUtils.isEqualWithNull(byteArray0, (byte)1, (byte)1, byteArray0, (byte)0, 1850);
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, (byte) (-1), 0, byteArray0, 89, (byte) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-1);
      byte[] byteArray1 = ArchiveUtils.toAsciiBytes("");
      ArchiveUtils.isEqual(byteArray1, byteArray0, true);
      ArchiveUtils.isEqual(byteArray0, byteArray1);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("US-ASCII");
      ArchiveUtils.toString((ArchiveEntry) jarArchiveEntry0);
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull((byte[]) null, (-1), 1262, (byte[]) null, 263, 4623);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("7*&`.o4&G(OWyC+");
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray1, byteArray0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)1;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte) (-1);
      ArchiveUtils.isEqualWithNull(byteArray0, (byte)1, (byte) (-1), byteArray1, (byte)1, 40);
      int int0 = 3444;
      int int1 = 32;
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-1);
      byteArray2[1] = (byte)1;
      byteArray2[2] = (byte)1;
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqual(byteArray0, (-1807), 3444, byteArray2, (int) (byte) (-1), 2390, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1807
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, (-1), (-1), byteArray0, (byte) (-61), (-1));
      assertTrue(boolean0);
      
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      ArchiveUtils.toString((ArchiveEntry) dumpArchiveEntry0);
      String string0 = ArchiveUtils.toString((ArchiveEntry) dumpArchiveEntry0);
      assertEquals("-       0 null", string0);
      
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)82;
      byteArray1[2] = (byte) (-77);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      boolean boolean1 = ArchiveUtils.isEqual(byteArray0, (int) (byte)0, 1532, byteArray1, 45, (-949));
      boolean boolean2 = ArchiveUtils.isArrayZero(byteArray0, (byte)14);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte) (-1);
      byte byte0 = (byte)7;
      ArchiveUtils.isArrayZero(byteArray0, (byte) (-1));
      String string0 = "";
      byte[] byteArray1 = ZipShort.getBytes((-781));
      ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      ArchiveUtils.isArrayZero(byteArray1, (byte)48);
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqual(byteArray1, (int) (byte)7, (-1566), byteArray0, (int) (byte)7, (int) (byte)1, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1559
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("je82JvW$!sr,&;3S", 0L);
      ArchiveUtils.toString((ArchiveEntry) arArchiveEntry0);
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, (-2209), (-3381), byteArray0, (-3381), 156);
      byte[] byteArray1 = ArchiveUtils.toAsciiBytes("!<arch>\n");
      ArchiveUtils.isEqual(byteArray1, byteArray1, true);
      boolean boolean1 = ArchiveUtils.isEqual(byteArray1, byteArray1);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("-       0 je82JvW$!sr,&;3S");
      String string0 = ArchiveUtils.toString((ArchiveEntry) jarArchiveEntry0);
      ArchiveUtils.isArrayZero(byteArray0, (-18));
      String string1 = ArchiveUtils.sanitize("-      -1 -       0 je82JvW$!sr,&;3S");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArchiveUtils.sanitize("/2(UdasV{.ZNY,OJQd");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)24;
      boolean boolean0 = ArchiveUtils.matchAsciiBuffer("/2(UdasV{.ZNY,OJQd", byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = ArchiveUtils.sanitize("X`p42<hcf:Q)*cH\"s");
      assertEquals("X`p42<hcf:Q)*cH\"s?", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("no current CPIO entry");
      ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      ArchiveUtils.isEqual(byteArray0, byteArray0);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("ey^}iiqR jBx{#\"");
      jarArchiveEntry0.setComment("");
      MockFile mockFile0 = new MockFile("", "");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "");
      ArchiveUtils.toString((ArchiveEntry) zipArchiveEntry0);
      ArchiveUtils.toAsciiString(byteArray0, 3, 3);
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString(byteArray0, 32, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, (-3525), (int) (byte) (-89), byteArray0, (-3525), 1703);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry("org.apache.commons.compress.utils.ArchiveUtils", "org.apache.commons.compress.utils.ArchiveUtils");
      String string0 = ArchiveUtils.toString((ArchiveEntry) dumpArchiveEntry0);
      assertEquals("-       0 org.apache.commons.compress.utils.ArchiveUtils", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)29;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)64;
      byteArray1[1] = (byte)29;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)32;
      byteArray1[4] = (byte)21;
      byteArray1[5] = (byte)64;
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, 491, 184, byteArray1, 2292, (-620));
      assertFalse(boolean0);
      
      byte[] byteArray2 = ArchiveUtils.toAsciiBytes("McQM N|gtEQx");
      ArchiveUtils.isEqual(byteArray2, byteArray1, false);
      ArchiveUtils.isEqual(byteArray0, byteArray2);
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("US-ASCII");
      String string0 = ArchiveUtils.toString((ArchiveEntry) jarArchiveEntry0);
      assertEquals("-      -1 US-ASCII", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-24);
      byte byte1 = (byte)3;
      byteArray0[2] = (byte)3;
      byte byte2 = (byte)63;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-2);
      ArchiveUtils.isArrayZero(byteArray0, (-1059));
      String string0 = "";
      ArchiveUtils.sanitize("");
      ArchiveUtils.isEqualWithNull(byteArray0, (byte)3, 509, byteArray0, (byte) (-2), (byte) (-2));
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString(byteArray0, 509, 45);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("Cp850");
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray1, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = ArchiveUtils.sanitize("af;|:T%g");
      assertEquals("af;|:T%g", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)9;
      byteArray0[0] = (byte)9;
      byte byte1 = (byte) (-24);
      byteArray0[1] = (byte) (-24);
      byte byte2 = (byte)3;
      byteArray0[2] = (byte)3;
      byte byte3 = (byte)63;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-2);
      ArchiveUtils.isArrayZero(byteArray0, (-1059));
      String string0 = "";
      ArchiveUtils.sanitize("");
      ArchiveUtils.isEqualWithNull(byteArray0, (byte)3, 509, byteArray0, (byte) (-2), (byte) (-2));
      int int0 = 45;
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString(byteArray0, 1511, 45);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ArchiveUtils.sanitize("rySnd");
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = ArchiveUtils.isArrayZero(byteArray0, (-4327));
      assertTrue(boolean0);
      
      String string0 = ArchiveUtils.sanitize("rySnd");
      assertEquals("rySnd", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = ArchiveUtils.toAsciiBytes("");
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray1, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[29];
      byte[] byteArray1 = ArchiveUtils.toAsciiBytes("(Vc.^d3");
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray1, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("", 0L);
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("`\n");
      ArArchiveEntry arArchiveEntry1 = new ArArchiveEntry("!<arch>\n", 808471410L, (byte)96, 53, 53, 0L);
      String string0 = ArchiveUtils.toString((ArchiveEntry) arArchiveEntry1);
      assertEquals("- 808471410 !<arch>\n", string0);
      
      boolean boolean0 = ArchiveUtils.isArrayZero(byteArray0, 53);
      assertFalse(boolean0);
      
      String string1 = ArchiveUtils.sanitize("!<arch>\n");
      assertEquals("!<arch>?", string1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      ArchiveUtils.toAsciiString(byteArray0, (int) (byte)0, (int) (byte)0);
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      JarArchiveEntry jarArchiveEntry0 = new JarArchiveEntry("");
      String string0 = ArchiveUtils.toString((ArchiveEntry) dumpArchiveEntry0);
      ArchiveUtils.isArrayZero(byteArray0, 3);
      String string1 = ArchiveUtils.sanitize("-       0 null");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("");
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ArchiveUtils.toAsciiBytes("t65TIQ6)R]-dQT8S8YX");
      boolean boolean0 = ArchiveUtils.matchAsciiBuffer("t65TIQ6)R]-dQT8S8YX", byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString(byteArray0, 1330, 1330);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull((byte[]) null, 19, 2261, (byte[]) null, 2261, 2261);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = ArchiveUtils.toAsciiBytes("");
      boolean boolean0 = ArchiveUtils.isEqual(byteArray1, byteArray0, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, 657, (byte) (-89), byteArray0, (-36), 657);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -125
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }
}
