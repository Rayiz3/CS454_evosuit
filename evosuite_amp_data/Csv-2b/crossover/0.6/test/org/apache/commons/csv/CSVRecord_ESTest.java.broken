/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 11:10:21 GMT 2023
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thoughtworks.xstream.io.StreamException;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import org.apache.commons.csv.CSVRecord;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.testcarver.testcase.EvoSuiteXStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVRecord_ESTest extends CSVRecord_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, (Map<String, Integer>) null, (String) null, 439L);
      // Undeclared exception!
      try { 
        cSVRecord0.get((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No header mapping was specified, the record values can't be accessed by name
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, (Map<String, Integer>) null, (String) null, 0L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = Integer.valueOf((-4385));
      hashMap0.put(";CC(IPHER", integer0);
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, ";CC(IPHER", 0L);
      boolean boolean0 = cSVRecord0.isSet(";CC(IPHER");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-1932735281));
      hashMap0.put("<org.apache.commons.csv.CSVRecord>\n  <valueb>\n    <string>first</string>\n    <string~second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>", integer0);
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "<org.apache.commons.csv.CSVRecord>\n  <valueb>\n    <string>first</string>\n    <string~second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>", 94L);
      // Undeclared exception!
      try { 
        cSVRecord0.get("<org.apache.commons.csv.CSVRecord>\n  <valueb>\n    <string>first</string>\n    <string~second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1932735281
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(90084);
      hashMap0.put((String) null, integer0);
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "4#&RF5]%", 381L);
      boolean boolean0 = cSVRecord0.isSet((String) null);
      assertFalse(boolean0);
      
      CSVRecord cSVRecord1 = new CSVRecord((String[]) null, hashMap0, "B", 94L);
      cSVRecord1.iterator();
      boolean boolean1 = cSVRecord1.isConsistent();
      boolean boolean2 = cSVRecord1.isMapped((String) null);
      assertEquals(94L, cSVRecord1.getRecordNumber());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("<org.apache.commons.csv.CSVRecord>\n  <valueb>\n    <string>first</string>\n    <string~second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>", (Integer) null);
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "<org.apache.commons.csv.CSVRecord>\n  <valueb>\n    <string>first</string>\n    <string~second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>", 0L);
      // Undeclared exception!
      try { 
        cSVRecord0.isSet("<org.apache.commons.csv.CSVRecord>\n  <valueb>\n    <string>first</string>\n    <string~second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(1);
      hashMap0.put("PG_GET_OID", integer0);
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "PG_GET_OID", (-2027L));
      boolean boolean0 = cSVRecord0.isSet("PG_GET_OID");
      assertFalse(boolean0);
      assertEquals((-2027L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("<org.apache.commons.csv.CSVRecord>\n  <valueb>\n    <string>first</string>\n    <string~second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>", (Integer) null);
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "<org.apache.commons.csv.CSVRecord>\n  <valueb>\n    <string>first</string>\n    <string~second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>", 0L);
      boolean boolean0 = cSVRecord0.isMapped("<org.apache.commons.csv.CSVRecord>\n  <valueb>\n    <string>first</string>\n    <string~second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "<org.apache.commons.csv.CSVRecord>\n  <valueb>\n    <string>first</string>\n    <string~second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>", 11L);
      cSVRecord0.isMapped("first");
      cSVRecord0.getComment();
      assertEquals(11L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "<org.apache.commons.csv.CSVRecord>\n  <valueb>\n    <string>first</string>\n    <string~second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, " ALL", 94L);
      boolean boolean0 = cSVRecord0.isConsistent();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      CSVRecord cSVRecord1 = new CSVRecord((String[]) null, hashMap1, " ALL", 94L);
      boolean boolean1 = cSVRecord1.isSet("p0*yPB_,D");
      assertTrue(boolean1 == boolean0);
      
      cSVRecord0.isMapped("<org.apache.commons.csv.CSVRecord>\n  <valueb>\n    <string>first</string>\n    <string~second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>");
      cSVRecord1.values();
      assertTrue(cSVRecord1.isConsistent());
      assertEquals(94L, cSVRecord1.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, (Map<String, Integer>) null, "<org.apache.commons.csv.CSVRecord>\n  <valueb>\n    <string>first</string>\n    <string~second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>", 32L);
      boolean boolean0 = cSVRecord0.isMapped("<org.apache.commons.csv.CSVRecord>\n  <valueb>\n    <string>first</string>\n    <string~second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>");
      assertFalse(boolean0);
      assertEquals(32L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "<org.apache.commons.csv.CSVRecord>\n  <valueb>\n    <string>first</string>\n    <string~second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>", 0L);
      // Undeclared exception!
      try { 
        cSVRecord0.get(1768);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1768
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "<org.apache.commons.csv.CSVRecord>\n  <valueb>\n    <string>first</string>\n    <string~second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>", 4L);
      cSVRecord0.isConsistent();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      CSVRecord cSVRecord1 = new CSVRecord((String[]) null, hashMap1, "<org.apache.commons.csv.CSVRecord>\n  <valueb>\n    <string>first</string>\n    <string~second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>", 94L);
      boolean boolean0 = cSVRecord1.isConsistent();
      assertTrue(boolean0);
      
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "<org.apache.commons.csv.CSVRecord>\n  <valueb>\n    <string>first</string>\n    <string~second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[1] = "<org.apache.commons.csv.CSVRecord>\n  <valueb>\n    <string>first</string>\n    <string~second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[2] = null;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, (String) null, 32767L);
      cSVRecord0.toString();
      cSVRecord0.isConsistent();
      // Undeclared exception!
      try { 
        EvoSuiteXStream.fromString("9.");
        fail("Expecting exception: StreamException");
      
      } catch(StreamException e) {
         //
         // 
         //
         verifyException("com.thoughtworks.xstream.io.xml.XppReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "<org.apache.commons.csv.CSVRecord>\n  <valueb>\n    <string>first</string>\n    <string~second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>", 94L);
      cSVRecord0.size();
      assertEquals(94L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "<org.apache.commons.csv.CSVRecord>\n  <valueb>\n    <string>first</string>\n    <string~second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>", 0L);
      String string0 = cSVRecord0.get("<org.apache.commons.csv.CSVRecord>\n  <valueb>\n    <string>first</string>\n    <string~second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "<org.apache.commons.csv.CSVRecord>\n  <valueb>\n    <string>first</string>\n    <string~second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "<org.apache.commons.csv.CSVRecord>\n  <valueb>\n    <string>first</string>\n    <string~second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>", (-63L));
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      cSVRecord0.isConsistent();
      Object object0 = new Object();
      cSVRecord0.isConsistent();
      CSVRecord cSVRecord1 = new CSVRecord(stringArray0, hashMap0, "<org.apache.commons.csv.CSVRecord>\n  <valueb>\n    <string>first</string>\n    <string~second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>", 37L);
      cSVRecord1.iterator();
      cSVRecord1.isConsistent();
      boolean boolean0 = cSVRecord0.isConsistent();
      assertFalse(boolean0);
      assertEquals((-63L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "<org.apache.commons.csv.CSVRecord>\n  <valueb>\n    <string>first</string>\n    <string~second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>", 94L);
      assertEquals("[]", cSVRecord0.toString());
      
      boolean boolean0 = cSVRecord0.isConsistent();
      assertEquals(94L, cSVRecord0.getRecordNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[1];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[0], (-54L));
      boolean boolean0 = cSVRecord0.isConsistent();
      assertFalse(boolean0);
      assertEquals((-54L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "<org.apache.commons.csv.CSVRecord>\n  <valueb>\n    <string>first</string>\n    <string~second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>", 0L);
      boolean boolean0 = cSVRecord0.isSet("<org.apache.commons.csv.CSVRecord>\n  <valueb>\n    <string>first</string>\n    <string~second</string>\n    <string>third</string>\n  </values>\n  <recordNumber>0</recordNumber>\n</org.apache.commons.csv.CSVRecord>");
      assertEquals("[]", cSVRecord0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[1];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[0], (-54L));
      boolean boolean0 = cSVRecord0.isMapped(stringArray0[0]);
      assertEquals((-54L), cSVRecord0.getRecordNumber());
      assertFalse(cSVRecord0.isConsistent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, ";CIPHER=", (-551L));
      assertEquals("[]", cSVRecord0.toString());
      assertEquals((-551L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[5];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[0], (-1430L));
      assertEquals((-1430L), cSVRecord0.getRecordNumber());
      assertEquals("[null, null, null, null, null]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[1];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[0], (-54L));
      cSVRecord0.iterator();
      boolean boolean0 = cSVRecord0.isMapped(stringArray0[0]);
      assertEquals(1, cSVRecord0.size());
      assertFalse(boolean0);
      assertEquals((-54L), cSVRecord0.getRecordNumber());
  }
}
