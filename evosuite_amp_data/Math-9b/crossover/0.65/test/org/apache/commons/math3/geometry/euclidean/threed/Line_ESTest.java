/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 22:11:49 GMT 2023
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.PLUS_K;
      Line line0 = new Line(vector3D1, vector3D0);
      Line line1 = new Line(vector3D0, vector3D1);
      boolean boolean0 = line0.isSimilarTo(line1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 1.0, 1.0);
      Vector3D vector3D1 = new Vector3D(1.5, 1.0, 1.0);
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(vector3D0, vector3D1);
      line1.toSubSpace(vector3D0);
      line1.toSubSpace(vector3D1);
      Vector3D vector3D2 = new Vector3D(1.0, 2098.4064, (-1000.0));
      Line line2 = new Line(vector3D0, vector3D1);
      Line line3 = new Line(vector3D1, vector3D2);
      line3.toSubSpace(vector3D0);
      Line line4 = new Line(line1);
      line1.intersection(line3);
      Vector3D vector3D3 = Vector3D.MINUS_I;
      Vector1D vector1D0 = line0.toSubSpace(vector3D3);
      assertEquals((-1.0), vector1D0.getX(), 0.01);
      
      Vector3D vector3D4 = line0.closestPoint(line3);
      assertEquals(1.0, vector3D4.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      double double0 = line0.distance(line0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 1.0, 1.0);
      Vector3D vector3D1 = new Vector3D(1.5, 1.0, 1.0);
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(line0);
      Vector1D vector1D0 = new Vector1D(1.0);
      line1.toSubSpace(vector3D1);
      Vector3D vector3D2 = new Vector3D(2.0, 0.0, 0.0);
      Vector3D vector3D3 = new Vector3D(2.0, 0.5, 0.5);
      Line line2 = new Line(vector3D2, vector3D3);
      Line line3 = new Line(vector3D2, vector3D3);
      line3.toSubSpace(vector3D2);
      line3.toSubSpace(vector3D3);
      line1.contains(vector3D0);
      Vector3D vector3D4 = line0.intersection(line2);
      line0.intersection(line2);
      line0.toSubSpace(vector3D4);
      line2.toSubSpace(vector3D4);
      line0.intersection(line2);
      line1.getOrigin();
      line1.isSimilarTo(line0);
      line0.reset(vector3D2, vector3D0);
      assertEquals(0.0, vector3D2.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.PLUS_I;
      Line line0 = new Line(vector3D1, vector3D0);
      boolean boolean0 = line0.isSimilarTo(line0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 1.0, 1.0);
      Vector3D vector3D1 = new Vector3D(1.5, 1.0, 1.0);
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(vector3D0, vector3D1);
      line1.toSubSpace(vector3D0);
      line1.toSubSpace(vector3D1);
      Vector3D vector3D2 = new Vector3D(2.0, 0.0, 0.0);
      Vector3D vector3D3 = new Vector3D(0.0, 0.5, 0.5);
      Line line2 = new Line(vector3D2, vector3D3);
      Line line3 = new Line(vector3D2, vector3D3);
      line3.toSubSpace(vector3D2);
      line3.toSubSpace(vector3D3);
      Vector3D vector3D4 = line0.intersection(line2);
      assertNotNull(vector3D4);
      
      line0.toSubSpace(vector3D4);
      line2.toSubSpace(vector3D4);
      Vector3D vector3D5 = line0.intersection(line2);
      line0.toSubSpace(vector3D5);
      Vector1D vector1D0 = line2.toSubSpace(vector3D5);
      assertEquals(2.3570226039551625, vector1D0.getX(), 0.01);
      
      Vector3D vector3D6 = line0.getDirection();
      assertEquals(0.0, vector3D6.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.PLUS_I;
      Line line0 = new Line(vector3D1, vector3D0);
      Line line1 = new Line(vector3D1, vector3D0);
      double double0 = line1.distance(line0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      boolean boolean0 = line0.isSimilarTo(line0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 1.0, 1.0);
      Vector3D vector3D1 = new Vector3D(1.5, 1.0, 1.0);
      Line line0 = new Line(vector3D0, vector3D1);
      line0.toSubSpace(vector3D0);
      line0.toSubSpace(vector3D1);
      Vector3D vector3D2 = new Vector3D((-0.3058015757857271), 0.0, 3.145894820876798E-6);
      Vector3D vector3D3 = new Vector3D(0.5, 578.43212, 0.0);
      Line line1 = new Line(vector3D3, vector3D2);
      line1.toSubSpace(vector3D2);
      line1.toSubSpace(vector3D2);
      line1.toSubSpace(vector3D0);
      Vector1D vector1D0 = line1.toSubSpace(vector3D3);
      assertEquals((-578.4322552670036), vector1D0.getX(), 0.01);
      
      Vector3D vector3D4 = line1.getOrigin();
      assertEquals(0.30580098232730335, vector3D4.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector1D vector1D0 = Vector1D.NaN;
      line0.toSpace(vector1D0);
      Vector3D vector3D1 = line0.closestPoint(line0);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      line0.pointAt(1.0E-10);
      Vector3D vector3D1 = line0.closestPoint(line0);
      assertEquals(Double.NaN, vector3D1.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      Line line1 = line0.revert();
      boolean boolean0 = line0.isSimilarTo(line0);
      assertNotSame(line0, line1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      line0.wholeLine();
      boolean boolean0 = line0.contains(vector3D0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Line line1 = new Line(line0);
      line0.intersection(line1);
      double double0 = line0.distance(line0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 1.0, 1.0);
      Vector3D vector3D1 = new Vector3D(1.5, 1.0, 1.0);
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(vector3D0, vector3D1);
      line1.toSubSpace(vector3D0);
      line1.toSubSpace(vector3D1);
      Vector3D vector3D2 = new Vector3D(2.0, 0.0, 0.0);
      Vector3D vector3D3 = new Vector3D(1.1102230246251565E-16, 1.1102230246251565E-16, (-3.356118100840571E-7));
      Line line2 = new Line(vector3D3, vector3D1);
      Line line3 = new Line(vector3D3, vector3D2);
      Vector3D vector3D4 = new Vector3D(0.25, 0.0);
      line0.toSubSpace(vector3D4);
      line0.toSubSpace(vector3D4);
      Vector3D vector3D5 = line1.intersection(line2);
      assertNotNull(vector3D5);
      
      Vector3D vector3D6 = Vector3D.MINUS_K;
      line1.toSubSpace(vector3D6);
      line3.toSubSpace(vector3D6);
      Line line4 = new Line(vector3D6, vector3D4);
      Vector3D vector3D7 = line1.intersection(line4);
      assertNull(vector3D7);
      
      line2.toSubSpace(vector3D2);
      Vector1D vector1D0 = line0.toSubSpace(vector3D5);
      assertEquals(1.5000000000000002, vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.ZERO;
      Line line0 = new Line(vector3D1, vector3D0);
      Line line1 = new Line(line0);
      Vector3D vector3D2 = line0.closestPoint(line1);
      assertEquals(Double.NaN, vector3D2.getDelta(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      Line line1 = new Line(line0);
      assertFalse(line1.equals((Object)line0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 1.0, 1.0);
      Vector3D vector3D1 = new Vector3D(1.5, 1.0, 1.0);
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(vector3D0, vector3D1);
      line1.toSubSpace(vector3D0);
      line1.toSubSpace(vector3D1);
      Vector3D vector3D2 = new Vector3D(2.0, 0.0, 0.0);
      Line line2 = new Line(vector3D1, vector3D2);
      Line line3 = new Line(vector3D0, vector3D2);
      line0.toSubSpace(vector3D0);
      line0.toSubSpace(vector3D0);
      Line line4 = new Line(line1);
      Vector3D vector3D3 = line4.intersection(line0);
      Vector1D vector1D0 = line2.toSubSpace(vector3D0);
      assertEquals((-1.0), vector1D0.getX(), 0.01);
      
      line4.toSubSpace(vector3D2);
      Line line5 = new Line(line1);
      Vector3D vector3D4 = line5.intersection(line0);
      assertNotNull(vector3D4);
      
      line1.toSubSpace(vector3D4);
      assertSame(vector3D4, vector3D3);
      
      Vector1D vector1D1 = line2.toSubSpace(vector3D1);
      assertEquals((-0.8333333333333333), vector1D1.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Line line0 = null;
      try {
        line0 = new Line(vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(line0);
      Vector3D vector3D2 = line0.intersection(line1);
      assertNotNull(vector3D2);
      
      boolean boolean0 = line0.isSimilarTo(line1);
      assertTrue(boolean0);
      
      Vector3D vector3D3 = line1.closestPoint(line0);
      assertNotSame(vector3D3, vector3D2);
      assertEquals(0.5, vector3D3.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      line0.toSubSpace(vector3D0);
      double double0 = line0.distance(line0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      boolean boolean0 = line0.contains(vector3D0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      Vector3D vector3D1 = Vector3D.PLUS_I;
      Line line0 = new Line(vector3D1, vector3D0);
      boolean boolean0 = line0.contains(vector3D0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      double double0 = line0.getAbscissa(vector3D0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.closestPoint(line0);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01);
  }
}
