/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 21:53:54 GMT 2023
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("..X-yM`K3d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("6.E-ejF");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("6.1E-7006");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("12434.05L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      try { 
        NumberUtils.createNumber("k0x{eE.=D7");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1234.5d");
      assertEquals(1234.5, number0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)12344;
      shortArray0[1] = (short)378;
      shortArray0[2] = (short)673;
      shortArray0[3] = (short)2241;
      shortArray0[4] = (short)83;
      shortArray0[5] = (short) (-1454);
      NumberUtils.min(shortArray0);
      boolean boolean0 = NumberUtils.isNumber(".7.");
      assertFalse(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short) (-1454);
      longArray0[1] = (long) (short)2241;
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1454L), long0);
      
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1454), short0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.1234E-5");
      assertEquals(1.234E-6F, number0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xaS@W4740:");
      boolean boolean1 = NumberUtils.isDigits("0x");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E700");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-123E2.12");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-700F");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      NumberUtils.isNumber("11d");
      NumberUtils.isNumber("11d");
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("4.9E-324");
      assertNotNull(number0);
      assertEquals(4.9E-324, number0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-`1l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -`1l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
      
      boolean boolean0 = NumberUtils.isNumber("0x9Q02Y\">");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[0];
      NumberUtils.isNumber("1234.5f");
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      try { 
        NumberUtils.createNumber("1.1L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 1.1L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E200");
      assertEquals(1.1E200, number0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.D");
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.D");
      assertNotNull(number0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2274;
      intArray0[1] = (-43);
      intArray0[2] = 100;
      intArray0[3] = 1535;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(2274, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("2e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234E5l");
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-280);
      shortArray0[1] = (short)101;
      shortArray0[2] = (short)48;
      shortArray0[3] = (short) (-829);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-829), short0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1l");
      assertEquals((-1L), number0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0.Dkjj]KdiG=");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.Dkjj]KdiG= is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-221.23F");
      assertEquals((-221.23F), number0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("10214783647L");
      assertEquals(10214783647L, number0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+3nM9In-A-A");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("4.9E-324");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      NumberUtils.isNumber("0y");
      int[] intArray0 = new int[9];
      intArray0[0] = 2146465690;
      intArray0[1] = 1553;
      intArray0[2] = 3529;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-80);
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte)10;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)123, byte0);
      
      boolean boolean0 = NumberUtils.isNumber("0y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      try { 
        NumberUtils.createNumber("toLong(LongJMIN_VALUE) failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // toLong(LongJMIN_VALUE) failed is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E>vp%#8{dCa");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("2eQ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      NumberUtils.isNumber("0xf)%w#P~Qo#|3pD$");
      boolean boolean0 = NumberUtils.isNumber("0xf)%w#P~Qo#|3pD$");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-110);
      NumberUtils.min(byteArray0);
      NumberUtils.createNumber((String) null);
      NumberUtils.createNumber((String) null);
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Long long0 = new Long((-1L));
      Float float0 = NumberUtils.FLOAT_ZERO;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)78;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)100, byte0);
      
      NumberUtils.isNumber("-0x7");
      Number number0 = NumberUtils.createNumber("-0x7");
      assertNotNull(number0);
      
      boolean boolean0 = NumberUtils.isNumber("-0x7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Long long0 = new Long((-1L));
      Float float0 = NumberUtils.FLOAT_ZERO;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)78;
      NumberUtils.max(byteArray0);
      Number number0 = NumberUtils.createNumber("-0xFADE");
      assertNotNull(number0);
      
      boolean boolean0 = NumberUtils.isNumber("0x1234E-5");
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)100;
      longArray0[1] = (-1L);
      NumberUtils.isNumber("0xcC0ppTY)`lh2gRe");
      boolean boolean1 = NumberUtils.isNumber("-0xFADE");
      assertFalse(boolean1 == boolean0);
      
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)100, byte0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xdecompose");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234.5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      try { 
        NumberUtils.createNumber("toLong(Long.MIN_VALUE) failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // toLong(Long.MIN_VALUE) failed is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-4985.8896);
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("es!p");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      try { 
        NumberUtils.createNumber("The Array must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0tx-0xF");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -0tx-0xF is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      try { 
        NumberUtils.createNumber("F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // F is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("12345l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.createInteger((String) null);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)numberUtils0.SHORT_ONE;
      intArray0[1] = (int) (short)numberUtils0.SHORT_ZERO;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (int)numberUtils0.INTEGER_MINUS_ONE;
      floatArray0[1] = (-441.61737F);
      floatArray0[2] = 79.0F;
      NumberUtils.max(floatArray0);
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("111");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-128);
      boolean boolean1 = NumberUtils.isDigits("111");
      assertTrue(boolean1);
      
      NumberUtils.createFloat("111");
      double double0 = NumberUtils.toDouble("");
      assertEquals(0.0, double0, 0.01);
      
      Number number0 = NumberUtils.createNumber("111");
      assertNotNull(number0);
      
      BigDecimal bigDecimal0 = new BigDecimal((double) (byte) (-128));
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte) (-128);
      intArray0[1] = (int) (byte) (-128);
      intArray0[2] = (int) (byte) (-128);
      intArray0[3] = (int) (byte) (-128);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-128), int0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-2935.271F);
      floatArray0[1] = (float) (-128);
      floatArray0[2] = (float) (-128);
      floatArray0[3] = (float) (byte) (-128);
      floatArray0[4] = (float) (-128);
      floatArray0[5] = (float) (-128);
      floatArray0[6] = (float) (-128);
      floatArray0[7] = (float) (-128);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals((-128.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (long)numberUtils0.LONG_ZERO;
      doubleArray0[1] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      short short0 = NumberUtils.max((short) numberUtils0.SHORT_ONE, (short) numberUtils0.SHORT_ONE, (short) numberUtils0.BYTE_ONE);
      assertEquals((short)1, short0);
      
      float float0 = NumberUtils.toFloat((String) null, (float) numberUtils0.BYTE_ONE);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      try { 
        NumberUtils.createNumber("off");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // off is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1797.59F);
      floatArray0[1] = Float.NaN;
      floatArray0[2] = 12343.0F;
      floatArray0[3] = (-3837.3F);
      floatArray0[4] = (-1230.0826F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      float[] floatArray0 = new float[20];
      floatArray0[10] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("111");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      try { 
        NumberUtils.createNumber("DJ,*f];u=.gS#XD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // DJ,*f];u=.gS#XD is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x");
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 16;
      intArray0[1] = 1708;
      NumberUtils.min(intArray0);
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("k");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      try { 
        NumberUtils.createNumber("org.apache.commons.lang3.matE.NumberUtils");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // org.apache.commons.lang3.matE.NumberUtils is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short) (-72), (short)65, (short)717);
      assertEquals((short)717, short0);
      
      double double0 = NumberUtils.toDouble("9WB`0a");
      assertEquals(0.0, double0, 0.01);
      
      short short1 = NumberUtils.min((short) (-72), (short)1862, (short) (-2838));
      assertEquals((short) (-2838), short1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.createInteger((String) null);
      int[] intArray0 = new int[7];
      NumberUtils.max(intArray0);
      Float float0 = new Float((float) numberUtils0.SHORT_ONE);
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.isNumber("---123E2.12");
      NumberUtils.isNumber("---123E2.12");
      NumberUtils.isDigits("/##LA-6M0bAv;P'#u");
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      try { 
        NumberUtils.createNumber("iqdeiwGub6~F7a?X\"L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // iqdeiwGub6~F7a?X\"L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      try { 
        NumberUtils.createNumber("i-aQFgw%l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // i-aQFgw%l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xC");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x is not a valid number.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[3];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte)numberUtils0.BYTE_ONE;
      doubleArray0[1] = (double) (int)numberUtils0.INTEGER_ZERO;
      doubleArray0[2] = (double) (long)numberUtils0.LONG_ZERO;
      doubleArray0[3] = (double) (byte)0;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1.0, double0, 0.01);
      
      int int0 = NumberUtils.max((int) numberUtils0.INTEGER_ONE, 78, (-1968));
      assertEquals(78, int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-63);
      byte byte0 = NumberUtils.min((byte)44, (byte) (-63), (byte)44);
      assertEquals((byte) (-63), byte0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 76;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 3600L;
      longArray0[1] = 2111L;
      long long0 = NumberUtils.min(longArray0);
      long long1 = NumberUtils.max(longArray0);
      assertFalse(long1 == long0);
      assertEquals(3600L, long1);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3600L;
      doubleArray0[1] = (double) 3600L;
      doubleArray0[2] = (double) 3600L;
      doubleArray0[3] = (double) 2111L;
      doubleArray0[4] = (double) 3600L;
      doubleArray0[5] = (double) 2111L;
      doubleArray0[6] = (double) 2111L;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(3600.0, double0, 0.01);
      
      short short0 = NumberUtils.max((short)3, (short)1, (short)0);
      double double1 = NumberUtils.toDouble("-]rtZ;),$4k");
      assertEquals(0.0, double1, 0.01);
      
      short short1 = NumberUtils.min((short)3, (short)3, (short)1218);
      assertTrue(short1 == short0);
      
      byte byte0 = NumberUtils.min((byte) (-46), (byte) (-46), (byte)76);
      assertEquals((byte) (-46), byte0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)numberUtils0.BYTE_ZERO;
      longArray0[1] = (long) (int)numberUtils0.INTEGER_ONE;
      longArray0[2] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      short[] shortArray0 = new short[23];
      shortArray0[0] = (short) numberUtils0.SHORT_ONE;
      shortArray0[1] = (short) numberUtils0.SHORT_ONE;
      shortArray0[2] = (short) numberUtils0.SHORT_ONE;
      shortArray0[3] = (short) numberUtils0.SHORT_MINUS_ONE;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1), short0);
      
      longArray0[3] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      longArray0[4] = (long) (short)numberUtils0.SHORT_ZERO;
      double double0 = NumberUtils.toDouble("w@#");
      assertEquals(0.0, double0, 0.01);
      
      short short1 = NumberUtils.min((short) numberUtils0.BYTE_ONE, (short) (-712), (short)1);
      assertEquals((short) (-712), short1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--iYIsrDqM}M;-r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("22338L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 3155;
      intArray0[1] = 8;
      intArray0[2] = 70;
      intArray0[3] = 8;
      int int0 = NumberUtils.max(8, 8, 14);
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xiYIsrDqM}M;-r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      float float0 = NumberUtils.toFloat("--isNu;ber(String)/createNumber(S=ring) 19 Neg fa:led");
      assertEquals(0.0F, float0, 0.01F);
      
      byte byte0 = NumberUtils.min((byte) (-7), (byte)51, (byte) (-49));
      assertEquals((byte) (-49), byte0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      byte byte0 = NumberUtils.min((byte)1, (byte)1, (byte)1);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)numberUtils0.BYTE_ZERO;
      longArray0[1] = (long) (int)numberUtils0.INTEGER_ONE;
      long long0 = NumberUtils.toLong((String) null, 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 103.51403766313;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(103.51403766313, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      short short0 = NumberUtils.max((short) numberUtils0.SHORT_ZERO, (short)3003, (short) numberUtils0.SHORT_MINUS_ONE);
      assertEquals((short)3003, short0);
      
      short short1 = NumberUtils.min((short)65, (short) numberUtils0.SHORT_ONE, (short) numberUtils0.BYTE_ZERO);
      assertEquals((short)0, short1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.min((long) numberUtils0.SHORT_ZERO, 12344L, (long) numberUtils0.LONG_MINUS_ONE);
      assertEquals((-1L), long0);
      
      NumberUtils.isNumber("%1=wYzD!&c7(8");
      int int0 = NumberUtils.max((-3032), (int) numberUtils0.SHORT_ONE, (int) numberUtils0.SHORT_ONE);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.2345F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1.2345F), float0, 0.01F);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (byte)numberUtils0.BYTE_MINUS_ONE;
      longArray0[1] = (long) (short)numberUtils0.SHORT_ONE;
      longArray0[2] = (-1249L);
      longArray0[3] = (long) (byte)numberUtils0.BYTE_ONE;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1L, long0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)numberUtils0.BYTE_ONE;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)3;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[2] = (short) numberUtils0.SHORT_ONE;
      shortArray0[3] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[4] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[5] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[6] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[7] = (short) (byte)numberUtils0.BYTE_ONE;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)3, short0);
      
      doubleArray0[1] = (double) 1L;
      doubleArray0[2] = (double) (byte)numberUtils0.BYTE_MINUS_ONE;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = 91.97690445947758;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.min(99.58662259660858, 1.0, (-1.7976931348623157E308));
      assertEquals((-1.7976931348623157E308), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      try { 
        NumberUtils.createNumber("cC0ppTY)`lh2gRe");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // cC0ppTY)`lh2gRe is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (long)numberUtils0.LONG_ZERO;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      short short0 = NumberUtils.max((short) numberUtils0.SHORT_ONE, (short) numberUtils0.SHORT_ONE, (short) numberUtils0.BYTE_ONE);
      assertEquals((short)1, short0);
      
      double double1 = NumberUtils.toDouble("9WB`0a");
      assertEquals(0.0, double1, 0.01);
      
      short short1 = NumberUtils.min((short)65, (short)26170, (short) numberUtils0.BYTE_ZERO);
      assertEquals((short)0, short1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NumberUtils.min((short) (-938), (short)89, (short) (-1881));
      float[] floatArray0 = null;
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1531.2269F);
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.isNumber("VS");
      int[] intArray0 = new int[2];
      intArray0[0] = (int) numberUtils0.INTEGER_ONE;
      intArray0[1] = (-1817);
      NumberUtils.min(intArray0);
      NumberUtils.createBigDecimal((String) null);
      try { 
        NumberUtils.createNumber("tb6k_>]%Q#");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // tb6k_>]%Q# is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 70;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 70;
      doubleArray0[1] = (double) 70;
      doubleArray0[2] = (double) 70;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(70.0, double0, 0.01);
      
      short short0 = NumberUtils.max((short)70, (short) (-499), (short)70);
      assertEquals((short)70, short0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)70;
      floatArray0[1] = (float) 70;
      floatArray0[2] = 6.0F;
      floatArray0[3] = (float) 70;
      floatArray0[4] = (-5.6F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(70.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[1] = (byte)81;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)81, byte0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[1] = (short) numberUtils0.SHORT_ZERO;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)numberUtils0.SHORT_ONE;
      floatArray0[1] = (float) (byte)numberUtils0.BYTE_MINUS_ONE;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1.0F), float0, 0.01F);
      
      long long0 = NumberUtils.max((-3032L), (-805L), 428L);
      assertEquals(428L, long0);
      
      int int0 = NumberUtils.toInt((String) null);
      assertEquals(0, int0);
      
      double double0 = NumberUtils.toDouble((String) null, (double) (short)0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[2] = 3359.7168F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(3359.7168F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 70;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 70;
      doubleArray0[1] = (double) 70;
      doubleArray0[2] = (double) 70;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(70.0, double0, 0.01);
      
      short short0 = NumberUtils.max((short)70, (short) (-499), (short)70);
      assertEquals((short)70, short0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-444), (short) (-444), (short) (-444));
      assertEquals((short) (-444), short0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x11g");
      long[] longArray0 = new long[8];
      longArray0[0] = 2307L;
      longArray0[1] = 2688L;
      longArray0[2] = 1L;
      longArray0[3] = 6L;
      longArray0[4] = 3349L;
      longArray0[5] = 2387L;
      longArray0[6] = 565L;
      longArray0[7] = 2160L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(3349L, long0);
      
      boolean boolean1 = NumberUtils.isDigits("L");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3307;
      shortArray0[0] = (short)2869;
      short short0 = NumberUtils.min((short)3307, (short)2869, (short)2869);
      assertEquals((short)2869, short0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)numberUtils0.SHORT_ZERO;
      intArray0[2] = (int) numberUtils0.INTEGER_MINUS_ONE;
      intArray0[3] = (int) numberUtils0.INTEGER_ZERO;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
      
      short short0 = NumberUtils.min((short) (-1736), (short) numberUtils0.BYTE_MINUS_ONE, (short)102);
      assertEquals((short) (-1736), short0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte)43;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) numberUtils0.SHORT_ONE;
      shortArray0[1] = (short) numberUtils0.SHORT_ONE;
      shortArray0[2] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[3] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[4] = (short) numberUtils0.SHORT_MINUS_ONE;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1, short0);
      
      byte byte0 = NumberUtils.toByte("-0x");
      assertEquals((byte)0, byte0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_ZERO;
      intArray0[1] = (int) (short)numberUtils0.SHORT_ONE;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.min(1257, 70, (-230888622));
      assertEquals((-230888622), int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      try { 
        NumberUtils.createNumber("es!p");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // es!p is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-2.9F);
      NumberUtils.min((-2.9F), (-2.9F), (-2.9F));
      float float0 = new Float((-2.9F));
      assertEquals((-2.9F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 70;
      intArray0[1] = (-3032);
      intArray0[2] = (-2138);
      intArray0[3] = 661;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(661, int0);
      
      NumberUtils.createNumber("--11def");
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 661;
      longArray0[1] = (long) (-2138);
      longArray0[2] = (long) (-2138);
      longArray0[3] = (long) 661;
      longArray0[4] = (long) 661;
      longArray0[5] = (long) 661;
      longArray0[6] = (long) 661;
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-2138L), long0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long[] longArray0 = new long[10];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[1] = (-1868L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1868L), long0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 70;
      intArray0[1] = (-3032);
      intArray0[2] = (-2138);
      intArray0[3] = 661;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(661, int0);
      
      short short0 = NumberUtils.min((short) (-828), (short) (-828), (short) (-828));
      assertEquals((short) (-828), short0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = NumberUtils.min(shortArray0);
      short short1 = NumberUtils.min((short)0, (short)0, (short)0);
      assertTrue(short1 == short0);
      assertEquals((short)0, short1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)59;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)59, short0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[1] = (short) numberUtils0.SHORT_ZERO;
      NumberUtils.max(shortArray0);
      NumberUtils.toByte("--");
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("4zw]i~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      float float0 = NumberUtils.max((-546.9F), 10.4F, (-1209.6714F));
      assertEquals(10.4F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-- l{i");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      NumberUtils.toDouble("wOP#q}=T2+Sn*\"*R#.E");
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) numberUtils0.BYTE_MINUS_ONE;
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = (long) numberUtils0.LONG_ZERO;
      longArray0[2] = (long) (byte)numberUtils0.BYTE_ONE;
      longArray0[3] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      longArray0[4] = 565L;
      longArray0[5] = (-1761L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals(565L, long0);
      
      boolean boolean0 = NumberUtils.isDigits("G}dg)(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0x-0xFADE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Sign character in wrong position
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      try { 
        NumberUtils.createNumber("7'n#e7");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.2");
      assertEquals(1.2F, number0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-0");
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.min((long) numberUtils0.SHORT_ZERO, 12344L, (long) numberUtils0.LONG_MINUS_ONE);
      try { 
        NumberUtils.createNumber("NX4E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // NX4E is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      try { 
        NumberUtils.createNumber(".");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 1L;
      longArray0[1] = (-37L);
      longArray0[3] = (-1116L);
      longArray0[3] = (-1L);
      longArray0[4] = 2294L;
      longArray0[5] = 2294L;
      long long0 = NumberUtils.max(1L, (-37L), 2294L);
      assertEquals(2294L, long0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      boolean boolean0 = NumberUtils.isDigits("-Dc]14,vdr`r");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_ZERO;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-1), byte0);
      
      byte byte1 = NumberUtils.toByte((String) null, (byte) (-3));
      assertEquals((byte) (-3), byte1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-539L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      NumberUtils.isNumber("0x11g");
      try { 
        NumberUtils.createNumber("&uWM#");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // &uWM# is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xorg.|pache.common{.ljng3.AatE.NumberU'ils");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x1g");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xp{InCombiningDiacriticalMarks}+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0J");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("*=Fzp[n1}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      try { 
        NumberUtils.createNumber(";");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ; is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Array cannot be empty.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Array cannot be empty. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      String string0 = "^4?MZ)C";
      NumberUtils.min((long) numberUtils0.BYTE_ZERO, (long) numberUtils0.LONG_MINUS_ONE, (long) numberUtils0.INTEGER_ZERO);
      try { 
        NumberUtils.createNumber("^4?MZ)C");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ^4?MZ)C is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      try { 
        NumberUtils.createNumber("1.{x)nS!6?h619'T^");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 1.{x)nS!6?h619'T^ is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.min((long) numberUtils0.SHORT_ONE, (long) numberUtils0.LONG_ONE, 308L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      long[] longArray0 = new long[8];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      NumberUtils.isNumber("Zz(!j695");
      long[] longArray0 = new long[0];
      long long0 = NumberUtils.toLong("Zz(!j695");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.min((int) numberUtils0.INTEGER_MINUS_ONE, 2039, (int) numberUtils0.SHORT_MINUS_ONE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      short short0 = NumberUtils.toShort("0x123.4ED");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_179()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.max((byte) numberUtils0.BYTE_MINUS_ONE, (byte)29, (byte) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((byte)29, byte0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      long long0 = NumberUtils.toLong("=X+5{>+X[>R#/f_QH");
      assertEquals(0L, long0);
      
      byte byte0 = NumberUtils.max((byte)96, (byte)96, (byte)111);
      assertEquals((byte)111, byte0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double double0 = NumberUtils.max(1261.9052430644833, 1261.9052430644833, 10.399999618530273);
      assertEquals(1261.9052430644833, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.toLong("--11def", (long) numberUtils0.SHORT_ONE);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1L;
      floatArray0[1] = (float) (long)numberUtils0.LONG_ONE;
      floatArray0[2] = (float) (int)numberUtils0.INTEGER_MINUS_ONE;
      floatArray0[3] = (float) (byte)numberUtils0.BYTE_MINUS_ONE;
      floatArray0[4] = (float) (int)numberUtils0.INTEGER_ONE;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1.0F), float0, 0.01F);
      
      long long0 = NumberUtils.max(1L, 9L, (long) numberUtils0.INTEGER_ZERO);
      assertEquals(9L, long0);
      
      int int0 = NumberUtils.toInt("0x11z");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 1451.0F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x11g");
      assertFalse(boolean0);
      
      int int0 = NumberUtils.toInt("createNumber(String) 9a failed");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 1020L;
      long long0 = NumberUtils.max((-788L), 1020L, 1020L);
      long long1 = NumberUtils.max(longArray0);
      assertTrue(long1 == long0);
      assertEquals(1020L, long1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      NumberUtils.createBigInteger((String) null);
      int int0 = NumberUtils.max(974, 974, 974);
      assertEquals(974, int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.toByte("-0x&uWM#", (byte) numberUtils0.BYTE_ONE);
      assertEquals((byte)1, byte0);
      
      float float0 = NumberUtils.toFloat("-0x&uWM#");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      float float0 = NumberUtils.toFloat("--isNu;ber(String)/createNumber(String) 19 Neg failed");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_192()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.toShort((String) null, (short)3138);
      assertEquals((short)3138, short0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_193()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) numberUtils0.BYTE_MINUS_ONE;
      boolean boolean0 = NumberUtils.isDigits("-Dc]14,vdr`r");
      assertFalse(boolean0);
      
      byteArray0[1] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[3] = (byte)1;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("0x-0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.toInt("D=", (int) numberUtils0.SHORT_MINUS_ONE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      try { 
        NumberUtils.createNumber("@BrV4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"@BrV4\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (-3292);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-3292), short0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      short[] shortArray0 = new short[21];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      try { 
        NumberUtils.createNumber("isNumber(Strng)13 failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // isNumber(Strng)13 failed is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("OV*fN6QzQmT");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      int[] intArray0 = new int[17];
      intArray0[0] = (-3207);
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }
}
