/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 21:40:38 GMT 2023
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("14E1700");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1l");
      assertEquals((-1L), number0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1el");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-700F");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.1E-7e0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234.5f");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0D");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
      
      boolean boolean0 = NumberUtils.isNumber("0xfc");
      assertTrue(boolean0);
      
      boolean boolean1 = NumberUtils.isNumber("6^}");
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-123E2.12");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0e");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0e is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-123E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0e_");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0e_ is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0e_");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E200");
      assertEquals(1.1E200, number0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      try { 
        NumberUtils.createNumber("java.vendor.url");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // java.vendor.url is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      try { 
        NumberUtils.createNumber("'5}.`ET5tVQe");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // '5}.`ET5tVQe is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1234.5F");
      assertEquals(1234.5F, number0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0{");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)125;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-120), byte0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 214L;
      NumberUtils.max(longArray0);
      NumberUtils.max(longArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 214L;
      doubleArray0[1] = (double) 214L;
      doubleArray0[2] = (double) 214L;
      doubleArray0[3] = (-491.0);
      doubleArray0[4] = (double) 214L;
      doubleArray0[5] = (double) 214L;
      doubleArray0[6] = (double) 214L;
      doubleArray0[7] = (double) 214L;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-491.0), double0, 0.01);
      
      boolean boolean0 = NumberUtils.isNumber("0xD9");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      try { 
        NumberUtils.createNumber("#.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("12345L");
      assertEquals(12345L, number0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      try { 
        NumberUtils.createNumber("+/]S{hVyL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // +/]S{hVyL is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("12345L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int[] intArray0 = new int[20];
      intArray0[0] = 1905;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
      
      Number number0 = NumberUtils.createNumber("-0x123");
      assertNotNull(number0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)258;
      NumberUtils.max(shortArray0);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)258, short0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("61E-700");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("5.1");
      assertEquals(5.1F, number0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      try { 
        NumberUtils.createNumber("a5Gf/.9[kR6");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("123");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("61E-700");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      try { 
        NumberUtils.createNumber("java.awt.graphicsenv");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // java.awt.graphicsenv is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1234.5d");
      assertNotNull(number0);
      assertEquals(1234.5, number0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0X");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      NumberUtils.isNumber("D|='R");
      Long long0 = NumberUtils.LONG_ONE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-118);
      byteArray0[8] = (byte)82;
      NumberUtils.min(byteArray0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (byte)45;
      floatArray0[1] = (float) (byte) (-60);
      floatArray0[2] = (float) (byte) (-118);
      floatArray0[3] = Float.NaN;
      NumberUtils.min(floatArray0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) Float.NaN;
      doubleArray0[1] = (double) (byte) (-118);
      doubleArray0[2] = (double) (-60.0F);
      doubleArray0[3] = (double) (byte)82;
      doubleArray0[4] = (double) (byte) (-118);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1065.5F);
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-942);
      NumberUtils.max(doubleArray0);
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1166.3082048;
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234.5d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      try { 
        NumberUtils.createNumber("14E-e00");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      try { 
        NumberUtils.createNumber("F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // F is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      try { 
        NumberUtils.createNumber(">Z-m_ak%D");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // >Z-m_ak%D is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      try { 
        NumberUtils.createNumber("The Array must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      try { 
        NumberUtils.createNumber("|M}que4;L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // |M}que4;L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      NumberUtils.toByte((String) null, (byte)84);
      float float0 = new Byte((byte)84);
      assertEquals((byte)84, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)103;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-106), byte0);
      
      NumberUtils.createLong((String) null);
      byte byte1 = NumberUtils.max(byteArray0);
      assertEquals((byte)103, byte1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = 581L;
      longArray0[1] = (-1L);
      longArray0[2] = (-1L);
      longArray0[3] = (-1L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1L), long0);
      
      NumberUtils.isNumber("D|m='R");
      boolean boolean0 = NumberUtils.isNumber("0xk?5h_r:p5&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Jw_F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Jw_F is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      try { 
        NumberUtils.createNumber("jgk Cen\"(wI=&EJ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // jgk Cen\"(wI=&EJ is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      NumberUtils.isNumber("eD;b21SVpJg3");
      int[] intArray0 = new int[15];
      NumberUtils.toLong("0x", (-2766L));
      NumberUtils.isDigits("0x");
      NumberUtils.max(intArray0);
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, (-10.5F));
      assertEquals((-10.5F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      NumberUtils.createInteger((String) null);
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (long)numberUtils0.LONG_ZERO;
      floatArray0[1] = (float) numberUtils0.FLOAT_MINUS_ONE;
      floatArray0[2] = (float) (byte)numberUtils0.BYTE_ONE;
      floatArray0[3] = (float) numberUtils0.FLOAT_MINUS_ONE;
      floatArray0[4] = (float) numberUtils0.FLOAT_MINUS_ONE;
      floatArray0[5] = (float) numberUtils0.FLOAT_ONE;
      floatArray0[6] = (float) (byte)numberUtils0.BYTE_ONE;
      floatArray0[7] = (float) (byte)numberUtils0.BYTE_MINUS_ONE;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1.0F), float0, 0.01F);
      
      int int0 = NumberUtils.min((int) numberUtils0.BYTE_MINUS_ONE, 4, (-217));
      assertEquals((-217), int0);
      
      boolean boolean0 = NumberUtils.isNumber("-0xC-1+tB=sTb,'jR;Dv");
      assertFalse(boolean0);
      
      byte byte0 = NumberUtils.toByte("");
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      try { 
        NumberUtils.createNumber("r&nJyP !nFf`p:T`UE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // r&nJyP !nFf`p:T`UE is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-113);
      byteArray0[2] = (byte) (-113);
      byteArray0[2] = (byte)96;
      byte byte0 = NumberUtils.max((byte)88, (byte) (-113), (byte)96);
      assertEquals((byte)96, byte0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      try { 
        NumberUtils.createNumber("isNumber(String) 18 Neg failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // isNumber(String) 18 Neg failed is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      NumberUtils.createBigDecimal((String) null);
      NumberUtils.toShort("4|&");
      try { 
        NumberUtils.createNumber("4|&");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 4|& is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      short short0 = NumberUtils.min((short) (-2344), (short)97, (short)65);
      assertEquals((short) (-2344), short0);
      
      NumberUtils.isNumber(":0sR=!Z34mVFRj\"]");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)106;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)106, byte0);
      
      byte byte1 = NumberUtils.min((byte)57, (byte)57, (byte) (-90));
      assertEquals((byte) (-90), byte1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("`");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      NumberUtils.createNumber((String) null);
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)101;
      shortArray0[1] = (short)69;
      shortArray0[2] = (short)45;
      shortArray0[3] = (short)97;
      shortArray0[4] = (short) (-525);
      shortArray0[5] = (short)116;
      shortArray0[6] = (short) (-1);
      shortArray0[7] = (short)0;
      shortArray0[8] = (short)1689;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-525), short0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)101;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (short)0;
      doubleArray0[1] = (double) (short)45;
      doubleArray0[2] = (double) (short)0;
      doubleArray0[3] = (-3394.0);
      doubleArray0[4] = (double) (short)45;
      doubleArray0[5] = (double) (short)69;
      doubleArray0[6] = (double) (short)45;
      doubleArray0[7] = (double) (short)45;
      doubleArray0[8] = (double) (short) (-525);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(69.0, double0, 0.01);
      
      boolean boolean0 = NumberUtils.isNumber("");
      assertFalse(boolean0);
      
      byte byte0 = NumberUtils.max((byte) (-110), (byte) (-110), (byte) (-110));
      assertEquals((byte) (-110), byte0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-788.97427);
      double double0 = NumberUtils.min((-788.97427), (-788.97427), (-788.97427));
      assertEquals((-788.97427), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-107);
      byte byte0 = NumberUtils.max((byte)23, (byte)23, (byte)23);
      assertEquals((byte)23, byte0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("12345678901234567890");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      longArray0[3] = (long) (int)numberUtils0.INTEGER_ONE;
      longArray0[4] = (long) (short)numberUtils0.SHORT_ZERO;
      longArray0[5] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1L, long0);
      
      double double0 = NumberUtils.toDouble((String) null);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--isumber(String) 20 failed");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xA blank string is not ' valid number");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-886.0F);
      float float0 = NumberUtils.min((-886.0F), (-886.0F), (-886.0F));
      assertEquals((-886.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.min(789, 4, (-217));
      NumberUtils.min((byte)70, (byte)91, (byte)2);
      int[] intArray0 = new int[0];
      int int1 = new Integer((int) numberUtils0.BYTE_ZERO);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[1] = (short) numberUtils0.SHORT_ONE;
      shortArray0[3] = (short) numberUtils0.SHORT_ONE;
      shortArray0[4] = (short) numberUtils0.SHORT_ONE;
      shortArray0[5] = (short) numberUtils0.SHORT_ZERO;
      NumberUtils.isNumber("e^;S21SVpJa3");
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[1] = (int) (short)0;
      intArray0[2] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[3] = (int) (short)0;
      intArray0[4] = (int) numberUtils0.INTEGER_ONE;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1), int0);
      
      NumberUtils.toLong("0x", (long) 0);
      NumberUtils.isDigits("e^;S21SVpJa3");
      byte byte0 = NumberUtils.min((byte)83, (byte) (-77), (byte) (-92));
      assertEquals((byte) (-92), byte0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e^;S21SVpJa3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (-71.44728);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-71.44728), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short) numberUtils0.SHORT_MINUS_ONE, (short) numberUtils0.SHORT_MINUS_ONE, (short) numberUtils0.SHORT_ZERO);
      assertEquals((short)0, short0);
      
      boolean boolean0 = NumberUtils.isDigits(";}L#^");
      assertFalse(boolean0);
      
      byte byte0 = NumberUtils.min((byte) numberUtils0.BYTE_MINUS_ONE, (byte)45, (byte)113);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)93;
      byte byte0 = NumberUtils.max((byte) (-125), (byte)93, (byte)93);
      assertEquals((byte)93, byte0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_ZERO;
      int int0 = NumberUtils.toInt("$*Tt+}DZ(", (int) numberUtils0.BYTE_ONE);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      longArray0[1] = (long) (int)numberUtils0.INTEGER_ONE;
      long long0 = NumberUtils.max((long) numberUtils0.SHORT_ZERO, (long) numberUtils0.SHORT_ZERO, 418L);
      assertEquals(418L, long0);
      
      long long1 = NumberUtils.min(137L, (long) numberUtils0.LONG_ONE, (-300L));
      assertEquals((-300L), long1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long[] longArray0 = new long[3];
      int int0 = NumberUtils.toInt((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      try { 
        NumberUtils.createNumber(".vq-]8Qx");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .vq-]8Qx is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      NumberUtils.min(31L, 9L, 31L);
      try { 
        NumberUtils.createNumber("The Ar{ayLmust not be nMll");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Ar{ayLmust not be nMll is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) numberUtils0.LONG_ONE;
      long long0 = NumberUtils.max(longArray0);
      long long1 = NumberUtils.min(longArray0);
      assertTrue(long1 == long0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) numberUtils0.SHORT_ONE;
      shortArray0[1] = (short) (-5498);
      shortArray0[2] = (short) numberUtils0.SHORT_ONE;
      shortArray0[3] = (short) (byte)numberUtils0.BYTE_ONE;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1, short0);
      
      long long2 = NumberUtils.max(2481L, 1L, (-2729L));
      assertEquals(2481L, long2);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("-0xC-1+tB=sTb,'j5;Dv");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x");
      assertFalse(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 70;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(70, int0);
      
      long long0 = NumberUtils.toLong((String) null, (long) 70);
      assertEquals(70L, long0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+2bGDxYsfI(v");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--7$?wOv\"3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.min((short) numberUtils0.BYTE_ONE, (short) numberUtils0.SHORT_ZERO, (short) (-857));
      boolean boolean0 = NumberUtils.isNumber(" is not a valid number.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.min(789, 4, (-217));
      assertEquals((-217), int0);
      
      boolean boolean0 = NumberUtils.isNumber("-0xC-1+tB=sTb,'jR;Dv");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[8];
      long[] longArray0 = new long[9];
      longArray0[0] = (long) numberUtils0.LONG_MINUS_ONE;
      longArray0[1] = (long) numberUtils0.LONG_ONE;
      longArray0[2] = (long) (byte)numberUtils0.BYTE_MINUS_ONE;
      longArray0[3] = (long) (int)numberUtils0.INTEGER_ONE;
      longArray0[4] = (long) numberUtils0.LONG_ZERO;
      longArray0[5] = (long) (byte)numberUtils0.BYTE_MINUS_ONE;
      longArray0[6] = (long) (int)numberUtils0.INTEGER_ONE;
      longArray0[7] = (long) numberUtils0.LONG_ZERO;
      longArray0[8] = (long) (byte)numberUtils0.BYTE_ZERO;
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1L), long0);
      
      floatArray0[0] = (float) (int)numberUtils0.INTEGER_ONE;
      floatArray0[1] = (float) (long)numberUtils0.LONG_ZERO;
      floatArray0[2] = (float) (long)numberUtils0.LONG_MINUS_ONE;
      floatArray0[3] = (float) numberUtils0.FLOAT_ONE;
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[1] = (short) numberUtils0.SHORT_ONE;
      shortArray0[2] = (short) (-536);
      shortArray0[3] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1, short0);
      
      floatArray0[4] = (float) (-1L);
      floatArray0[5] = (float) (short)numberUtils0.SHORT_ONE;
      floatArray0[6] = (float) (byte)numberUtils0.BYTE_ZERO;
      short short1 = NumberUtils.min((short) numberUtils0.BYTE_MINUS_ONE, (short) numberUtils0.SHORT_MINUS_ONE, (short) numberUtils0.BYTE_ONE);
      assertEquals((short) (-1), short1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0xJw_F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-Jw_F\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[1] = 427;
      intArray0[2] = 1431655765;
      intArray0[3] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[4] = (int) (short)numberUtils0.SHORT_ONE;
      intArray0[5] = (int) numberUtils0.INTEGER_ZERO;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
      
      int int1 = NumberUtils.max((int) numberUtils0.BYTE_ZERO, (-1), (int) numberUtils0.INTEGER_ZERO);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.isNumber("a^{k@Xlh94, f9/OsHn");
      short short0 = NumberUtils.max((short) numberUtils0.SHORT_ONE, (short) numberUtils0.BYTE_MINUS_ONE, (short) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((short)1, short0);
      
      long long0 = NumberUtils.toLong("The Array must not be null");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.min((long) numberUtils0.LONG_ONE, (long) numberUtils0.INTEGER_ONE, (long) numberUtils0.BYTE_ZERO);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      long long0 = NumberUtils.min((-617L), (-617L), (-617L));
      assertEquals((-617L), long0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      long long0 = new Short((short) numberUtils0.BYTE_ONE);
      shortArray0[1] = (short) numberUtils0.SHORT_ONE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[3] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[4] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte) numberUtils0.BYTE_ONE;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)1, byte0);
      
      byte byte1 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-106), byte1);
      
      long long1 = NumberUtils.max(72L, 12344L, 1085L);
      assertEquals(12344L, long1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) numberUtils0.FLOAT_ZERO;
      short short0 = NumberUtils.toShort((String) null);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[4];
      intArray0[0] = (int) numberUtils0.INTEGER_MINUS_ONE;
      intArray0[1] = (int) numberUtils0.INTEGER_ONE;
      intArray0[2] = 2813;
      boolean boolean0 = NumberUtils.isNumber("0x");
      intArray0[3] = (int) (byte)numberUtils0.BYTE_ZERO;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1), int0);
      
      boolean boolean1 = NumberUtils.isNumber("-0x11a");
      assertFalse(boolean1 == boolean0);
      
      int int1 = NumberUtils.max((-536), 1298, (-536));
      assertEquals(1298, int1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.7F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)numberUtils0.BYTE_ONE;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1L, long0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (long)numberUtils0.LONG_ONE;
      floatArray0[1] = (float) numberUtils0.FLOAT_ZERO;
      floatArray0[2] = (float) (byte)numberUtils0.BYTE_ONE;
      floatArray0[3] = (float) (short)numberUtils0.SHORT_ZERO;
      floatArray0[4] = (float) (long)numberUtils0.LONG_MINUS_ONE;
      floatArray0[5] = (float) (long)numberUtils0.LONG_ZERO;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_ZERO;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)numberUtils0.SHORT_ONE;
      doubleArray0[1] = 5.0;
      doubleArray0[2] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      doubleArray0[3] = (double) (long)numberUtils0.LONG_MINUS_ONE;
      doubleArray0[4] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      doubleArray0[5] = (-1407.4960775916);
      doubleArray0[6] = (double) (float)numberUtils0.FLOAT_ONE;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1407.4960775916), double0, 0.01);
      
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[1] = (short) numberUtils0.SHORT_ONE;
      shortArray0[3] = (short) numberUtils0.SHORT_ONE;
      shortArray0[4] = (short) numberUtils0.SHORT_ONE;
      shortArray0[5] = (short) numberUtils0.SHORT_ZERO;
      NumberUtils.createBigInteger((String) null);
      NumberUtils.min(shortArray0);
      shortArray0[6] = (short) numberUtils0.SHORT_ZERO;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      NumberUtils.toByte("ZNc-FK8", (byte)122);
      float float0 = NumberUtils.max((float) (byte)122, (float) (byte)122, 1.0F);
      assertEquals(122.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-639.0177F);
      float float0 = NumberUtils.max((-639.0177F), (-639.0177F), (-639.0177F));
      assertEquals((-639.0177F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = NumberUtils.max((-558), (-558), 65);
      assertEquals(65, int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[2] = 39;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(39, int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[7];
      intArray0[0] = (int) numberUtils0.INTEGER_ONE;
      intArray0[1] = (int) (short)numberUtils0.SHORT_ZERO;
      intArray0[2] = 12344;
      intArray0[3] = (int) (byte)numberUtils0.BYTE_ZERO;
      intArray0[4] = (int) numberUtils0.INTEGER_MINUS_ONE;
      intArray0[5] = 12344;
      intArray0[6] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(12344, int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[2] = (byte) numberUtils0.BYTE_ZERO;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
      
      short short0 = NumberUtils.min((short) (byte)0, (short) (byte)0, (short) numberUtils0.SHORT_ONE);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x11a");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x}fWoZvW8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[4];
      intArray0[0] = (int) numberUtils0.INTEGER_MINUS_ONE;
      intArray0[1] = (int) numberUtils0.INTEGER_ONE;
      intArray0[2] = 2813;
      intArray0[3] = (int) (byte)numberUtils0.BYTE_ZERO;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1), int0);
      
      boolean boolean0 = NumberUtils.isNumber("-0x11a");
      assertTrue(boolean0);
      
      int int1 = NumberUtils.max((-536), 1298, (-536));
      assertEquals(1298, int1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x6)JEsZDEd,%lWv");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xe~63ya");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createDouble("maximum(int,int,int) 3 failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_144()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.toDouble("(String)");
      assertEquals(0.0, double0, 0.01);
      
      double double1 = NumberUtils.max((double) numberUtils0.DOUBLE_MINUS_ONE, (double) numberUtils0.DOUBLE_ZERO, (double) numberUtils0.FLOAT_ONE);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      short[] shortArray0 = new short[13];
      shortArray0[0] = (short) (-1);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x!2w\"[z$gNb-6P;MsE}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = 1L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x@;)R<[PjP94Z_]2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("user.region");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-41);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      long[] longArray0 = new long[9];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 14.3;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(14.3, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short) (-3394), (short) numberUtils0.SHORT_MINUS_ONE, (short) (-3059));
      assertEquals((short) (-1), short0);
      
      long long0 = NumberUtils.toLong("The Array must not be null");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Array cannot be empty.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Array cannot be empty. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (int)numberUtils0.INTEGER_ONE;
      floatArray0[1] = (float) (long)numberUtils0.LONG_MINUS_ONE;
      floatArray0[2] = (float) (long)numberUtils0.LONG_MINUS_ONE;
      floatArray0[3] = (float) numberUtils0.FLOAT_ONE;
      floatArray0[4] = 42.0F;
      floatArray0[5] = (float) (short)numberUtils0.SHORT_ONE;
      floatArray0[6] = (float) (byte)numberUtils0.BYTE_ZERO;
      floatArray0[7] = (float) (int)numberUtils0.INTEGER_MINUS_ONE;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(42.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      float[] floatArray0 = new float[15];
      floatArray0[0] = (-1790.54F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[1] = (short) numberUtils0.SHORT_ONE;
      shortArray0[2] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[3] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[4] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[5] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[6] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[7] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[8] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-128);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-128), byte0);
      
      long long0 = NumberUtils.max((long) (short) (-1), (long) (short)1, (-709L));
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2285;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)numberUtils0.BYTE_ONE;
      long long0 = NumberUtils.max((-1675L), 1L, (-2341L));
      assertEquals(1L, long0);
      
      long long1 = NumberUtils.min((long) numberUtils0.LONG_MINUS_ONE, (long) numberUtils0.SHORT_ZERO, (long) numberUtils0.LONG_ONE);
      assertEquals((-1L), long1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.min((short) (-76), (short) numberUtils0.SHORT_MINUS_ONE, (short)1124);
      assertEquals((short) (-76), short0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short) numberUtils0.SHORT_ONE, (short) numberUtils0.BYTE_ONE, (short) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_170()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[3] = (byte) numberUtils0.BYTE_ONE;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)1, byte0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1618);
      int int0 = NumberUtils.max(intArray0);
      assertEquals((-1618), int0);
      
      float float0 = NumberUtils.toFloat("qo\"*Nb<VI@8~");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_ONE;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)1, byte0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)numberUtils0.SHORT_ONE;
      intArray0[1] = (int) numberUtils0.INTEGER_MINUS_ONE;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1, int0);
      
      float float0 = NumberUtils.toFloat("Wq;");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_173()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      String string0 = null;
      NumberUtils.createBigInteger((String) null);
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 528L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(528L, long0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      long long0 = NumberUtils.max(7L, 7L, 7L);
      assertEquals(7L, long0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int[] intArray0 = new int[15];
      intArray0[0] = 1210;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      float float0 = NumberUtils.toFloat("^", (-1.43165581E9F));
      assertEquals((-1.43165581E9F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.min((short) numberUtils0.SHORT_ZERO, (short) numberUtils0.SHORT_MINUS_ONE, (short)1124);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (int)numberUtils0.INTEGER_ZERO;
      longArray0[1] = (long) (byte)numberUtils0.BYTE_ZERO;
      longArray0[2] = (long) (short)numberUtils0.SHORT_ZERO;
      NumberUtils.max(longArray0);
      long long0 = NumberUtils.toLong("-0x11 11", 5529L);
      assertEquals(5529L, long0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      long long0 = NumberUtils.toLong("Threshold must not be negative", 819L);
      assertEquals(819L, long0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      long[] longArray0 = new long[3];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      try { 
        NumberUtils.createNumber("e^S21SJa3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      try { 
        NumberUtils.createNumber("oof");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // oof is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      try { 
        NumberUtils.createNumber("jGsBR@5Tlb60Ex]fh1]");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // jGsBR@5Tlb60Ex]fh1] is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0xt/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"t/\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_191()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.max((int) numberUtils0.INTEGER_MINUS_ONE, (int) numberUtils0.SHORT_MINUS_ONE, (-558));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      try { 
        NumberUtils.createNumber("!2");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"!2\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.min(183, (int) numberUtils0.SHORT_ONE, (int) numberUtils0.BYTE_ONE);
      assertEquals(1, int0);
      
      short[] shortArray0 = new short[1];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (int)numberUtils0.INTEGER_ONE;
      doubleArray0[1] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      doubleArray0[2] = (double) numberUtils0.DOUBLE_ONE;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1.0, double0, 0.01);
      
      shortArray0[0] = (short) numberUtils0.SHORT_MINUS_ONE;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.min((int) numberUtils0.SHORT_ZERO, (int) numberUtils0.INTEGER_ZERO, 329);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      NumberUtils.min(186, (-911), 186);
      double[] doubleArray0 = new double[0];
      boolean boolean0 = NumberUtils.isNumber("isNumer(String)/createNumber(String) 22 Neg failed");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      short short0 = NumberUtils.toShort("0x1234E5l");
      assertEquals((short)0, short0);
  }
}
