/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 17 00:17:56 GMT 2023
 */

package org.apache.commons.math.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      bigFraction0.getNumeratorAsInt();
      bigFraction0.percentageValue();
      BigFraction bigFraction1 = bigFraction0.subtract((long) 2);
      double double0 = bigFraction0.percentageValue();
      assertEquals(200.0, double0, 0.01);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = BigFraction.MINUS_ONE;
      bigFraction1.add(18014398509481984L);
      BigFraction bigFraction3 = bigFraction2.add(52);
      assertEquals((short)51, bigFraction3.shortValue());
      
      BigFraction bigFraction4 = new BigFraction(0.0);
      BigFraction bigFraction5 = new BigFraction(0.16414458781991925, (-3594));
      BigFraction bigFraction6 = BigFraction.TWO_QUARTERS;
      String string0 = bigFraction4.toString();
      assertFalse(bigFraction4.equals((Object)bigFraction6));
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      assertEquals((short)0, bigFraction0.shortValue());
      
      String string0 = bigFraction0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = new BigFraction(1.5755371805425966E-5, (-1079));
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.subtract(bigFraction0);
      assertSame(bigFraction2, bigFraction0);
      assertTrue(bigFraction3.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = BigFraction.getReducedFraction(0, 1323);
      assertEquals((byte)0, bigFraction1.byteValue());
      
      String string0 = bigFraction0.toString();
      assertEquals("3 / 4", string0);
      assertNotSame(bigFraction0, bigFraction1);
      assertFalse(bigFraction0.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483562, 2147483562, 2147483562);
      assertEquals((short) (-86), bigFraction0.shortValue());
      
      // Undeclared exception!
      try { 
        bigFraction0.TWO.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        bigFraction0.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483601, 2147483601, 2147483601);
      BigFraction bigFraction1 = BigFraction.ZERO;
      bigFraction0.THREE_QUARTERS.add(bigFraction1);
      Random.setNextRandom(3258);
      Random.setNextRandom(2147483601);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4221.6);
      Random.setNextRandom(904);
      // Undeclared exception!
      try { 
        bigFraction0.ONE_HALF.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-38);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      bigFraction0.ONE_THIRD.pow(bigInteger0);
      bigFraction0.toString();
      Random.setNextRandom(2566);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(7.120586694432509E53, 2147483562, 2147483562);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 712,058,669,443,250,900,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((double) 2147483557, 2147483557);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 2,147,483,557 to fraction (9,223,372,034,707,292,252/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483562, 2147483562, 2147483562);
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.abs();
      assertEquals((byte)1, bigFraction1.byteValue());
      
      String string0 = bigFraction0.toString();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertEquals("2147483562", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = new BigFraction(0.2597441908505971, 0.2597441908505971, 629);
      BigFraction bigFraction2 = bigFraction1.subtract(bigFraction0);
      bigFraction1.getNumeratorAsLong();
      String string0 = bigFraction2.toString();
      assertEquals("-1 / 15", string0);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction4 = BigFraction.ONE;
      BigFraction bigFraction5 = bigFraction2.divide(bigFraction4);
      BigFraction bigFraction6 = BigFraction.TWO_QUARTERS;
      double double0 = bigFraction6.pow((double) 1L);
      assertEquals(0.5, double0, 0.01);
      
      BigFraction bigFraction7 = bigFraction4.multiply(bigInteger0);
      bigFraction5.longValue();
      BigFraction bigFraction8 = bigFraction7.add(0L);
      BigFraction bigFraction9 = BigFraction.MINUS_ONE;
      bigFraction9.toString();
      bigFraction0.compareTo(bigFraction8);
      float float0 = bigFraction7.floatValue();
      assertEquals(10.0F, float0, 0.01F);
      
      int int0 = bigFraction6.compareTo(bigFraction4);
      assertEquals((-1), int0);
      
      bigFraction0.getDenominator();
      bigFraction3.reciprocal();
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction10 = new BigFraction((double) (-1));
      bigFraction10.pow(bigInteger0);
      assertTrue(bigFraction10.equals((Object)bigFraction9));
      
      bigFraction0.percentageValue();
      BigFraction bigFraction11 = BigFraction.ONE_THIRD;
      BigFraction bigFraction12 = bigFraction11.subtract(2580);
      assertEquals((byte) (-19), bigFraction12.byteValue());
      
      bigFraction8.intValue();
      BigFraction bigFraction13 = bigFraction2.multiply(393216L);
      assertFalse(bigFraction1.equals((Object)bigFraction12));
      assertTrue(bigFraction2.equals((Object)bigFraction5));
      assertEquals((short) (-26214), bigFraction13.shortValue());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(975.0);
      assertEquals((short)975, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      String string0 = bigFraction0.toString();
      assertEquals("2", string0);
      
      BigFraction bigFraction1 = new BigFraction((double) 3);
      bigFraction0.compareTo(bigFraction1);
      float float0 = bigFraction1.floatValue();
      assertEquals(3.0F, float0, 0.01F);
      
      int int0 = bigFraction0.compareTo(bigFraction1);
      assertEquals((-1), int0);
      
      BigInteger bigInteger0 = bigFraction0.getDenominator();
      BigFraction bigFraction2 = bigFraction1.reciprocal();
      assertEquals((short)0, bigFraction2.shortValue());
      
      BigInteger bigInteger1 = BigInteger.TEN;
      BigFraction bigFraction3 = bigFraction1.pow(bigInteger0);
      double double0 = bigFraction0.percentageValue();
      assertEquals(200.0, double0, 0.01);
      
      BigFraction bigFraction4 = bigFraction1.subtract(3);
      assertEquals((short)0, bigFraction4.shortValue());
      
      bigFraction3.intValue();
      bigFraction0.multiply(9218868437227405329L);
      assertFalse(bigFraction0.equals((Object)bigFraction3));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-23.213365758107294));
      bigFraction0.ONE_HALF.pow((-42));
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(7.120586694432509E53);
      // Undeclared exception!
      try { 
        bigFraction0.THREE_QUARTERS.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(9007199254715392L);
      String string0 = bigFraction0.toString();
      assertEquals("9007199254715392", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1468.2));
      assertEquals((short) (-1468), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      String string0 = bigFraction0.toString();
      assertEquals("2 / 5", string0);
      
      BigFraction bigFraction1 = bigFraction0.ONE.reduce();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction0.pow(bigInteger0);
      bigFraction1.MINUS_ONE.add(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.add((-783L));
      bigFraction2.TWO_THIRDS.getField();
      String string1 = bigFraction1.toString();
      assertEquals("1", string1);
      
      BigFraction bigFraction3 = bigFraction0.subtract(2);
      BigDecimal bigDecimal0 = bigFraction2.bigDecimalValue();
      assertEquals((byte) (-14), bigDecimal0.byteValue());
      
      BigFraction bigFraction4 = bigFraction3.pow(22);
      assertEquals((short)30948, bigFraction4.shortValue());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      // Undeclared exception!
      try { 
        bigFraction0.THREE_FIFTHS.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-635.7139184604));
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      int int0 = bigFraction1.ONE_QUARTER.compareTo(bigFraction0);
      assertEquals(1, int0);
      assertEquals((short) (-635), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertSame(bigFraction2, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.TWO_QUARTERS.pow(1337L);
      bigFraction1.equals(bigFraction0);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1007, 1007);
      BigFraction bigFraction1 = bigFraction0.reciprocal();
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.ONE_QUARTER.equals(bigFraction0);
      bigFraction0.TWO_THIRDS.pow((long) 1007);
      BigFraction bigFraction2 = bigFraction0.multiply(bigInteger0);
      BigFraction bigFraction3 = bigFraction0.ONE_QUARTER.divide(bigFraction2);
      BigFraction bigFraction4 = bigFraction3.TWO_QUARTERS.divide(bigFraction2);
      assertEquals((byte)0, bigFraction4.byteValue());
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      
      bigFraction0.TWO_THIRDS.getNumeratorAsLong();
      Object object0 = new Object();
      bigFraction0.TWO.equals(object0);
      bigFraction2.ONE_HALF.getNumeratorAsInt();
      BigFraction bigFraction5 = bigFraction1.ZERO.abs();
      assertFalse(bigFraction5.equals((Object)bigFraction1));
      
      bigFraction1.pow(272L);
      assertEquals((short)1, bigFraction1.shortValue());
      
      bigFraction3.hashCode();
      assertFalse(bigFraction2.equals((Object)bigFraction3));
      assertFalse(bigFraction2.equals((Object)bigFraction5));
      assertEquals((byte)1, bigFraction0.byteValue());
      assertTrue(bigFraction2.equals((Object)bigFraction1));
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      assertNotSame(bigFraction3, bigFraction5);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      String string0 = bigFraction0.toString();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO;
      BigFraction bigFraction1 = BigFraction.getReducedFraction((-1257), 2);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction2 = bigFraction1.TWO.divide(bigInteger0);
      bigFraction2.ONE_QUARTER.reciprocal();
      double double0 = bigFraction2.THREE_QUARTERS.pow((-9.194632392478356));
      assertEquals(14.085288756335085, double0, 0.01);
      
      bigFraction0.THREE_QUARTERS.pow(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.ONE_HALF.pow(2);
      BigFraction bigFraction4 = BigFraction.getReducedFraction(4, 2);
      bigFraction3.TWO.pow(4);
      BigFraction bigFraction5 = BigFraction.getReducedFraction(337, (-498));
      assertEquals((short)0, bigFraction5.shortValue());
      
      BigFraction bigFraction6 = bigFraction4.TWO_QUARTERS.divide(bigFraction0);
      bigFraction6.ONE_HALF.getNumeratorAsLong();
      double double1 = bigFraction6.TWO_FIFTHS.percentageValue();
      assertEquals(40.0, double1, 0.01);
      
      Object object0 = new Object();
      bigFraction0.equals(object0);
      bigFraction4.toString();
      bigFraction2.toString();
      BigInteger bigInteger1 = bigFraction3.getNumerator();
      assertTrue(bigFraction3.equals((Object)bigFraction6));
      assertSame(bigInteger0, bigInteger1);
      assertFalse(bigFraction3.equals((Object)bigFraction5));
      
      bigFraction1.getField();
      float float0 = bigFraction4.floatValue();
      assertEquals(2.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      // Undeclared exception!
      try { 
        bigFraction0.TWO_QUARTERS.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-1679), (-1679));
      String string0 = bigFraction0.toString();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = BigFraction.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.divide(bigFraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.ONE_THIRD.getField();
      String string0 = bigFraction0.toString();
      assertEquals("1 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.pow((-1403L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.abs();
      assertSame(bigFraction1, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertEquals((byte)0, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      BigFraction bigFraction3 = bigFraction2.subtract(bigFraction0);
      assertNotSame(bigFraction2, bigFraction0);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertTrue(bigFraction3.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(13);
      double double0 = bigFraction0.pow((double) 13);
      assertEquals(3.02875106592253E14, double0, 0.01);
      
      BigFraction bigFraction1 = new BigFraction(3459.547642, 315);
      BigFraction bigFraction2 = bigFraction1.ZERO.divide((-4569L));
      BigFraction bigFraction3 = bigFraction0.subtract(bigFraction1);
      bigFraction3.TWO_THIRDS.intValue();
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction4 = bigFraction3.MINUS_ONE.multiply(bigInteger0);
      assertEquals((byte) (-118), bigFraction3.byteValue());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)15;
      bigFraction0.TWO_FIFTHS.divide((int) (byte)15);
      byteArray0[2] = (byte) (-1);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      BigFraction bigFraction5 = bigFraction0.subtract(bigInteger1);
      bigFraction5.pow(0.0012644892673496777);
      BigFraction bigFraction6 = bigFraction2.subtract(bigInteger0);
      assertTrue(bigFraction6.equals((Object)bigFraction4));
      assertFalse(bigFraction2.equals((Object)bigFraction4));
      assertFalse(bigFraction6.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = BigFraction.ZERO;
      BigFraction bigFraction2 = bigFraction0.ZERO.multiply(bigFraction1);
      assertSame(bigFraction2, bigFraction1);
      
      String string0 = bigFraction0.toString();
      assertEquals("1 / 2", string0);
      assertFalse(bigFraction0.equals((Object)bigFraction2));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.THREE_FIFTHS.divide(1428);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((long) 2147483562, (long) 2147483562);
      String string0 = bigFraction0.toString();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(5196.6);
      assertEquals((short)5196, bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.subtract(1365L);
      assertEquals((byte) (-84), bigFraction1.byteValue());
      
      String string0 = bigFraction0.toString();
      assertEquals("3 / 4", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertEquals((byte)1, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.getNumeratorAsInt();
      double double0 = bigFraction0.TWO_THIRDS.percentageValue();
      assertEquals(66.66666666666667, double0, 0.01);
      
      BigFraction bigFraction1 = bigFraction0.subtract(9218868437227405312L);
      bigFraction1.ZERO.percentageValue();
      BigFraction bigFraction2 = bigFraction1.add(bigFraction0);
      BigFraction bigFraction3 = BigFraction.getReducedFraction(4, 1);
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction3.TWO_FIFTHS.subtract(bigInteger0);
      assertEquals((short)4, bigFraction3.shortValue());
      
      BigFraction bigFraction4 = bigFraction1.ONE_FIFTH.add((long) 4);
      BigFraction bigFraction5 = bigFraction2.MINUS_ONE.pow(bigInteger0);
      BigFraction bigFraction6 = bigFraction0.subtract(1);
      float float0 = bigFraction2.floatValue();
      assertEquals((-9.2188684E18F), float0, 0.01F);
      
      BigFraction bigFraction7 = bigFraction2.multiply(bigFraction6);
      assertEquals((byte)2, bigFraction2.byteValue());
      assertTrue(bigFraction7.equals((Object)bigFraction6));
      
      bigFraction4.getDenominator();
      assertTrue(bigFraction0.equals((Object)bigFraction5));
      assertNotSame(bigFraction1, bigFraction2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigInteger bigInteger0 = BigInteger.TEN;
      float float0 = bigFraction0.floatValue();
      assertEquals(0.6F, float0, 0.01F);
      
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      BigInteger bigInteger1 = bigFraction2.getDenominator();
      assertEquals((byte)25, bigInteger1.byteValue());
      
      BigFraction bigFraction3 = BigFraction.ONE_QUARTER;
      boolean boolean0 = bigFraction2.equals(bigFraction3);
      assertEquals((short)0, bigFraction2.shortValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.getReducedFraction(2147483646, 2147483646);
      assertEquals((byte)1, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) 2147483591);
      bigFraction0.percentageValue();
      Random.setNextRandom(2147483591);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.getNumeratorAsInt();
      String string0 = bigFraction0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      assertEquals((byte)2, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      
      BigFraction bigFraction2 = BigFraction.FOUR_FIFTHS;
      assertFalse(bigFraction2.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.ZERO;
      BigFraction bigFraction2 = bigFraction0.ONE_HALF.multiply(bigFraction1);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertSame(bigFraction2, bigFraction1);
      
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction3 = new BigFraction(bigInteger0);
      BigFraction bigFraction4 = bigFraction3.divide(bigInteger0);
      assertEquals((short)1, bigFraction4.shortValue());
      assertEquals((short)10, bigFraction3.shortValue());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.ONE.longValue();
      String string0 = bigFraction0.toString();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      // Undeclared exception!
      try { 
        bigFraction0.THREE_FIFTHS.bigDecimalValue(2147402991, 2147402991);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.TWO.negate();
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      BigFraction bigFraction2 = bigFraction0.ONE_FIFTH.divide(bigFraction1);
      assertEquals((byte)0, bigFraction2.byteValue());
      
      bigFraction0.toString();
      assertFalse(bigFraction0.equals((Object)bigFraction2));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(2147483599, 2147483599, 2147483599);
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.add((long) 2147483599);
      assertEquals((byte) (-49), bigFraction1.byteValue());
      
      BigFraction bigFraction2 = new BigFraction((double) 2147483599);
      assertTrue(bigFraction2.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.TWO_THIRDS.hashCode();
      String string0 = bigFraction0.toString();
      assertEquals("3 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      BigFraction bigFraction1 = bigFraction0.divide(1307674368000L);
      assertEquals((byte)0, bigFraction1.byteValue());
      assertFalse(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.TWO_FIFTHS.multiply((-2234L));
      assertEquals((byte) (-125), bigFraction1.byteValue());
      
      String string0 = bigFraction0.toString();
      assertEquals("3 / 4", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_THIRD;
      BigInteger bigInteger0 = BigInteger.ONE;
      bigInteger0.nextProbablePrime();
      BigFraction bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
      int int0 = 144;
      bigFraction1.TWO_THIRDS.pow(144);
      BigFraction bigFraction2 = bigFraction1.MINUS_ONE.multiply(121393L);
      bigFraction1.TWO_FIFTHS.multiply(bigFraction2);
      bigFraction0.ONE_THIRD.pow(1248.74125);
      bigFraction0.THREE_FIFTHS.add(bigFraction1);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigFraction bigFraction3 = bigFraction0.multiply(bigInteger1);
      bigFraction3.THREE_QUARTERS.getDenominatorAsLong();
      BigInteger bigInteger2 = null;
      try {
        bigInteger2 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      double double0 = bigFraction0.THREE_QUARTERS.pow(1.9713349342346191);
      assertEquals(0.5671577930347594, double0, 0.01);
      
      BigFraction bigFraction1 = bigFraction0.multiply(bigFraction0);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.multiply((-866));
      assertEquals((byte) (-32), bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.16365423986114486, 0.16365423986114486, 2147483641);
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-1933.3406183565), (-1933.3406183565), 4);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -1,933.341 to fraction after 4 iterations
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-2147483611), (-2147483611), (-2147483611));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,611 to fraction (-9,223,372,034,707,292,196/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.ONE_FIFTH.getNumeratorAsLong();
      String string0 = bigFraction0.toString();
      assertEquals("3 / 4", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.pow(3768);
      assertEquals((byte)0, bigFraction1.byteValue());
      
      String string0 = bigFraction0.toString();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertEquals("3 / 4", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.ONE_THIRD.add((-575));
      assertEquals((byte) (-62), bigFraction1.byteValue());
      
      String string0 = bigFraction0.toString();
      assertEquals("1 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      float float0 = bigFraction0.ONE_HALF.floatValue();
      assertEquals(0.5F, float0, 0.01F);
      
      String string0 = bigFraction0.toString();
      assertEquals("3 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-568.69705), 2687);
      String string0 = bigFraction0.toString();
      assertEquals("-1503635 / 2644", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-444.0730342));
      Object object0 = new Object();
      boolean boolean0 = bigFraction0.equals(object0);
      assertEquals((short) (-444), bigFraction0.shortValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.TWO_FIFTHS.intValue();
      String string0 = bigFraction0.toString();
      assertEquals("1 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.TWO.subtract(5);
      assertEquals((short) (-3), bigFraction1.shortValue());
      
      BigFraction bigFraction2 = bigFraction0.reciprocal();
      assertEquals((short)1, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = BigFraction.MINUS_ONE;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertEquals((short)0, bigFraction2.shortValue());
      assertNotSame(bigFraction2, bigFraction0);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.ONE.pow(9007199254740792L);
      String string0 = bigFraction0.toString();
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertEquals("2 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      bigFraction0.TWO_QUARTERS.getDenominatorAsInt();
      Random.setNextRandom(1043);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.ONE_HALF.getDenominatorAsLong();
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_QUARTER;
      String string0 = bigFraction0.toString();
      assertEquals("1 / 4", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      bigFraction0.ZERO.bigDecimalValue();
      String string0 = bigFraction0.toString();
      assertEquals("3 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      double double0 = bigFraction0.THREE_FIFTHS.doubleValue();
      assertEquals(0.6, double0, 0.01);
      
      String string0 = bigFraction0.toString();
      assertEquals("1 / 2", string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      String string0 = bigFraction0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      // Undeclared exception!
      try { 
        bigFraction0.ONE_QUARTER.bigDecimalValue(3876);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
}
