/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 06:13:06 GMT 2023
 */

package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.archivers.dump.DumpArchiveEntry;
import org.apache.commons.compress.archivers.memory.MemoryArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArchiveUtils_ESTest extends ArchiveUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[34];
      ArchiveUtils.toAsciiString(byteArray0, (int) (byte)0, 0);
      String string0 = ArchiveUtils.sanitize("'%JP4h%i");
      assertEquals("'%JP4h%i", string0);
      
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("'%JP4h%i", 0);
      ArchiveUtils.toString((ArchiveEntry) arArchiveEntry0);
      arArchiveEntry0.getLastModifiedDate();
      ArchiveUtils.matchAsciiBuffer("!<arch>\n", byteArray0);
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0, false);
      assertTrue(boolean0);
      
      ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.isEqualWithNull(byteArray0, 0, 12, byteArray0, 12, 0);
      ArchiveUtils.isEqual(byteArray0, 12, 0, byteArray0, 0, 12, true);
      ArchiveUtils.isEqualWithNull(byteArray0, 3, 12, byteArray0, 3, 3);
      String string1 = ArchiveUtils.toString((ArchiveEntry) arArchiveEntry0);
      assertEquals("-       0 '%JP4h%i", string1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[30];
      ArchiveUtils.toAsciiString(byteArray0, (int) (byte)0, 0);
      ArchiveUtils.sanitize("'%JP4h%i");
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("'%JP4h%i", 0);
      arArchiveEntry0.getLastModifiedDate();
      arArchiveEntry0.getLastModifiedDate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArchiveUtils.toString((ArchiveEntry) arArchiveEntry0);
      ArchiveUtils.matchAsciiBuffer("!<arch>\n", byteArray0);
      ArchiveUtils.sanitize("-       0 '%JP4h%i");
      ArchiveUtils.isEqualWithNull(byteArray0, 0, 18, byteArray0, 18, 0);
      ArchiveUtils.isEqual(byteArray0, 18, 0, byteArray0, 0, 1, true);
      ArchiveUtils.toAsciiString(byteArray0, 18, 0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-86);
      ArchiveUtils.isEqual(byteArray0, byteArray1, true);
      ArchiveUtils.isEqual(byteArray1, (int) (byte) (-86), 0, byteArray0, (int) (byte) (-86), (-2646), false);
      ArchiveUtils.sanitize("");
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[19];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray1, byteArray0, true);
      assertTrue(boolean0);
      
      String string0 = ArchiveUtils.toAsciiString(byteArray1, 1, 1);
      assertEquals("\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      MockFile mockFile0 = new MockFile("pax_gnu_sparse.tar", "pax_gnu_sparse.tar");
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("pax_gnu_sparse.tar", 4278190054L);
      arArchiveEntry0.getLastModifiedDate();
      ArchiveUtils.toString((ArchiveEntry) arArchiveEntry0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[1];
      arArchiveEntry0.getLastModifiedDate();
      arArchiveEntry0.getLastModifiedDate();
      byteArray0[4] = (byte) (-2);
      arArchiveEntry0.getLastModifiedDate();
      ArchiveUtils.matchAsciiBuffer("?", byteArray0);
      ArchiveUtils.isEqual(byteArray1, byteArray0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArchiveUtils.sanitize("`\n");
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, 2112, 1489, byteArray1, (byte) (-2), 44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2112
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      MockFile mockFile0 = new MockFile("pax_gnu_sparse.tar");
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("pax_gnu_sparse.tar", 4278190080L);
      MockDate mockDate0 = new MockDate();
      String string0 = ArchiveUtils.toString((ArchiveEntry) arArchiveEntry0);
      assertEquals("- 4278190080 pax_gnu_sparse.tar", string0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0, false);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-2);
      byteArray1[1] = (byte) (-2);
      byteArray1[2] = (byte) (-2);
      byteArray1[3] = (byte) (-2);
      arArchiveEntry0.getLastModifiedDate();
      byteArray1[4] = (byte) (-2);
      boolean boolean1 = ArchiveUtils.matchAsciiBuffer("!<arch>\n", byteArray1, 15, (int) (byte) (-2));
      assertFalse(boolean1 == boolean0);
      
      String string1 = ArchiveUtils.sanitize("=");
      assertEquals("=", string1);
      
      byte[] byteArray2 = new byte[0];
      boolean boolean2 = ArchiveUtils.isEqualWithNull(byteArray2, 4, (byte) (-2), byteArray2, (-2916), (byte) (-2));
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)40;
      byteArray1[1] = (byte)40;
      byteArray1[2] = (byte)40;
      byteArray1[3] = (byte)40;
      byteArray1[4] = (byte)40;
      byteArray1[5] = (byte)40;
      byteArray1[6] = (byte)40;
      ArchiveUtils.isEqualWithNull(byteArray1, 0, 16, byteArray1, (byte)40, 0);
      ArchiveUtils.isEqual(byteArray0, 1993, (-338), byteArray0, 1993, 1993, false);
      System.setCurrentTimeMillis(1696L);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      MockFile mockFile0 = new MockFile("pax_gnu_sparse.tar", "pax_gnu_sparse.tar");
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("pax_gnu_sparse.tar", (byte) (-2));
      arArchiveEntry0.getLastModifiedDate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray1, true);
      boolean boolean1 = ArchiveUtils.matchAsciiBuffer("yxv56{6YM>5dVp]", byteArray1, (int) (byte)0, (int) (byte) (-2));
      assertFalse(boolean1 == boolean0);
      
      String string0 = ArchiveUtils.sanitize("yxv56{6YM>5dVp]");
      assertEquals("yxv56{6YM>5dVp]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-2);
      byteArray0[0] = (byte) (-2);
      MockFile mockFile0 = new MockFile("", "");
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("nY{tf6T[f\"~B$=4", 85L);
      arArchiveEntry0.getLastModifiedDate();
      ArchiveUtils.toString((ArchiveEntry) arArchiveEntry0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[0];
      ArchiveUtils.isEqual(byteArray0, byteArray1, true);
      int int0 = 10;
      // Undeclared exception!
      try { 
        ArchiveUtils.matchAsciiBuffer((String) null, byteArray0, 16, (-5770));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArchiveUtils.isEqualWithNull(byteArray0, 0, 802, byteArray0, (-5586), 0);
      ArchiveUtils.isEqualWithNull(byteArray0, (byte) (-2), (byte) (-2), byteArray0, 1993, (byte) (-2));
      MemoryArchiveEntry memoryArchiveEntry0 = new MemoryArchiveEntry("");
      memoryArchiveEntry0.getLastModifiedDate();
      ArchiveUtils.toString((ArchiveEntry) memoryArchiveEntry0);
      MockFile mockFile0 = new MockFile("");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile0);
      ArchiveUtils.toString((ArchiveEntry) memoryArchiveEntry0);
      ArchiveUtils.toString((ArchiveEntry) tarArchiveEntry0);
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqual(byteArray0, 448, 169, byteArray0, 9571, 2935, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 448
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile0, "BcBroZ|lFu;q8");
      String string0 = ArchiveUtils.toString((ArchiveEntry) zipArchiveEntry0);
      assertEquals("d      -1 BcBroZ|lFu;q8/", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte) (-2);
      byteArray0[1] = (byte)0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArchiveUtils.isEqualWithNull(byteArray0, 0, 795, byteArray0, (-5586), 0);
      ArchiveUtils.isEqualWithNull(byteArray0, (byte)0, (byte) (-2), byteArray0, 795, (byte) (-2));
      ArchiveUtils.isEqual(byteArray0, 795, (int) (byte)0, byteArray0, (-5586), (int) (byte)0, false);
      byte[] byteArray1 = new byte[8];
      ArchiveUtils.sanitize("sx8%");
      MemoryArchiveEntry memoryArchiveEntry0 = new MemoryArchiveEntry("org.apache.commons.compress.utils.ArchiveUtils");
      ArchiveUtils.sanitize("org.apache.commons.compress.utils.ArchiveUtils");
      ArchiveUtils.sanitize("}&%e");
      ArchiveUtils.sanitize("sx8%");
      ArchiveUtils.sanitize("sx8%");
      // Undeclared exception!
      try { 
        ArchiveUtils.sanitize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArchiveUtils.isEqualWithNull(byteArray0, 0, 795, byteArray0, (-5586), 0);
      ArchiveUtils.isEqualWithNull(byteArray0, (byte) (-2), (byte) (-2), byteArray0, 1993, (byte) (-2));
      ArchiveUtils.isEqual(byteArray0, 795, (int) (byte) (-2), byteArray0, (-5586), (int) (byte) (-2), false);
      byte[] byteArray1 = new byte[8];
      ArchiveUtils.sanitize("sx8%");
      MemoryArchiveEntry memoryArchiveEntry0 = new MemoryArchiveEntry("");
      ArchiveUtils.toString((ArchiveEntry) memoryArchiveEntry0);
      ArchiveUtils.sanitize("");
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, 795, (-5586), byteArray1, 13, (byte) (-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5573
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ArchiveUtils.toAsciiString(byteArray0, (int) (byte)0, 0);
      ArchiveUtils.isEqual(byteArray0, (-3), 22, byteArray0, 812, 0);
      ArchiveUtils.sanitize("(`y`VdE9`a");
      MemoryArchiveEntry memoryArchiveEntry0 = new MemoryArchiveEntry("(`y`VdE9`a");
      memoryArchiveEntry0.getLastModifiedDate();
      memoryArchiveEntry0.getLastModifiedDate();
      ArchiveUtils.toString((ArchiveEntry) memoryArchiveEntry0);
      ArchiveUtils.sanitize("");
      ArchiveUtils.isEqualWithNull(byteArray0, 812, 0, byteArray0, (-314), 0);
      System.setCurrentTimeMillis((-314));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-3);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = ArchiveUtils.sanitize("Yh.vU]YzvUB");
      assertEquals("Yh.vU]YzvUB", string0);
      
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, 125, (int) (byte) (-2), byteArray0, (-3224), (int) (byte) (-2));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) (-53);
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, 3681, (int) (byte) (-53), byteArray0, (-477), (-477));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = ArchiveUtils.sanitize("(`y`VdE9`a");
      assertEquals("(`y`Vd?E9`a", string0);
      
      MemoryArchiveEntry memoryArchiveEntry0 = new MemoryArchiveEntry("(`y`VdE9`a");
      String string1 = ArchiveUtils.toString((ArchiveEntry) memoryArchiveEntry0);
      assertEquals("-       0 (`y`VdE9`a", string1);
      
      ArchiveUtils.sanitize("(`y`Vd?E9`a");
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-53);
      byteArray1[2] = (byte) (-53);
      byteArray1[5] = (byte) (-53);
      byteArray1[6] = (byte) (-53);
      boolean boolean1 = ArchiveUtils.isEqualWithNull(byteArray1, (byte) (-53), (byte) (-53), byteArray0, (-1144), (byte) (-53));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-99);
      byte byte0 = (byte) (-53);
      byteArray0[3] = (byte) (-53);
      ArchiveUtils.isEqualWithNull(byteArray0, (byte) (-99), (byte) (-99), byteArray0, 100, (byte) (-99));
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArchiveUtils.isEqual(byteArray0, (-1085), (int) (byte) (-53), byteArray0, (-574), 812);
      ArchiveUtils.sanitize("(`y`VdE9`a");
      int int0 = 3914;
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString(byteArray0, (-574), 3914);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-53);
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, 69, (byte) (-99), byteArray0, 100, (byte)114);
      assertFalse(boolean0);
      
      boolean boolean1 = ArchiveUtils.isEqual((byte[]) null, (int) (byte) (-99), (-2), byteArray0, 100, (-96), false);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, (byte)1, (byte)0, byteArray0, (byte)1, (byte)1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-2);
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, 795, (byte) (-2), byteArray0, (-3224), (byte) (-2));
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = ArchiveUtils.isEqualWithNull(byteArray0, 0, 795, byteArray0, (-5586), 0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-99);
      String string0 = ArchiveUtils.toAsciiString(byteArray0, (int) (byte)0, 1);
      assertEquals("\u0000", string0);
      
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      dumpArchiveEntry0.equals("\u0000");
      String string1 = ArchiveUtils.toString((ArchiveEntry) dumpArchiveEntry0);
      assertEquals("-       0 null", string1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte)114;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-53);
      int int0 = 335;
      ArchiveUtils.isEqualWithNull(byteArray0, 69, (byte) (-99), byteArray0, 100, 335);
      int int1 = 26121;
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqual(byteArray0, (int) (byte) (-1), 26121, byteArray0, (-54), 167);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte) (-99);
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, (byte) (-99), (byte) (-99), byteArray0, 100, 100);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-53);
      int int0 = 335;
      ArchiveUtils.isEqualWithNull(byteArray0, 69, (byte) (-99), byteArray0, 100, 335);
      int int1 = 26121;
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqual(byteArray0, (int) (byte) (-1), 26121, byteArray0, (-54), 167);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)49;
      ArchiveUtils.isArrayZero(byteArray0, (byte)49);
      ArchiveUtils.sanitize("");
      ArchiveUtils.isArrayZero(byteArray0, (-3447));
      ArchiveUtils.sanitize("");
      byte[] byteArray1 = new byte[9];
      byteArray1[1] = (byte)49;
      byteArray1[1] = (byte)49;
      byteArray1[2] = (byte)49;
      ArchiveUtils.isEqual(byteArray1, byteArray0, true);
      ArchiveUtils.sanitize("SHA256");
      System.setCurrentTimeMillis(8589934592L);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-3);
      String string0 = ArchiveUtils.toAsciiString(byteArray0, (int) (byte)0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-25);
      boolean boolean0 = ArchiveUtils.matchAsciiBuffer("", byteArray0, 54, (int) (byte) (-25));
      boolean boolean1 = ArchiveUtils.isEqualWithNull(byteArray0, (byte)7, (byte) (-2), byteArray0, (byte) (-25), (byte) (-2));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = ArchiveUtils.sanitize("<empty/>\n");
      assertEquals("<empty/>?", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      File file0 = MockFile.createTempFile("k>:Zq UFN}[`j", "k>:Zq UFN}[`j");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(file0);
      String string0 = ArchiveUtils.toString((ArchiveEntry) tarArchiveEntry0);
      assertEquals("-       0 tmp/k>:Zq UFN}[`j0k>:Zq UFN}[`j", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-119);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-119);
      byteArray1[2] = (byte)124;
      byteArray1[3] = (byte) (-119);
      byteArray1[4] = (byte)101;
      byteArray1[5] = (byte) (-119);
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, 250, (int) (byte) (-119), byteArray1, 1000, 250);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-20);
      byte byte0 = (byte) (-60);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Reserved flags are set in the .gz header");
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte) (-45);
      ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.sanitize("\uFFFD\uFFFD\uFFFD\uFFFD1\uFFFD");
      ArchiveUtils.isEqual(byteArray0, byteArray0, false);
      ArchiveUtils.isArrayZero(byteArray0, (byte) (-45));
      ArchiveUtils.isEqual(byteArray0, byteArray0);
      ArchiveUtils.isEqual(byteArray0, (int) (byte) (-26), (int) (byte) (-26), byteArray0, (int) (byte)49, (int) (byte)49);
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString(byteArray0, (int) (byte) (-20), (int) (byte) (-60));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-36);
      ArchiveUtils.matchAsciiBuffer("", byteArray0, (int) (byte)39, (int) (byte)39);
      // Undeclared exception!
      try { 
        ArchiveUtils.isArrayZero(byteArray0, 63);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)100;
      byteArray0[1] = (byte)29;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)2;
      boolean boolean0 = ArchiveUtils.matchAsciiBuffer("", byteArray0);
      assertFalse(boolean0);
      
      byte[] byteArray1 = new byte[3];
      ArchiveUtils.matchAsciiBuffer("", byteArray1, 69, 1371);
      ArchiveUtils.matchAsciiBuffer("", byteArray0, 69, (int) (byte)100);
      boolean boolean1 = ArchiveUtils.isEqual(byteArray1, 4213, (-3467), byteArray1, (-3467), (-20));
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)49;
      byteArray0[0] = (byte)49;
      ArchiveUtils.isArrayZero(byteArray0, (byte)49);
      byte byte1 = (byte)49;
      ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.sanitize("]d");
      ArchiveUtils.isEqual(byteArray0, byteArray0, false);
      ArchiveUtils.isEqual(byteArray0, byteArray0);
      int int0 = (-3505);
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqual(byteArray0, (-3505), (int) (byte)49, byteArray0, (int) (byte)49, 2472);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3505
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte) (-99);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.isEqualWithNull(byteArray0, 162, (byte) (-99), byteArray0, 2740, (byte) (-99));
      ArchiveUtils.sanitize("");
      ArchiveUtils.sanitize("\u0000\u0000\u0000\u0000\uFFFD");
      System.setCurrentTimeMillis(2740);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-20);
      byte byte0 = (byte) (-60);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte) (-45);
      ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.sanitize("\uFFFD\uFFFD\uFFFD\uFFFD1\uFFFD");
      ArchiveUtils.isEqual(byteArray0, byteArray0, false);
      ArchiveUtils.isEqual(byteArray0, byteArray0);
      ArchiveUtils.isEqual(byteArray0, (int) (byte) (-26), (int) (byte) (-26), byteArray0, (int) (byte)49, (int) (byte)49);
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString(byteArray0, (int) (byte) (-20), (int) (byte) (-60));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiBytes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DumpArchiveEntry dumpArchiveEntry0 = new DumpArchiveEntry();
      String string0 = ArchiveUtils.toString((ArchiveEntry) dumpArchiveEntry0);
      assertEquals("-       0 null", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, (byte)21, (byte)0, byteArray0, (byte)21, (byte)21);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 21
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = null;
      int int0 = 257;
      int int1 = (-1527);
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqual((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("axgnu_spaUrrse.ar", 4278190054L);
      String string0 = ArchiveUtils.toString((ArchiveEntry) arArchiveEntry0);
      assertEquals("- 4278190054 axgnu_spaUrrse.ar", string0);
      
      boolean boolean0 = ArchiveUtils.matchAsciiBuffer("- 4278190054 axgnu_spaUrrse.ar", byteArray0);
      boolean boolean1 = ArchiveUtils.isEqual(byteArray0, byteArray0, false);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)68;
      boolean boolean0 = ArchiveUtils.isEqual(byteArray1, byteArray0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)49;
      byteArray0[0] = (byte)49;
      ArchiveUtils.isArrayZero(byteArray0, (byte)49);
      ArchiveUtils.sanitize("");
      ArchiveUtils.isArrayZero(byteArray0, (-3447));
      ArchiveUtils.toAsciiString(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)49;
      byteArray1[1] = (byte)49;
      byteArray1[2] = (byte)49;
      ArchiveUtils.isEqual(byteArray1, byteArray0, true);
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)49;
      byteArray2[1] = (byte)49;
      byteArray2[2] = (byte)49;
      byteArray2[3] = (byte)49;
      byteArray2[4] = (byte)49;
      byteArray2[5] = (byte)49;
      byteArray2[6] = (byte)49;
      byteArray2[7] = (byte)49;
      byteArray2[8] = (byte)49;
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString(byteArray2, (-3447), (int) (byte)49);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-125);
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray1, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, (byte) (-3), (byte)0, byteArray0, (byte) (-3), (byte) (-3));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -6
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, (int) (byte)0, (int) (byte) (-2), byteArray0, (int) (byte)0, (int) (byte)0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      String string0 = ArchiveUtils.toAsciiString(byteArray0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = ArchiveUtils.sanitize("org.apache.commons.compress.utils.ArchiveUtils");
      assertEquals("org.apache.commons.compress.utils.ArchiveUtils", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull((byte[]) null, 257, 257, (byte[]) null, 257, 257);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString(byteArray0, 63, 63);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = ArchiveUtils.isArrayZero((byte[]) null, (-1549));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)43;
      ArchiveUtils.isArrayZero(byteArray0, (byte)43);
      int int0 = 511;
      int int1 = 795;
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, 511, 511, byteArray0, 511, 511);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 511
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }
}
