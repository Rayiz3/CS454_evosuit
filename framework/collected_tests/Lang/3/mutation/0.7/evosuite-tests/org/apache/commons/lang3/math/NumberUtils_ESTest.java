/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 20:15:40 GMT 2023
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.E700F");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0e7");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234E5l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.9");
      assertEquals(0.9F, number0);
      
      Number number1 = NumberUtils.createNumber("0.9");
      assertTrue(number1.equals((Object)number0));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234.5d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0e");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0e is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      short[] shortArray0 = new short[14];
      NumberUtils.max(shortArray0);
      try { 
        NumberUtils.createNumber("0E)/6Ue`5");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"E)/6Ue`5\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      NumberUtils.isNumber("1eE+00001");
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("'f{&NajifE}o3p]!");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"'f{&Naj\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xbaIfJKk^rIW'");
      boolean boolean1 = NumberUtils.isDigits("0xbaIfJKk^rIW'");
      assertFalse(boolean1);
      
      long[] longArray0 = new long[3];
      NumberUtils.min(longArray0);
      NumberUtils.isNumber("0");
      boolean boolean2 = NumberUtils.isNumber("0");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-700");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("-0x7fffffffffffffff0");
      boolean boolean1 = NumberUtils.isNumber("-0x7fffffffffffffff0");
      assertFalse(boolean1 == boolean0);
      
      Number number0 = NumberUtils.createNumber("-0x7fffffffffffffff0");
      assertEquals((byte)16, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1234.5D");
      assertEquals(1234.5, number0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.1L");
      assertFalse(boolean0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 12344L;
      longArray0[1] = 3664L;
      longArray0[2] = (-434L);
      longArray0[3] = (-2795L);
      longArray0[4] = 1129L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(12344L, long0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)34;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)121, byte0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0123.4D");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1234.5f");
      assertEquals(1234.5F, number0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-700F");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234.5f");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      float[] floatArray0 = new float[12];
      NumberUtils.max(floatArray0);
      NumberUtils.max(floatArray0);
      boolean boolean0 = NumberUtils.isNumber("0x9?el&5kCzZ0/py?A67#");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0eT");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1.1E200");
      assertEquals((-1.1E200), number0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("--8");
      assertEquals((short)8, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      try { 
        NumberUtils.createNumber("toFloat(Float.MIN_VALUE) failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // toFloat(Float.MIN_VALUE) failed is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0eT");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0eT is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("22338L");
      assertEquals(22338L, number0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      try { 
        NumberUtils.createNumber("The Array must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xF");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.7976931348623159e+308");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.7976931348623159e+308");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      try { 
        NumberUtils.createNumber("O+%Y.JaC/l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // O+%Y.JaC/l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-1l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      try { 
        NumberUtils.createNumber("gi@W(![{LIGRLQxW?'D");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // gi@W(![{LIGRLQxW?'D is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      try { 
        NumberUtils.createNumber("ue");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ue is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      try { 
        NumberUtils.createNumber("+-6zu[XCorFeD)|I9");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      try { 
        NumberUtils.createNumber("{!hnozY/3mSof");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // {!hnozY/3mSof is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 17.2877988;
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+ici#&OMpDUJ-OB\"a(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      try { 
        NumberUtils.createNumber("null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1l");
      assertEquals((-1L), number0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("L");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      try { 
        NumberUtils.createNumber("CsgC IED8iZtne");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // CsgC IED8iZtne is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0x077777777777777777777");
      assertEquals((byte)119, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 593.7184F;
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2.5;
      doubleArray0[1] = (double) (long)numberUtils0.LONG_MINUS_ONE;
      doubleArray0[2] = (double) (short)numberUtils0.SHORT_MINUS_ONE;
      doubleArray0[3] = (double) (float)numberUtils0.FLOAT_ONE;
      doubleArray0[5] = (double) (int)numberUtils0.INTEGER_MINUS_ONE;
      doubleArray0[6] = (double) (short)numberUtils0.SHORT_MINUS_ONE;
      doubleArray0[7] = (double) (int)numberUtils0.INTEGER_MINUS_ONE;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (int)numberUtils0.INTEGER_ONE;
      floatArray0[1] = (float) (long)numberUtils0.LONG_ZERO;
      floatArray0[2] = (float) (int)numberUtils0.INTEGER_ZERO;
      floatArray0[3] = (float) (short)numberUtils0.SHORT_MINUS_ONE;
      floatArray0[4] = (float) (short)numberUtils0.SHORT_MINUS_ONE;
      floatArray0[5] = Float.NaN;
      floatArray0[6] = (float) (long)numberUtils0.LONG_ONE;
      floatArray0[7] = (float) (short)numberUtils0.SHORT_ONE;
      floatArray0[8] = (float) (short)numberUtils0.SHORT_ZERO;
      NumberUtils.min(floatArray0);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)numberUtils0.BYTE_MINUS_ONE;
      NumberUtils.max(longArray0);
      doubleArray0[8] = (double) (short)numberUtils0.SHORT_ZERO;
      NumberUtils.min(doubleArray0);
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xem");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.");
      assertEquals(1.0F, number0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      NumberUtils.isNumber((String) null);
      NumberUtils.isNumber("0xbW7afvJ7k^rBpW'");
      boolean boolean0 = NumberUtils.isNumber("12345678901234567890L");
      assertTrue(boolean0);
      
      long[] longArray0 = new long[5];
      NumberUtils.max(longArray0);
      Number number0 = NumberUtils.createNumber("12345678901234567890L");
      assertEquals((byte) (-46), number0.byteValue());
      
      float[] floatArray0 = new float[7];
      NumberUtils.max(floatArray0);
      double[] doubleArray0 = new double[4];
      float float0 = new Long(0L);
      double double0 = new Float((double) 0L);
      short[] shortArray0 = new short[12];
      shortArray0[0] = (short)4060;
      shortArray0[2] = (short)4060;
      shortArray0[3] = (short)0;
      NumberUtils.toShort((String) null);
      boolean boolean1 = NumberUtils.isNumber((String) null);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 750;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(750, int0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)3819;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)76;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
      
      boolean boolean0 = NumberUtils.isNumber("-0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.8");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      NumberUtils.isNumber("`%&juN),EW~Z");
      NumberUtils.toLong((String) null);
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      longArray0[1] = (long) numberUtils0.LONG_ONE;
      short short0 = NumberUtils.max((short)39, (short) numberUtils0.SHORT_MINUS_ONE, (short) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((short)39, short0);
      
      long long0 = NumberUtils.toLong((String) null, (long) numberUtils0.INTEGER_ONE);
      assertEquals(1L, long0);
      
      double double0 = NumberUtils.toDouble((String) null, 14.3);
      assertEquals(14.3, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("0777777777777777777777");
      NumberUtils.createNumber("0777777777777777777777");
      NumberUtils.min(12344L, 278L, (-3026L));
      BigDecimal bigDecimal1 = NumberUtils.createBigDecimal("0777777777777777777777");
      assertNotSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--bRF;ACK4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("--bRFACK4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // --bRFACK4 is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      try { 
        NumberUtils.createNumber("java.specification.name");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // java.specification.name is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1416.593);
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("eMzJT3-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1eE");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("5E;MDue`=_");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("V");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-09x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = NumberUtils.min((int) (byte)2, 1073741824, 1073741824);
      assertEquals(2, int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) (byte)2;
      longArray0[4] = 1L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(2L, long0);
      
      short short0 = NumberUtils.max((short) (byte)2, (short) (byte)2, (short) (byte)2);
      assertEquals((short)2, short0);
      
      byte byte0 = NumberUtils.toByte((String) null, (byte)116);
      assertEquals((byte)116, byte0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("-#");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0x077777777777777777777");
      assertEquals((short)30583, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) numberUtils0.SHORT_MINUS_ONE;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) numberUtils0.FLOAT_MINUS_ONE;
      floatArray0[1] = (float) (byte)numberUtils0.BYTE_ZERO;
      floatArray0[2] = (float) (byte)numberUtils0.BYTE_MINUS_ONE;
      floatArray0[3] = (float) numberUtils0.FLOAT_ZERO;
      floatArray0[4] = (float) (byte)numberUtils0.BYTE_ZERO;
      floatArray0[5] = (float) (short)numberUtils0.SHORT_ONE;
      floatArray0[6] = (float) (byte)numberUtils0.BYTE_ONE;
      floatArray0[7] = (float) (short) (-1);
      floatArray0[8] = (float) (short)numberUtils0.SHORT_MINUS_ONE;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
      
      float float1 = NumberUtils.min(floatArray0);
      assertEquals((-1.0F), float1, 0.01F);
      
      shortArray0[1] = (short) numberUtils0.SHORT_ZERO;
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (short)0;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)numberUtils0.BYTE_MINUS_ONE;
      longArray0[1] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      long long0 = NumberUtils.max(longArray0);
      assertEquals((-1L), long0);
      
      short short0 = NumberUtils.max((short) numberUtils0.SHORT_ZERO, (short) (-3066), (short)18631);
      assertEquals((short)18631, short0);
      
      double double0 = NumberUtils.toDouble("``wAM0[lpk^d#-kW", (-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      NumberUtils.min((int) (byte)2, 1073741824, 1073741824);
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) (byte)2;
      NumberUtils.isNumber((String) null);
      NumberUtils.createBigInteger((String) null);
      NumberUtils.createBigInteger((String) null);
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      try { 
        NumberUtils.createNumber("toFloat(empty) failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // toFloat(empty) failed is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-1433L);
      longArray0[1] = (-2181L);
      longArray0[2] = (-2639L);
      longArray0[3] = (-1L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-2639L), long0);
      
      long long1 = NumberUtils.min((-2181L), (-1L), (-1433L));
      assertEquals((-2181L), long1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.isNumber("[zXD");
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (short)numberUtils0.SHORT_ONE;
      doubleArray0[1] = (double) (byte)numberUtils0.BYTE_ONE;
      doubleArray0[2] = (double) (float)numberUtils0.FLOAT_ONE;
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)numberUtils0.SHORT_ZERO;
      intArray0[1] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[2] = (int) numberUtils0.INTEGER_MINUS_ONE;
      intArray0[3] = (int) numberUtils0.INTEGER_MINUS_ONE;
      intArray0[4] = (int) (short)numberUtils0.SHORT_ZERO;
      intArray0[5] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[6] = (int) (byte)numberUtils0.BYTE_ONE;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1), int0);
      
      doubleArray0[3] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      doubleArray0[4] = (-176.0559048);
      doubleArray0[5] = (double) (int)numberUtils0.INTEGER_ONE;
      doubleArray0[6] = 955.2636939123827;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-176.0559048), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) numberUtils0.BYTE_ZERO;
      long long0 = NumberUtils.min((long) numberUtils0.SHORT_ONE, (long) numberUtils0.INTEGER_ZERO, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x7]hfffffffffffffff");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x,hJf@cEUT;!)hafA9CH");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x077777777777777777777");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) numberUtils0.SHORT_MINUS_ONE;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) numberUtils0.FLOAT_MINUS_ONE;
      floatArray0[1] = (float) (byte)numberUtils0.BYTE_ZERO;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
      
      short short1 = NumberUtils.min((short)1, (short) numberUtils0.SHORT_ONE, (short) (-22));
      assertEquals((short) (-22), short1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)numberUtils0.SHORT_ONE;
      intArray0[1] = 11;
      intArray0[2] = (int) numberUtils0.INTEGER_ONE;
      intArray0[3] = (int) numberUtils0.INTEGER_ONE;
      intArray0[4] = 57;
      intArray0[5] = (int) numberUtils0.INTEGER_MINUS_ONE;
      intArray0[6] = (int) (short) (-22);
      intArray0[7] = (int) (byte)numberUtils0.BYTE_ZERO;
      intArray0[8] = (int) (short)89;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(89, int0);
      
      int int1 = NumberUtils.max((-341), (int) (short) (-22), (-1));
      assertEquals((-1), int1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (float)numberUtils0.FLOAT_ZERO;
      doubleArray0[1] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      doubleArray0[2] = (double) (short) (-1);
      doubleArray0[3] = (double) (short) (-1);
      doubleArray0[4] = (double) (-341);
      doubleArray0[5] = (double) (float)numberUtils0.FLOAT_ZERO;
      doubleArray0[6] = (double) 57;
      doubleArray0[7] = (double) 11;
      doubleArray0[8] = (double) 57;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-341.0), double0, 0.01);
      
      int int2 = NumberUtils.max(57, 110, (-174));
      assertEquals(110, int2);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) numberUtils0.BYTE_ONE;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte)101;
      shortArray0[2] = (short) (byte)0;
      shortArray0[3] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[4] = (short) (byte)0;
      shortArray0[5] = (short) (byte) (-96);
      shortArray0[6] = (short)102;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)102, short0);
      
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[5] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[6] = (byte) numberUtils0.BYTE_ZERO;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-96), byte0);
      
      byte byte1 = NumberUtils.max((byte) numberUtils0.BYTE_MINUS_ONE, (byte) (-62), (byte)76);
      assertEquals((byte)76, byte1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("~@S|FJT?]");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1327;
      intArray0[1] = 6;
      intArray0[2] = (-78);
      intArray0[3] = 2328;
      int int0 = NumberUtils.max((-78), 6, 1327);
      assertEquals(1327, int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1605;
      int int0 = NumberUtils.max(1605, 1605, 1605);
      int int1 = NumberUtils.min(intArray0);
      assertTrue(int1 == int0);
      assertEquals(1605, int1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-5.56);
      doubleArray0[1] = (-582.74684);
      doubleArray0[2] = (double) numberUtils0.DOUBLE_ZERO;
      doubleArray0[3] = (double) (byte)numberUtils0.BYTE_MINUS_ONE;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (long)numberUtils0.LONG_ZERO;
      doubleArray1[1] = (double) (int)numberUtils0.INTEGER_ZERO;
      doubleArray1[2] = (double) (long)numberUtils0.LONG_ZERO;
      doubleArray1[3] = (double) (int)numberUtils0.INTEGER_ONE;
      double double1 = NumberUtils.min(doubleArray1);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("0x07777t777777777777.77");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"7777t7\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      try { 
        NumberUtils.createNumber("F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // F is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("0X");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"X\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("-0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      NumberUtils.createInteger((String) null);
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[3] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[4] = (byte) numberUtils0.BYTE_MINUS_ONE;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) numberUtils0.DOUBLE_ONE;
      doubleArray0[1] = (double) numberUtils0.DOUBLE_ONE;
      doubleArray0[2] = (double) numberUtils0.DOUBLE_ONE;
      doubleArray0[3] = (double) (int)numberUtils0.INTEGER_ZERO;
      doubleArray0[4] = (double) (byte)numberUtils0.BYTE_MINUS_ONE;
      NumberUtils.max(doubleArray0);
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-294.9603F);
      floatArray0[1] = (-399.0454F);
      long[] longArray0 = new long[1];
      longArray0[0] = 12344L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(12344L, long0);
      
      short short0 = NumberUtils.max((short)2, (short)2, (short)4406);
      assertEquals((short)4406, short0);
      
      long long1 = NumberUtils.max((-10L), (-10L), 2978L);
      assertEquals(2978L, long1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      NumberUtils.toByte("xb$b,jJH5r");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      NumberUtils.max(byteArray0);
      NumberUtils.min((short) (-3734), (short)0, (short) (byte)0);
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (byte)0;
      longArray0[1] = (long) (short)0;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      try { 
        NumberUtils.createNumber("(e>-F%.\"K*Rjf2");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // (e>-F%.\"K*Rjf2 is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1599.4886F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-176);
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = 0.0F;
      float float0 = NumberUtils.max((-3184.64F), 0.0F, (-3184.64F));
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1370.70028528);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = NumberUtils.min(121, 121, (-1016));
      assertEquals((-1016), int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byte byte0 = NumberUtils.min((byte) (-127), (byte)43, (byte) (-127));
      assertEquals((byte) (-127), byte0);
      
      byte byte1 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (float)numberUtils0.FLOAT_ONE;
      doubleArray0[1] = (double) (long)numberUtils0.LONG_ZERO;
      doubleArray0[2] = (double) (byte)numberUtils0.BYTE_MINUS_ONE;
      doubleArray0[3] = (double) numberUtils0.DOUBLE_ZERO;
      doubleArray0[4] = (double) (byte)numberUtils0.BYTE_ZERO;
      doubleArray0[5] = 1257.0;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.min((byte) numberUtils0.BYTE_ZERO, (byte) (-108), (byte) (-12));
      assertEquals((byte) (-108), byte0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-251L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      NumberUtils.min((int) (byte)2, 1073741824, 1073741824);
      NumberUtils.toInt((String) null, 2);
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("em83PZPDmb");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"em\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      long[] longArray0 = new long[2];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = NumberUtils.min((int) (byte)2, 1073741824, 1073741824);
      int int1 = NumberUtils.toInt((String) null, 2);
      assertTrue(int1 == int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 0L;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) (byte)2;
      longArray0[3] = (long) 2;
      longArray0[4] = 1L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(2L, long0);
      
      short short0 = NumberUtils.max((short) (byte)2, (short) (byte)2, (short) (byte)2);
      assertEquals((short)2, short0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1324);
      short short0 = NumberUtils.max((short) (-1324), (short) (-1324), (short) (-1324));
      assertEquals((short) (-1324), short0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-3486.9050847686);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-3486.9050847686), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int[] intArray0 = new int[15];
      intArray0[0] = 9;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int[] intArray0 = new int[15];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long long0 = NumberUtils.toLong("NQC");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[2] = (short) numberUtils0.SHORT_ONE;
      shortArray0[3] = (short) (byte)numberUtils0.BYTE_ZERO;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      try { 
        NumberUtils.createNumber("--ihB9_P<6J&b4+J5y");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // --ihB9_P<6J&b4+J5y is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = NumberUtils.min((int) (byte)2, (-901), (-901));
      assertEquals((-901), int0);
      
      boolean boolean0 = NumberUtils.isDigits("#}&9F@R4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long[] longArray0 = new long[15];
      longArray0[0] = 2448L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_129()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short) (-2325), (short) numberUtils0.BYTE_MINUS_ONE, (short)31582);
      assertEquals((short)31582, short0);
      
      boolean boolean0 = NumberUtils.isDigits("tX3Z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[2] = (short) numberUtils0.SHORT_ONE;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1, short0);
      
      short short1 = NumberUtils.min((short)57, (short) (-582), (short) numberUtils0.BYTE_ZERO);
      assertEquals((short) (-582), short1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-27);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[1] = (byte)9;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)9, byte0);
      
      short short0 = NumberUtils.toShort("-");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.max((long) numberUtils0.LONG_MINUS_ONE, (long) numberUtils0.INTEGER_ZERO, (-945L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, 3.7F);
      assertEquals(3.7F, float0, 0.01F);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 3.7F;
      floatArray0[1] = 3.7F;
      floatArray0[2] = 3.7F;
      floatArray0[3] = 1413.0F;
      float float1 = NumberUtils.max(floatArray0);
      assertEquals(1413.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_138()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float float0 = NumberUtils.min(2222.4878F, (float) numberUtils0.FLOAT_MINUS_ONE, (float) numberUtils0.SHORT_ONE);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.max((double) numberUtils0.FLOAT_MINUS_ONE, (double) numberUtils0.FLOAT_ONE, (double) numberUtils0.LONG_ZERO);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)93;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = NumberUtils.min((short) (-479), (short) (-479), (short)120);
      assertEquals((short) (-479), short0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[1] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[2] = (short) numberUtils0.SHORT_ZERO;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
      
      short short1 = NumberUtils.min((short)51, (short)2497, (short) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((short) (-1), short1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.min((double) numberUtils0.SHORT_MINUS_ONE, (double) numberUtils0.DOUBLE_ONE, (-1913.9231085634));
      assertEquals((-1913.9231085634), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_144()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("0em83PZPDmb");
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-67.08549F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.toShort("o3PSe5tIO/`QV", (short) numberUtils0.SHORT_ONE);
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("o3PSe5tIO/`QV");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      long[] longArray0 = new long[12];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      try { 
        NumberUtils.createNumber("<h]gM>@$.dMk1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)101;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)101, short0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("ihB9_P<6J&b4+J5y");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("0X");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_153()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[3];
      intArray0[0] = (int) numberUtils0.INTEGER_ONE;
      intArray0[1] = (int) (short)numberUtils0.SHORT_ONE;
      intArray0[2] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      float[] floatArray0 = new float[16];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      try { 
        NumberUtils.createNumber("}&9F@R4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"}&9F@R4\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short) (-1), (short) numberUtils0.SHORT_ZERO, (short) (-3779));
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int int0 = NumberUtils.min(8, 8, 8);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short) (-25952);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-25952), short0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      short[] shortArray0 = new short[16];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_162()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.isNumber("org.apache.commons.lang3.reflect.ConstructorUtilsTest");
      int int0 = NumberUtils.toInt("+*");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("6hyMEg*_p3k'!l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("#S\"8mYQ(|");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("QB<<mkb%Dpif#^");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"QB<<mk\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      try { 
        NumberUtils.createNumber("em");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // em is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      try { 
        NumberUtils.createNumber("#(:(Ee69>g");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"(:(Ee69>g\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.toDouble("-0X");
      assertEquals(0.0, double0, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short) (-1), short0);
      
      float float0 = NumberUtils.toFloat("+");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.toDouble("-0X");
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      NumberUtils.max(shortArray0);
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("-0X");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"X\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.toDouble("0X#(:(Ee69>g", Double.NEGATIVE_INFINITY);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.isNumber("cwcnE6.");
      float float0 = NumberUtils.toFloat("");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_174()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[3] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[4] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[5] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[6] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[7] = (byte)5;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.max((byte) numberUtils0.BYTE_ZERO, (byte)46, (byte) numberUtils0.BYTE_ZERO);
      assertEquals((byte)46, byte0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)5, (byte)5, (byte)5);
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)70, (byte)70, (byte)32);
      assertEquals((byte)32, byte0);
  }
}
