/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 20:09:01 GMT 2023
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      try { 
        NumberUtils.createNumber("1e234E5");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1e234E5\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("..5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234E5l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-171644206);
      intArray0[1] = (-2146424730);
      intArray0[2] = 6;
      intArray0[3] = 57;
      intArray0[4] = 1428;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-2146424730), int0);
      
      boolean boolean0 = NumberUtils.isNumber("0xa");
      assertTrue(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 1428;
      longArray0[1] = (long) 57;
      longArray0[2] = (long) 57;
      longArray0[3] = 507L;
      longArray0[4] = (long) 57;
      longArray0[5] = (long) 1428;
      longArray0[6] = (long) (-171644206);
      longArray0[7] = (long) 6;
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-171644206L), long0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.1e34");
      assertEquals(1.0E33F, number0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.1L");
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 400.06901;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1008.4570821540138);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1008.4570821540138), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("123.4E21D");
      assertEquals(1.234E23, number0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      try { 
        NumberUtils.createNumber("q|z.nze5xqL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // q|z.nze5xqL is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1eE+00001");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0e");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0e is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-.1E700F");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      try { 
        NumberUtils.createNumber("toFloat(Float.MIN_VALUE) failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // toFloat(Float.MIN_VALUE) failed is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0EA");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0EA39`EaX&ttsVJ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0EA39`EaX&ttsVJ is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
      
      NumberUtils.isNumber("0x7fffffffffffffff");
      boolean boolean0 = NumberUtils.isNumber("0x7fffffffffffffff");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1l");
      assertEquals((-1L), number0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
      assertEquals((byte)0, bigInteger0.byteValue());
      
      boolean boolean0 = NumberUtils.isNumber("-123E2.12");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      try { 
        NumberUtils.createNumber("--#1l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // --#1l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1.E700");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-200");
      assertEquals(1.1E-200, number0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.9");
      assertEquals(0.9F, number0);
      
      boolean boolean0 = NumberUtils.isNumber("0.9");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xFADE");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      NumberUtils.isNumber("-0xj");
      Long long0 = new Long(12345L);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 12345L;
      floatArray0[1] = (float) 12345L;
      floatArray0[2] = (float) 12345L;
      boolean boolean0 = NumberUtils.isNumber("-0xj");
      assertFalse(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-2415);
      intArray0[1] = (-3398);
      intArray0[2] = 2;
      intArray0[3] = 1;
      intArray0[4] = 75;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(75, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("12345678901234567890L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1.1E-700F");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = NumberUtils.isNumber("0|Iqr{:jTUP");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 866.0F;
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      NumberUtils.isNumber("0x10{23J5678z");
      boolean boolean0 = NumberUtils.isNumber("0x10{23J5678z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x12345l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      NumberUtils.isNumber("-#47J");
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      NumberUtils.min(doubleArray0);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1373.5077F);
      floatArray0[1] = Float.NaN;
      floatArray0[2] = (-1566.46F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1701.0F);
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x123e56789");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      NumberUtils.isNumber("_");
      NumberUtils.isNumber("-0x");
      try { 
        NumberUtils.createNumber(")#!*V");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // )#!*V is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234.5d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-10.5);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
      
      NumberUtils.createInteger((String) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-115);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-115), byte0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      try { 
        NumberUtils.createNumber("zzJ04w)0.]Co:s1@<8x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // zzJ04w)0.]Co:s1@<8x is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-700");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      try { 
        NumberUtils.createNumber("&&|%F/MD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // &&|%F/MD is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-5");
      assertEquals((short) (-5), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      NumberUtils.max(floatArray0);
      Float float1 = NumberUtils.createFloat((String) null);
      assertNull(float1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1.");
      assertEquals((-1.0F), number0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      try { 
        NumberUtils.createNumber("OP_\"(\"Qm.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      try { 
        NumberUtils.createNumber("]aB[wYmGC1_~hB)Ee");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ]aB[wYmGC1_~hB)Ee is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      NumberUtils.isDigits("0x-Of;[VJ");
      NumberUtils.isDigits("0x-Of;[VJ");
      int[] intArray0 = new int[7];
      intArray0[0] = 69;
      intArray0[1] = (-2393);
      intArray0[2] = (-95731392);
      intArray0[3] = (-1431655764);
      intArray0[4] = 6;
      intArray0[5] = (-2216);
      intArray0[6] = 9;
      NumberUtils.max(intArray0);
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 69;
      longArray0[1] = (long) (-1431655764);
      longArray0[2] = (long) 9;
      longArray0[3] = (long) 9;
      NumberUtils.min(longArray0);
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
      
      NumberUtils.createLong((String) null);
      int[] intArray0 = new int[4];
      intArray0[0] = 76;
      intArray0[1] = 116;
      intArray0[2] = 97;
      intArray0[3] = 2993;
      NumberUtils.max(intArray0);
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("0v(1E;8u");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      longArray0[1] = (long) (short)numberUtils0.SHORT_ONE;
      longArray0[2] = (long) (byte)numberUtils0.BYTE_ZERO;
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1L), long0);
      
      NumberUtils.isNumber("jkou=>]");
      NumberUtils.createNumber((String) null);
      short short0 = NumberUtils.max((short)102, (short)102, (short)4);
      assertEquals((short)102, short0);
      
      short short1 = NumberUtils.toShort((String) null, (short)689);
      assertEquals((short)689, short1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.1E-700");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.7976931348623159e+308");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--e5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234.5f");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      try { 
        NumberUtils.createNumber("The Array must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      try { 
        NumberUtils.createNumber("u]3L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // u]3L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      NumberUtils.isNumber("dULw}T]}Pcs8C");
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 186.36977224;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(186.36977224, double0, 0.01);
      
      short short0 = NumberUtils.min((short)32, (short) (-248), (short) (-3167));
      assertEquals((short) (-3167), short0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)1101;
      NumberUtils.min((short)1101, (short)1101, (short)1101);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (byte)106;
      doubleArray0[1] = 5.699999809265137;
      doubleArray0[2] = (double) (byte)106;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(106.0, double0, 0.01);
      
      short short0 = NumberUtils.min((short) (byte)106, (short) (byte)106, (short)1379);
      assertEquals((short)106, short0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1234.5f");
      assertEquals(1234.5F, number0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("#");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null, (byte)99);
      assertEquals((byte)99, byte0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x1.3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x123456789");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x%sD~@yv0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      try { 
        NumberUtils.createNumber("--e5");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // --e5 is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      boolean boolean0 = NumberUtils.isNumber("Fa");
      NumberUtils.max((byte) numberUtils0.BYTE_ZERO, (byte)20, (byte)65);
      boolean boolean1 = NumberUtils.isNumber("Fa");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      boolean boolean0 = NumberUtils.isNumber("#1.23");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) numberUtils0.BYTE_MINUS_ONE;
      double double0 = NumberUtils.toDouble((String) null, 761.1110363);
      assertEquals(761.1110363, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1l");
      assertEquals(1L, number0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      NumberUtils.isNumber("0X1.23");
      float[] floatArray0 = new float[7];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      byte byte0 = NumberUtils.min((byte) (-18), (byte) (-18), (byte)109);
      assertEquals((byte) (-18), byte0);
      
      double double0 = NumberUtils.toDouble("0X1.23", (double) (byte)109);
      assertEquals(109.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)numberUtils0.SHORT_MINUS_ONE;
      doubleArray0[1] = (double) (short)numberUtils0.SHORT_MINUS_ONE;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
      
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
      
      short short0 = NumberUtils.max((short)987, (short)987, (short) (-3255));
      assertEquals((short)987, short0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = (-2168.0);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-2168.0), double0, 0.01);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)96;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-50), byte0);
      
      byte byte1 = NumberUtils.max(byteArray0);
      assertEquals((byte)114, byte1);
      
      float float0 = NumberUtils.toFloat("Wy>ml;KS#8<Bm");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.toByte("Array cannot be empty.", (byte) numberUtils0.BYTE_ZERO);
      assertEquals((byte)0, byte0);
      
      long long0 = NumberUtils.max((long) numberUtils0.LONG_MINUS_ONE, (long) numberUtils0.BYTE_ONE, 23L);
      assertEquals(23L, long0);
      
      long long1 = NumberUtils.min(1126L, (long) numberUtils0.BYTE_ZERO, 1L);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)numberUtils0.SHORT_ONE;
      longArray0[0] = (-3503L);
      NumberUtils.max(230L, 0L, (long) numberUtils0.INTEGER_ONE);
      String string0 = "%|PMz20Zn+o";
      // Undeclared exception!
      try { 
        NumberUtils.createInteger("%|PMz20Zn+o");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"%|PMz20Zn+o\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-isNumber(String) 7 failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -isNumber(String) 7 failed is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (int)numberUtils0.INTEGER_MINUS_ONE;
      floatArray0[1] = (-1446.9489F);
      floatArray0[3] = (float) (short)numberUtils0.SHORT_ONE;
      floatArray0[4] = (float) numberUtils0.FLOAT_ONE;
      floatArray0[5] = (float) (int)numberUtils0.INTEGER_ZERO;
      floatArray0[6] = (float) (short)numberUtils0.SHORT_MINUS_ONE;
      double double0 = NumberUtils.max((-1683.813002313603), (double) (-1.0F), (-1.1E200));
      assertEquals((-1.0), double0, 0.01);
      
      long long0 = NumberUtils.min((long) numberUtils0.BYTE_ZERO, 5L, (-218L));
      assertEquals((-218L), long0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.toByte("s0\"", (byte) numberUtils0.BYTE_ZERO);
      assertEquals((byte)0, byte0);
      
      long long0 = NumberUtils.max((long) numberUtils0.INTEGER_ZERO, 6775L, (long) numberUtils0.SHORT_ZERO);
      assertEquals(6775L, long0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long[] longArray0 = new long[2];
      short[] shortArray0 = new short[1];
      NumberUtils.min(shortArray0);
      int int0 = NumberUtils.toInt((String) null, (int) (short)0);
      assertEquals(0, int0);
      
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = 2253;
      int int0 = NumberUtils.min(2253, 2253, 2253);
      assertEquals(2253, int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int[] intArray0 = new int[12];
      intArray0[2] = (-1522);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1522), int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0XA blank string is not a valid number");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"XA blan\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = (-2342.2F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-2342.2F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("3");
      assertEquals((short)3, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-423ES.12");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -423ES.12 is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      try { 
        NumberUtils.createNumber("org.apache.commons.ang3.math.NumberUtils");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // org.apache.commons.ang3.math.NumberUtils is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("23s568");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      NumberUtils.max(Double.NaN, Double.NaN, (double) (byte)18);
      long long0 = NumberUtils.min((long) (byte)18, (long) (byte)18, (long) (byte)18);
      assertEquals(18L, long0);
      
      byte byte0 = NumberUtils.max((byte)12, (byte)12, (byte)12);
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.max((int) numberUtils0.SHORT_MINUS_ONE, (int) numberUtils0.BYTE_ONE, (int) numberUtils0.INTEGER_ONE);
      assertEquals(1, int0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) numberUtils0.DOUBLE_ZERO;
      doubleArray0[1] = (double) (int)numberUtils0.INTEGER_ONE;
      doubleArray0[2] = (double) (short)numberUtils0.SHORT_MINUS_ONE;
      doubleArray0[3] = (double) (short)numberUtils0.SHORT_ONE;
      doubleArray0[4] = (double) (short)numberUtils0.SHORT_ZERO;
      doubleArray0[5] = (double) (long)numberUtils0.LONG_ONE;
      doubleArray0[6] = (double) (int)numberUtils0.INTEGER_ZERO;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[1] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[2] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[3] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[4] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[5] = (byte) numberUtils0.BYTE_ZERO;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-1), byte0);
      
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1.0, double0, 0.01);
      
      Long long0 = NumberUtils.LONG_ZERO;
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) numberUtils0.SHORT_ONE;
      shortArray0[1] = (short) (-1856);
      shortArray0[2] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[3] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[4] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[5] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[6] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[7] = (short)1851;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1851, short0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-4331);
      shortArray0[1] = (short)3;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)3, short0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = (-344L);
      longArray0[1] = (-4306L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-4306L), long0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("3");
      assertEquals(3, number0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      try { 
        NumberUtils.createNumber("max(short[]) failed for array length 5");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1695;
      shortArray0[1] = (short) numberUtils0.SHORT_ONE;
      shortArray0[2] = (short) numberUtils0.SHORT_MINUS_ONE;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1), short0);
      
      int int0 = NumberUtils.min((int) numberUtils0.SHORT_ONE, (int) numberUtils0.SHORT_ZERO, (int) numberUtils0.SHORT_MINUS_ONE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("#-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (long)numberUtils0.LONG_MINUS_ONE;
      doubleArray0[2] = (double) numberUtils0.DOUBLE_ONE;
      doubleArray0[3] = (double) (byte)numberUtils0.BYTE_ZERO;
      doubleArray0[4] = (double) (byte)numberUtils0.BYTE_MINUS_ONE;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1.0, double0, 0.01);
      
      float float0 = NumberUtils.max(2023.5F, 2321.5408F, (float) numberUtils0.LONG_ZERO);
      assertEquals(2321.5408F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      float[] floatArray0 = new float[19];
      floatArray0[6] = 2211.2163F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(2211.2163F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Fa");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Fa is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("&&|%F/MD");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      longArray0[1] = (long) (byte)numberUtils0.BYTE_ONE;
      float float0 = NumberUtils.toFloat((String) null, 224.55392F);
      assertEquals(224.55392F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)numberUtils0.SHORT_ZERO;
      longArray0[1] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      longArray0[2] = (long) (byte)numberUtils0.BYTE_ONE;
      long[] longArray1 = new long[1];
      longArray1[0] = (long) (short)numberUtils0.SHORT_ZERO;
      NumberUtils.max(longArray1);
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1L, long0);
      
      byte byte0 = new Byte((byte) numberUtils0.BYTE_ONE);
      double double0 = NumberUtils.toDouble("b(hy!saaQ");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      NumberUtils.isNumber("x1iW!>|kHN*u>N");
      short short0 = NumberUtils.max((short)79, (short)79, (short)477);
      assertEquals((short)477, short0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-157.280639565);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)numberUtils0.BYTE_MINUS_ONE;
      int int0 = NumberUtils.max((int) numberUtils0.INTEGER_ZERO, (int) numberUtils0.SHORT_ONE, (int) numberUtils0.BYTE_ONE);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      try { 
        NumberUtils.createNumber("#'cBY6/gZt;pli");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"'cBY6/gZt;pli\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      longArray0[1] = (long) numberUtils0.LONG_ONE;
      longArray0[2] = (long) (int)numberUtils0.INTEGER_ONE;
      longArray0[3] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1L, long0);
      
      byte byte0 = NumberUtils.max((byte)99, (byte)99, (byte)59);
      assertEquals((byte)99, byte0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[2];
      longArray0[0] = (long) numberUtils0.LONG_ONE;
      longArray0[1] = (long) (byte)numberUtils0.BYTE_ONE;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(1L, long0);
      
      boolean boolean0 = NumberUtils.isDigits("No exception was thrown for empty input.");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[1] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[3] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[4] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[5] = (byte) numberUtils0.BYTE_ONE;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      long[] longArray0 = new long[10];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-GXF");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[1] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[3] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[4] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[5] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[6] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[7] = (byte) numberUtils0.BYTE_ONE;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-112);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-112), byte0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short)108, (short) (-10), (short) (-13));
      assertEquals((short)108, short0);
      
      byte byte0 = NumberUtils.min((byte) numberUtils0.BYTE_ZERO, (byte) numberUtils0.BYTE_MINUS_ONE, (byte) numberUtils0.BYTE_ONE);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[1] = 108;
      intArray0[2] = (int) (short)numberUtils0.SHORT_ONE;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(1, int0);
      
      boolean boolean0 = NumberUtils.isDigits("#1.23");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) numberUtils0.BYTE_ZERO;
      short short0 = NumberUtils.max((short)76, (short) numberUtils0.BYTE_ZERO, (short) (byte)0);
      assertEquals((short)76, short0);
      
      byte byte0 = NumberUtils.min((byte) numberUtils0.BYTE_ONE, (byte)0, (byte) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short)897, (short) numberUtils0.SHORT_ONE, (short) numberUtils0.SHORT_ONE);
      assertEquals((short)897, short0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_131()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)numberUtils0.BYTE_ONE;
      floatArray0[1] = (float) (long)numberUtils0.LONG_MINUS_ONE;
      floatArray0[2] = (float) (long)numberUtils0.LONG_MINUS_ONE;
      floatArray0[3] = (-1735.8F);
      floatArray0[4] = (float) (short)numberUtils0.SHORT_MINUS_ONE;
      floatArray0[5] = (float) (long)numberUtils0.LONG_ONE;
      floatArray0[6] = (float) (byte)numberUtils0.BYTE_ONE;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0X");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("u~PQg1rN");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_136()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      longArray0[1] = (long) numberUtils0.LONG_ONE;
      longArray0[2] = (long) (int)numberUtils0.INTEGER_ONE;
      longArray0[3] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      longArray0[4] = (long) (byte)numberUtils0.BYTE_ZERO;
      longArray0[5] = (long) (int)numberUtils0.INTEGER_ZERO;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1L, long0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[1] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[2] = (short) numberUtils0.SHORT_MINUS_ONE;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1905;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_139()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.max((byte)86, (byte) numberUtils0.BYTE_MINUS_ONE, (byte)60);
      assertEquals((byte)86, byte0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short) numberUtils0.SHORT_ONE, (short)16, (short) numberUtils0.SHORT_ONE);
      assertEquals((short)16, short0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_141()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float float0 = NumberUtils.toFloat("bJ(!EO:\"u", (float) numberUtils0.INTEGER_ONE);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_142()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) numberUtils0.DOUBLE_ONE;
      doubleArray0[1] = (double) (long)numberUtils0.LONG_MINUS_ONE;
      doubleArray0[2] = (double) numberUtils0.DOUBLE_ONE;
      doubleArray0[3] = (double) (byte)numberUtils0.BYTE_ZERO;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (byte)numberUtils0.BYTE_MINUS_ONE;
      double double0 = NumberUtils.min(doubleArray0);
      double double1 = NumberUtils.toDouble("thlE)~`,<&o#J", (double) numberUtils0.SHORT_MINUS_ONE);
      assertEquals(double1, double0, 0.01);
      assertEquals((-1.0), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (float)numberUtils0.FLOAT_ONE;
      doubleArray0[1] = (double) (byte)numberUtils0.BYTE_ZERO;
      doubleArray0[2] = (double) numberUtils0.DOUBLE_ONE;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[1] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[2] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[3] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)110;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)110, byte0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[1] = (byte)40;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)40, byte0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byte byte0 = NumberUtils.min((byte)0, (byte)0, (byte)0);
      byte byte1 = NumberUtils.min(byteArray0);
      assertTrue(byte1 == byte0);
      assertEquals((byte)0, byte1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      short short0 = NumberUtils.toShort("w9C7SP7E-pBA/S");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      try { 
        NumberUtils.createNumber("F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // F is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double double0 = NumberUtils.min(790.2, 790.2, (-1142.54056001));
      assertEquals((-1142.54056001), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.max((byte) numberUtils0.BYTE_ZERO, (byte)99, (byte)99);
      assertEquals((byte)99, byte0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("w9C7SP7E-pBA/S");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_156()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) numberUtils0.FLOAT_MINUS_ONE;
      floatArray0[1] = (float) (short)numberUtils0.SHORT_ZERO;
      floatArray0[2] = (float) numberUtils0.FLOAT_ZERO;
      floatArray0[3] = (float) (long)numberUtils0.LONG_MINUS_ONE;
      floatArray0[4] = (float) (int)numberUtils0.INTEGER_MINUS_ONE;
      floatArray0[5] = (float) (int)numberUtils0.INTEGER_MINUS_ONE;
      floatArray0[6] = (float) (byte)numberUtils0.BYTE_MINUS_ONE;
      floatArray0[7] = (float) (long)numberUtils0.LONG_ZERO;
      floatArray0[8] = (float) (short)numberUtils0.SHORT_MINUS_ONE;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      try { 
        NumberUtils.createNumber("e");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // e is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0X.UukVn");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-.UukVn\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_160()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)numberUtils0.SHORT_ZERO;
      intArray0[1] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[2] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[3] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[4] = (int) (short)numberUtils0.SHORT_ONE;
      intArray0[5] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[6] = 102;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(102, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[7];
      intArray0[0] = (int) numberUtils0.INTEGER_MINUS_ONE;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      float float0 = NumberUtils.min((-5131.139F), 1.23F, 1.6F);
      assertEquals((-5131.139F), float0, 0.01F);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1648;
      intArray0[1] = 32;
      intArray0[2] = 447;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1648, int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      long[] longArray0 = new long[19];
      longArray0[0] = (-2851L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[5];
      long[] longArray0 = new long[8];
      longArray0[0] = (long) numberUtils0.LONG_ZERO;
      longArray0[1] = (long) numberUtils0.LONG_ONE;
      longArray0[2] = (long) (byte)numberUtils0.BYTE_MINUS_ONE;
      longArray0[3] = (long) (byte)numberUtils0.BYTE_ONE;
      longArray0[4] = (long) (byte)numberUtils0.BYTE_ONE;
      longArray0[5] = 1126L;
      longArray0[6] = (long) numberUtils0.LONG_ONE;
      longArray0[7] = (long) (short)numberUtils0.SHORT_ONE;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1126L, long0);
      
      shortArray0[0] = (short) numberUtils0.SHORT_ONE;
      shortArray0[1] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[2] = (short) numberUtils0.SHORT_ONE;
      shortArray0[3] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[4] = (short) numberUtils0.SHORT_ONE;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      long[] longArray0 = new long[2];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("v(1E;8u");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"v(1E;8u\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_169()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.max((int) numberUtils0.BYTE_ONE, (-1051), 83);
      assertEquals(83, int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("-0X#Dl*'");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_171()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.toLong((String) null, (long) numberUtils0.LONG_MINUS_ONE);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_172()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.toDouble("Jg%fe`W);r] Y^@!)", (double) numberUtils0.BYTE_ZERO);
      assertEquals(0.0, double0, 0.01);
      
      long long0 = NumberUtils.toLong("Jg%fe`W);r] Y^@!)");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.toDouble("V*#@8qm", (double) numberUtils0.FLOAT_ZERO);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_174()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.toByte(":fG9UJLWtB.|");
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.toInt("rSkzn");
      assertEquals(0, int0);
      
      byte byte0 = NumberUtils.toByte(" <8~JbwS", (byte) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_176()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.min(4, (int) numberUtils0.INTEGER_ONE, (int) numberUtils0.BYTE_ONE);
      assertEquals(1, int0);
  }
}
