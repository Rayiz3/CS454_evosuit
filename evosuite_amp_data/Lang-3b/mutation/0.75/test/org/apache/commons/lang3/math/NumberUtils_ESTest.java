/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 20:11:14 GMT 2023
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0E4");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("23E.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        NumberUtils.createNumber("1.1Ec^e700");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-123E2.12");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("40E705");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234E5l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      NumberUtils.isNumber("-0x");
      long[] longArray0 = new long[4];
      longArray0[0] = (-3012L);
      longArray0[1] = 4474L;
      longArray0[2] = (-3357L);
      longArray0[3] = (-439L);
      NumberUtils.max(longArray0);
      NumberUtils.isNumber("0x1ab");
      try { 
        NumberUtils.createNumber("wut2C ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // wut2C  is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("011E700F");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0.lUDt.bpt~aw]~");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.lUDt.bpt~aw]~ is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("00E'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0.[|SOPBEj+<Y-V}}q");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.[|SOPBEj+<Y-V}}q is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1eE+00001");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.0");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      try { 
        NumberUtils.createNumber("TqfBY B_Tz0Ewr#T|");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // TqfBY B_Tz0Ewr#T| is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-123.4E21D");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("123.421D");
      assertEquals(123.421, number0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Number number0 = NumberUtils.createNumber(".0");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-{1l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -{1l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      short[] shortArray0 = new short[20];
      shortArray0[0] = (short) (-2371);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-2371), short0);
      
      NumberUtils.isNumber("-0x90X");
      boolean boolean0 = NumberUtils.isNumber("-0x90X");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1l");
      assertEquals((-1L), number0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234.5f");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      try { 
        NumberUtils.createNumber(".ng@BhVE0l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .ng@BhVE0l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("123.4E5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.7976931348623157e+308");
      assertEquals(1.7976931348623157E308, number0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      try { 
        NumberUtils.createNumber("toLong(Long.MAX_VALUE) failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // toLong(Long.MAX_VALUE) failed is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-1.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long[] longArray0 = new long[6];
      NumberUtils.max(longArray0);
      boolean boolean0 = NumberUtils.isNumber("0xf7W");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      try { 
        NumberUtils.createNumber("D");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // D is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1630.406F;
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xf7W");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xb");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      try { 
        NumberUtils.createNumber("|S7*})ax~8lfNWf");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // |S7*})ax~8lfNWf is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("12345l");
      assertEquals(12345L, number0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      try { 
        NumberUtils.createNumber("ikdSL!:4IWU+ e<mLL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ikdSL!:4IWU+ e<mLL is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1047.6270037193594;
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      try { 
        NumberUtils.createNumber("cre");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // cre is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("13.4E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      boolean boolean0 = NumberUtils.isNumber("0xb");
      assertTrue(boolean0);
      
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0xb");
      assertEquals((byte)11, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xgPZ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xDj^7=YZq");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1319.0;
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-221.23F");
      assertEquals((-221.23F), number0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("01.1E-700F");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
      
      NumberUtils.createBigInteger("0");
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)100;
      shortArray0[1] = (short)28;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)100;
      shortArray0[4] = (short)8;
      shortArray0[5] = (short)114;
      shortArray0[6] = (short)97;
      shortArray0[7] = (short) (-407);
      shortArray0[8] = (short)1643;
      NumberUtils.min(shortArray0);
      NumberUtils.createNumber("0");
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("12345l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int[] intArray0 = new int[12];
      intArray0[0] = 9;
      intArray0[1] = 2144;
      intArray0[2] = (-626);
      intArray0[3] = 120;
      intArray0[4] = (-2076);
      intArray0[5] = (-22);
      intArray0[6] = (-1073741822);
      NumberUtils.max(intArray0);
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-1");
      assertEquals((byte) (-1), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
      
      NumberUtils.isDigits("0");
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0X+k#tzniOAWWD9eAf");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      try { 
        NumberUtils.createNumber(".Xv1m5yBF2K");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .Xv1m5yBF2K is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      try { 
        NumberUtils.createNumber("d");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // d is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("ea");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("7Ev-fQ!j9y}RbLB");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      try { 
        NumberUtils.createNumber("]ipHmY!ERpvge");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ]ipHmY!ERpvge is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_ZERO;
      NumberUtils.isNumber("0~");
      Float float0 = NumberUtils.FLOAT_ZERO;
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-1e+0001");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte)73;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-121), byte0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte) (-119);
      floatArray0[1] = 1234.5F;
      floatArray0[2] = (float) (byte)73;
      floatArray0[3] = Float.NaN;
      floatArray0[4] = (float) (byte) (-119);
      floatArray0[5] = (float) (byte)6;
      floatArray0[6] = (float) (byte)123;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-901);
      shortArray0[1] = (short) (-127);
      shortArray0[2] = (short) (byte) (-72);
      shortArray0[3] = (short) (byte)73;
      shortArray0[4] = (short) (byte)84;
      shortArray0[5] = (short) (byte) (-121);
      shortArray0[6] = (short) (byte)6;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-901), short0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1052.1709F;
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      try { 
        NumberUtils.createNumber(" is not a valid number.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  is not a valid number. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      try { 
        NumberUtils.createNumber("CF'EI&R!@\"d");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // CF'EI&R!@\"d is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("102147483647L");
      assertEquals(102147483647L, number0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.max((int) numberUtils0.INTEGER_MINUS_ONE, (int) numberUtils0.BYTE_ONE, (-1127));
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("jU`%{t1xk(%mNW*?");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"jU`%{t1\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.createBigInteger((String) null);
      double[] doubleArray0 = new double[3];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      short[] shortArray0 = new short[2];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[3] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-1), byte0);
      
      shortArray0[0] = (short) numberUtils0.SHORT_ZERO;
      boolean boolean0 = NumberUtils.isDigits("--Q/Yl?|l (OI<");
      shortArray0[1] = (short) numberUtils0.SHORT_ONE;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1, short0);
      
      boolean boolean1 = NumberUtils.isNumber("-0x");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      try { 
        NumberUtils.createNumber("--F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // --F is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Integer integer0 = new Integer((-2109808495));
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)4;
      shortArray0[1] = (short)4;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-713);
      shortArray0[4] = (short) (-1);
      shortArray0[5] = (short)742;
      shortArray0[6] = (short)34;
      shortArray0[7] = (short)6;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-713), short0);
      
      NumberUtils.createNumber("-1.3");
      byte byte0 = NumberUtils.min((byte) (-127), (byte)17, (byte)54);
      assertEquals((byte) (-127), byte0);
      
      short short1 = NumberUtils.max(shortArray0);
      assertEquals((short)742, short1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[3];
      NumberUtils.min(doubleArray0);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[1] = (short) numberUtils0.SHORT_ONE;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1, short0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)numberUtils0.SHORT_MINUS_ONE;
      floatArray0[1] = (float) (short)0;
      floatArray0[2] = (float) (byte)numberUtils0.BYTE_ZERO;
      floatArray0[3] = (float) numberUtils0.FLOAT_MINUS_ONE;
      floatArray0[4] = (float) (short)1;
      floatArray0[5] = (float) (short)numberUtils0.SHORT_ZERO;
      floatArray0[6] = 0.0F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1.0F), float0, 0.01F);
      
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      float float1 = NumberUtils.max(floatArray0);
      assertEquals(1.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      try { 
        NumberUtils.createNumber("...");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      try { 
        NumberUtils.createNumber("', is neither of type Map.Entr nor an Array");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ', is neither of type Map.Entr nor an Array is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      try { 
        NumberUtils.createNumber("y9");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"y9\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0cVPc0vnu~aLJX.c_Z9");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[9];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
      
      NumberUtils.isNumber("-11");
      boolean boolean0 = NumberUtils.isNumber("-11");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-2075);
      shortArray0[1] = (short)2976;
      short short0 = NumberUtils.max((short) (-2075), (short)2976, (short) (-2075));
      assertEquals((short)2976, short0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234.5F");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createLong("'p@9dG");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"'p@9dG\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[2] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[3] = (short)82;
      shortArray0[4] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[5] = (short) numberUtils0.SHORT_MINUS_ONE;
      NumberUtils.min(shortArray0);
      long[] longArray0 = new long[9];
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)68;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)1, byte0);
      
      boolean boolean0 = NumberUtils.isNumber("-11");
      assertTrue(boolean0);
      
      long long0 = NumberUtils.toLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.max((int) numberUtils0.SHORT_MINUS_ONE, (-117427967), (int) numberUtils0.INTEGER_ZERO);
      NumberUtils.max((byte) (-47), (byte) (-47), (byte)104);
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("f");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"f\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1203);
      shortArray0[1] = (short)2;
      shortArray0[2] = (short)77;
      shortArray0[3] = (short)1028;
      short short0 = NumberUtils.min((short)2, (short)77, (short) (-1203));
      assertEquals((short) (-1203), short0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.isNumber("2UES=6Qba9_1QX|\r|");
      double double0 = NumberUtils.toDouble("FL ^~#Zf/ll$@R");
      assertEquals(0.0, double0, 0.01);
      
      long long0 = NumberUtils.toLong("e%+SnO5");
      assertEquals(0L, long0);
      
      byte byte0 = NumberUtils.toByte("#\"40YT3oJd-X", (byte) numberUtils0.BYTE_ZERO);
      assertEquals((byte)0, byte0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (byte)0;
      floatArray0[1] = (float) (byte)numberUtils0.BYTE_ZERO;
      floatArray0[2] = (float) (long)numberUtils0.LONG_ZERO;
      floatArray0[3] = (float) (byte)numberUtils0.BYTE_MINUS_ONE;
      floatArray0[4] = (float) (int)numberUtils0.INTEGER_ZERO;
      floatArray0[5] = (float) (int)numberUtils0.INTEGER_MINUS_ONE;
      floatArray0[6] = (float) (byte)numberUtils0.BYTE_ZERO;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.max((byte) numberUtils0.BYTE_ONE, (byte)55, (byte)55);
      assertEquals((byte)55, byte0);
      
      int int0 = NumberUtils.toInt((String) null, 100);
      assertEquals(100, int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)55;
      longArray0[1] = (long) 100;
      longArray0[2] = (long) numberUtils0.LONG_ONE;
      longArray0[3] = (long) (byte)numberUtils0.BYTE_ONE;
      longArray0[4] = (long) 100;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0X");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, 1343.86F);
      assertEquals(1343.86F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 4212L;
      long long0 = NumberUtils.max(4212L, 4212L, 4212L);
      assertEquals(4212L, long0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.max((-1610L), (long) numberUtils0.SHORT_ONE, 30L);
      assertEquals(30L, long0);
      
      short short0 = NumberUtils.toShort("H:gtBR]C~DDt-_X/BND", (short)36);
      assertEquals((short)36, short0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("0X#Jvw w~`}c");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"X\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.isNumber("plo6a)rd)O^'6F:EU");
      long long0 = NumberUtils.min(1L, 528L, (long) numberUtils0.LONG_ZERO);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 258L;
      long long0 = NumberUtils.min(258L, 258L, 258L);
      long long1 = NumberUtils.min(longArray0);
      assertTrue(long1 == long0);
      assertEquals(258L, long1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      float[] floatArray0 = new float[20];
      floatArray0[0] = 1.5F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (int)numberUtils0.INTEGER_ONE;
      int int0 = NumberUtils.min((int) numberUtils0.BYTE_ONE, (int) numberUtils0.BYTE_ZERO, (int) numberUtils0.SHORT_MINUS_ONE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      short short0 = NumberUtils.toShort("#");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short) numberUtils0.BYTE_ZERO, (short) numberUtils0.BYTE_ZERO, (short)2097);
      assertEquals((short)2097, short0);
      
      float float0 = NumberUtils.min(4016.7097F, (-4033.4F), (float) numberUtils0.FLOAT_ONE);
      assertEquals((-4033.4F), float0, 0.01F);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) (long)numberUtils0.LONG_ONE;
      doubleArray0[2] = (double) (short) (-102);
      doubleArray0[3] = (double) (short)2097;
      doubleArray0[4] = (double) (long)numberUtils0.LONG_ONE;
      doubleArray0[5] = (double) (float)numberUtils0.FLOAT_ONE;
      doubleArray0[6] = (double) (short)numberUtils0.SHORT_ONE;
      doubleArray0[7] = (double) (long)numberUtils0.LONG_MINUS_ONE;
      doubleArray0[8] = (double) (short)numberUtils0.SHORT_ZERO;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0x-1.3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Sign character in wrong position
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0xIpI=G~GfONZ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-IpI=G~GfONZ\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.toDouble((String) null);
      assertEquals(0.0, double0, 0.01);
      
      byte byte0 = NumberUtils.toByte("-#J\"Z?[&w-W!", (byte) numberUtils0.BYTE_ONE);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("1.2345");
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[0] = 6L;
      longArray0[1] = 6L;
      longArray0[2] = 6L;
      longArray0[3] = 6L;
      longArray0[4] = 6L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(6L, long0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-2766);
      intArray0[1] = (-1248);
      intArray0[2] = (-1073741823);
      intArray0[3] = (-3602);
      intArray0[4] = 1879048192;
      intArray0[5] = 1089;
      intArray0[6] = 2143256317;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(2143256317, int0);
      
      byte byte0 = NumberUtils.min((byte) (-1), (byte) (-1), (byte)36);
      assertEquals((byte) (-1), byte0);
      
      short short0 = NumberUtils.min((short) (byte) (-1), (short) (byte) (-1), (short)10);
      assertEquals((short) (-1), short0);
      
      byte byte1 = NumberUtils.toByte("yes?", (byte)17);
      assertEquals((byte)17, byte1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x#7a5q");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xIpI=G~GfONZ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = 2360.2F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(2360.2F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (-1550L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1550L), long0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)numberUtils0.BYTE_MINUS_ONE;
      doubleArray0[1] = (double) numberUtils0.DOUBLE_ONE;
      doubleArray0[2] = (double) (byte)numberUtils0.BYTE_ZERO;
      doubleArray0[3] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      doubleArray0[4] = (double) (byte)numberUtils0.BYTE_ONE;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (byte)numberUtils0.BYTE_ONE;
      longArray0[1] = 6L;
      longArray0[2] = (long) numberUtils0.LONG_MINUS_ONE;
      longArray0[3] = (long) (byte)numberUtils0.BYTE_MINUS_ONE;
      longArray0[4] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      longArray0[6] = (long) numberUtils0.LONG_MINUS_ONE;
      longArray0[7] = (-1179L);
      longArray0[8] = (long) numberUtils0.LONG_ONE;
      NumberUtils.min(longArray0);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1179L), long0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) numberUtils0.SHORT_ONE;
      shortArray0[1] = (short)5616;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)5616, short0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Integer integer0 = new Integer((-2109808495));
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-2109808495);
      longArray0[1] = (long) (-2109808495);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-2109808495L), long0);
      
      byte byte0 = NumberUtils.toByte((String) null, (byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.isNumber("plo6a)rd)O^'6F:EU");
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)numberUtils0.SHORT_ZERO;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (int) numberUtils0.INTEGER_ONE;
      intArray0[1] = (int) (byte)numberUtils0.BYTE_ZERO;
      intArray0[2] = (int) (short)numberUtils0.SHORT_ZERO;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
      
      float float0 = NumberUtils.toFloat("plo6a)rd)O^'6F:EU");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("#\"@o");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"@o\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("YjyE7.S");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createInteger("YjyE7.S");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"YjyE7.S\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      try { 
        NumberUtils.createNumber("K");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // K is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      try { 
        NumberUtils.createNumber(";naY$J8Y1BfliL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ;naY$J8Y1BfliL is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) numberUtils0.SHORT_ZERO;
      NumberUtils.min(shortArray0);
      Short short0 = new Short((short) numberUtils0.BYTE_MINUS_ONE);
      NumberUtils.min((byte)80, (byte) numberUtils0.BYTE_ONE, (byte)55);
      short[] shortArray1 = new short[1];
      shortArray1[0] = (short) numberUtils0.SHORT_ZERO;
      NumberUtils.max(shortArray1);
      // Undeclared exception!
      try { 
        NumberUtils.createDouble("Lk+i");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = NumberUtils.min(0, 0, 0);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-1.7976931348623157E308);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.isNumber("0~");
      NumberUtils.min((byte) numberUtils0.BYTE_MINUS_ONE, (byte) numberUtils0.BYTE_MINUS_ONE, (byte) (-82));
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_130()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (short)numberUtils0.SHORT_ONE;
      intArray0[1] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[2] = (int) numberUtils0.INTEGER_ZERO;
      intArray0[3] = (int) numberUtils0.INTEGER_MINUS_ONE;
      intArray0[4] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[5] = (int) numberUtils0.INTEGER_MINUS_ONE;
      intArray0[6] = (int) (short)numberUtils0.SHORT_ONE;
      intArray0[7] = 102;
      intArray0[8] = (int) (byte)numberUtils0.BYTE_ONE;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[1] = (short)247;
      shortArray0[2] = (short) (byte)numberUtils0.BYTE_ONE;
      boolean boolean0 = NumberUtils.isDigits("FALSE");
      assertFalse(boolean0);
      
      shortArray0[3] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[4] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[5] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[6] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[7] = (short) numberUtils0.SHORT_ZERO;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)247, short0);
      
      byte byte0 = NumberUtils.min((byte)43, (byte)43, (byte) (-61));
      assertEquals((byte) (-61), byte0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      boolean boolean0 = NumberUtils.isNumber("-11");
      assertTrue(boolean0);
      
      byte byte0 = NumberUtils.max((byte)1, (byte)1, (byte)55);
      assertEquals((byte)55, byte0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.max((byte) numberUtils0.BYTE_MINUS_ONE, (byte) numberUtils0.BYTE_ONE, (byte)56);
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("$tRQ`!aj)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"$tRQ`!aj)\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("1.2345");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      float float0 = NumberUtils.toFloat("--1eE+00001", 1.234E7F);
      assertEquals(1.234E7F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.max((byte)125, (byte) numberUtils0.BYTE_MINUS_ONE, (byte) numberUtils0.BYTE_ZERO);
      assertEquals((byte)125, byte0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.max((byte) numberUtils0.BYTE_MINUS_ONE, (byte) numberUtils0.BYTE_ZERO, (byte) numberUtils0.BYTE_ZERO);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)115;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)115, byte0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float float0 = NumberUtils.max(1234.5F, (-1284.1217F), 1746.23F);
      assertEquals(1746.23F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("org.apache.commons.lang3.math.NumberUtils");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.a\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[1] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[2] = (int) numberUtils0.INTEGER_MINUS_ONE;
      intArray0[3] = (int) numberUtils0.INTEGER_ONE;
      intArray0[4] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[5] = (int) (short)numberUtils0.SHORT_ZERO;
      intArray0[6] = (int) numberUtils0.INTEGER_ZERO;
      intArray0[7] = (int) (byte)numberUtils0.BYTE_ZERO;
      intArray0[8] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1, int0);
      
      byte byte0 = NumberUtils.min((byte) (-1), (byte) numberUtils0.BYTE_ZERO, (byte)36);
      assertEquals((byte) (-1), byte0);
      
      short short0 = NumberUtils.min((short)4813, (short)9, (short)84);
      assertEquals((short)9, short0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-1), byte0);
      
      short short0 = NumberUtils.min((short) numberUtils0.BYTE_MINUS_ONE, (short) (-2626), (short)114);
      assertEquals((short) (-2626), short0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 12345;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(12345, int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.min((short) (-3379), (short) numberUtils0.BYTE_ZERO, (short) (-1));
      assertEquals((short) (-3379), short0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      try { 
        NumberUtils.createNumber("max(byte[]) failed for array length 2");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 97;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 137L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(137L, long0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("--1eE+00001");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = NumberUtils.min(9, 9, 9);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[1] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[2] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[3] = (byte) numberUtils0.BYTE_ZERO;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)60;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("D;PJR'>3]Qi+T82(");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_157()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short)48, (short)48, (short) (-102));
      assertEquals((short)48, short0);
      
      float float0 = NumberUtils.min((-4033.4F), (float) numberUtils0.FLOAT_ONE, (-4789.96F));
      assertEquals((-4789.96F), float0, 0.01F);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)numberUtils0.BYTE_ZERO;
      doubleArray0[1] = (double) (-4789.96F);
      doubleArray0[2] = (double) (byte)numberUtils0.BYTE_MINUS_ONE;
      doubleArray0[3] = (-5.0);
      doubleArray0[4] = (double) (float)numberUtils0.FLOAT_ONE;
      doubleArray0[5] = (double) (short)48;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(48.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 5.1F;
      floatArray0[1] = (-506.309F);
      float float0 = NumberUtils.min((-506.309F), (-506.309F), (-506.309F));
      assertEquals((-506.309F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 775.09;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(775.09, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)214;
      short short0 = NumberUtils.max((short)214, (short)214, (short)214);
      assertEquals((short)214, short0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.toLong("-#");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.toDouble("-0X");
      assertEquals(0.0, double0, 0.01);
      
      long long0 = NumberUtils.toLong("createInteger(null) failed");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      long[] longArray0 = new long[7];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) numberUtils0.DOUBLE_ZERO;
      doubleArray0[1] = (double) (float)numberUtils0.FLOAT_ZERO;
      doubleArray0[2] = (double) (short)numberUtils0.SHORT_ONE;
      doubleArray0[3] = (double) (byte)numberUtils0.BYTE_MINUS_ONE;
      doubleArray0[4] = (double) numberUtils0.DOUBLE_ZERO;
      doubleArray0[5] = (double) (long)numberUtils0.LONG_ZERO;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)numberUtils0.SHORT_ZERO;
      longArray0[1] = (long) (short)numberUtils0.SHORT_ONE;
      NumberUtils.min(longArray0);
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[1] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[2] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[3] = (short)5616;
      shortArray0[4] = (short)288;
      shortArray0[5] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[6] = (short) numberUtils0.SHORT_ZERO;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)5616, short0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1e+0001");
      assertEquals((-10.0F), number0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_168()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.toInt("0");
      long long0 = NumberUtils.min((long) numberUtils0.BYTE_ONE, (long) numberUtils0.INTEGER_MINUS_ONE, (long) numberUtils0.BYTE_ZERO);
      assertEquals((-1L), long0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (short)numberUtils0.SHORT_ZERO;
      longArray0[1] = (long) (int)numberUtils0.INTEGER_ZERO;
      longArray0[2] = (long) numberUtils0.LONG_ZERO;
      longArray0[3] = (long) (byte)numberUtils0.BYTE_MINUS_ONE;
      longArray0[4] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      long long1 = NumberUtils.max(longArray0);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      long[] longArray0 = new long[5];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[5];
      long long0 = NumberUtils.min((long) numberUtils0.SHORT_ZERO, (long) numberUtils0.SHORT_MINUS_ONE, 0L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-954.800656396);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-954.800656396), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      short[] shortArray0 = new short[12];
      shortArray0[0] = (short) (-1);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_175()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.toDouble("0x1.23", (double) numberUtils0.LONG_ZERO);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_177()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.createBigInteger((String) null);
      double double0 = NumberUtils.min((double) numberUtils0.LONG_ONE, (-1118.7315017857702), 9.199999809265137);
      assertEquals((-1118.7315017857702), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)81;
      byte byte0 = NumberUtils.min((byte)81, (byte)81, (byte)81);
      assertEquals((byte)81, byte0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      float[] floatArray0 = new float[19];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_181()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.max((-10.5), 29.5617773901, (double) numberUtils0.LONG_MINUS_ONE);
      assertEquals(29.5617773901, double0, 0.01);
  }
}
