/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 12:03:48 GMT 2023
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thoughtworks.xstream.io.StreamException;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.csv.CSVRecord;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.testcarver.testcase.EvoSuiteXStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVRecord_ESTest extends CSVRecord_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String string0 = "org.apache.commons.csv.CSVRecord";
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, (Map<String, Integer>) null, "org.apache.commons.csv.CSVRecord", 501L);
      // Undeclared exception!
      try { 
        cSVRecord0.get("org.apache.commons.csv.CSVRecord");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No header mapping was specified, the record values can't be accessed by name
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-745));
      hashMap0.put("7pgL.1o2a/L?b_[nA", integer0);
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "7pgL.1o2a/L?b_[nA", (-1L));
      assertEquals("[]", cSVRecord0.toString());
      
      boolean boolean0 = cSVRecord0.isSet("7pgL.1o2a/L?b_[nA");
      assertEquals((-1L), cSVRecord0.getRecordNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "7pgL.1o2a/L?b_[nA", (-1401L));
      Integer integer0 = new Integer(400);
      hashMap0.putIfAbsent("7pgL.1o2a/L?b_[nA", integer0);
      cSVRecord0.isSet("7pgL.1o2a/L?b_[nA");
      // Undeclared exception!
      try { 
        cSVRecord0.get("MULTI_THREADED");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mapping for MULTI_THREADED not found, expected one of [7pgL.1o2a/L?b_[nA]
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(1343);
      hashMap0.put("7pgL.1o2a/L?b_[nA", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "7pgL.1o2a/L?b_[nA", 0L);
      boolean boolean0 = cSVRecord0.isSet("7pgL.1o2a/L?b_[nA");
      assertEquals("[null]", cSVRecord0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      hashMap0.put("", (Integer) null);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", (-1401L));
      // Undeclared exception!
      try { 
        cSVRecord0.isSet("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, (Map<String, Integer>) null, "<org.apache.commons.csv.CSVRecord>\n  <mappin>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </alues>\n</org.apache.commons.csv.CSVRecord>", (-2636L));
      boolean boolean0 = cSVRecord0.isSet("<org.apache.commons.csv.CSVRecord>\n  <mappin>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </alues>\n</org.apache.commons.csv.CSVRecord>");
      assertEquals("[]", cSVRecord0.toString());
      assertFalse(boolean0);
      assertEquals((-2636L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "7pgL.1o2a/L?b_[nA", (-1401L));
      Integer integer0 = new Integer(400);
      hashMap0.putIfAbsent("7pgL.1o2a/L?b_[nA", integer0);
      cSVRecord0.isMapped("7pgL.1o2a/L?b_[nA");
      // Undeclared exception!
      try { 
        cSVRecord0.get("7pgL.1o2a/L?b_[nA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index for header '7pgL.1o2a/L?b_[nA' is 400 but CSVRecord only has 1 values!
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "bD'rv";
      stringArray0[1] = "getAddress";
      stringArray0[2] = "first";
      stringArray0[3] = "{";
      stringArray0[4] = "iX%BBS5su'";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "getAddress", 1734L);
      cSVRecord0.toMap();
      // Undeclared exception!
      try { 
        cSVRecord0.get(1056);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1056
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "7pgL.1o2a/L?b_[nA", (-1401L));
      // Undeclared exception!
      try { 
        cSVRecord0.get("7pgL.1o2a/L?b_[nA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mapping for 7pgL.1o2a/L?b_[nA not found, expected one of []
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "7pgL_1oCa/L?b_[nA", (-1401L));
      boolean boolean0 = cSVRecord0.isConsistent();
      assertTrue(boolean0);
      assertEquals((-1401L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String string0 = "INDEX_NAME";
      hashMap0.put("INDEX_NAME", (Integer) null);
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "INDEX_NAME", 824L);
      // Undeclared exception!
      try { 
        cSVRecord0.toMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@4:Q*+JDFp|Ry%g,";
      stringArray0[1] = "fy[|@'+LrHUdA5&|";
      stringArray0[2] = "fy[|@'+LrHUdA5&|";
      stringArray0[3] = "fy[|@'+LrHUdA5&|";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "yfWJ", (-1L));
      boolean boolean0 = cSVRecord0.isConsistent();
      cSVRecord0.isConsistent();
      boolean boolean1 = cSVRecord0.isSet("@4:Q*+JDFp|Ry%g,");
      assertTrue(boolean1 == boolean0);
      
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals((-1L), long0);
      
      cSVRecord0.getComment();
      assertEquals((-1L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[3];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[2], (-1L));
      boolean boolean0 = cSVRecord0.isSet(stringArray0[2]);
      assertFalse(boolean0);
      assertEquals("[null, null, null]", cSVRecord0.toString());
      assertEquals((-1L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "bD'rv";
      stringArray0[1] = "getAddress";
      stringArray0[2] = "first";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "bD'rv", 0L);
      cSVRecord0.toMap();
      String string0 = cSVRecord0.toString();
      assertEquals("[bD'rv, getAddress, first, null, null, null]", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[2];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[1], (-1108L));
      cSVRecord0.iterator();
      boolean boolean0 = cSVRecord0.isMapped(stringArray0[1]);
      assertEquals(2, cSVRecord0.size());
      assertFalse(boolean0);
      assertEquals((-1108L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@4:Q*+JDFp|Ry%g,";
      stringArray0[1] = "fy[|@'+LrHUdA5&|";
      stringArray0[2] = "fy[|@'+LrHUdA5&|";
      stringArray0[3] = "fy[|@'+LrHUdA5&|";
      stringArray0[4] = "fy[|@'+LrHUdA5&|";
      stringArray0[5] = "fy[|@'+LrHUdA5&|";
      stringArray0[6] = "?U@LN0N4$|.p'GN7";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", 0L);
      String[] stringArray1 = cSVRecord0.values();
      assertEquals(9, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      long long0 = (-1495L);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "No header mapping was specified, the record values can't be accessed by name";
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "^Loa@>@MV.a;U", (-1495L));
      cSVRecord0.isConsistent();
      // Undeclared exception!
      try { 
        EvoSuiteXStream.fromString("");
        fail("Expecting exception: StreamException");
      
      } catch(StreamException e) {
         //
         // 
         //
         verifyException("com.thoughtworks.xstream.io.xml.XppReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[2];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[1], (-1097L));
      boolean boolean0 = cSVRecord0.isConsistent();
      assertEquals((-1097L), cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, ":O/pr;!AVM", 1407L);
      assertEquals(1407L, cSVRecord0.getRecordNumber());
      assertEquals("[]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, (Map<String, Integer>) null, "Gt+m# ;M3", 0L);
      boolean boolean0 = cSVRecord0.isConsistent();
      assertTrue(boolean0);
      assertEquals("[]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[1];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-2040109463));
      Integer integer1 = new Integer((-318));
      hashMap0.put("\rcA^4':orA.L\"^r8Kn", integer1);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "\rcA^4':orA.L\"^r8Kn", (-587L));
      cSVRecord0.size();
      cSVRecord0.isConsistent();
      cSVRecord0.isConsistent();
      boolean boolean0 = cSVRecord0.isConsistent();
      assertEquals((-587L), cSVRecord0.getRecordNumber());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[0];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "}$8.$PF4.q')", (-1401L));
      cSVRecord0.toMap();
      assertEquals((-1401L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[5];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[1], 23L);
      assertEquals(23L, cSVRecord0.getRecordNumber());
      assertFalse(cSVRecord0.isConsistent());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[2];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[1], (-1108L));
      boolean boolean0 = cSVRecord0.isMapped(stringArray0[1]);
      assertEquals((-1108L), cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
      assertEquals(2, cSVRecord0.size());
  }
}
