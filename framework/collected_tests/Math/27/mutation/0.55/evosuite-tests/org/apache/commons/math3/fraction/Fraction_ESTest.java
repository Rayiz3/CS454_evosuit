/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 17 00:02:52 GMT 2023
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thoughtworks.xstream.io.StreamException;
import org.apache.commons.math3.fraction.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.testcarver.testcase.EvoSuiteXStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = 3;
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE, 3);
      Fraction fraction1 = fraction0.divide(3);
      // Undeclared exception!
      try { 
        fraction0.add(fraction1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: -8,589,934,592
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      // Undeclared exception!
      try { 
        fraction0.ONE_QUARTER.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      // Undeclared exception!
      try { 
        fraction0.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, 3);
      assertEquals(0, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.ONE_THIRD;
      Fraction fraction2 = new Fraction((-0.1));
      Fraction fraction3 = new Fraction(1.0E-6);
      Fraction fraction4 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction5 = fraction0.divide(fraction1);
      Fraction fraction6 = new Fraction(Integer.MIN_VALUE);
      fraction0.equals(fraction5);
      Fraction fraction7 = new Fraction(1, 1);
      Fraction fraction8 = Fraction.TWO;
      fraction4.multiply(fraction1);
      Fraction fraction9 = Fraction.ONE_HALF;
      // Undeclared exception!
      try { 
        fraction6.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-618));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-618, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = Fraction.TWO_FIFTHS;
      Fraction fraction2 = fraction0.TWO_FIFTHS.subtract(fraction1);
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      
      String string0 = fraction0.toString();
      assertEquals("1 / 2", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = new Fraction(75.0);
      assertEquals((short)75, fraction0.shortValue());
      
      Fraction fraction1 = new Fraction(2.9298734092852996E-5);
      Fraction fraction2 = Fraction.TWO_THIRDS;
      Fraction fraction3 = new Fraction((-1198));
      Fraction fraction4 = new Fraction(7.173647059062205E-4);
      Fraction fraction5 = Fraction.TWO_THIRDS;
      fraction4.ONE_THIRD.multiply(fraction5);
      Fraction fraction6 = Fraction.THREE_QUARTERS;
      fraction6.divide(fraction6);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Fraction fraction7 = new Fraction((-1198));
      fraction7.equals(fraction3);
      Fraction fraction8 = new Fraction((-1198), (-1198));
      Fraction fraction9 = Fraction.ONE;
      fraction0.multiply(fraction9);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction9.equals(fraction1);
      String string0 = "<(e.7jg.%A1p(cD7\\6";
      // Undeclared exception!
      try { 
        EvoSuiteXStream.fromString("<(e.7jg.%A1p(cD7\u0006");
        fail("Expecting exception: StreamException");
      
      } catch(StreamException e) {
         //
         // 
         //
         verifyException("com.thoughtworks.xstream.io.xml.XppReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = new Fraction(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = null;
      try {
        fraction1 = new Fraction((-1066.1403), (-1066.1403), 3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert -1,066.14 to fraction after 3 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = Fraction.ONE_FIFTH;
      Fraction fraction2 = fraction0.FOUR_FIFTHS.add(fraction1);
      assertEquals(1L, fraction2.longValue());
      
      Fraction fraction3 = fraction0.divide(fraction0);
      assertTrue(fraction3.equals((Object)fraction2));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = new Fraction(75.0);
      Fraction fraction1 = new Fraction((-1198));
      Fraction fraction2 = new Fraction(75.0);
      Fraction fraction3 = Fraction.TWO_THIRDS;
      fraction2.ONE_THIRD.multiply(fraction3);
      fraction0.divide(fraction0);
      Fraction fraction4 = new Fraction((-1198));
      fraction4.equals(fraction1);
      Fraction fraction5 = new Fraction((-1198), (-1198));
      Fraction fraction6 = Fraction.TWO;
      Fraction fraction7 = new Fraction(2.9298734092852996E-5);
      Fraction fraction8 = null;
      try {
        fraction8 = new Fraction((double) (-1198), (-3213));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -1,198 to fraction (1,199/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = new Fraction(75.0);
      Fraction fraction1 = new Fraction(500.0);
      fraction1.TWO_THIRDS.subtract(fraction0);
      Fraction fraction2 = new Fraction((-1.0));
      Fraction fraction3 = new Fraction(0.0);
      Fraction fraction4 = new Fraction((-0.1));
      Fraction fraction5 = new Fraction((-242343.0));
      int int0 = Integer.MIN_VALUE;
      Fraction fraction6 = new Fraction(Integer.MIN_VALUE);
      fraction6.ONE_QUARTER.toString();
      Fraction fraction7 = new Fraction(Integer.MIN_VALUE);
      fraction4.toString();
      Fraction fraction8 = new Fraction(1758.6389236161);
      Fraction fraction9 = new Fraction(7.895010512681822E-5);
      Fraction fraction10 = new Fraction(44.0);
      Fraction fraction11 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        EvoSuiteXStream.fromString("1 / 4");
        fail("Expecting exception: StreamException");
      
      } catch(StreamException e) {
         //
         // 
         //
         verifyException("com.thoughtworks.xstream.io.xml.XppReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.TWO.multiply(fraction1);
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.ONE_THIRD;
      Fraction fraction2 = new Fraction(Integer.MIN_VALUE);
      fraction0.equals(fraction0);
      Fraction fraction3 = new Fraction(1, 1);
      Fraction fraction4 = Fraction.ZERO;
      Fraction fraction5 = fraction1.add(fraction1);
      fraction1.TWO_THIRDS.add(fraction4);
      String string0 = fraction1.toString();
      assertEquals("1 / 3", string0);
      
      int int0 = fraction0.compareTo(fraction5);
      assertEquals((-1), int0);
      assertEquals(0.6666667F, fraction5.floatValue(), 0.01F);
      
      Fraction fraction6 = fraction1.negate();
      Fraction fraction7 = fraction1.multiply(fraction0);
      assertFalse(fraction1.equals((Object)fraction6));
      assertEquals(0.1111111111111111, fraction7.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.MINUS_ONE.abs();
      assertEquals(1.0, fraction1.doubleValue(), 0.01);
      
      Fraction fraction2 = fraction0.negate();
      assertEquals((byte)0, fraction2.byteValue());
      assertEquals(5, fraction2.getDenominator());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = Fraction.FOUR_FIFTHS;
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      fraction2.ZERO.subtract((-1208));
      Fraction fraction3 = new Fraction(75.0);
      fraction3.ONE_QUARTER.reciprocal();
      Fraction fraction4 = new Fraction(0.0);
      Fraction fraction5 = new Fraction((-0.35861751187445357));
      Fraction fraction6 = new Fraction((-242343.0));
      Fraction fraction7 = fraction6.MINUS_ONE.divide(fraction5);
      Fraction fraction8 = new Fraction(500.0);
      Fraction fraction9 = new Fraction(100.0);
      Fraction fraction10 = new Fraction(3186.142);
      Fraction fraction11 = new Fraction(100.0);
      Fraction fraction12 = Fraction.ZERO;
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Fraction fraction13 = Fraction.ONE;
      fraction13.equals(fraction7);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction7.equals(fraction9);
      Fraction fraction14 = Fraction.TWO_FIFTHS;
      Object object0 = new Object();
      fraction14.equals(object0);
      int int0 = fraction10.getDenominator();
      assertEquals(331, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction1.divide(fraction0);
      assertEquals(0, fraction2.getNumerator());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = Fraction.TWO_FIFTHS;
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction(0.0);
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction9 = new Fraction(332.0);
      Fraction fraction10 = new Fraction((-2323.0));
      Fraction fraction11 = new Fraction(44.0);
      Fraction fraction12 = new Fraction(0.8854610109624285);
      assertEquals(0.8854626F, fraction12.floatValue(), 0.01F);
      
      Fraction fraction13 = Fraction.ONE_HALF;
      Fraction fraction14 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction15 = fraction5.abs();
      assertSame(fraction15, fraction5);
      assertTrue(fraction15.equals((Object)fraction6));
      
      fraction13.equals(fraction14);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object1);
      Fraction fraction16 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction17 = fraction4.negate();
      assertEquals((-1), fraction4.getNumerator());
      assertEquals((byte)1, fraction17.byteValue());
      assertFalse(fraction17.equals((Object)fraction4));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.divide(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(105.23524960509314);
      Fraction fraction2 = new Fraction(1.0E-5);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-0.1));
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction9 = new Fraction(332.0);
      Fraction fraction10 = new Fraction((-2323.0));
      Fraction fraction11 = new Fraction(44.0);
      Fraction fraction12 = new Fraction(0.14105493975973393);
      Fraction fraction13 = Fraction.ZERO;
      Fraction fraction14 = new Fraction((double) Integer.MAX_VALUE);
      fraction9.equals(fraction11);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction11.equals(fraction0);
      // Undeclared exception!
      try { 
        EvoSuiteXStream.fromString("");
        fail("Expecting exception: StreamException");
      
      } catch(StreamException e) {
         //
         // 
         //
         verifyException("com.thoughtworks.xstream.io.xml.XppReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(927, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 927/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = new Fraction(35.8001068365079);
      Fraction fraction1 = new Fraction(518.6132973543852);
      Fraction fraction2 = new Fraction((-1.0));
      Fraction fraction3 = new Fraction(0.0);
      Fraction fraction4 = new Fraction((-0.1));
      assertEquals(10, fraction4.getDenominator());
      
      Fraction fraction5 = new Fraction((-242343.0));
      Fraction fraction6 = new Fraction(0.0);
      Fraction fraction7 = new Fraction(44.0);
      Fraction fraction8 = new Fraction(44.0);
      Fraction fraction9 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction9.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction9.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction9.equals(object2);
      Object object3 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      boolean boolean0 = fraction9.equals(object3);
      assertFalse(boolean0);
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Fraction fraction10 = Fraction.getReducedFraction((-2840), (-18159));
      assertEquals(0.1563962773280467, fraction10.doubleValue(), 0.01);
      assertEquals(2840, fraction10.getNumerator());
      
      float float0 = fraction7.floatValue();
      assertEquals(44.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void testRemovetestRemovetestRemovetestRemove_27()  throws Throwable  {
      Fraction fraction0 = new Fraction(75.0);
      Fraction fraction1 = new Fraction(500.0);
      Fraction fraction2 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction3 = new Fraction((-1.0));
      Fraction fraction4 = new Fraction(0.0);
      Fraction fraction5 = fraction4.ONE_FIFTH.reciprocal();
      assertEquals((byte)5, fraction5.byteValue());
      
      Fraction fraction6 = new Fraction((-0.1));
      Fraction fraction7 = new Fraction((-242343.0));
      assertEquals(1, fraction7.getDenominator());
      
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      String string0 = fraction8.ONE_QUARTER.toString();
      assertEquals("1 / 4", string0);
      
      Fraction fraction9 = new Fraction(0.0);
      Fraction fraction10 = new Fraction(44.0);
      Fraction fraction11 = new Fraction(0.8854610109624285);
      assertEquals(201, fraction11.getNumerator());
      
      Fraction fraction12 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object2);
      Object object3 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      boolean boolean0 = fraction12.equals(object3);
      assertFalse(boolean0);
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      int int0 = fraction0.getNumerator();
      assertEquals(75, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      // Undeclared exception!
      try { 
        fraction0.TWO_QUARTERS.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      // Undeclared exception!
      try { 
        fraction0.divide(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 2/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = null;
      try {
        fraction1 = new Fraction(8.0E298);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 80,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = new Fraction(75.0);
      Fraction fraction1 = new Fraction(500.0);
      Fraction fraction2 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction3 = new Fraction((-1.0));
      Fraction fraction4 = new Fraction(0.0);
      Fraction fraction5 = new Fraction((-0.1));
      assertEquals(10, fraction5.getDenominator());
      
      Fraction fraction6 = new Fraction((-242343.0));
      Fraction fraction7 = new Fraction(Integer.MAX_VALUE);
      assertEquals(2.147483647E9, fraction7.doubleValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, fraction7.getNumerator());
      
      Fraction fraction8 = new Fraction(0.0);
      Fraction fraction9 = new Fraction(44.0);
      Fraction fraction10 = new Fraction(0.8854610109624285);
      Fraction fraction11 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction11.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction11.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      boolean boolean0 = fraction11.equals(object2);
      assertFalse(boolean0);
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      int int0 = fraction3.intValue();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = new Fraction(75.0);
      Fraction fraction1 = new Fraction(500.0);
      Fraction fraction2 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction3 = new Fraction((-1.0));
      fraction2.ONE_THIRD.subtract(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction(0.0);
      Fraction fraction5 = Fraction.ONE_THIRD;
      fraction2.equals(fraction5);
      // Undeclared exception!
      try { 
        fraction4.ONE_HALF.add(fraction2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // arithmetic exception
         //
         verifyException("org.apache.commons.math3.util.ArithmeticUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-0.1));
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = new Fraction(332.0);
      Fraction fraction9 = new Fraction((-2323.0));
      Fraction fraction10 = new Fraction(44.0);
      Fraction fraction11 = new Fraction(0.885461);
      Fraction fraction12 = Fraction.ZERO;
      Fraction fraction13 = new Fraction(75.0);
      boolean boolean0 = fraction12.equals(fraction13);
      assertFalse(boolean0);
      assertFalse(fraction12.equals((Object)fraction6));
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction3.longValue();
      Fraction fraction14 = fraction9.subtract(Integer.MAX_VALUE);
      assertEquals(2147481326, fraction14.getNumerator());
      
      Fraction fraction15 = fraction13.multiply(fraction7);
      assertTrue(fraction13.equals((Object)fraction1));
      assertEquals(1, fraction15.getDenominator());
      assertEquals((short) (-22253), fraction15.shortValue());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      fraction0.ONE_FIFTH.subtract(Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.divide(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 0/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.TWO.subtract(fraction1);
      assertEquals((byte)2, fraction2.byteValue());
      
      String string0 = fraction0.toString();
      assertEquals("2 / 3", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      Fraction fraction1 = Fraction.MINUS_ONE;
      Fraction fraction2 = fraction1.ZERO.add(fraction0);
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(0, int0);
      assertSame(fraction1, fraction2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = Fraction.ONE_FIFTH;
      fraction0.ZERO.subtract(fraction1);
      // Undeclared exception!
      try { 
        fraction0.divide(Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.negate();
      assertEquals((-3), fraction1.getNumerator());
      assertEquals((-0.6), fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      double double0 = fraction0.ONE_QUARTER.percentageValue();
      assertEquals(25.0, double0, 0.01);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      assertEquals(0L, fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (2,147,483,649/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(2147483632, 2147483632);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2147483633), (-2147483633));
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1861), (-1861));
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.ONE_FIFTH.divide(fraction0);
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0.8F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.abs();
      assertEquals(0.6666667F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void testRemovetestRemove_47()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, fraction3.getNumerator());
      
      Fraction fraction4 = new Fraction(0.0);
      Fraction fraction5 = new Fraction((-0.1));
      fraction5.TWO.getField();
      assertEquals(10, fraction5.getDenominator());
      
      Fraction fraction6 = new Fraction((-242343.0));
      Fraction fraction7 = new Fraction(Integer.MIN_VALUE);
      assertEquals((-2147483648L), fraction7.longValue());
      
      Fraction fraction8 = new Fraction(332.0);
      Fraction fraction9 = new Fraction((-2323.0));
      Fraction fraction10 = new Fraction(44.0);
      Fraction fraction11 = new Fraction(0.8854610109624285);
      Fraction fraction12 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      boolean boolean0 = fraction12.equals(object2);
      assertFalse(boolean0);
      
      Fraction fraction13 = new Fraction(100.0);
      fraction12.equals(fraction13);
      assertTrue(fraction13.equals((Object)fraction0));
      assertTrue(fraction12.equals((Object)fraction4));
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction8.hashCode();
      assertFalse(fraction8.equals((Object)fraction12));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.MINUS_ONE;
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      String string0 = fraction0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      fraction0.TWO_THIRDS.getField();
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.ONE_THIRD;
      Fraction fraction2 = fraction0.THREE_QUARTERS.subtract(fraction1);
      assertEquals(12, fraction2.getDenominator());
      assertEquals(0.4166666666666667, fraction2.doubleValue(), 0.01);
      
      Fraction fraction3 = Fraction.ONE_QUARTER;
      assertFalse(fraction3.equals((Object)fraction2));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = Fraction.ONE_FIFTH;
      Fraction fraction2 = fraction1.FOUR_FIFTHS.subtract(fraction0);
      assertEquals(0.6F, fraction2.floatValue(), 0.01F);
      
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.TWO.abs();
      Fraction fraction2 = fraction1.TWO_THIRDS.add(fraction0);
      assertEquals(2.6666667F, fraction2.floatValue(), 0.01F);
      
      int int0 = fraction0.compareTo(fraction0);
      assertSame(fraction0, fraction1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) (-2147483620), (-2147483620));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,620 to fraction (2,147,483,621/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = new Fraction(2264.3233634655, 2724);
      assertEquals(4012381, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.ONE_QUARTER.add((-1073741824));
      assertEquals(1, fraction1.getNumerator());
      assertEquals(0.25F, fraction1.floatValue(), 0.01F);
      
      String string0 = fraction0.toString();
      assertEquals("1 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = new Fraction(500.0);
      Fraction fraction1 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction2 = new Fraction((-1.0));
      Fraction fraction3 = new Fraction(0.0);
      Fraction fraction4 = new Fraction((-0.1));
      Fraction fraction5 = new Fraction((-242343.0));
      Fraction fraction6 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction7 = new Fraction(332.0);
      Fraction fraction8 = new Fraction((-2323.0));
      Fraction fraction9 = new Fraction(44.0);
      Fraction fraction10 = new Fraction(0.8854610109624285);
      fraction10.ONE_FIFTH.add(1);
      Fraction fraction11 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction11.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction11.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction11.equals(object2);
      Object object3 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction11.equals(object3);
      Object object4 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      assertTrue(object4.equals((Object)object3));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.ONE_THIRD;
      Fraction fraction2 = new Fraction(1.0E-6);
      Fraction fraction3 = new Fraction(Integer.MIN_VALUE);
      assertEquals((-2.147483648E9), fraction3.doubleValue(), 0.01);
      
      Fraction fraction4 = fraction0.divide(fraction1);
      Fraction fraction5 = new Fraction(Integer.MIN_VALUE);
      assertTrue(fraction5.equals((Object)fraction3));
      
      boolean boolean0 = fraction0.equals(fraction4);
      assertEquals(1.0F, fraction4.floatValue(), 0.01F);
      assertFalse(fraction4.equals((Object)fraction1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = new Fraction(1.0E-6);
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
      
      Fraction fraction2 = new Fraction(1, 1);
      Fraction fraction3 = Fraction.ZERO;
      Fraction fraction4 = fraction0.add(fraction1);
      fraction1.toString();
      int int0 = fraction0.compareTo(fraction4);
      assertEquals(0, int0);
      assertTrue(fraction1.equals((Object)fraction3));
      
      Fraction fraction5 = fraction0.multiply(fraction0);
      assertSame(fraction0, fraction4);
      assertEquals(9, fraction5.getDenominator());
      assertEquals(0.11111111F, fraction5.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = new Fraction((-366));
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-366L), fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      String string0 = fraction0.toString();
      assertEquals("1", string0);
      
      boolean boolean0 = fraction0.equals("1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = new Fraction(76.8140160787612);
      assertEquals(371, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      String string0 = fraction0.toString();
      assertEquals("1 / 2", string0);
  }
}
