/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 23:33:37 GMT 2023
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thoughtworks.xstream.io.StreamException;
import org.apache.commons.math3.fraction.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.testcarver.testcase.EvoSuiteXStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-2147483615), 634);
      Fraction.getReducedFraction((-2147483615), (-2147483615));
      Fraction fraction1 = Fraction.TWO_FIFTHS;
      Fraction fraction2 = fraction1.THREE_QUARTERS.abs();
      // Undeclared exception!
      try { 
        fraction2.THREE_QUARTERS.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: -4,294,966,279
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      // Undeclared exception!
      try { 
        fraction0.TWO_QUARTERS.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = new Fraction(114.07829207288);
      Fraction fraction1 = Fraction.TWO_FIFTHS;
      Fraction fraction2 = new Fraction(1.0E-5);
      Fraction fraction3 = Fraction.ONE;
      Fraction fraction4 = Fraction.ONE_QUARTER;
      String string0 = fraction2.toString();
      assertEquals("1 / 99999", string0);
      
      Fraction fraction5 = new Fraction(0.9557788068786977);
      int int0 = fraction5.compareTo(fraction3);
      assertEquals((-1), int0);
      
      boolean boolean0 = fraction3.equals(fraction4);
      assertFalse(fraction4.equals((Object)fraction3));
      assertFalse(boolean0);
      
      Fraction fraction6 = fraction3.negate();
      assertFalse(fraction6.equals((Object)fraction3));
      assertEquals((-1.0), fraction6.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      double double0 = fraction0.TWO_QUARTERS.percentageValue();
      assertEquals(50.0, double0, 0.01);
      
      Fraction fraction1 = fraction0.ONE_QUARTER.subtract(fraction0);
      assertEquals((-99.75), fraction1.doubleValue(), 0.01);
      
      fraction0.equals(fraction0);
      String string0 = fraction0.toString();
      assertEquals("100", string0);
      
      Fraction fraction2 = Fraction.getReducedFraction(662, 2);
      assertEquals(1, fraction2.getDenominator());
      assertEquals((byte)75, fraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(2631.95504442268, Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 2,631.955 to fraction after -2,147,483,648 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, 183);
      assertEquals(0.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      // Undeclared exception!
      try { 
        fraction0.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      // Undeclared exception!
      try { 
        fraction0.MINUS_ONE.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.TWO_QUARTERS.multiply(fraction1);
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      
      String string0 = fraction0.toString();
      assertEquals("1 / 2", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-1), (-1));
      Fraction fraction1 = new Fraction(24);
      Fraction fraction2 = Fraction.ONE_QUARTER;
      Fraction fraction3 = fraction2.ONE_HALF.reciprocal();
      assertFalse(fraction3.equals((Object)fraction0));
      
      fraction2.equals(fraction0);
      assertFalse(fraction0.equals((Object)fraction3));
      assertEquals(1, fraction0.getDenominator());
      assertFalse(fraction0.equals((Object)fraction2));
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      
      String string0 = fraction2.toString();
      assertEquals("1 / 4", string0);
      
      Fraction fraction4 = Fraction.ONE_FIFTH;
      assertFalse(fraction4.equals((Object)fraction2));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      double double0 = fraction0.TWO_QUARTERS.percentageValue();
      assertEquals(50.0, double0, 0.01);
      
      Fraction fraction1 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction2 = new Fraction(100.0);
      Fraction fraction3 = fraction2.ONE_QUARTER.subtract(fraction0);
      assertEquals((-99.75), fraction3.doubleValue(), 0.01);
      
      boolean boolean0 = fraction0.equals(fraction2);
      assertTrue(boolean0);
      
      String string0 = fraction2.toString();
      assertEquals("100", string0);
      
      Fraction fraction4 = Fraction.getReducedFraction(662, 2);
      assertFalse(fraction4.equals((Object)fraction0));
      assertEquals(331, fraction4.getNumerator());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.reciprocal();
      Fraction fraction2 = fraction1.ZERO.add(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(4.0F, fraction1.floatValue(), 0.01F);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      assertSame(fraction0, fraction2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = Fraction.FOUR_FIFTHS;
      Fraction fraction2 = fraction0.ZERO.subtract(fraction1);
      assertEquals((-4), fraction2.getNumerator());
      assertEquals((-0.8), fraction2.doubleValue(), 0.01);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(2753, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 2,753/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.MINUS_ONE.subtract(fraction1);
      assertEquals((-1), fraction2.getNumerator());
      
      String string0 = fraction0.toString();
      assertEquals("1 / 3", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-2225));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,225, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = new Fraction(75.0);
      Fraction fraction1 = new Fraction(500.0);
      Fraction fraction2 = new Fraction((-2147483609));
      Fraction fraction3 = new Fraction((-1.0));
      Fraction fraction4 = fraction3.ONE_THIRD.abs();
      assertEquals(0.33333334F, fraction4.floatValue(), 0.01F);
      
      Fraction fraction5 = Fraction.getReducedFraction((-2147483609), (-2147483609));
      Fraction fraction6 = new Fraction(500.0);
      Fraction fraction7 = new Fraction(0.8);
      Fraction fraction8 = fraction7.ZERO.abs();
      Fraction fraction9 = new Fraction((double) (-2147483609));
      Fraction fraction10 = Fraction.getReducedFraction(282, 2147483646);
      assertEquals(1.3131648314308048E-7, fraction10.doubleValue(), 0.01);
      
      Fraction fraction11 = new Fraction((double) (-2147483609));
      Fraction fraction12 = new Fraction(5.0864215495494136E-5, 8);
      Fraction fraction13 = fraction12.divide(fraction3);
      assertSame(fraction13, fraction8);
      
      Fraction fraction14 = fraction5.divide(fraction1);
      assertEquals(1, fraction5.getNumerator());
      assertEquals(0.002, fraction14.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) Integer.MIN_VALUE);
      assertEquals((-2147483648L), fraction0.longValue());
      
      fraction0.toString();
      Fraction fraction1 = null;
      try {
        fraction1 = new Fraction(4.503599627370496E15, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 4,503,599,627,370,496 to fraction (4,503,599,627,370,496/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = new Fraction(200.89809057);
      Fraction fraction1 = fraction0.TWO.multiply((-1423));
      assertEquals((byte) (-30), fraction1.byteValue());
      
      Fraction fraction2 = new Fraction(1.0);
      assertEquals(1L, fraction2.longValue());
      
      Fraction fraction3 = fraction0.divide(1664);
      Fraction fraction4 = fraction2.subtract(fraction0);
      Fraction fraction5 = new Fraction((-1182));
      Fraction fraction6 = Fraction.ONE;
      Fraction fraction7 = Fraction.MINUS_ONE;
      Fraction fraction8 = new Fraction(1664);
      Fraction fraction9 = new Fraction((-8.175448336607664));
      Fraction fraction10 = fraction5.negate();
      assertEquals((byte) (-98), fraction10.byteValue());
      
      Fraction fraction11 = Fraction.ONE_QUARTER;
      Fraction fraction12 = fraction9.THREE_QUARTERS.multiply(fraction4);
      assertEquals((-149.9235668789809), fraction12.doubleValue(), 0.01);
      
      Fraction fraction13 = fraction0.subtract(fraction3);
      assertEquals(52452683, fraction13.getNumerator());
      
      String string0 = fraction7.toString();
      assertEquals("-1", string0);
      
      fraction9.toString();
      Fraction fraction14 = new Fraction(200.89809057, (-2147483609));
      Fraction fraction15 = fraction9.divide(fraction8);
      assertEquals((short)0, fraction15.shortValue());
      
      Fraction fraction16 = fraction11.multiply(fraction14);
      assertEquals(50.0F, fraction16.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction3 = new Fraction((-1.0));
      Fraction fraction4 = new Fraction(0.0);
      Fraction fraction5 = new Fraction(100.0);
      Fraction fraction6 = new Fraction((-242343.0));
      Fraction fraction7 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction8 = new Fraction(332.0);
      Fraction fraction9 = new Fraction((double) Integer.MAX_VALUE);
      Fraction fraction10 = new Fraction(44.0);
      Fraction fraction11 = new Fraction(0.6851066624442841);
      Fraction fraction12 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      boolean boolean0 = fraction12.equals(object1);
      assertFalse(boolean0);
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Fraction fraction13 = fraction10.divide(fraction0);
      assertEquals(0.44F, fraction13.floatValue(), 0.01F);
      
      Fraction fraction14 = Fraction.getReducedFraction(2457, 2457);
      Fraction fraction15 = Fraction.MINUS_ONE;
      int int0 = fraction11.compareTo(fraction15);
      assertEquals(1, int0);
      assertEquals(161, fraction11.getNumerator());
      
      fraction15.hashCode();
      assertFalse(fraction15.equals((Object)fraction14));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.FOUR_FIFTHS;
      int int0 = fraction1.compareTo(fraction0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = new Fraction(200.89809057);
      Fraction fraction1 = new Fraction(1.0);
      Fraction fraction2 = fraction0.divide(1664);
      Fraction fraction3 = fraction1.subtract(fraction0);
      Fraction fraction4 = new Fraction(1107);
      Fraction fraction5 = Fraction.ONE;
      Fraction fraction6 = Fraction.MINUS_ONE;
      Fraction fraction7 = new Fraction(1664);
      Fraction fraction8 = new Fraction((-8.175448336607664));
      Fraction fraction9 = fraction4.negate();
      Fraction fraction10 = Fraction.ONE_QUARTER;
      Fraction fraction11 = fraction8.THREE_QUARTERS.multiply(fraction3);
      assertEquals((-149.92357F), fraction11.floatValue(), 0.01F);
      
      Fraction fraction12 = fraction0.subtract(fraction2);
      assertEquals(52452683, fraction12.getNumerator());
      
      fraction6.toString();
      String string0 = fraction5.toString();
      assertEquals("1", string0);
      
      Fraction.getReducedFraction((-1260), 2457);
      Fraction fraction13 = Fraction.MINUS_ONE;
      int int0 = fraction4.compareTo(fraction9);
      assertEquals(1, int0);
      assertEquals((short) (-1107), fraction9.shortValue());
      
      fraction7.hashCode();
      assertEquals(1, fraction7.getDenominator());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(100.0);
      Fraction fraction3 = new Fraction((-2323.0));
      Fraction fraction4 = new Fraction(1.0E-5);
      Fraction fraction5 = new Fraction(1.0E-5);
      Fraction fraction6 = Fraction.ZERO;
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Fraction fraction7 = Fraction.TWO_THIRDS;
      fraction5.equals(fraction7);
      Object object0 = new Object();
      fraction2.equals(object0);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction6.equals(fraction2);
      // Undeclared exception!
      try { 
        EvoSuiteXStream.fromString("g1<(");
        fail("Expecting exception: StreamException");
      
      } catch(StreamException e) {
         //
         // 
         //
         verifyException("com.thoughtworks.xstream.io.xml.XppReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.TWO_THIRDS;
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      
      Fraction fraction1 = fraction0.FOUR_FIFTHS.add(Integer.MIN_VALUE);
      assertEquals((-2147483644), fraction1.getNumerator());
      assertEquals((-429496728L), fraction1.longValue());
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.ONE_HALF;
      Fraction fraction2 = fraction0.ONE_QUARTER.subtract(fraction1);
      assertEquals((-0.25F), fraction2.floatValue(), 0.01F);
      
      Fraction fraction3 = fraction0.negate();
      assertEquals((-1), fraction3.getNumerator());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = Fraction.ONE;
      Fraction fraction2 = fraction1.ONE_FIFTH.add(fraction0);
      assertEquals(0.6F, fraction2.floatValue(), 0.01F);
      
      Fraction fraction3 = fraction1.negate();
      assertEquals((-1), fraction3.getNumerator());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction1.ONE_QUARTER.subtract(fraction0);
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      
      String string0 = fraction1.toString();
      assertEquals("-1 / 4", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = new Fraction(199.151341182849, (-1));
      Fraction fraction1 = fraction0.negate();
      assertEquals((byte)57, fraction1.byteValue());
      assertEquals((-199), fraction1.getNumerator());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (2,147,483,649/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = fraction0.ONE_HALF.abs();
      assertEquals(2, fraction1.getDenominator());
      
      Fraction fraction2 = new Fraction(75.0);
      Fraction fraction3 = new Fraction(100.0);
      Fraction fraction4 = new Fraction(0.8181818181818182);
      Fraction fraction5 = new Fraction(0.5210418057433646);
      Fraction fraction6 = new Fraction(2272.962395, Integer.MAX_VALUE);
      Fraction fraction7 = fraction6.divide(fraction2);
      assertEquals(30.306165266666667, fraction7.doubleValue(), 0.01);
      
      Fraction fraction8 = fraction4.add(Integer.MAX_VALUE);
      assertEquals((short) (-5958), fraction8.shortValue());
      
      int int0 = fraction3.getDenominator();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(0.0184399957776174);
      Fraction fraction2 = new Fraction(0.0);
      Fraction fraction3 = new Fraction(100.0);
      Fraction fraction4 = new Fraction((-792.467554518));
      Fraction fraction5 = new Fraction(2272.962395, Integer.MAX_VALUE);
      Fraction fraction6 = fraction2.divide(fraction4);
      Fraction fraction7 = fraction6.add(Integer.MAX_VALUE);
      assertEquals(1, fraction7.getDenominator());
      assertEquals(2147483647L, fraction7.longValue());
      
      int int0 = fraction6.getDenominator();
      assertEquals((-792.4675572519084), fraction4.doubleValue(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-2223), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,223/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction3 = Fraction.TWO_FIFTHS;
      Fraction fraction4 = new Fraction(0.0);
      fraction4.ONE_QUARTER.subtract(Integer.MAX_VALUE);
      Fraction fraction5 = new Fraction(100.0);
      Fraction fraction6 = new Fraction((-242343.0));
      Fraction fraction7 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction8 = new Fraction((-242343.0));
      Fraction fraction9 = new Fraction((-2323.0));
      Fraction fraction10 = new Fraction(44.0);
      Fraction fraction11 = new Fraction(0.6851066624442841);
      Fraction fraction12 = new Fraction((-2323.0));
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object2);
      Object object3 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object3);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction7.toString();
      fraction6.abs();
      // Undeclared exception!
      try { 
        fraction7.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = fraction0.MINUS_ONE.abs();
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short)1, fraction1.shortValue());
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = fraction0.negate();
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = fraction0.abs();
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      fraction0.ZERO.subtract(Integer.MIN_VALUE);
      Fraction fraction1 = Fraction.ONE_QUARTER;
      assertEquals((short)0, fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.divide(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(2147483639);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-0.1));
      Fraction fraction7 = new Fraction(75.0);
      Fraction fraction8 = new Fraction(Integer.MIN_VALUE);
      assertEquals((-2.147483648E9), fraction8.doubleValue(), 0.01);
      
      Fraction fraction9 = new Fraction(332.0);
      Fraction fraction10 = new Fraction((-2323.0));
      Fraction fraction11 = new Fraction((-2323.0));
      Fraction fraction12 = new Fraction(0.6851066624442841);
      Fraction fraction13 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object2);
      Fraction fraction14 = new Fraction(100.0);
      boolean boolean0 = fraction13.equals(fraction14);
      assertTrue(fraction14.equals((Object)fraction0));
      assertFalse(boolean0);
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction9.longValue();
      assertFalse(fraction9.equals((Object)fraction14));
      
      int int0 = fraction12.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1413), (-1413));
      Fraction fraction1 = fraction0.THREE_FIFTHS.divide((-1413));
      assertEquals(2355, fraction1.getDenominator());
      assertEquals((-4.2462844E-4F), fraction1.floatValue(), 0.01F);
      
      Fraction fraction2 = fraction0.negate();
      assertEquals((-1), fraction2.getNumerator());
      assertEquals(1, fraction2.getDenominator());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      String string0 = fraction0.toString();
      assertEquals("1 / 2", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(2147483632);
      Fraction fraction3 = new Fraction((-1.0));
      Fraction fraction4 = new Fraction(0.0);
      Fraction fraction5 = new Fraction((-0.1));
      Fraction fraction6 = new Fraction((-242343.0));
      Fraction fraction7 = new Fraction(332.0);
      Fraction fraction8 = new Fraction((-2323.0));
      Fraction fraction9 = new Fraction(44.0);
      Fraction fraction10 = new Fraction(0.6851066624442841);
      Fraction fraction11 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction11.equals(object0);
      Fraction fraction12 = fraction11.TWO_FIFTHS.add(fraction7);
      assertEquals(332.4F, fraction12.floatValue(), 0.01F);
      
      Fraction fraction13 = new Fraction(2147483632);
      fraction11.equals(fraction13);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction11.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction11.equals(object2);
      assertTrue(fraction11.equals((Object)fraction4));
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      int int0 = fraction2.getNumerator();
      assertEquals(2147483632, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      Fraction fraction1 = Fraction.TWO_FIFTHS;
      Fraction fraction2 = fraction0.divide(fraction1);
      assertEquals(0.0, fraction2.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1), (-1));
      assertEquals((byte)1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.divide(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      fraction0.TWO_QUARTERS.getField();
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(Integer.MAX_VALUE);
      assertEquals((short) (-1), fraction2.shortValue());
      
      Fraction fraction3 = new Fraction((-1.0));
      Fraction fraction4 = new Fraction(0.0);
      Fraction fraction5 = new Fraction(100.0);
      Fraction fraction6 = new Fraction((-242343.0));
      Fraction fraction7 = new Fraction(Integer.MIN_VALUE);
      Fraction fraction8 = new Fraction(332.0);
      Fraction fraction9 = new Fraction((-2323.0));
      Fraction fraction10 = new Fraction(44.0);
      Fraction fraction11 = new Fraction(0.6851066624442841);
      assertEquals(0.6851063829787234, fraction11.doubleValue(), 0.01);
      
      Fraction fraction12 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object1);
      Fraction fraction13 = new Fraction((-242343.0));
      boolean boolean0 = fraction12.equals(fraction13);
      assertFalse(boolean0);
      
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object2);
      assertTrue(fraction12.equals((Object)fraction4));
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      String string0 = fraction7.toString();
      assertEquals("-2147483648", string0);
      assertEquals((-2.147483648E9), fraction7.doubleValue(), 0.01);
      
      float float0 = fraction10.floatValue();
      assertEquals(44.0F, float0, 0.01F);
      assertFalse(fraction10.equals((Object)fraction8));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      double double0 = fraction0.THREE_FIFTHS.percentageValue();
      assertEquals(60.0, double0, 0.01);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      assertEquals(0.25, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = Fraction.TWO_FIFTHS;
      Fraction fraction2 = fraction0.ONE_THIRD.add(fraction1);
      assertEquals(0.73333335F, fraction2.floatValue(), 0.01F);
      assertEquals(11, fraction2.getNumerator());
      
      String string0 = fraction0.toString();
      assertEquals("1 / 4", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      Fraction fraction1 = Fraction.ONE;
      Fraction fraction2 = fraction0.MINUS_ONE.subtract(fraction1);
      assertEquals((-2.0), fraction2.doubleValue(), 0.01);
      
      Fraction fraction3 = fraction0.negate();
      assertEquals((-3), fraction3.getNumerator());
      assertEquals((-0.75F), fraction3.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(41089378, 41089378);
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) (-1379), (-1379));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -1,379 to fraction (-9,223,372,036,854,774,428/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = new Fraction(0.02, 92);
      assertEquals(50, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      String string0 = fraction0.toString();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2641.8084));
      assertEquals((-1006529), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = new Fraction(0, 212);
      Object object0 = new Object();
      boolean boolean0 = fraction0.equals(object0);
      assertFalse(boolean0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((byte)0, fraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = new Fraction(5.317215931199826E-5);
      assertEquals(5.3174518770605124E-5, fraction0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fraction fraction0 = new Fraction((-1));
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = Fraction.TWO_FIFTHS;
      boolean boolean0 = fraction0.equals(fraction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction((-21475), (-21475));
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
  }
}
