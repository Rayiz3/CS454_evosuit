/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 13:03:42 GMT 2023
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.TimeUnit;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.testcarver.testcase.EvoSuiteXStream;
import org.h2.value.ValueLong;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("");
      arrayList0.add("y<v$e");
      arrayList0.add("=|Sib{%/SQd");
      arrayList0.add("=|Sib{%/SQd");
      Object[] objectArray0 = new Object[7];
      objectArray0[3] = (Object) arrayList0;
      objectArray0[4] = (Object) "<string-builder></string-builder>";
      objectArray0[3] = (Object) stringBuilder0;
      arrayList0.add("<string-builder></string-builder>");
      arrayList0.add("");
      boolean boolean0 = new Boolean("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('g');
      CSVPrinter cSVPrinter0 = cSVFormat1.print(stringBuilder0);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVFormat0.withSkipHeaderRecord(false);
      cSVPrinter0.printComment("?M");
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      CSVFormat cSVFormat3 = cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat3.withDelimiter('X');
      cSVFormat0.withRecordSeparator("eXZ=oxZkeoaAyvjb$");
      cSVFormat1.withDelimiter('V');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat2);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("<string-builder></string-builder>");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList1.add((String) null);
      cSVPrinter0.printRecord((Iterable<?>) arrayList1);
      arrayList0.add("");
      arrayList1.add(" K@@FRu&>%[");
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList2.add("e(mbs'X>ml&\"4J:X");
      arrayList1.add("#6Z9");
      cSVPrinter0.printRecord((Iterable<?>) arrayList2);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      cSVPrinter0.printRecords((Iterable<?>) arrayList1);
      assertNotSame(arrayList1, arrayList0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = CSVFormat.MYSQL;
      cSVFormat2.withIgnoreEmptyLines(false);
      cSVFormat0.withDelimiter('X');
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator("<string-builder></string-builder>");
      cSVFormat3.withDelimiter('L');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat2);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add(" K@@FRu&>%[");
      arrayList1.add("");
      arrayList0.add("e(mbs'X>ml&\"4J:X");
      cSVPrinter0.printRecord((Iterable<?>) arrayList1);
      arrayList1.add(" K@@FRu&>%[");
      arrayList1.add(".>4^i#i");
      arrayList0.add("");
      arrayList0.add("#6Z9");
      cSVPrinter0.printRecord((Iterable<?>) arrayList1);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      assertFalse(arrayList0.contains(" K@@FRu&>%["));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('Z');
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('m');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat3);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("2*9Q|B8<dM");
      arrayList1.add("<string-builder></string-builder>");
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat3);
      MockPrintStream mockPrintStream0 = new MockPrintStream("<string-builder></string-builder>");
      cSVPrinter1.close();
      cSVPrinter1.printRecords((Iterable<?>) arrayList1);
      cSVPrinter1.printComment("<string-builder></string-builder>");
      CSVPrinter cSVPrinter2 = new CSVPrinter(mockPrintStream0, cSVFormat3);
      cSVPrinter2.getOut();
      CSVPrinter cSVPrinter3 = new CSVPrinter(stringBuilder0, cSVFormat3);
      cSVPrinter2.close();
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('v');
      cSVFormat0.withDelimiter('I');
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat4 = cSVFormat2.withCommentStart('\'');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat4);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      cSVPrinter0.flush();
      arrayList0.add("NewValue");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("NewValue");
      arrayList0.add("foo,baar\r\n\r\nhello,\r\n\r\nworld,\r\n");
      arrayList0.add("<org.apache.commons.csv.CSVFormat>\n  <delimiter>,</delimiter>\n  <quoteChar>&quot;</quoteChar>\n  <ignoreSurroundingSpaces>false</ignoreSurroundingSpaces>\n  <ignoreEmptyLines>true</ignoreEmptyLines>\n  <recordSeparator>&#xd;\n</recordSeparator>\n  <skipHeaderRecord>false</skipHeaderRecord>\n</org.apache.commons.csv.CSVFormat>");
      arrayList0.add("NewValue");
      cSVPrinter0.printRecord((Iterable<?>) arrayList1);
      cSVFormat3.withSkipHeaderRecord(false);
      cSVPrinter0.printComment("\nEXCEPT\n");
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader("NewValue");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('v');
      cSVFormat0.withDelimiter('I');
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat4 = cSVFormat2.withCommentStart('I');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat4);
      cSVPrinter0.flush();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("{Cqx^=Zw]*O/;T@sUsZ");
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList2.add(".U]");
      arrayList1.add("<string-builder></string-builder>");
      cSVFormat2.withRecordSeparator("<string-builder></string-builder>");
      arrayList2.add("");
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVFormat2.withEscape('I');
      cSVPrinter0.printComment("Eh");
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('C');
      cSVFormat1.withDelimiter('5');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("A");
      arrayList0.add("y<v$e");
      arrayList0.add("y<v$e");
      arrayList0.add("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter0.getOut();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) cSVFormat0;
      String[] stringArray0 = new String[0];
      cSVFormat0.withHeader(stringArray0);
      objectArray0[1] = (Object) cSVFormat2;
      objectArray0[2] = (Object) "y<v$e";
      objectArray0[3] = (Object) "";
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(9, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("");
      arrayList0.add("y<v$e");
      arrayList0.add("=|Sib{%/SQd");
      arrayList0.add("=|Sib{%/SQd");
      Object[] objectArray0 = new Object[7];
      objectArray0[3] = (Object) arrayList0;
      objectArray0[4] = (Object) "<string-builder></string-builder>";
      objectArray0[3] = (Object) stringBuilder0;
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      cSVPrinter0.flush();
      LinkedHashSet<MockFileReader> linkedHashSet0 = new LinkedHashSet<MockFileReader>(18);
      cSVPrinter0.printRecords((Iterable<?>) linkedHashSet0);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.newFormat('i');
      Character character0 = new Character('i');
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar(character0);
      cSVFormat0.withNullString("");
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      cSVFormat2.withIgnoreEmptyLines(false);
      cSVFormat0.withDelimiter('\t');
      cSVFormat3.withDelimiter(')');
      CSVFormat cSVFormat4 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add((String) null);
      arrayList0.add("bc");
      arrayList0.add((String) null);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      ValueLong valueLong0 = ValueLong.get(32767L);
      ResultSet resultSet0 = valueLong0.getResultSet();
      cSVPrinter0.printRecords(resultSet0);
      assertTrue(resultSet0.isClosed());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat1);
      cSVPrinter0.close();
      CSVFormat cSVFormat3 = CSVFormat.MYSQL;
      CSVPrinter cSVPrinter1 = cSVFormat3.print(stringBuilder0);
      cSVPrinter0.printComment("<string-builder></string-builder>");
      cSVPrinter0.printComment("<string-builder></string-builder>");
      Object object0 = new Object();
      Object[] objectArray0 = new Object[6];
      objectArray0[2] = (Object) cSVFormat3;
      objectArray0[3] = (Object) cSVFormat3;
      objectArray0[4] = (Object) stringBuilder0;
      objectArray0[5] = (Object) cSVFormat3;
      cSVPrinter0.printRecords(objectArray0);
      assertNotSame(cSVPrinter0, cSVPrinter1);
      
      cSVPrinter1.printRecord(objectArray0);
      cSVPrinter1.printRecords(objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withDelimiter('C');
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Boolean boolean0 = new Boolean(false);
      arrayList0.add("y<v$e");
      arrayList0.add("y<v$e");
      arrayList0.add("<string-builder></string-builder>");
      arrayList0.add("<string-builder></string-builder>");
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      cSVPrinter0.printComment("y<v$e");
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('v');
      cSVFormat0.withDelimiter('I');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('I');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat2);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      cSVPrinter0.flush();
      arrayList0.add("NewValue");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      CSVFormat.newFormat('[');
      cSVFormat2.print(stringBuilder0);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('v');
      cSVFormat0.withDelimiter('I');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('I');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat2);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      cSVPrinter0.flush();
      arrayList0.add("NewValue");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      CSVFormat.newFormat('[');
      CSVPrinter cSVPrinter1 = cSVFormat2.print(stringBuilder0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "<string-builder></string-builder>";
      cSVPrinter1.printRecords(objectArray0);
      assertNotSame(cSVPrinter1, cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('Z');
      CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('m');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat3);
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringBuilder0);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      cSVFormat2.print(stringBuilder0);
      Object object0 = new Object();
      cSVPrinter0.printRecords(objectArray0);
      assertNotSame(cSVPrinter0, cSVPrinter1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(false);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines(true);
      cSVFormat2.withDelimiter('A');
      Object object0 = new Object();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("<string-builder></string-builder>");
      arrayList0.add(", free: ");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      CSVPrinter cSVPrinter1 = cSVFormat1.print(stringBuilder0);
      cSVPrinter1.getOut();
      cSVPrinter0.close();
      cSVPrinter1.flush();
      cSVPrinter1.flush();
      assertNotSame(cSVPrinter1, cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("");
      arrayList0.add("y<v$e");
      arrayList0.add("=|Sib{%/SQd");
      arrayList0.add("=|Sib{%/SQd");
      Object[] objectArray0 = new Object[7];
      objectArray0[3] = (Object) arrayList0;
      objectArray0[4] = (Object) "<string-builder></string-builder>";
      objectArray0[5] = (Object) stringBuilder0;
      CSVFormat cSVFormat0 = CSVFormat.newFormat('C');
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringBuilder0);
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(7, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('v');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentStart('I');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat2);
      cSVFormat2.print(stringBuilder0);
      cSVPrinter0.flush();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      CSVFormat.newFormat('[');
      CSVPrinter cSVPrinter1 = cSVFormat2.print(stringBuilder0);
      Object[] objectArray0 = new Object[5];
      cSVPrinter1.flush();
      Object object0 = new Object();
      cSVPrinter1.printRecords(objectArray0);
      assertEquals("\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n\"\"\r\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('B');
      cSVFormat2.withDelimiter('M');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat2);
      // Undeclared exception!
      try { 
        cSVPrinter0.printRecords((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }
}
