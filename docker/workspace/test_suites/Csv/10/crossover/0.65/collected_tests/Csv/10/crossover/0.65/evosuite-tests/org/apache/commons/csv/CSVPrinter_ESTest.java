/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 13:26:29 GMT 2023
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.TreeSet;
import java.util.concurrent.RejectedExecutionHandler;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.testcarver.testcase.EvoSuiteXStream;
import org.h2.tools.Csv;
import org.h2.tools.SimpleResultSet;
import org.h2.value.ValueLong;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EvoSuiteXStream.fromString("<string-builder></string-builder>");
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('t');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("<string-builder></string-builder>");
      CSVFormat cSVFormat3 = cSVFormat1.withRecordSeparator("/et4EnbiE/;t!p9M");
      CSVPrinter cSVPrinter0 = cSVFormat3.print(stringBuilder0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) stringBuilder0;
      objectArray0[1] = (Object) cSVPrinter0;
      objectArray0[2] = (Object) cSVPrinter0;
      objectArray0[3] = (Object) stringBuilder0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      cSVPrinter0.printRecords(objectArray0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("org.apache.commons.csv.CSVPrinter$1");
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add("%ZwOrv])5)?@nj");
      arrayList0.add((String) null);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("/et4EnbiE/;t!p9M");
      arrayList1.add("$}NS(");
      CSVPrinter cSVPrinter1 = cSVFormat2.print(stringBuilder0);
      cSVPrinter1.printRecord((Iterable<?>) arrayList0);
      cSVPrinter1.getOut();
      cSVPrinter1.close();
      assertNotSame(cSVPrinter1, cSVPrinter0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) stringBuilder0;
      Object object0 = new Object();
      objectArray0[3] = (Object) cSVPrinter0;
      objectArray0[4] = (Object) cSVPrinter0;
      objectArray0[5] = (Object) cSVPrinter0;
      String string0 = null;
      arrayList0.add((String) null);
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat0);
      cSVPrinter1.printRecord((Iterable<?>) arrayList0);
      CSVPrinter cSVPrinter2 = new CSVPrinter(stringBuilder0, cSVFormat0);
      cSVPrinter2.close();
      Csv csv0 = Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet(csv0);
      ValueLong valueLong0 = ValueLong.get(0L);
      ResultSet resultSet0 = valueLong0.getResultSet();
      cSVPrinter2.printRecords(resultSet0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2924);
      MockThread.currentThread();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = null;
      try {
        scheduledThreadPoolExecutor1 = new ScheduledThreadPoolExecutor(20, (RejectedExecutionHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("NewValue");
      arrayList0.add("NewValue");
      Boolean boolean0 = new Boolean(true);
      arrayList0.add("WHhmRa");
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuilder0, cSVFormat0);
      cSVPrinter1.printRecord((Iterable<?>) arrayList0);
      cSVPrinter1.getOut();
      cSVPrinter0.printComment("A");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) arrayList0;
      objectArray0[1] = (Object) cSVPrinter1;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('t');
      cSVFormat1.withNullString("<string-builder></string-builder>");
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('v');
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("out");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("");
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat2);
      cSVPrinter0.printRecord((Iterable<?>) arrayList1);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("`jv9Q4:($:");
      arrayList0.add("A");
      Boolean boolean0 = new Boolean(true);
      arrayList0.add("A");
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter0.getOut();
      cSVPrinter0.printComment("");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add((String) null);
      arrayList0.add("jvfd=A4`r#o&NBqZq");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("ZQ*Xc=ZX!V~ZLv>hYe");
      arrayList1.add((String) null);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      Csv csv0 = Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet(csv0);
      cSVPrinter0.printRecords((ResultSet) simpleResultSet0);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("A");
      arrayList0.add("B");
      Boolean boolean0 = new Boolean(true);
      arrayList0.add("NwValue");
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("A");
      arrayList0.add("B");
      Boolean boolean0 = new Boolean(true);
      arrayList0.add("NwValue");
      TreeSet<MockFileReader> treeSet0 = new TreeSet<MockFileReader>();
      ArrayList<MockFileReader> arrayList1 = new ArrayList<MockFileReader>(4);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      cSVPrinter0.printRecords((Iterable<?>) arrayList1);
      assertTrue(arrayList1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("A");
      arrayList0.add("B");
      arrayList0.add("B");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("X$fSb'");
      arrayList0.add("B");
      TreeSet<MockFileReader> treeSet0 = new TreeSet<MockFileReader>();
      ArrayList<MockFileReader> arrayList2 = new ArrayList<MockFileReader>(4);
      cSVPrinter0.printRecord((Iterable<?>) arrayList2);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      cSVPrinter0.printRecords((Iterable<?>) arrayList1);
      assertEquals(1, arrayList1.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add((String) null);
      arrayList0.add("jvfd=A4`r#o&NBqZq");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("ZQ*Xc=ZX!V~ZLv>hYe");
      arrayList0.add((String) null);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("YfE|");
      Boolean boolean0 = new Boolean("YfE|");
      StringBuilder stringBuilder1 = (StringBuilder)cSVPrinter0.getOut();
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringBuilder1;
      objectArray0[1] = (Object) stringBuilder1;
      objectArray0[2] = (Object) boolean0;
      objectArray0[3] = (Object) "<string-builder></string-builder>";
      objectArray0[4] = (Object) "YfE|";
      Object object0 = new Object();
      objectArray0[5] = object0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add((String) null);
      arrayList0.add("jvfd=A4`r#o&NBqZq");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("ZQ*Xc=ZX!V~ZLv>hYe");
      arrayList0.add((String) null);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecord(objectArray0);
      cSVPrinter0.flush();
      cSVPrinter0.close();
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("A");
      arrayList0.add("B");
      arrayList0.add("NewValue");
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
  }
}
