/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 17:46:03 GMT 2023
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.StringReader;
import java.io.StringWriter;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVFormat_ESTest extends CSVFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('\u00A9');
      // Undeclared exception!
      try { 
        cSVFormat1.withQuote('\n');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar cannot be a line break
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      char char0 = 'z';
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
      char char1 = '*';
      cSVFormat1.withQuote('*');
      cSVFormat0.hashCode();
      cSVFormat1.isCommentMarkerSet();
      Character character0 = new Character('z');
      CSVFormat cSVFormat2 = cSVFormat0.withAllowMissingColumnNames(true);
      String string0 = "";
      cSVFormat0.equals(cSVFormat2);
      cSVFormat2.toString();
      CSVFormat cSVFormat3 = cSVFormat1.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('O');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat4.withQuoteMode(quoteMode0);
      CSVFormat.newFormat('O');
      CSVFormat cSVFormat5 = cSVFormat1.withCommentMarker('*');
      // Undeclared exception!
      try { 
        cSVFormat5.DEFAULT.withDelimiter('\r');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The delimiter cannot be a line break
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      char char0 = '\u00AC';
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('\u00AC');
      char char1 = '\r';
      // Undeclared exception!
      try { 
        cSVFormat1.withQuote('\r');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar cannot be a line break
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat1.equals(cSVFormat2);
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
      cSVFormat1.equals(cSVFormat0);
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('[');
      CSVFormat cSVFormat2 = cSVFormat1.TDF.withRecordSeparator('\\');
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      
      CSVFormat cSVFormat3 = CSVFormat.newFormat('8');
      assertEquals('8', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getSkipHeaderRecord());
      
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVFormat cSVFormat4 = cSVFormat1.withSkipHeaderRecord(true);
      boolean boolean0 = cSVFormat1.equals(cSVFormat4);
      assertFalse(boolean0);
      
      boolean boolean1 = cSVFormat4.equals(cSVFormat0);
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat4.isNullStringSet());
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("[", cSVFormat4.getRecordSeparator());
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("z6FMlTA^ViZgJ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character character0 = new Character('=');
      String[] stringArray0 = new String[1];
      stringArray0[0] = "DLQxXE}3";
      CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat1.withCommentMarker(character0);
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat3.withQuoteMode(quoteMode0);
      cSVFormat3.hashCode();
      cSVFormat3.isCommentMarkerSet();
      Character character1 = new Character('v');
      CSVFormat cSVFormat4 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces(true);
      cSVFormat5.equals(cSVFormat4);
      cSVFormat5.toString();
      CSVFormat cSVFormat6 = cSVFormat2.withCommentMarker(character0);
      CSVFormat cSVFormat7 = CSVFormat.TDF;
      cSVFormat7.hashCode();
      // Undeclared exception!
      try { 
        cSVFormat6.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('=')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('!');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('N');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("U9rt");
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat5 = CSVFormat.RFC4180;
      cSVFormat0.getDelimiter();
      cSVFormat5.withNullString("");
      CSVFormat cSVFormat6 = cSVFormat4.withNullString("U9rt");
      boolean boolean0 = cSVFormat4.equals(cSVFormat6);
      assertTrue(boolean0);
      
      String string0 = cSVFormat2.toString();
      assertEquals("Delimiter=<!> QuoteChar=<\"> CommentStart=<N> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
      
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      cSVFormat6.equals(object2);
      Character character0 = new Character(',');
      cSVFormat1.withEscape(character0);
      cSVFormat4.equals("U9rt");
      assertFalse(cSVFormat0.isEscapeCharacterSet());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat1.hashCode();
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullStringSet());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.hashCode();
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('D');
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertFalse(boolean0);
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('D', (char)cSVFormat1.getQuoteCharacter());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      assertFalse(cSVFormat1.isNullStringSet());
      
      CSVFormat cSVFormat2 = cSVFormat0.withRecordSeparator((String) null);
      String string0 = cSVFormat2.toString();
      assertEquals("Delimiter=<\t> QuoteChar=<\"> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", string0);
      
      cSVFormat2.equals(cSVFormat0);
      boolean boolean0 = cSVFormat2.equals(cSVFormat0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      
      String string0 = cSVFormat1.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false Header:[null]", string0);
      
      Character.valueOf('A');
      Character.valueOf('A');
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('B');
      assertEquals('B', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      cSVFormat0.EXCEL.withRecordSeparator("");
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("");
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals("", cSVFormat1.getNullString());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character(':');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(boolean0);
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertEquals(':', (char)cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.hashCode();
      // Undeclared exception!
      try { 
        cSVFormat0.withDelimiter('\"');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('\"')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat0.equals(cSVFormat1);
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('3');
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertFalse(cSVFormat2.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('3', cSVFormat2.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      cSVFormat1.equals(cSVFormat0);
      boolean boolean0 = cSVFormat1.equals(cSVFormat0);
      assertTrue(boolean0);
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("z6FMlTA^ViZgJ");
      Character character0 = Character.valueOf('$');
      Character character1 = new Character('G');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character1);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) "z6FMlTA^ViZgJ";
      objectArray0[2] = (Object) character0;
      objectArray0[3] = (Object) cSVFormat2;
      objectArray0[4] = (Object) cSVFormat0;
      cSVFormat1.format(objectArray0);
      cSVFormat2.isCommentMarkerSet();
      Character character2 = new Character('B');
      CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);
      cSVFormat2.equals(cSVFormat3);
      cSVFormat1.toString();
      // Undeclared exception!
      try { 
        cSVFormat3.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('$')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("z6FMlTA^ViZgJ");
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      boolean boolean0 = cSVFormat1.equals(cSVFormat2);
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(boolean0);
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString((String) null);
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat2.equals(cSVFormat1);
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator("The delimiter cannot be a line break");
      String string0 = cSVFormat3.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<The delimiter cannot be a line break> SkipHeaderRecord:false", string0);
      
      Character character0 = Character.valueOf('g');
      cSVFormat1.withEscape(character0);
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      boolean boolean0 = cSVFormat0.equals(cSVFormat0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('I');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("U9rt");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat4 = cSVFormat2.withCommentMarker(':');
      CSVFormat cSVFormat5 = cSVFormat0.withCommentMarker('I');
      cSVFormat0.getDelimiter();
      cSVFormat4.getEscapeCharacter();
      cSVFormat5.getQuoteCharacter();
      CSVFormat cSVFormat6 = cSVFormat3.withCommentMarker('I');
      cSVFormat6.getCommentMarker();
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVFormat1.getIgnoreEmptyLines();
      cSVFormat6.hashCode();
      assertTrue(cSVFormat6.equals((Object)cSVFormat3));
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat6.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat6.equals((Object)cSVFormat2));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("NullString=<");
      cSVFormat2.hashCode();
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('&');
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('&', (char)cSVFormat1.getCommentMarker());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      
      cSVFormat1.hashCode();
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('#');
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('#');
      char char0 = cSVFormat2.getDelimiter();
      assertEquals(',', char0);
      
      cSVFormat3.getEscapeCharacter();
      String string0 = cSVFormat3.TDF.toString();
      assertEquals("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", string0);
      
      cSVFormat3.getQuoteCharacter();
      cSVFormat0.getCommentMarker();
      boolean boolean0 = cSVFormat3.getIgnoreSurroundingSpaces();
      assertFalse(boolean0);
      
      cSVFormat3.isEscapeCharacterSet();
      cSVFormat2.hashCode();
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('#', (char)cSVFormat2.getCommentMarker());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('!');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('I');
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("U9rt");
      CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat5 = cSVFormat3.withCommentMarker(':');
      CSVFormat cSVFormat6 = cSVFormat0.withCommentMarker('I');
      char char0 = cSVFormat1.getDelimiter();
      assertEquals('!', char0);
      
      cSVFormat5.getEscapeCharacter();
      cSVFormat6.getQuoteCharacter();
      CSVFormat cSVFormat7 = cSVFormat4.withCommentMarker('I');
      cSVFormat7.getCommentMarker();
      boolean boolean0 = cSVFormat7.getIgnoreSurroundingSpaces();
      assertTrue(cSVFormat7.equals((Object)cSVFormat4));
      
      cSVFormat1.getIgnoreEmptyLines();
      Object object0 = new Object();
      cSVFormat3.equals(cSVFormat2);
      Object object1 = new Object();
      cSVFormat5.equals(object1);
      boolean boolean1 = cSVFormat3.isNullStringSet();
      assertTrue(boolean1 == boolean0);
      assertFalse(cSVFormat3.isEscapeCharacterSet());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("r;X^");
      String string0 = cSVFormat1.toString();
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("Delimiter=<,> QuoteChar=<\"> NullString=<r;X^> RecordSeparator=<\r\n> SkipHeaderRecord:false", string0);
      
      cSVFormat0.hashCode();
      assertFalse(cSVFormat0.isCommentMarkerSet());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      char char0 = 'm';
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat1.print(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat0.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.hashCode();
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("z6FMlTA^ViZgJ");
      boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();
      Object[] objectArray0 = new Object[0];
      Character character0 = Character.valueOf('T');
      cSVFormat1.EXCEL.withCommentMarker(character0);
      cSVFormat1.format(objectArray0);
      cSVFormat1.isCommentMarkerSet();
      Character character1 = new Character('\\');
      boolean boolean1 = cSVFormat0.equals(cSVFormat1);
      assertTrue(boolean1 == boolean0);
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'null' in [null, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("z6FMlTA^ViZgJ");
      boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[1];
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat2.format(objectArray0);
      cSVFormat0.isCommentMarkerSet();
      cSVFormat2.hashCode();
      String string0 = cSVFormat2.toString();
      assertEquals("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("z6FMlTA^ViZgJ");
      cSVFormat1.getAllowMissingColumnNames();
      Object[] objectArray0 = new Object[0];
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("zxyoQF,<4");
      PrintStream printStream0 = mockPrintStream0.append('x');
      cSVFormat2.EXCEL.print(printStream0);
      String string0 = cSVFormat1.format(objectArray0);
      assertEquals("z6FMlTA^ViZgJ", string0);
      
      boolean boolean0 = cSVFormat1.isCommentMarkerSet();
      assertTrue(cSVFormat1.equals((Object)cSVFormat2));
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(boolean0);
      
      cSVFormat0.hashCode();
      assertFalse(cSVFormat0.isCommentMarkerSet());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('#');
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('#');
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\r\n";
      stringArray0[1] = "SET LOCK_MODE ?";
      stringArray0[2] = "gTFUf,aYDrRT:-3";
      stringArray0[3] = "')";
      stringArray0[4] = "BX^cMw~Sd\"<$u;1h";
      stringArray0[5] = "9(G{sq0k;{TTejt*i~";
      cSVFormat3.MYSQL.withHeader(stringArray0);
      cSVFormat0.getDelimiter();
      cSVFormat3.getEscapeCharacter();
      Character character0 = cSVFormat1.getQuoteCharacter();
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertEquals('\"', (char)character0);
      
      boolean boolean0 = cSVFormat3.getIgnoreEmptyLines();
      boolean boolean1 = cSVFormat0.equals(cSVFormat3);
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isNullStringSet());
      assertTrue(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('&');
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      boolean boolean0 = cSVFormat0.equals(cSVFormat2);
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.isQuoteCharacterSet());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      cSVFormat0.TDF.hashCode();
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('!');
      CSVFormat cSVFormat3 = cSVFormat0.withDelimiter('\\');
      cSVFormat2.getDelimiter();
      cSVFormat2.getDelimiter();
      cSVFormat1.getEscapeCharacter();
      cSVFormat2.getQuoteCharacter();
      cSVFormat0.getCommentMarker();
      cSVFormat0.getIgnoreSurroundingSpaces();
      cSVFormat1.getIgnoreEmptyLines();
      Object object0 = new Object();
      cSVFormat3.equals(object0);
      cSVFormat2.getHeader();
      String string0 = cSVFormat2.toString();
      assertEquals("Delimiter=<!> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.hashCode();
      Character character0 = Character.valueOf('A');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('A');
      boolean boolean0 = cSVFormat1.equals(cSVFormat2);
      assertFalse(boolean0);
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertEquals("A", cSVFormat2.getRecordSeparator());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('R');
      cSVFormat2.equals(cSVFormat1);
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('R', (char)cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("z6FMlTA^ViZgJ");
      boolean boolean0 = cSVFormat1.equals(cSVFormat0);
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(boolean0);
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('!');
      cSVFormat1.equals(cSVFormat0);
      String string0 = cSVFormat1.toString();
      assertEquals("Delimiter=<!> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('&');
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('&', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withEscape('\\');
      cSVFormat0.withEscape('!');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('!');
      cSVFormat1.getDelimiter();
      cSVFormat0.getEscapeCharacter();
      cSVFormat0.MYSQL.withAllowMissingColumnNames(false);
      cSVFormat1.getQuoteCharacter();
      CSVFormat cSVFormat2 = CSVFormat.EXCEL;
      cSVFormat2.getCommentMarker();
      cSVFormat0.getIgnoreSurroundingSpaces();
      cSVFormat1.getIgnoreEmptyLines();
      String string0 = cSVFormat1.toString();
      assertEquals("Delimiter=<,> Escape=<!> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) cSVFormat0;
      cSVFormat0.DEFAULT.format(objectArray0);
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.hashCode();
      Character character0 = Character.valueOf(',');
      // Undeclared exception!
      try { 
        cSVFormat0.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      StringReader stringReader0 = new StringReader("");
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat1.parse(stringReader0);
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
  }

  @Test(timeout = 4000)
  public void testCommentstestComments_49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withEscape('\\');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('#');
      CSVFormat cSVFormat2 = cSVFormat1.RFC4180.withRecordSeparator('B');
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('#');
      cSVFormat3.getDelimiter();
      cSVFormat3.getEscapeCharacter();
      cSVFormat3.getQuoteCharacter();
      cSVFormat3.getCommentMarker();
      cSVFormat3.getIgnoreSurroundingSpaces();
      cSVFormat3.getIgnoreEmptyLines();
      cSVFormat2.getHeader();
      assertEquals("B", cSVFormat2.getRecordSeparator());
      
      String string0 = cSVFormat1.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> CommentStart=<#> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('z');
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat0.withQuoteMode(quoteMode0);
      boolean boolean0 = cSVFormat0.isCommentMarkerSet();
      assertFalse(boolean0);
      
      String string0 = cSVFormat1.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> CommentStart=<z> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('\u0099');
      boolean boolean0 = cSVFormat1.isCommentMarkerSet();
      assertTrue(boolean0);
      
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('\u0099');
      assertFalse(cSVFormat2.isEscapeCharacterSet());
      assertEquals('\u0099', (char)cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      StringWriter stringWriter0 = new StringWriter();
      cSVFormat0.DEFAULT.print(stringWriter0);
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("z6FMlTA^ViZgJ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Character character0 = Character.valueOf('W');
      cSVFormat1.EXCEL.withCommentMarker(character0);
      cSVFormat0.getCommentMarker();
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("z6FMlTA^ViZgJ");
      cSVFormat2.getIgnoreSurroundingSpaces();
      cSVFormat0.equals(cSVFormat1);
      String string0 = cSVFormat2.toString();
      assertEquals("Delimiter=<\t> Escape=<\\> NullString=<z6FMlTA^ViZgJ> RecordSeparator=<\n> SkipHeaderRecord:false", string0);
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String string0 = cSVFormat0.TDF.toString();
      assertEquals("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", string0);
      
      cSVFormat0.hashCode();
      assertFalse(cSVFormat0.isCommentMarkerSet());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('#');
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('#');
      char char0 = cSVFormat2.getDelimiter();
      assertEquals(',', char0);
      
      cSVFormat3.getEscapeCharacter();
      String string0 = cSVFormat3.TDF.toString();
      assertEquals("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", string0);
      
      cSVFormat3.getQuoteCharacter();
      cSVFormat0.getCommentMarker();
      boolean boolean0 = cSVFormat3.getIgnoreSurroundingSpaces();
      boolean boolean1 = cSVFormat2.getIgnoreEmptyLines();
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = cSVFormat3.isEscapeCharacterSet();
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat3.isNullStringSet());
      assertEquals('#', (char)cSVFormat3.getCommentMarker());
      assertTrue(cSVFormat3.isQuoteCharacterSet());
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character character0 = Character.valueOf('h');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      boolean boolean0 = cSVFormat2.isNullStringSet();
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(boolean0);
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('h', (char)cSVFormat2.getEscapeCharacter());
      assertTrue(cSVFormat2.isEscapeCharacterSet());
      assertTrue(cSVFormat2.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('`');
      boolean boolean0 = cSVFormat1.equals(cSVFormat0);
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(boolean0);
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('`', (char)cSVFormat1.getEscapeCharacter());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("z6FMlTA^ViZgJ");
      cSVFormat1.equals(cSVFormat0);
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker(',');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("%OzWe.X^D\"o S");
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertEquals("%OzWe.X^D\"o S", cSVFormat1.getNullString());
      assertEquals(',', cSVFormat1.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.TDF.withSkipHeaderRecord(false);
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      assertEquals('\"', (char)cSVFormat1.getQuoteCharacter());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      boolean boolean0 = cSVFormat0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object object0 = new Object();
      boolean boolean0 = cSVFormat0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker('\\');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('\\')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker('\"');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('\"')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('Y');
      cSVFormat0.hashCode();
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('Y', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.getAllowMissingColumnNames();
      assertFalse(cSVFormat0.isQuoteCharacterSet());
      
      Object[] objectArray0 = new Object[1];
      cSVFormat0.format(objectArray0);
      assertTrue(cSVFormat0.isEscapeCharacterSet());
  }

  @Test(timeout = 4000)
  public void testEscapedControlCharacter_71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withEscape('\\');
      cSVFormat0.withEscape('!');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('!');
      char char0 = cSVFormat1.getDelimiter();
      assertEquals(',', char0);
      
      Character character0 = cSVFormat1.getEscapeCharacter();
      assertEquals('!', (char)character0);
      
      Character character1 = cSVFormat1.getQuoteCharacter();
      assertEquals('\"', (char)character1);
      
      cSVFormat1.getCommentMarker();
      boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
      boolean boolean1 = cSVFormat1.getIgnoreEmptyLines();
      assertFalse(boolean1 == boolean0);
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.getCommentMarker();
      Object object0 = new Object();
      boolean boolean0 = cSVFormat0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.EXCEL.parse(pipedReader0);
      cSVFormat0.hashCode();
  }
}
