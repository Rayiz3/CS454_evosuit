/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 17:49:02 GMT 2023
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.util.Locale;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVFormat_ESTest extends CSVFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        CSVFormat.newFormat('\n');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The delimiter cannot be a line break
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('\u0083');
      CSVFormat cSVFormat2 = CSVFormat.newFormat('\u0083');
      Object[] objectArray0 = new Object[1];
      String string0 = cSVFormat1.format(objectArray0);
      assertEquals("\"\"", string0);
      
      CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator("\"\"");
      cSVFormat2.equals(cSVFormat3);
      cSVFormat0.hashCode();
      cSVFormat0.EXCEL.withCommentMarker('\u0083');
      String string1 = cSVFormat0.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", string1);
      
      CSVFormat cSVFormat4 = cSVFormat2.withNullString("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false");
      CSVFormat cSVFormat5 = cSVFormat4.withAllowMissingColumnNames(false);
      assertEquals('\u0083', cSVFormat5.getDelimiter());
      assertTrue(cSVFormat5.equals((Object)cSVFormat4));
      
      Character character0 = new Character('\u0083');
      CSVFormat cSVFormat6 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat7 = cSVFormat1.withQuote('*');
      cSVFormat6.withNullString("\"\"");
      cSVFormat7.hashCode();
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertEquals('*', (char)cSVFormat7.getQuoteCharacter());
      assertEquals('\u0083', (char)cSVFormat7.getCommentMarker());
      assertTrue(cSVFormat7.getIgnoreEmptyLines());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      // Undeclared exception!
      try { 
        cSVFormat1.withDelimiter('\r');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The delimiter cannot be a line break
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      // Undeclared exception!
      try { 
        cSVFormat0.withEscape('\n');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character cannot be a line break
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = Character.valueOf('\r');
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start marker character cannot be a line break
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      // Undeclared exception!
      try { 
        cSVFormat0.withQuote('\r');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar cannot be a line break
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        CSVFormat.newFormat('\r');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The delimiter cannot be a line break
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('E');
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
      cSVFormat2.hashCode();
      assertEquals('E', (char)cSVFormat2.getCommentMarker());
      
      Character character0 = new Character('^');
      CSVFormat cSVFormat3 = cSVFormat0.withEscape(character0);
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.hashCode();
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals(',', cSVFormat1.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertEquals('E', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      
      String string0 = cSVFormat0.toString();
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertEquals("Delimiter=<E> SkipHeaderRecord:false", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('\u000F');
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('\u000F');
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertEquals('\u000F', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(boolean0);
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("{+T2Iw3]OuJ8L$PQ");
      CSVFormat cSVFormat2 = cSVFormat1.withQuote('G');
      Object object0 = new Object();
      cSVFormat2.equals(object0);
      boolean boolean0 = cSVFormat1.equals(cSVFormat2);
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\t', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.isNullStringSet());
      assertEquals('G', (char)cSVFormat2.getQuoteCharacter());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = CSVFormat.TDF;
      boolean boolean0 = cSVFormat1.equals(cSVFormat2);
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('0');
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(boolean0);
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertEquals("0", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('k');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString(".&E_Pfjea(hmg");
      CSVFormat cSVFormat3 = CSVFormat.EXCEL;
      CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat5 = cSVFormat2.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat6 = cSVFormat2.withEscape('8');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat7 = cSVFormat4.DEFAULT.withQuoteMode(quoteMode0);
      assertTrue(cSVFormat7.getIgnoreEmptyLines());
      
      CSVFormat cSVFormat8 = cSVFormat6.withDelimiter('y');
      assertEquals('y', cSVFormat8.getDelimiter());
      
      CSVFormat cSVFormat9 = cSVFormat4.withNullString(".&E_Pfjea(hmg");
      Character character0 = Character.valueOf('8');
      CSVFormat cSVFormat10 = cSVFormat5.withEscape(character0);
      boolean boolean0 = cSVFormat10.equals(character0);
      assertTrue(cSVFormat10.equals((Object)cSVFormat6));
      assertFalse(boolean0);
      
      cSVFormat1.hashCode();
      Character character1 = new Character('y');
      Character character2 = Character.valueOf('1');
      cSVFormat2.withEscape(character2);
      String string0 = cSVFormat5.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> CommentStart=<k> NullString=<.&E_Pfjea(hmg> RecordSeparator=<\r\n> SkipHeaderRecord:false", string0);
      assertTrue(cSVFormat5.getAllowMissingColumnNames());
      
      cSVFormat9.hashCode();
      assertTrue(cSVFormat3.equals((Object)cSVFormat4));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Locale.getISOLanguages();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      CSVFormat cSVFormat3 = cSVFormat0.withAllowMissingColumnNames(true);
      assertTrue(cSVFormat3.getAllowMissingColumnNames());
      
      boolean boolean0 = cSVFormat0.equals(cSVFormat2);
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(boolean0);
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("Hade:");
      cSVFormat1.hashCode();
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Character character0 = new Character('r');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
      cSVFormat1.getCommentMarker();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Locale.getISOLanguages();
      Object object0 = new Object();
      CSVFormat cSVFormat3 = cSVFormat0.DEFAULT.withDelimiter('@');
      CSVFormat cSVFormat4 = cSVFormat3.withNullString(";9A%a~_B`UG'm<");
      CSVFormat cSVFormat5 = cSVFormat1.withSkipHeaderRecord(false);
      CSVFormat cSVFormat6 = cSVFormat5.MYSQL.withIgnoreSurroundingSpaces(false);
      assertFalse(cSVFormat6.getIgnoreSurroundingSpaces());
      
      cSVFormat2.equals(cSVFormat5);
      cSVFormat2.withEscape(character0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat5));
      
      boolean boolean0 = cSVFormat4.isNullStringSet();
      assertTrue(boolean0);
      assertTrue(cSVFormat4.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertEquals('@', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat3.equals((Object)cSVFormat0));
      assertFalse(cSVFormat4.getIgnoreSurroundingSpaces());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('E');
      assertEquals('E', cSVFormat1.getDelimiter());
      
      CSVFormat cSVFormat2 = cSVFormat0.withNullString(".&E_Pfjea(hmg");
      String string0 = cSVFormat2.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> NullString=<.&E_Pfjea(hmg> RecordSeparator=<\r\n> SkipHeaderRecord:false", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Locale.getISOLanguages();
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      boolean boolean0 = cSVFormat1.equals(cSVFormat0);
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(boolean0);
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('k');
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('f');
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      boolean boolean0 = cSVFormat1.equals(cSVFormat2);
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertTrue(cSVFormat2.equals((Object)cSVFormat3));
      assertFalse(boolean0);
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('k', (char)cSVFormat2.getCommentMarker());
      assertEquals('f', (char)cSVFormat2.getEscapeCharacter());
      assertEquals('\"', (char)cSVFormat2.getQuoteCharacter());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('k');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString(".&E_Pfjea(hmg");
      CSVFormat cSVFormat3 = cSVFormat0.withAllowMissingColumnNames(false);
      cSVFormat0.withAllowMissingColumnNames(true);
      Character character0 = new Character('%');
      CSVFormat cSVFormat4 = CSVFormat.EXCEL;
      boolean boolean0 = cSVFormat4.equals(cSVFormat2);
      assertEquals('k', (char)cSVFormat2.getCommentMarker());
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('k');
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('k', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = CSVFormat.RFC4180;
      boolean boolean0 = cSVFormat1.equals(cSVFormat0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withEscape((Character) null);
      cSVFormat0.hashCode();
      boolean boolean0 = cSVFormat1.equals(cSVFormat0);
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(boolean0);
      assertEquals('\t', cSVFormat1.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat1.getHeader();
      // Undeclared exception!
      try { 
        cSVFormat0.EXCEL.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat1.hashCode();
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.getSkipHeaderRecord());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = Locale.getISOCountries();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat0.equals(cSVFormat1);
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertFalse(boolean0);
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('E');
      cSVFormat1.equals(cSVFormat0);
      CSVFormat cSVFormat2 = cSVFormat0.withEscape((Character) null);
      CSVFormat cSVFormat3 = cSVFormat1.withDelimiter('F');
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('E', (char)cSVFormat3.getEscapeCharacter());
      assertEquals('F', cSVFormat3.getDelimiter());
      assertTrue(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(cSVFormat3.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = CSVFormat.newFormat('k');
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertFalse(cSVFormat1.getSkipHeaderRecord());
      assertEquals('k', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(boolean0);
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(boolean0);
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      boolean boolean0 = cSVFormat0.equals(cSVFormat0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.getIgnoreEmptyLines();
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      Object object0 = new Object();
      CSVFormat cSVFormat2 = cSVFormat0.withDelimiter('@');
      assertEquals('@', cSVFormat2.getDelimiter());
      
      CSVFormat cSVFormat3 = cSVFormat1.withNullString(";9A%a~_B`UG'm<");
      boolean boolean0 = cSVFormat3.equals(cSVFormat1);
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.equals((Object)cSVFormat2));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("a!;BAI\"");
      CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(false);
      boolean boolean0 = cSVFormat3.equals(cSVFormat2);
      assertFalse(boolean0);
      assertTrue(cSVFormat3.getAllowMissingColumnNames());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('v');
      boolean boolean0 = cSVFormat1.equals(cSVFormat0);
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(boolean0);
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = Locale.getISOLanguages();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      String string0 = cSVFormat1.toString();
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false Header:[aa, ab, ae, af, ak, am, an, ar, as, av, ay, az, ba, be, bg, bh, bi, bm, bn, bo, br, bs, ca, ce, ch, co, cr, cs, cu, cv, cy, da, de, dv, dz, ee, el, en, eo, es, et, eu, fa, ff, fi, fj, fo, fr, fy, ga, gd, gl, gn, gu, gv, ha, he, hi, ho, hr, ht, hu, hy, hz, ia, id, ie, ig, ii, ik, in, io, is, it, iu, iw, ja, ji, jv, ka, kg, ki, kj, kk, kl, km, kn, ko, kr, ks, ku, kv, kw, ky, la, lb, lg, li, ln, lo, lt, lu, lv, mg, mh, mi, mk, ml, mn, mo, mr, ms, mt, my, na, nb, nd, ne, ng, nl, nn, no, nr, nv, ny, oc, oj, om, or, os, pa, pi, pl, ps, pt, qu, rm, rn, ro, ru, rw, sa, sc, sd, se, sg, si, sk, sl, sm, sn, so, sq, sr, ss, st, su, sv, sw, ta, te, tg, th, ti, tk, tl, tn, to, tr, ts, tt, tw, ty, ug, uk, ur, uz, ve, vi, vo, wa, wo, xh, yi, yo, za, zh, zu]", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("!");
      boolean boolean0 = cSVFormat0.equals(cSVFormat2);
      assertFalse(boolean0);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.DEFAULT;
      boolean boolean0 = cSVFormat1.equals(cSVFormat0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker('0');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('0')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      boolean boolean0 = cSVFormat0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
      // Undeclared exception!
      try { 
        cSVFormat0.withEscape('0');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('0')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('M');
      Character character0 = Character.valueOf('M');
      // Undeclared exception!
      try { 
        cSVFormat1.withQuote(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('M')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object object0 = new Object();
      boolean boolean0 = cSVFormat0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      
      CSVFormat cSVFormat2 = CSVFormat.newFormat('3');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('!');
      assertEquals('!', (char)cSVFormat3.getCommentMarker());
      
      CSVFormat cSVFormat4 = CSVFormat.newFormat('O');
      cSVFormat2.getEscapeCharacter();
      cSVFormat4.getQuoteCharacter();
      cSVFormat4.getIgnoreEmptyLines();
      cSVFormat0.hashCode();
      cSVFormat4.hashCode();
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker((Character) null);
      assertTrue(cSVFormat5.equals((Object)cSVFormat4));
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
      cSVFormat0.hashCode();
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
      assertEquals('E', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      // Undeclared exception!
      try { 
        cSVFormat0.MYSQL.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('v');
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('f');
      cSVFormat3.MYSQL.withIgnoreEmptyLines(true);
      cSVFormat1.getDelimiter();
      Character.valueOf('\\');
      Character character0 = new Character('l');
      cSVFormat0.withEscape(character0);
      cSVFormat1.DEFAULT.withAllowMissingColumnNames(false);
      Character character1 = new Character('\\');
      cSVFormat1.getCommentMarker();
      cSVFormat2.getIgnoreSurroundingSpaces();
      cSVFormat1.getIgnoreEmptyLines();
      cSVFormat1.hashCode();
      cSVFormat1.getRecordSeparator();
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      
      String string0 = cSVFormat2.toString();
      assertEquals("Delimiter=<\t> QuoteChar=<\"> CommentStart=<v> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('E');
      String string0 = cSVFormat1.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> CommentStart=<E> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'null' in [null, null, null, null, null, null, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.DEFAULT.withSkipHeaderRecord(false);
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('k');
      CSVFormat cSVFormat2 = cSVFormat1.withNullString(".&E_Pfjea(hmg");
      CSVFormat cSVFormat3 = cSVFormat0.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat4 = cSVFormat0.withAllowMissingColumnNames(false);
      Character character0 = new Character('%');
      boolean boolean0 = cSVFormat1.equals(cSVFormat3);
      assertFalse(boolean0);
      
      cSVFormat4.hashCode();
      cSVFormat1.withQuote(character0);
      String string0 = cSVFormat2.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> CommentStart=<k> NullString=<.&E_Pfjea(hmg> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
      assertTrue(cSVFormat0.equals((Object)cSVFormat3));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('v');
      assertEquals('\t', cSVFormat2.getDelimiter());
      
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('f');
      cSVFormat1.getDelimiter();
      Character.valueOf('\\');
      cSVFormat0.getQuoteCharacter();
      cSVFormat1.getCommentMarker();
      cSVFormat0.getIgnoreSurroundingSpaces();
      cSVFormat1.getIgnoreEmptyLines();
      cSVFormat3.hashCode();
      cSVFormat2.getRecordSeparator();
      String string0 = cSVFormat1.toString();
      assertEquals("Delimiter=<\t> Escape=<\\> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      // Undeclared exception!
      try { 
        cSVFormat0.withDelimiter('\"');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('\"')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('!');
      CSVFormat cSVFormat3 = cSVFormat0.withEscape('!');
      char char0 = cSVFormat3.getDelimiter();
      assertEquals(',', char0);
      
      Character character0 = cSVFormat3.getEscapeCharacter();
      assertEquals('!', (char)character0);
      
      cSVFormat2.getQuoteCharacter();
      cSVFormat3.getCommentMarker();
      boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
      boolean boolean1 = cSVFormat1.getIgnoreEmptyLines();
      assertFalse(boolean1 == boolean0);
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      
      boolean boolean2 = cSVFormat0.isNullStringSet();
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat0.RFC4180.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('#');
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('#');
      char char0 = cSVFormat3.getDelimiter();
      assertEquals(',', char0);
      
      cSVFormat3.getEscapeCharacter();
      cSVFormat3.getQuoteCharacter();
      cSVFormat3.getCommentMarker();
      boolean boolean0 = cSVFormat2.getIgnoreSurroundingSpaces();
      assertFalse(boolean0);
      
      cSVFormat0.getIgnoreEmptyLines();
      cSVFormat1.hashCode();
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = Locale.getISOLanguages();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat1.parse(pipedReader0);
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false", string0);
      
      cSVFormat0.hashCode();
      Character character0 = Character.valueOf('<');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker(character0);
      assertEquals(',', cSVFormat2.getDelimiter());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = cSVFormat0.getHeader();
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('P');
      cSVFormat1.hashCode();
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('P', (char)cSVFormat1.getCommentMarker());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('#');
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('#');
      char char0 = cSVFormat3.getDelimiter();
      assertEquals(',', char0);
      
      cSVFormat3.getEscapeCharacter();
      cSVFormat3.getQuoteCharacter();
      cSVFormat3.getCommentMarker();
      boolean boolean0 = cSVFormat3.getIgnoreSurroundingSpaces();
      boolean boolean1 = cSVFormat1.getIgnoreEmptyLines();
      assertFalse(boolean1 == boolean0);
      
      cSVFormat2.hashCode();
      assertFalse(cSVFormat2.isEscapeCharacterSet());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('#');
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('#');
      char char0 = cSVFormat3.getDelimiter();
      assertEquals(',', char0);
      
      cSVFormat2.getEscapeCharacter();
      cSVFormat2.getQuoteCharacter();
      cSVFormat1.getCommentMarker();
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      
      boolean boolean0 = cSVFormat2.getIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = CSVFormat.EXCEL;
      CSVFormat cSVFormat5 = cSVFormat4.withRecordSeparator('#');
      cSVFormat5.getIgnoreEmptyLines();
      assertEquals("#", cSVFormat5.getRecordSeparator());
      
      boolean boolean1 = cSVFormat3.getAllowMissingColumnNames();
      assertTrue(boolean1 == boolean0);
      assertFalse(cSVFormat3.isNullStringSet());
      assertEquals('#', (char)cSVFormat3.getCommentMarker());
      assertTrue(cSVFormat3.getIgnoreEmptyLines());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('\\');
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\\', (char)cSVFormat1.getQuoteCharacter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withNullString("@$gC[-sC&,ZW00");
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("@$gC[-sC&,ZW00", cSVFormat1.getNullString());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      
      cSVFormat1.MYSQL.format(stringArray0);
      cSVFormat0.hashCode();
      assertFalse(cSVFormat0.isEscapeCharacterSet());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\u000F');
      // Undeclared exception!
      try { 
        cSVFormat1.withCommentMarker('\u000F');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('\u000F')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.DEFAULT.format(stringArray0);
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('\t', cSVFormat1.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('P');
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals('P', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isCommentMarkerSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();
      cSVFormat0.getEscapeCharacter();
      boolean boolean1 = cSVFormat0.getIgnoreEmptyLines();
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('k');
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals('k', (char)cSVFormat1.getCommentMarker());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      
      cSVFormat0.getDelimiter();
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void testEscapedControlCharacter_79()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withEscape('\\');
      cSVFormat0.withEscape('!');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('!');
      char char0 = cSVFormat1.getDelimiter();
      assertEquals(',', char0);
      
      Character character0 = cSVFormat1.getEscapeCharacter();
      assertEquals('!', (char)character0);
      
      Character character1 = cSVFormat1.getQuoteCharacter();
      assertEquals('\"', (char)character1);
      
      cSVFormat1.getCommentMarker();
      boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
      boolean boolean1 = cSVFormat1.getIgnoreEmptyLines();
      assertTrue(cSVFormat1.isEscapeCharacterSet());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(boolean1 == boolean0);
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String string0 = cSVFormat0.toString();
      assertEquals("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.EXCEL.parse(pipedReader0);
      cSVFormat0.hashCode();
  }
}
