/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 17 00:36:01 GMT 2023
 */

package org.apache.commons.math.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.math.fraction.BigFraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BigFraction_ESTest extends BigFraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction1 = new BigFraction(9007197107257344L, 9007197107257344L);
      Object object0 = new Object();
      String string0 = bigFraction1.toString();
      assertEquals("1", string0);
      
      BigInteger bigInteger0 = BigInteger.valueOf((-612L));
      BigFraction bigFraction2 = bigFraction1.pow(bigInteger0);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.0);
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = bigFraction0.THREE_FIFTHS.reduce();
      BigFraction bigFraction2 = new BigFraction((-1507), (-1507));
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((byte)1, bigFraction2.byteValue());
      
      String string0 = bigFraction0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      // Undeclared exception!
      try { 
        bigFraction0.multiply((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.9965147000000343);
      bigFraction0.toString();
      // Undeclared exception!
      try { 
        bigFraction0.ZERO.add((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(7.710512446969693E192, 1.8461538461544968E-4, 607);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 7,710,512,446,969,693,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000 to fraction (9,223,372,036,854,775,807/1)
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.THREE_QUARTERS.getDenominatorAsLong();
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction2 = bigFraction1.multiply(bigFraction0);
      assertSame(bigFraction2, bigFraction0);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      int int0 = bigFraction0.compareTo(bigFraction1);
      assertEquals((-1), int0);
      
      bigFraction1.ONE_FIFTH.getDenominatorAsInt();
      BigFraction bigFraction2 = bigFraction0.negate();
      bigFraction2.TWO_THIRDS.getNumeratorAsInt();
      bigFraction0.intValue();
      BigFraction bigFraction3 = BigFraction.MINUS_ONE;
      bigFraction1.intValue();
      BigFraction bigFraction4 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction5 = bigFraction4.divide(bigFraction1);
      assertEquals((short)1, bigFraction5.shortValue());
      assertFalse(bigFraction5.equals((Object)bigFraction3));
      
      BigFraction bigFraction6 = BigFraction.getReducedFraction(0, 1020);
      assertSame(bigFraction6, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(2.992806997781372E-7, 2.992806997781372E-7, (-1218));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 0 to fraction after -1,218 iterations
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = new BigFraction((-2021.19488466013), 1.8461538461544968E-4, 52);
      BigFraction bigFraction2 = null;
      // Undeclared exception!
      try { 
        bigFraction0.subtract((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      bigFraction0.abs();
      BigFraction bigFraction1 = new BigFraction((-2302.3855954437836), 1.0, 2147483640);
      Random.setNextRandom(2147483640);
      BigFraction bigFraction2 = BigFraction.TWO;
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction2.divide(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction2 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction3 = bigFraction0.add(bigFraction1);
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
      assertEquals((short)0, bigFraction3.shortValue());
      assertNotSame(bigFraction3, bigFraction0);
      assertFalse(bigFraction3.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4890);
      bigFraction0.TWO_QUARTERS.floatValue();
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      double double0 = bigFraction0.ONE.percentageValue();
      assertEquals(100.0, double0, 0.01);
      
      BigFraction bigFraction2 = bigFraction1.TWO_THIRDS.pow((long) 4890);
      BigFraction bigFraction3 = bigFraction0.ONE_QUARTER.add(bigFraction1);
      Object object0 = new Object();
      bigFraction0.TWO_QUARTERS.toString();
      bigFraction3.equals(bigFraction1);
      assertEquals((byte)0, bigFraction3.byteValue());
      
      BigFraction bigFraction4 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction5 = BigFraction.MINUS_ONE;
      bigFraction5.multiply(4890);
      BigFraction bigFraction6 = new BigFraction(1.0);
      assertEquals((short)1, bigFraction6.shortValue());
      
      BigInteger bigInteger0 = BigInteger.ONE;
      bigFraction1.pow(bigInteger0);
      bigFraction5.reduce();
      bigFraction2.divide(65536L);
      BigFraction bigFraction7 = bigFraction4.negate();
      BigFraction bigFraction8 = bigFraction2.negate();
      bigFraction0.divide(bigInteger0);
      BigFraction bigFraction9 = new BigFraction(4074.57494244, 1.0, 2147352583);
      bigFraction9.reciprocal();
      assertEquals((byte) (-22), bigFraction9.byteValue());
      
      double double1 = bigFraction4.pow(5543.063045048976);
      assertEquals(0.0, double1, 0.01);
      
      BigFraction bigFraction10 = bigFraction2.divide(bigInteger0);
      BigFraction bigFraction11 = bigFraction7.add(bigFraction8);
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertEquals((short)0, bigFraction11.shortValue());
      assertTrue(bigFraction2.equals((Object)bigFraction10));
      assertFalse(bigFraction2.equals((Object)bigFraction8));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-4507L));
      BigFraction bigFraction1 = bigFraction0.ZERO.abs();
      BigFraction bigFraction2 = bigFraction1.THREE_FIFTHS.divide(1L);
      bigFraction1.FOUR_FIFTHS.getNumeratorAsLong();
      bigFraction0.THREE_FIFTHS.percentageValue();
      bigFraction0.getNumeratorAsInt();
      bigFraction1.ONE_HALF.getField();
      bigFraction0.longValue();
      bigFraction2.getNumerator();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte)76;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((short) (-13236), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((double) (-344));
      assertEquals((short) (-344), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(599, 599, 599);
      assertEquals((short)599, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      bigFraction0.TWO_FIFTHS.subtract(bigFraction1);
      Random.setNextRandom((-2147483647));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(9.549694368615746E-11, 9.549694368615746E-11, 3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/10,471,539,312)
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-2889.458141712441));
      assertEquals((short) (-2889), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = (-2303);
      BigFraction bigFraction0 = BigFraction.getReducedFraction((-2303), (-2303));
      BigFraction bigFraction1 = bigFraction0.FOUR_FIFTHS.subtract((-2303));
      bigFraction1.FOUR_FIFTHS.toString();
      double double0 = (-867.4225);
      BigInteger bigInteger0 = null;
      // Undeclared exception!
      try { 
        bigFraction0.TWO_THIRDS.divide((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(607.0, (-1425.0), 607);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 607 to fraction (9,223,372,036,854,775,202/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = BigFraction.TWO_QUARTERS;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      Object object0 = new Object();
      String string0 = bigFraction0.toString();
      assertEquals("1 / 5", string0);
      
      BigFraction bigFraction3 = new BigFraction(0.0);
      BigFraction bigFraction4 = bigFraction3.divide(bigFraction2);
      assertTrue(bigFraction4.equals((Object)bigFraction3));
      assertEquals((byte)0, bigFraction2.byteValue());
      assertNotSame(bigFraction2, bigFraction0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-785.78398658));
      bigFraction0.ONE_HALF.doubleValue();
      BigFraction bigFraction1 = BigFraction.THREE_FIFTHS;
      bigFraction0.compareTo(bigFraction1);
      bigFraction1.TWO_FIFTHS.pow((long) (-1));
      bigFraction0.TWO_QUARTERS.pow((-785.78398658));
      BigFraction bigFraction2 = new BigFraction((-785.78398658), 0.5, (-1));
      bigFraction0.intValue();
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = null;
      // Undeclared exception!
      try { 
        bigFraction1.multiply((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(48.8001, 5.714285703106725E-5, 607);
      // Undeclared exception!
      try { 
        bigFraction0.TWO.subtract((BigInteger) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      bigFraction0.THREE_QUARTERS.pow((-2971));
      bigFraction0.TWO_THIRDS.getDenominatorAsInt();
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      BigFraction bigFraction1 = bigFraction0.add(1844L);
      bigFraction1.abs();
      BigFraction bigFraction2 = new BigFraction(0.0);
      assertEquals((byte)0, bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      String string0 = bigFraction0.toString();
      assertEquals("-1", string0);
      
      bigFraction0.MINUS_ONE.multiply(2147483648L);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      long long0 = 3380L;
      BigFraction bigFraction0 = new BigFraction((-2369L), 3380L);
      BigFraction bigFraction1 = BigFraction.getReducedFraction(216, 216);
      bigFraction1.TWO_QUARTERS.add(bigFraction0);
      bigFraction0.getDenominator();
      int int0 = 317415;
      // Undeclared exception!
      try { 
        bigFraction0.TWO_QUARTERS.bigDecimalValue(317415, 216);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 1393;
      BigFraction bigFraction0 = new BigFraction(1393);
      bigFraction0.ONE_THIRD.divide(119);
      BigFraction bigFraction1 = bigFraction0.pow(113L);
      BigFraction bigFraction2 = bigFraction1.TWO.divide(bigFraction0);
      BigFraction bigFraction3 = bigFraction0.abs();
      bigFraction3.intValue();
      bigFraction2.pow(39.96742708);
      BigFraction bigFraction4 = bigFraction2.add(1393);
      bigFraction4.TWO.getNumeratorAsLong();
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(119, 119);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.ONE_HALF.pow(1.3608995799112174E108);
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigFraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.FOUR_FIFTHS.pow(727);
      BigInteger bigInteger0 = BigInteger.TEN;
      assertEquals((short)10, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.ONE_QUARTER.multiply(2147450880);
      BigInteger bigInteger0 = BigInteger.ZERO;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction2 = bigFraction1.ONE_THIRD.negate();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction3 = bigFraction1.pow(bigInteger0);
      BigFraction bigFraction4 = bigFraction2.add(bigFraction3);
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction4.equals((Object)bigFraction0));
      assertNotSame(bigFraction4, bigFraction2);
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertEquals((short)0, bigFraction4.shortValue());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = new BigFraction(1.8461538461544968E-4, 1.8461538461544968E-4, 52);
      BigFraction bigFraction2 = bigFraction0.TWO.subtract(bigFraction1);
      assertFalse(bigFraction2.equals((Object)bigFraction1));
      assertEquals((short)1, bigFraction2.shortValue());
      
      bigFraction0.THREE_FIFTHS.toString();
      bigFraction0.MINUS_ONE.equals((Object) null);
      Object object0 = new Object();
      bigFraction0.equals(object0);
      bigFraction0.getDenominatorAsLong();
      BigFraction bigFraction3 = bigFraction0.reduce();
      assertTrue(bigFraction3.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.8461538461544968E-4, 1.8461538461544968E-4, 52);
      assertEquals((short)0, bigFraction0.shortValue());
      
      BigFraction bigFraction1 = BigFraction.getReducedFraction(52, 52);
      assertEquals((byte)1, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1472.967);
      BigFraction bigFraction1 = new BigFraction(1.8461538461544968E-4, 52);
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigFraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction((-393.896), (-393.896), 1087);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -393.896 to fraction (-210,062,575,178,319/533,294,512,202)
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.ONE_THIRD.longValue();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = BigFraction.ONE_HALF;
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-259.3521));
      BigFraction bigFraction1 = new BigFraction((-259.3521), Integer.MAX_VALUE);
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertEquals((byte) (-6), bigFraction2.byteValue());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_THIRDS;
      bigFraction0.ONE.subtract(1075);
      bigFraction0.toString();
      // Undeclared exception!
      try { 
        bigFraction0.divide((BigInteger) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.add(bigFraction0);
      assertSame(bigFraction1, bigFraction0);
      
      Object object0 = new Object();
      BigFraction bigFraction2 = BigFraction.ONE_HALF;
      assertFalse(bigFraction2.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      bigFraction0.MINUS_ONE.pow(1367);
      // Undeclared exception!
      try { 
        bigFraction0.THREE_QUARTERS.bigDecimalValue(1609);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction2 = bigFraction1.pow(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.multiply(bigInteger0);
      BigFraction bigFraction4 = bigFraction1.subtract(bigFraction2);
      assertNotSame(bigFraction4, bigFraction1);
      assertFalse(bigFraction4.equals((Object)bigFraction1));
      assertEquals((byte)0, bigFraction4.byteValue());
      assertFalse(bigFraction2.equals((Object)bigFraction3));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.ONE_HALF.divide(9218868437227405312L);
      Random.setNextRandom(110);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.abs();
      BigFraction bigFraction2 = bigFraction0.divide((-9223372036854775808L));
      bigFraction1.getNumeratorAsLong();
      bigFraction0.percentageValue();
      bigFraction2.getNumeratorAsInt();
      bigFraction1.getField();
      bigFraction2.longValue();
      BigInteger bigInteger0 = bigFraction1.getNumerator();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-52);
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4851);
      float float0 = bigFraction0.TWO_QUARTERS.floatValue();
      assertEquals(0.5F, float0, 0.01F);
      
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      double double0 = bigFraction0.ONE.percentageValue();
      assertEquals(100.0, double0, 0.01);
      
      BigFraction bigFraction2 = bigFraction0.subtract(4851);
      bigFraction2.TWO.pow(4851);
      assertEquals((byte)0, bigFraction2.byteValue());
      
      BigFraction bigFraction3 = BigFraction.THREE_QUARTERS;
      bigFraction0.getNumeratorAsInt();
      int int0 = bigFraction0.getDenominatorAsInt();
      assertEquals(1, int0);
      
      bigFraction3.intValue();
      BigFraction bigFraction4 = bigFraction3.divide(bigFraction0);
      assertFalse(bigFraction4.equals((Object)bigFraction3));
      assertFalse(bigFraction4.equals((Object)bigFraction2));
      assertEquals((short)0, bigFraction4.shortValue());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.5128500481678728);
      bigFraction0.ZERO.getDenominatorAsInt();
      String string0 = bigFraction0.toString();
      assertEquals((byte)1, bigFraction0.byteValue());
      assertEquals("6813270913196269 / 4503599627370496", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigInteger bigInteger0 = BigInteger.ZERO;
      long long0 = bigFraction0.getDenominatorAsLong();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigFraction bigFraction1 = new BigFraction(1.8461538461544968E-4, 52, 3);
      BigFraction bigFraction2 = bigFraction0.subtract(bigFraction1);
      BigFraction bigFraction3 = new BigFraction((-1885L), (-3045L));
      boolean boolean0 = bigFraction1.equals(bigFraction3);
      assertFalse(boolean0);
      assertEquals((byte)0, bigFraction3.byteValue());
      
      BigFraction bigFraction4 = BigFraction.THREE_QUARTERS;
      bigFraction4.getDenominatorAsLong();
      BigFraction bigFraction5 = bigFraction4.reduce();
      assertSame(bigFraction4, bigFraction2);
      assertTrue(bigFraction5.equals((Object)bigFraction2));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction0.divide(bigFraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.getNumeratorAsLong();
      BigFraction bigFraction1 = new BigFraction(52, 52, (-2147483647));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)52, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = new BigFraction(bigInteger0);
      BigFraction bigFraction1 = bigFraction0.ONE_HALF.reciprocal();
      BigFraction bigFraction2 = bigFraction0.divide(740);
      bigFraction2.ONE_HALF.multiply(bigFraction1);
      bigFraction1.getNumeratorAsLong();
      BigFraction bigFraction3 = bigFraction1.add(2996);
      bigFraction3.getNumeratorAsInt();
      BigFraction bigFraction4 = bigFraction1.abs();
      bigFraction4.ONE_THIRD.subtract((long) 2996);
      bigFraction4.ZERO.divide(2);
      BigFraction bigFraction5 = bigFraction4.add(bigInteger0);
      // Undeclared exception!
      try { 
        bigFraction5.THREE_FIFTHS.divide(bigFraction2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      bigFraction0.getNumeratorAsInt();
      BigFraction bigFraction1 = null;
      try {
        bigFraction1 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.MINUS_ONE;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = new BigFraction(bigInteger0);
      assertEquals((short)10, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.THREE_QUARTERS.abs();
      BigFraction bigFraction2 = bigFraction0.pow(bigInteger0);
      BigFraction bigFraction3 = bigFraction2.pow(bigInteger0);
      assertFalse(bigFraction3.equals((Object)bigFraction0));
      assertFalse(bigFraction0.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = BigFraction.ONE_FIFTH;
      int int0 = bigFraction1.compareTo(bigFraction0);
      assertEquals((-1), int0);
      
      BigFraction bigFraction2 = bigFraction0.multiply(bigFraction1);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction2.shortValue());
      assertFalse(bigFraction2.equals((Object)bigFraction1));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(0.9965147000000343);
      BigDecimal bigDecimal0 = bigFraction0.bigDecimalValue();
      assertEquals((short)0, bigDecimal0.shortValue());
      
      BigFraction bigFraction1 = new BigFraction(1389.0);
      assertEquals((short)1389, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      bigFraction0.THREE_FIFTHS.hashCode();
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.pow(bigInteger0);
      assertEquals((short)1, bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = BigFraction.getReducedFraction(510, (-3915));
      assertFalse(bigFraction1.equals((Object)bigFraction0));
      assertEquals((byte)0, bigFraction1.byteValue());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE_FIFTH;
      BigFraction bigFraction1 = bigFraction0.MINUS_ONE.reduce();
      bigFraction1.TWO.intValue();
      assertEquals((byte) (-1), bigFraction1.byteValue());
      
      String string0 = bigFraction0.toString();
      assertEquals("1 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      bigFraction0.TWO.bigDecimalValue();
      BigFraction bigFraction1 = BigFraction.THREE_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.ONE_FIFTH.subtract(bigInteger0);
      BigFraction bigFraction2 = bigFraction1.ONE_HALF.divide((-1768));
      int int0 = bigFraction0.compareTo(bigFraction1);
      assertEquals((-1), int0);
      
      double double0 = bigFraction1.ONE.percentageValue();
      assertEquals(100.0, double0, 0.01);
      
      String string0 = bigFraction2.toString();
      assertEquals("-1 / 3536", string0);
      
      bigFraction1.hashCode();
      int int1 = bigFraction0.intValue();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.ONE_FIFTH.divide((-2746));
      String string0 = bigFraction1.toString();
      assertEquals("-1 / 13730", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction1 = bigFraction0.subtract(100L);
      assertEquals((short) (-99), bigFraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigFraction bigFraction1 = bigFraction0.divide(bigInteger0);
      assertTrue(bigFraction1.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = null;
      try {
        bigFraction0 = new BigFraction(bigInteger0, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // denominator must be different from 0
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      BigFraction bigFraction1 = BigFraction.getReducedFraction(2325, 2325);
      BigFraction bigFraction2 = bigFraction0.divide(bigFraction1);
      assertEquals((short)1, bigFraction1.shortValue());
      assertTrue(bigFraction2.equals((Object)bigFraction0));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ZERO;
      bigFraction0.THREE_QUARTERS.add(2147483584);
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction0 = BigFraction.ONE_HALF;
      // Undeclared exception!
      try { 
        bigFraction0.TWO_QUARTERS.bigDecimalValue(1073741824, 1316);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.TWO_FIFTHS;
      String string0 = bigFraction0.toString();
      assertEquals("2 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction((-0.5116166051708199));
      BigFraction bigFraction1 = BigFraction.FOUR_FIFTHS;
      BigFraction bigFraction2 = bigFraction0.add(bigFraction1);
      assertNotSame(bigFraction2, bigFraction0);
      assertFalse(bigFraction2.equals((Object)bigFraction0));
      assertEquals((short)0, bigFraction2.shortValue());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_QUARTERS;
      BigInteger bigInteger0 = BigInteger.ZERO;
      bigFraction0.equals(bigInteger0);
      long long0 = bigFraction0.getDenominatorAsLong();
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(196418L);
      bigFraction0.pow(261L);
      assertEquals((short) (-190), bigFraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(4890);
      bigFraction0.TWO_QUARTERS.floatValue();
      BigFraction bigFraction1 = BigFraction.ONE_THIRD;
      bigFraction0.ONE.percentageValue();
      bigFraction1.TWO_THIRDS.pow((long) 4890);
      bigFraction0.ONE_QUARTER.add(bigFraction1);
      Object object0 = new Object();
      bigFraction0.TWO_QUARTERS.toString();
      bigFraction0.MINUS_ONE.equals(object0);
      // Undeclared exception!
      try { 
        bigFraction0.bigDecimalValue(4890, 4890);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding mode
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.THREE_FIFTHS;
      float float0 = bigFraction0.ONE_FIFTH.floatValue();
      assertEquals(0.2F, float0, 0.01F);
      
      String string0 = bigFraction0.toString();
      assertEquals("3 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1L, 1L);
      double double0 = bigFraction0.percentageValue();
      assertEquals(100.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.8461538461544968E-4);
      assertEquals((byte)0, bigFraction0.byteValue());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      BigFraction bigFraction0 = new BigFraction(1.5128500481678728);
      bigFraction0.getDenominatorAsInt();
      bigFraction0.THREE_FIFTHS.pow((-867L));
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigFraction bigFraction1 = bigFraction0.divide((long) 2147483160);
      bigFraction1.FOUR_FIFTHS.subtract((long) 0);
      BigFraction bigFraction2 = null;
      try {
        bigFraction2 = new BigFraction(1.3003900676267222E-6, 0, 1335);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (3,799/2,921,431,111)
         //
         verifyException("org.apache.commons.math.fraction.BigFraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      BigFraction bigFraction0 = BigFraction.ONE;
      bigFraction0.FOUR_FIFTHS.getField();
      BigFraction bigFraction1 = new BigFraction(7.942176091555472E-278);
      assertEquals((short)0, bigFraction1.shortValue());
  }
}
