/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 05:21:26 GMT 2023
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class X7875_NewUnix_ESTest extends X7875_NewUnix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      x7875_NewUnix0.hashCode();
      Object object0 = new Object();
      x7875_NewUnix0.getGID();
      ZipShort zipShort0 = x7875_NewUnix0.getHeaderId();
      x7875_NewUnix0.parseFromLocalFileData(byteArray0, 1, 1);
      x7875_NewUnix0.getUID();
      x7875_NewUnix0.getGID();
      x7875_NewUnix0.equals(zipShort0);
      x7875_NewUnix0.hashCode();
      x7875_NewUnix0.toString();
      x7875_NewUnix0.clone();
      byte[] byteArray1 = x7875_NewUnix0.getLocalFileDataData();
      x7875_NewUnix0.setUID((byte)6);
      x7875_NewUnix0.getHeaderId();
      X7875_NewUnix x7875_NewUnix1 = new X7875_NewUnix();
      x7875_NewUnix1.getUID();
      x7875_NewUnix1.getLocalFileDataLength();
      ZipShort zipShort1 = x7875_NewUnix0.getCentralDirectoryLength();
      assertEquals(5, zipShort1.getValue());
      
      x7875_NewUnix1.hashCode();
      x7875_NewUnix1.toString();
      x7875_NewUnix1.hashCode();
      x7875_NewUnix0.hashCode();
      x7875_NewUnix1.parseFromLocalFileData(byteArray1, 1, (-2302));
      assertArrayEquals(new byte[] {(byte)0, (byte)1, (byte)0, (byte)1, (byte)0}, byteArray1);
      
      x7875_NewUnix0.parseFromLocalFileData(byteArray0, 1, (-2174));
      assertFalse(x7875_NewUnix0.equals((Object)x7875_NewUnix1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      ZipShort zipShort0 = x7875_NewUnix0.getCentralDirectoryLength();
      x7875_NewUnix0.hashCode();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)16;
      ZipShort zipShort1 = x7875_NewUnix0.getLocalFileDataLength();
      byteArray0[1] = (byte)3;
      x7875_NewUnix0.parseFromLocalFileData(byteArray0, 2, (byte)16);
      X7875_NewUnix x7875_NewUnix1 = new X7875_NewUnix();
      x7875_NewUnix1.getGID();
      X7875_NewUnix.trimLeadingZeroesForceMinLength(byteArray0);
      Object object1 = new Object();
      x7875_NewUnix1.clone();
      x7875_NewUnix1.equals(zipShort0);
      byte[] byteArray1 = new byte[0];
      X7875_NewUnix.trimLeadingZeroesForceMinLength(byteArray1);
      X7875_NewUnix x7875_NewUnix2 = new X7875_NewUnix();
      x7875_NewUnix1.equals(zipShort1);
      x7875_NewUnix1.getLocalFileDataData();
      x7875_NewUnix0.hashCode();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      x7875_NewUnix0.getGID();
      x7875_NewUnix0.getLocalFileDataLength();
      byte[] byteArray0 = new byte[4];
      x7875_NewUnix0.parseFromLocalFileData(byteArray0, (byte)0, (byte)0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      x7875_NewUnix0.hashCode();
      x7875_NewUnix0.getCentralDirectoryLength();
      X7875_NewUnix x7875_NewUnix1 = new X7875_NewUnix();
      X7875_NewUnix x7875_NewUnix2 = new X7875_NewUnix();
      x7875_NewUnix2.parseFromLocalFileData(byteArray0, (byte)0, (byte)10);
      x7875_NewUnix1.clone();
      X7875_NewUnix.trimLeadingZeroesForceMinLength(byteArray0);
      Object object0 = new Object();
      x7875_NewUnix1.getGID();
      x7875_NewUnix1.equals(x7875_NewUnix2);
      assertTrue(x7875_NewUnix2.equals((Object)x7875_NewUnix0));
      
      X7875_NewUnix x7875_NewUnix3 = new X7875_NewUnix();
      x7875_NewUnix0.equals(x7875_NewUnix3);
      assertTrue(x7875_NewUnix0.equals((Object)x7875_NewUnix2));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      x7875_NewUnix0.getGID();
      x7875_NewUnix0.getLocalFileDataLength();
      byte[] byteArray0 = new byte[4];
      x7875_NewUnix0.parseFromLocalFileData(byteArray0, (byte)0, (byte)0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      x7875_NewUnix0.hashCode();
      x7875_NewUnix0.getCentralDirectoryLength();
      Object object0 = x7875_NewUnix0.clone();
      X7875_NewUnix x7875_NewUnix1 = new X7875_NewUnix();
      x7875_NewUnix1.parseFromLocalFileData(byteArray0, (byte)0, (byte)10);
      byte[] byteArray1 = X7875_NewUnix.trimLeadingZeroesForceMinLength(byteArray0);
      Object object1 = new Object();
      object0.equals(x7875_NewUnix1);
      X7875_NewUnix.trimLeadingZeroesForceMinLength(byteArray1);
      X7875_NewUnix x7875_NewUnix2 = new X7875_NewUnix();
      object0.equals(x7875_NewUnix2);
      x7875_NewUnix1.hashCode();
      assertTrue(x7875_NewUnix1.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = X7875_NewUnix.trimLeadingZeroesForceMinLength((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      x7875_NewUnix0.getGID();
      Object object0 = x7875_NewUnix0.clone();
      assertTrue(object0.equals((Object)x7875_NewUnix0));
      
      byte[] byteArray0 = x7875_NewUnix0.getCentralDirectoryData();
      Object object1 = x7875_NewUnix0.clone();
      x7875_NewUnix0.equals(object1);
      x7875_NewUnix0.parseFromCentralDirectoryData(byteArray0, (-1), (-1));
      X7875_NewUnix x7875_NewUnix1 = new X7875_NewUnix();
      x7875_NewUnix1.setGID(0L);
      x7875_NewUnix1.clone();
      x7875_NewUnix0.getLocalFileDataLength();
      x7875_NewUnix0.equals(x7875_NewUnix1);
      x7875_NewUnix0.getLocalFileDataLength();
      x7875_NewUnix0.getUID();
      X7875_NewUnix.trimLeadingZeroesForceMinLength(byteArray0);
      byte[] byteArray1 = X7875_NewUnix.trimLeadingZeroesForceMinLength((byte[]) null);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      byte[] byteArray0 = new byte[5];
      x7875_NewUnix0.toString();
      x7875_NewUnix0.equals((Object) null);
      x7875_NewUnix0.getCentralDirectoryLength();
      x7875_NewUnix0.getCentralDirectoryLength();
      x7875_NewUnix0.getGID();
      Object object0 = x7875_NewUnix0.clone();
      byte[] byteArray1 = x7875_NewUnix0.getCentralDirectoryData();
      Object object1 = new Object();
      x7875_NewUnix0.equals(object1);
      x7875_NewUnix0.parseFromCentralDirectoryData(byteArray0, (byte) (-79), (byte) (-79));
      assertTrue(x7875_NewUnix0.equals((Object)object0));
      
      x7875_NewUnix0.setGID((-2885L));
      x7875_NewUnix0.clone();
      X7875_NewUnix x7875_NewUnix1 = new X7875_NewUnix();
      boolean boolean0 = x7875_NewUnix0.equals(x7875_NewUnix1);
      assertFalse(boolean0);
      
      x7875_NewUnix1.getLocalFileDataLength();
      x7875_NewUnix0.getUID();
      byte[] byteArray2 = X7875_NewUnix.trimLeadingZeroesForceMinLength(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)61;
      X7875_NewUnix.trimLeadingZeroesForceMinLength(byteArray0);
      X7875_NewUnix x7875_NewUnix1 = new X7875_NewUnix();
      assertTrue(x7875_NewUnix1.equals((Object)x7875_NewUnix0));
      
      x7875_NewUnix1.setUID((byte)61);
      boolean boolean0 = x7875_NewUnix0.equals(x7875_NewUnix1);
      assertFalse(boolean0);
      
      x7875_NewUnix1.hashCode();
      x7875_NewUnix1.hashCode();
      assertFalse(x7875_NewUnix1.equals((Object)x7875_NewUnix0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      x7875_NewUnix0.setGID((-1L));
      x7875_NewUnix0.getLocalFileDataLength();
      x7875_NewUnix0.getUID();
      Object object0 = x7875_NewUnix0.clone();
      x7875_NewUnix0.equals(object0);
      x7875_NewUnix0.setGID(1L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-75);
      // Undeclared exception!
      try { 
        x7875_NewUnix0.parseFromLocalFileData(byteArray0, (byte)73, 2340);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 73
         //
         verifyException("org.apache.commons.compress.archivers.zip.X7875_NewUnix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)6;
      x7875_NewUnix0.setUID(1296L);
      x7875_NewUnix0.parseFromCentralDirectoryData(byteArray0, 5, 16);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      x7875_NewUnix0.getUID();
      x7875_NewUnix0.getLocalFileDataLength();
      ZipShort zipShort0 = x7875_NewUnix0.getLocalFileDataLength();
      byte[] byteArray0 = x7875_NewUnix0.getLocalFileDataData();
      x7875_NewUnix0.equals(zipShort0);
      ZipShort zipShort1 = x7875_NewUnix0.getLocalFileDataLength();
      x7875_NewUnix0.setGID(1000L);
      byte[] byteArray1 = X7875_NewUnix.trimLeadingZeroesForceMinLength(byteArray0);
      x7875_NewUnix0.toString();
      X7875_NewUnix.trimLeadingZeroesForceMinLength(byteArray0);
      x7875_NewUnix0.getUID();
      x7875_NewUnix0.setGID(1663L);
      x7875_NewUnix0.getCentralDirectoryData();
      x7875_NewUnix0.getLocalFileDataLength();
      x7875_NewUnix0.setUID(1000L);
      x7875_NewUnix0.equals(zipShort1);
      x7875_NewUnix0.getCentralDirectoryLength();
      x7875_NewUnix0.getLocalFileDataData();
      x7875_NewUnix0.setGID(1000L);
      int int0 = 75;
      // Undeclared exception!
      try { 
        x7875_NewUnix0.parseFromLocalFileData(byteArray1, 1814, 75);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1814
         //
         verifyException("org.apache.commons.compress.archivers.zip.X7875_NewUnix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      boolean boolean0 = x7875_NewUnix0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      byte[] byteArray0 = x7875_NewUnix0.getCentralDirectoryData();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      String string0 = x7875_NewUnix0.toString();
      assertEquals("0x7875 Zip Extra Field: UID=1000 GID=1000", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      X7875_NewUnix x7875_NewUnix1 = (X7875_NewUnix)x7875_NewUnix0.clone();
      assertTrue(x7875_NewUnix1.equals((Object)x7875_NewUnix0));
      
      long long0 = x7875_NewUnix1.getUID();
      assertEquals(1000L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      x7875_NewUnix0.setGID((-2699L));
      byte[] byteArray0 = x7875_NewUnix0.getLocalFileDataData();
      x7875_NewUnix0.hashCode();
      x7875_NewUnix0.getGID();
      x7875_NewUnix0.hashCode();
      // Undeclared exception!
      try { 
        x7875_NewUnix0.parseFromLocalFileData(byteArray0, 706, 4092);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 706
         //
         verifyException("org.apache.commons.compress.archivers.zip.X7875_NewUnix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      x7875_NewUnix0.setGID(0L);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = X7875_NewUnix.trimLeadingZeroesForceMinLength(byteArray0);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      // Undeclared exception!
      try { 
        x7875_NewUnix0.parseFromLocalFileData((byte[]) null, (-294), (-294));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.X7875_NewUnix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-4);
      byteArray0[8] = (byte)102;
      x7875_NewUnix0.parseFromLocalFileData(byteArray0, (byte)0, (byte)117);
      assertArrayEquals(new byte[] {(byte)3, (byte)2, (byte)0, (byte)117, (byte)0, (byte) (-127), (byte)0, (byte) (-4), (byte)102}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      ZipShort zipShort0 = x7875_NewUnix0.getHeaderId();
      assertEquals(30837, zipShort0.getValue());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      x7875_NewUnix0.getCentralDirectoryLength();
      x7875_NewUnix0.hashCode();
      x7875_NewUnix0.setUID((-5L));
      X7875_NewUnix x7875_NewUnix1 = new X7875_NewUnix();
      x7875_NewUnix1.setUID((-5L));
      x7875_NewUnix0.equals(x7875_NewUnix1);
      x7875_NewUnix1.setUID((-5L));
      assertTrue(x7875_NewUnix1.equals((Object)x7875_NewUnix0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      x7875_NewUnix0.setUID((-51L));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      ZipShort zipShort0 = x7875_NewUnix0.getLocalFileDataLength();
      assertEquals(7, zipShort0.getValue());
      
      byte[] byteArray0 = x7875_NewUnix0.getLocalFileDataData();
      assertArrayEquals(new byte[] {(byte)1, (byte)2, (byte) (-24), (byte)3, (byte)2, (byte) (-24), (byte)3}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      byte[] byteArray0 = x7875_NewUnix0.getLocalFileDataData();
      assertArrayEquals(new byte[] {(byte)1, (byte)2, (byte) (-24), (byte)3, (byte)2, (byte) (-24), (byte)3}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      Object object0 = x7875_NewUnix0.clone();
      boolean boolean0 = x7875_NewUnix0.equals(object0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      ZipShort zipShort0 = x7875_NewUnix0.getCentralDirectoryLength();
      assertEquals(7, zipShort0.getValue());
      
      byte[] byteArray0 = x7875_NewUnix0.getLocalFileDataData();
      assertArrayEquals(new byte[] {(byte)1, (byte)2, (byte) (-24), (byte)3, (byte)2, (byte) (-24), (byte)3}, byteArray0);
  }
}
