/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Sat Dec 16 18:19:54 GMT 2023
 */

package org.apache.commons.csv;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class CSVParser_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "org.apache.commons.csv.CSVParser"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("user.dir", "/home/coinse/Documents/jylee/defects4j/framework/temp"); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("user.home", "/home/coinse"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(CSVParser_ESTest_scaffolding.class.getClassLoader() ,
      "org.h2.jdbc.JdbcResultSetBackwardsCompat",
      "org.apache.commons.csv.Token",
      "org.h2.util.New",
      "org.h2.util.MathUtils",
      "org.apache.commons.csv.CSVRecord",
      "org.apache.commons.csv.Constants",
      "org.h2.tools.SimpleResultSet",
      "org.h2.message.DbException",
      "org.apache.commons.csv.Assertions",
      "org.apache.commons.csv.CSVParser$2",
      "org.h2.util.Utils",
      "org.apache.commons.csv.QuoteMode",
      "org.h2.tools.Csv",
      "org.apache.commons.csv.CSVParser$1",
      "org.h2.tools.SimpleRowSource",
      "org.apache.commons.csv.CSVFormat",
      "org.apache.commons.csv.Lexer",
      "org.h2.engine.SysProperties",
      "org.apache.commons.csv.CSVParser",
      "org.apache.commons.csv.Token$Type",
      "org.apache.commons.csv.CSVPrinter",
      "org.apache.commons.csv.ExtendedBufferedReader"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("java.util.function.Consumer", false, CSVParser_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(CSVParser_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "org.apache.commons.csv.CSVParser",
      "org.apache.commons.csv.CSVParser$1",
      "org.apache.commons.csv.Token$Type",
      "org.apache.commons.csv.CSVParser$2",
      "org.apache.commons.csv.Assertions",
      "org.apache.commons.csv.Token",
      "org.apache.commons.csv.Lexer",
      "org.apache.commons.csv.ExtendedBufferedReader",
      "org.apache.commons.csv.CSVRecord",
      "org.h2.util.Tool",
      "org.h2.tools.Recover",
      "org.h2.store.fs.FileUtils",
      "org.h2.store.fs.FilePath",
      "org.h2.util.New",
      "org.h2.store.fs.FilePathDisk",
      "org.h2.compress.CompressLZF",
      "org.h2.store.fs.FileMemData$Cache",
      "org.h2.store.fs.FileMemData",
      "org.h2.store.fs.FilePathMem",
      "org.h2.store.fs.FilePathMemLZF",
      "org.h2.store.fs.FilePathNioMem",
      "org.h2.store.fs.FilePathNioMemLZF",
      "org.h2.store.fs.FilePathWrapper",
      "org.h2.store.fs.FilePathSplit",
      "org.h2.store.fs.FilePathNio",
      "org.h2.store.fs.FilePathNioMapped",
      "org.h2.store.fs.FilePathZip",
      "org.h2.store.fs.FilePathRetryOnInterrupt",
      "org.h2.tools.SimpleResultSet",
      "org.h2.util.Utils",
      "org.h2.util.IOUtils",
      "org.h2.message.DbException",
      "org.h2.api.ErrorCode",
      "org.h2.util.StringUtils",
      "org.h2.jdbc.JdbcSQLException",
      "org.h2.Driver",
      "org.h2.value.Value",
      "org.h2.value.ValueDouble",
      "org.h2.util.MathUtils",
      "org.h2.engine.SysProperties",
      "org.h2.value.ValueString",
      "org.h2.value.ValueStringIgnoreCase",
      "org.h2.value.ValueLob",
      "org.h2.message.TraceObject",
      "org.h2.jdbc.JdbcConnection",
      "org.h2.command.Prepared",
      "org.h2.command.dml.ScriptBase",
      "org.h2.command.dml.ScriptCommand",
      "org.h2.command.dml.SetTypes",
      "org.h2.engine.ConnectionInfo",
      "org.h2.engine.Database",
      "org.h2.util.BitField",
      "org.h2.engine.Mode",
      "org.h2.util.TempFileDeleter",
      "org.h2.result.RowFactory$DefaultRowFactory",
      "org.h2.result.RowFactory",
      "org.h2.engine.SessionWithState",
      "org.h2.engine.SessionRemote",
      "org.h2.value.CompareMode",
      "org.h2.engine.Engine",
      "org.h2.store.FileLock",
      "org.h2.value.ValueNull",
      "org.h2.value.ValueLong",
      "org.h2.tools.Csv",
      "org.h2.value.ValueInterval",
      "org.h2.util.IntervalUtils",
      "org.h2.util.IntervalUtils$1",
      "org.h2.value.ValueArray",
      "org.h2.jdbc.JdbcBlob",
      "org.h2.value.ValueLobDb",
      "org.h2.engine.Constants",
      "org.h2.value.ValueResultSet",
      "org.h2.jdbc.JdbcClob",
      "org.h2.util.JdbcUtils",
      "org.h2.value.DataType",
      "org.h2.tools.SimpleResultSet$Column",
      "org.h2.value.ValueCollectionBase",
      "org.h2.value.ValueRow",
      "org.h2.value.ExtTypeInfo",
      "org.h2.value.ExtTypeInfoEnum",
      "org.h2.value.ValueBytes",
      "org.h2.store.FileStore",
      "org.h2.store.fs.FileBase",
      "org.h2.store.fs.FileDisk",
      "org.h2.store.FileStoreInputStream",
      "org.h2.tools.CompressTool",
      "org.h2.store.Data",
      "org.h2.value.ValueByte",
      "org.h2.value.ValueTime",
      "org.h2.util.DateTimeUtils",
      "org.h2.mvstore.db.MVTableEngine$Store",
      "org.h2.command.ddl.CreateTableData",
      "org.h2.engine.DbObjectBase",
      "org.h2.schema.SchemaObjectBase",
      "org.h2.table.Table",
      "org.h2.table.TableBase",
      "org.h2.table.RegularTable",
      "org.h2.api.IntervalQualifier$1",
      "org.h2.value.TypeInfo",
      "org.h2.engine.RightOwner",
      "org.h2.engine.User",
      "org.h2.engine.Session",
      "org.h2.command.dml.RunScriptCommand",
      "org.h2.jdbc.JdbcLob",
      "org.h2.jdbc.JdbcSQLXML",
      "org.h2.value.ExtTypeInfoGeometry",
      "org.h2.value.ValueDate",
      "org.h2.value.ValueFloat",
      "org.h2.expression.Expression",
      "org.h2.expression.BinaryOperation",
      "org.h2.value.ValueShort",
      "org.h2.value.ValueUuid",
      "org.h2.value.ValueTimestampTimeZone",
      "org.h2.expression.UnaryOperation",
      "org.h2.value.ValueTimestamp",
      "org.h2.expression.IntervalOperation",
      "org.apache.commons.csv.Constants",
      "org.apache.commons.csv.QuoteMode",
      "org.apache.commons.csv.CSVFormat"
    );
  }
}
