/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 17 08:42:59 GMT 2023
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-1.2246467991473532E-16), (-0.5411961001461971));
      Complex complex1 = new Complex(-0.0, (-1.2246467991473532E-16));
      Complex complex2 = complex0.asin();
      Complex complex3 = new Complex(0.6031274617726977, (-1.131847067085609));
      Complex complex4 = complex2.divide(complex3);
      assertEquals((-0.18984847191559148), complex4.getImaginary(), 0.01);
      assertEquals(0.3562753310830487, complex4.getReal(), 0.01);
      assertEquals((-1.0770342716121338E-16), complex2.getReal(), 0.01);
      
      Complex complex5 = new Complex((-0.5411961001461971), Double.POSITIVE_INFINITY);
      Complex complex6 = new Complex((-0.7911961001461971), -0.0);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex5.multiply(-0.0);
      assertTrue(complex5.isInfinite());
      assertTrue(complex8.isInfinite());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.multiply(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      
      complex0.abs();
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-0.5411961001461971));
      Complex complex1 = new Complex(-0.0, 0.0);
      Complex complex2 = complex0.asin();
      Complex complex3 = new Complex(-0.0, (-1.131847067085609));
      complex2.divide(complex3);
      Complex complex4 = new Complex((-0.5411961001461971), Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.add(complex0);
      complex3.NaN.getArgument();
      Complex complex6 = Complex.ONE;
      complex5.ONE.multiply(complex4);
      complex1.subtract(complex0);
      complex3.subtract(complex5);
      Complex complex7 = Complex.NaN;
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-0.5411961001461971));
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.asin();
      Complex complex3 = new Complex((-0.5411961001461971), (-1.131847067085609));
      Complex complex4 = complex2.divide(complex3);
      assertEquals(0.3723169610502266, complex4.getReal(), 0.01);
      assertEquals(0.17802448157373343, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex0.add(complex0);
      assertEquals((-1.0823922002923942), complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex2.sin();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex0.sqrt();
      assertEquals((-0.5201903979055156), complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex2.multiply((-0.5411961001461971));
      assertTrue(complex0.equals((Object)complex6));
      assertEquals(0.2802053716580489, complex9.getImaginary(), 0.01);
      assertEquals(-0.0, complex9.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex0.pow(complex1);
      try { 
        complex0.nthRoot((-184));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -184
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex((-1.2246467991473532E-16), (-0.5411961001461971));
      Complex complex1 = new Complex(-0.0, (-1.2246467991473532E-16));
      Complex complex2 = complex0.asin();
      Complex complex3 = new Complex((-0.25), (-1.131847067085609));
      Complex complex4 = complex2.divide(complex3);
      assertEquals(0.09633830322219229, complex4.getImaginary(), 0.01);
      assertEquals(0.43616090380017003, complex4.getReal(), 0.01);
      
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.divide(complex1);
      Complex complex7 = new Complex((-557.93293141), (-1559.36576));
      complex2.add(complex3);
      Complex complex8 = complex5.sin();
      complex8.ONE.readResolve();
      Complex complex9 = Complex.ONE;
      complex1.subtract(complex9);
      Complex complex10 = complex5.subtract(complex8);
      Complex complex11 = complex10.I.multiply(25.0);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertEquals(25.0, complex11.getImaginary(), 0.01);
      
      Complex complex12 = Complex.NaN;
      Complex complex13 = Complex.INF;
      complex13.readResolve();
      List<Complex> list0 = complex7.nthRoot(1096);
      assertEquals(1096, list0.size());
      
      Complex complex14 = Complex.INF;
      Complex complex15 = complex6.acos();
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(-0.0, complex15.getImaginary(), 0.01);
      assertTrue(complex5.equals((Object)complex8));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cosh();
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5430806348152437, complex1.getReal(), 0.01);
      
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.hashCode();
      List<Complex> list0 = complex0.nthRoot(172);
      assertEquals(172, list0.size());
      assertTrue(list0.contains(complex0));
      assertEquals(0.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      complex2.getArgument();
      Object object0 = new Object();
      complex2.equals(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex3.acos();
      double double0 = complex4.abs();
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.equals((Object)complex2));
      assertNotSame(complex4, complex5);
      assertTrue(complex4.equals((Object)complex5));
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.cos();
      List<Complex> list0 = complex0.nthRoot(1116);
      assertEquals(1116, list0.size());
      assertTrue(list0.contains(complex0));
      
      Complex complex2 = complex1.negate();
      assertTrue(complex2.isNaN());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex((-1.2246467991473532E-16), (-0.5411961001461971));
      Complex complex1 = new Complex((-0.5411961001461971), (-0.5411961001461971));
      Complex complex2 = new Complex((-1.2246467991473532E-16), 1.414213562373095);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = Complex.NaN;
      complex4.add(complex3);
      Complex complex6 = Complex.I;
      complex2.readResolve();
      Complex complex7 = new Complex((-1.2246467991473532E-16), 832.0629);
      complex7.equals(complex0);
      complex6.tan();
      try { 
        complex2.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = (Complex)complex0.readResolve();
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(boolean0);
      
      Complex complex2 = Complex.INF;
      complex2.I.hashCode();
      Complex complex3 = Complex.ONE;
      double double0 = complex2.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertFalse(complex2.equals((Object)complex3));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(1.2246467991473532E-16, (-1.2246467991473532E-16));
      Complex complex1 = new Complex(1.2246467991473532E-16, (-1.3065629648763764));
      Complex complex2 = Complex.ZERO;
      complex0.equals(complex1);
      Complex complex3 = complex1.tan();
      try { 
        complex3.nthRoot((-841));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -841
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      List<Complex> list0 = complex0.nthRoot(1129);
      assertEquals(1129, list0.size());
      assertFalse(list0.contains(complex2));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.abs();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.sin();
      try { 
        complex0.nthRoot((-2401));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,401
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-0.5411961001461971), Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex((-630.48253422022), (-630.48253422022));
      Complex complex2 = complex0.asin();
      Complex complex3 = new Complex((-3061.562171876724), Double.POSITIVE_INFINITY);
      Complex complex4 = new Complex(1448.942231, (-2079.44206644));
      Complex complex5 = Complex.ONE;
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex0.subtract(complex1);
      assertEquals(629.9413381200739, complex7.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      
      complex2.readResolve();
      Complex complex8 = complex2.multiply((-261.97546837379));
      assertTrue(complex8.isNaN());
      assertTrue(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      List<Complex> list0 = complex0.nthRoot(1102);
      assertEquals(1102, list0.size());
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      
      Complex complex1 = complex0.sqrt();
      assertEquals(0.7071067811865476, complex1.getReal(), 0.01);
      assertEquals(0.7071067811865475, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.sinh();
      try { 
        complex0.nthRoot((-1073741824));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,073,741,824
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      List<Complex> list0 = complex0.nthRoot(1416);
      assertTrue(list0.contains(complex0));
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.atan();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((double) (-2401));
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tan();
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      
      List<Complex> list0 = complex0.nthRoot(37);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(list0.contains(complex1));
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(37, list0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      List<Complex> list0 = complex0.nthRoot(29);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(complex0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.divide(complex1);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      
      complex0.nthRoot(167);
      List<Complex> list0 = complex0.nthRoot(167);
      assertFalse(list0.contains(complex2));
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(167, list0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(413.6279597215785, 413.6279597215785);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.sqrt();
      assertSame(complex2, complex1);
      
      Complex complex3 = complex0.multiply(413.6279597215785);
      assertEquals(171088.0890634358, complex3.getImaginary(), 0.01);
      assertEquals(413.6279597215785, complex0.getReal(), 0.01);
      assertEquals(171088.0890634358, complex3.getReal(), 0.01);
      assertEquals(413.6279597215785, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.hashCode();
      Complex complex1 = complex0.acos();
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.multiply(2.0);
      Complex complex2 = complex0.acos();
      assertEquals(1.5707963267948966, complex2.getReal(), 0.01);
      assertEquals((-0.8813735870195429), complex2.getImaginary(), 0.01);
      
      double double0 = complex1.abs();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.divide(complex1);
      assertTrue(complex2.isNaN());
      
      Complex complex3 = complex0.acos();
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.tan();
      Complex complex1 = Complex.I;
      assertEquals(1.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      complex0.ONE.divide(complex1);
      try { 
        complex0.nthRoot((-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.abs();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void testSinFunctiontestSinFunction_33()  throws Throwable  {
      Complex complex0 = new Complex((-1.2246467991473532E-16), (-0.5411961001461971));
      Complex complex1 = new Complex((-1.414213562373095), (-1.3065629648763764));
      Complex complex2 = complex1.asin();
      assertEquals((-1.3497432383610513), complex2.getImaginary(), 0.01);
      assertEquals((-0.7576575573149693), complex2.getReal(), 0.01);
      
      Complex complex3 = new Complex(1.2246467991473532E-16, 1.3065629648763764);
      Complex complex4 = new Complex(1.414213562373095, 0.5411961001461969);
      complex0.add(complex3);
      complex1.add(complex4);
      Complex complex5 = complex0.subtract(complex3);
      String string0 = complex5.ONE.toString();
      assertEquals("(1.0, 0.0)", string0);
      
      Complex complex6 = complex1.subtract(complex4);
      assertEquals((-1.8477590650225733), complex6.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.INF.toString();
      assertEquals("(Infinity, Infinity)", string0);
      
      List<Complex> list0 = complex0.nthRoot(3085);
      assertTrue(list0.contains(complex0));
      assertEquals(3085, list0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getArgument();
      Object object0 = new Object();
      Complex complex1 = complex0.ONE.multiply(0.5707963267948967);
      assertFalse(complex1.isInfinite());
      assertEquals(0.5707963267948967, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Object object1 = complex0.readResolve();
      boolean boolean0 = complex0.equals(object1);
      assertTrue(boolean0);
      assertFalse(object1.equals((Object)complex1));
      
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.INF;
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-1.2246467991473532E-16), (-0.5411961001461971));
      Complex complex1 = new Complex((-1.414213562373095), (-1.3065629648763764));
      Complex complex2 = complex1.asin();
      Complex complex3 = new Complex(1.2246467991473532E-16, 1.3065629648763764);
      Complex complex4 = complex3.divide(complex0);
      assertEquals((-2.414213562373094), complex4.getReal(), 0.01);
      assertEquals((-3.2001563056406574E-16), complex4.getImaginary(), 0.01);
      
      Complex complex5 = new Complex((-0.5411961001461971), (-976.91081));
      Complex complex6 = complex3.add(complex2);
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.add(complex2);
      complex6.subtract(complex5);
      complex6.subtract(complex8);
      assertEquals((-0.34974323836105126), complex8.getImaginary(), 0.01);
      assertEquals((-1.3497432383610513), complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-1.7319121124709863E-16), Double.NaN);
      Complex complex1 = new Complex((-1749.0932235975), 1.0548770217102588);
      Complex complex2 = Complex.ONE;
      Complex complex3 = new Complex(Double.NaN, (-0.5411961001461971));
      Complex complex4 = new Complex((-1.7319121124709863E-16), (-1749.0932235975));
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex2.subtract(complex5);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      
      Complex complex7 = new Complex(1.0548770217102588, Double.NaN);
      Complex complex8 = complex7.ZERO.sqrt();
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex7.asin();
      Complex complex10 = complex7.subtract(complex3);
      assertTrue(complex10.equals((Object)complex3));
      
      Complex complex11 = complex9.multiply(complex2);
      assertTrue(complex2.equals((Object)complex6));
      
      Complex complex12 = complex0.log();
      assertSame(complex12, complex11);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.asin();
      complex0.abs();
      try { 
        complex0.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.INF.add(complex1);
      assertEquals((-0.8813735870195429), complex1.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      
      Complex complex3 = complex0.multiply(Double.NaN);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.cos();
      try { 
        complex0.nthRoot((-7));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -7
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex((-1.2246467991473532E-16), (-0.5411961001461971));
      Complex complex1 = new Complex((-1.3065629648763764), (-0.5411961001461971));
      Complex complex2 = new Complex((-0.5411961001461971), (-1.2246467991473532E-16));
      Complex complex3 = new Complex(1.2246467991473532E-16, 1835.191961);
      Complex complex4 = complex3.add(complex2);
      Complex complex5 = complex0.add(complex2);
      Complex complex6 = complex5.subtract(complex0);
      Complex complex7 = complex0.log();
      Complex complex8 = complex4.subtract(complex7);
      Complex complex9 = complex8.log();
      assertEquals(7.515759930859065, complex9.getReal(), 0.01);
      assertFalse(complex4.equals((Object)complex3));
      assertEquals((-1.5707963267948968), complex7.getImaginary(), 0.01);
      
      Complex complex10 = Complex.ONE;
      Object object0 = complex6.readResolve();
      boolean boolean0 = complex10.equals(object0);
      assertEquals((-0.5411961001461972), complex5.getImaginary(), 0.01);
      assertTrue(object0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.NaN.tanh();
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      
      Complex complex3 = complex0.multiply(4866.60768154317);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(4866.60768154317, complex3.getImaginary(), 0.01);
      assertFalse(complex0.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.nthRoot((-754095975));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -754,095,975
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.subtract(complex1);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      
      List<Complex> list0 = complex0.nthRoot(160);
      assertTrue(list0.contains(complex0));
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(boolean0);
      
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.acos();
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      
      double double0 = complex2.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      assertFalse(boolean0);
      
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.acos();
      assertEquals((-0.8813735870195429), complex2.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      assertFalse(complex1.isInfinite());
      assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.getField();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex0));
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.atan();
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      
      Complex complex2 = Complex.ONE;
      assertNotSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.2246467991473532E-16));
      Complex complex1 = Complex.ZERO;
      complex1.isNaN();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.acos();
      assertEquals(1.1102230246251565E-16, complex3.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex3.getReal(), 0.01);
      
      double double0 = complex1.abs();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.conjugate();
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.atan();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.ZERO.readResolve();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      
      Complex complex2 = complex0.acos();
      double double0 = complex2.abs();
      assertEquals(1.5707963267948966, complex2.getReal(), 0.01);
      assertEquals(1.8011719796199461, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tanh();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-485.7080189871));
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-485.7080189871), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-0.5411961001461971), Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals((-0.5411961001461971), complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.tan();
      assertSame(complex3, complex2);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.sqrt();
      try { 
        complex0.nthRoot((-184));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -184
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.pow(complex1);
      assertFalse(complex1.isInfinite());
      assertTrue(complex2.isNaN());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.subtract(complex1);
      assertSame(complex2, complex1);
      
      List<Complex> list0 = complex0.nthRoot(179);
      assertTrue(list0.contains(complex0));
      assertEquals(179, list0.size());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.asin();
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.multiply(4866.60768154317);
      assertEquals(4866.60768154317, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.conjugate();
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.multiply(4866.60768154317);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.equals((Object)complex1));
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.exp();
      assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sin();
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.8414709848078965, complex1.getReal(), 0.01);
      
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
  }
}
