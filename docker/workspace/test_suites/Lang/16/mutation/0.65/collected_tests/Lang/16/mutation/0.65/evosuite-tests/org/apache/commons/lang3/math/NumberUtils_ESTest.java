/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 21:49:28 GMT 2023
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      NumberUtils.createNumber("0.1E-700");
      try { 
        NumberUtils.createNumber("{k1n&/I4$zoMMR;%#");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // {k1n&/I4$zoMMR;%# is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("13E4E5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1l");
      assertEquals((-1L), number0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-]pv6L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -]pv6L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      try { 
        NumberUtils.createNumber("K~mpAEeG|Xc+7");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-700F");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0.H");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.H is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x-0x.QONe");
      assertFalse(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 48;
      intArray0[1] = (-2524);
      intArray0[2] = (-396);
      intArray0[3] = 108;
      intArray0[4] = 43;
      intArray0[5] = 2850;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-2524), int0);
      
      boolean boolean1 = NumberUtils.isNumber("0{uq#.");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E700");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.9");
      assertEquals(0.9F, number0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (-953L);
      longArray0[2] = (long) 0;
      NumberUtils.max(longArray0);
      boolean boolean0 = NumberUtils.isNumber("1.1L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("134Ev");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)99;
      byteArray0[8] = (byte) (-15);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)99, byte0);
      
      boolean boolean0 = NumberUtils.isNumber("-0xD9u");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("102147483647L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-700");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      NumberUtils.isNumber("1234E5l");
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      NumberUtils.isNumber("-0xf");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-108L);
      boolean boolean0 = NumberUtils.isNumber("-0xf");
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)294;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)294, short0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1234.5D");
      assertEquals(1234.5, number0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-123E2.12");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.1E-700");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1234.5F");
      assertEquals(1234.5F, number0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+uNA_");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-200");
      assertNotNull(number0);
      assertEquals(1.1E-200, number0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      try { 
        NumberUtils.createNumber("pn8%CLsJ}9rN!l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // pn8%CLsJ}9rN!l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      try { 
        NumberUtils.createNumber("f");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // f is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-01234");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      try { 
        NumberUtils.createNumber("The Array must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      try { 
        NumberUtils.createNumber(".bL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .bL is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      NumberUtils.isNumber("-0x2");
      NumberUtils.isNumber("-0x2");
      NumberUtils.isNumber("QOWA>\" ;2>qogc#b");
      Number number0 = NumberUtils.createNumber("-0x2");
      assertEquals((-2), number0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      try { 
        NumberUtils.createNumber("toLong|Long.8AX_VALKE) fai7ed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // toLong|Long.8AX_VALKE) fai7ed is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      try { 
        NumberUtils.createNumber(".6'N:yATP{lYR6t");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .6'N:yATP{lYR6t is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 27.0;
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("edJoJ=ymk\u0004Y");
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1149.892F;
      floatArray0[1] = 1.0F;
      floatArray0[2] = 2404.2F;
      floatArray0[3] = (-1.2F);
      floatArray0[4] = 5.4F;
      floatArray0[5] = Float.NaN;
      floatArray0[6] = 1.8F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-1164);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1164), short0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xD-1234E5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x11d11");
      assertTrue(boolean0);
      
      boolean boolean1 = NumberUtils.isDigits((String) null);
      assertFalse(boolean1);
      
      boolean boolean2 = NumberUtils.isNumber("-0xisNumber(String)/createNumber(String) 21 f.iled");
      assertFalse(boolean2 == boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1044.8726;
      doubleArray0[1] = (-1.0);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1044.8726, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x11d11");
      assertTrue(boolean0);
      
      NumberUtils.isNumber("7#nW#\f  *Uhl$1p8");
      long[] longArray0 = new long[3];
      longArray0[0] = (-188L);
      longArray0[1] = (-1409L);
      longArray0[2] = (-1L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1409L), long0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1l");
      assertEquals(1L, number0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      try { 
        NumberUtils.createNumber("*b#/x/us=m}E<W)L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // *b#/x/us=m}E<W)L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      try { 
        NumberUtils.createNumber("GZjE>we$0XFMOc");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // GZjE>we$0XFMOc is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.3");
      assertEquals(1.3F, number0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      try { 
        NumberUtils.createNumber("v:$!B{.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = Float.NaN;
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      NumberUtils.isNumber("AN5L?<u(1K;");
      NumberUtils.toByte((String) null, (byte)88);
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      NumberUtils.isNumber("0xRO1gdz#wD");
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
      
      boolean boolean0 = NumberUtils.isNumber("0xRO1gdz#wD");
      assertFalse(boolean0);
      
      short short0 = NumberUtils.max((short) (-2793), (short) (byte)0, (short)803);
      assertEquals((short)803, short0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      try { 
        NumberUtils.createNumber("W>7M.zGQFaWT25I;7=F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // W>7M.zGQFaWT25I;7=F is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      try { 
        NumberUtils.createNumber("d");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // d is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--a");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 2429.58920012;
      NumberUtils.max(doubleArray0);
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
      
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal(" is not a valid number.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.createBigInteger((String) null);
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      try { 
        NumberUtils.createNumber("isNumber(String)/createNumber(String) 22 Neg failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // isNumber(String)/createNumber(String) 22 Neg failed is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
      
      int int0 = NumberUtils.toInt((String) null);
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)18;
      shortArray0[1] = (short)988;
      shortArray0[2] = (short)83;
      shortArray0[3] = (short) (-1);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      try { 
        NumberUtils.createNumber(",a.+U?A");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ,a.+U?A is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234E5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("4D");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      NumberUtils.max((-4685L), (-4685L), (-520L));
      boolean boolean0 = NumberUtils.isNumber("t:eB4SB}>E{mi");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0x1.3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-1.3\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-123E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
      
      short short0 = NumberUtils.toShort("Windows", (short) (-2131));
      assertEquals((short) (-2131), short0);
      
      long long0 = NumberUtils.min((long) numberUtils0.SHORT_ONE, (-2618L), (long) numberUtils0.BYTE_ONE);
      assertEquals((-2618L), long0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_076()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      NumberUtils.min(intArray0);
      NumberUtils.createBigDecimal((String) null);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-1);
      NumberUtils.max(longArray0);
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null, (short)2);
      assertEquals((short)2, short0);
      
      long long0 = NumberUtils.min((long) (short)2, 4L, 4L);
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      try { 
        NumberUtils.createNumber("blU4EE5.OPREKYzU?8}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // blU4EE5.OPREKYzU?8} is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)5;
      shortArray0[1] = (short)3297;
      shortArray0[2] = (short)5;
      shortArray0[3] = (short)5;
      shortArray0[4] = (short)5;
      shortArray0[5] = (short)5;
      shortArray0[6] = (short)35;
      shortArray0[7] = (short)5;
      shortArray0[8] = (short)5;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)3297, short0);
      
      int int0 = NumberUtils.min((-1056), 97, (-2259));
      assertEquals((-2259), int0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (short)5;
      floatArray0[1] = (float) (short)3297;
      floatArray0[2] = (float) (short)5;
      floatArray0[3] = (float) (short)3297;
      floatArray0[4] = (float) (short)5;
      floatArray0[5] = (float) (short)5;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(5.0F, float0, 0.01F);
      
      float float1 = NumberUtils.toFloat("The Array must not be null");
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.toByte("0x", (byte)108);
      assertEquals((byte)108, byte0);
      
      float float0 = NumberUtils.toFloat((String) null, 5.4F);
      assertEquals(5.4F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (int)numberUtils0.INTEGER_MINUS_ONE;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
      
      byte byte0 = NumberUtils.toByte(")?~", (byte) numberUtils0.BYTE_ZERO);
      assertEquals((byte)0, byte0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)941;
      shortArray0[1] = (short) (byte)0;
      shortArray0[2] = (short) (byte)35;
      shortArray0[3] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[4] = (short) numberUtils0.SHORT_ZERO;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)941, short0);
      
      int int0 = NumberUtils.min((int) numberUtils0.SHORT_ONE, (int) (short)0, (-1293));
      assertEquals((-1293), int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.isNumber("-0x11d11");
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal(" is not a valid number.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xct>[y/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (long)numberUtils0.LONG_ZERO;
      Float float0 = new Float((float) numberUtils0.SHORT_MINUS_ONE);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[1] = (int) (byte)numberUtils0.BYTE_ONE;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1, int0);
      
      double double0 = NumberUtils.toDouble("11g");
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = NumberUtils.isNumber("-0xa");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xtoLong(Long.8AX_VALUE) fai7ed");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xGZjE>we$0XFMOc");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x-0x2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 2429.58920012;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(2429.58920012, double0, 0.01);
      
      NumberUtils.createLong((String) null);
      short short0 = NumberUtils.max((short)2, (short)2, (short)2);
      assertEquals((short)2, short0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("109223372036854775807");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".V");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)numberUtils0.SHORT_ONE;
      floatArray0[1] = (float) (byte)numberUtils0.BYTE_MINUS_ONE;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (int)numberUtils0.INTEGER_MINUS_ONE;
      doubleArray0[2] = (double) (long)numberUtils0.LONG_ZERO;
      doubleArray0[3] = (double) numberUtils0.DOUBLE_ONE;
      doubleArray0[4] = 5.1;
      doubleArray0[5] = (double) (short)numberUtils0.SHORT_ZERO;
      doubleArray0[6] = (double) (short)numberUtils0.SHORT_ZERO;
      doubleArray0[7] = (double) (float)numberUtils0.FLOAT_ONE;
      doubleArray0[8] = (double) numberUtils0.DOUBLE_ONE;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
      
      floatArray0[2] = (float) (int)numberUtils0.INTEGER_ZERO;
      floatArray0[3] = (float) (long)numberUtils0.LONG_ONE;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1.0F), float0, 0.01F);
      
      double double1 = NumberUtils.toDouble("11g");
      assertEquals(0.0, double1, 0.01);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[2] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = NumberUtils.max(125, 125, 1102);
      assertEquals(1102, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xa");
      NumberUtils.isNumber("B$0~,ozQ");
      short[] shortArray0 = new short[10];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
      
      long[] longArray0 = new long[3];
      Long long0 = new Long((short)0);
      int[] intArray0 = new int[6];
      NumberUtils.max(longArray0);
      int int0 = NumberUtils.min(intArray0);
      int int1 = NumberUtils.min((int) (short)0, 0, 0);
      assertTrue(int1 == int0);
      
      boolean boolean1 = NumberUtils.isDigits("-0xa");
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = NumberUtils.isNumber("B$0~,ozQ");
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short) numberUtils0.BYTE_MINUS_ONE, (short) (-1766), (short) (-32746));
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      try { 
        NumberUtils.createNumber(";i`4Uva0Y'n@e");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ;i`4Uva0Y'n@e is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      try { 
        NumberUtils.createNumber("}A+p}ZUP|J@Eeog");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // }A+p}ZUP|J@Eeog is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      try { 
        NumberUtils.createNumber("java.at.graphicsenv");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // java.at.graphicsenv is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
      
      double double0 = NumberUtils.toDouble((String) null);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = NumberUtils.toDouble((String) null, (-3809.008751836));
      assertEquals((-3809.008751836), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[2] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[3] = (short) numberUtils0.SHORT_MINUS_ONE;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1), short0);
      
      shortArray0[4] = (short) numberUtils0.SHORT_ONE;
      short short1 = NumberUtils.max(shortArray0);
      assertEquals((short)1, short1);
      
      byte byte0 = NumberUtils.max((byte) (-128), (byte) (-128), (byte) numberUtils0.BYTE_ZERO);
      assertEquals((byte)0, byte0);
      
      boolean boolean0 = NumberUtils.isDigits("ibJG");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)48;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      try { 
        NumberUtils.createNumber("1SxY'W%1Ol@1/K2");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1SxY'W\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)115;
      shortArray0[1] = (short) (-2299);
      shortArray0[2] = (short)70;
      shortArray0[3] = (short)69;
      short short0 = NumberUtils.min((short)115, (short)69, (short) (-2299));
      assertEquals((short) (-2299), short0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[0] = (-2401);
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[1];
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)numberUtils0.SHORT_ZERO;
      intArray0[1] = (int) (short)numberUtils0.SHORT_ZERO;
      intArray0[2] = (int) numberUtils0.INTEGER_ONE;
      intArray0[3] = (int) (byte)numberUtils0.BYTE_ONE;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
      
      floatArray0[0] = (float) (byte)numberUtils0.BYTE_ONE;
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[2] = (short)79;
      shortArray0[3] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[4] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[5] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[6] = (short) (byte)numberUtils0.BYTE_ZERO;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)79, short0);
      
      byte byte0 = NumberUtils.max((byte)68, (byte) numberUtils0.BYTE_ONE, (byte)68);
      assertEquals((byte)68, byte0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 1L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[13];
      long[] longArray0 = new long[5];
      longArray0[0] = (long) numberUtils0.LONG_ZERO;
      longArray0[1] = (long) numberUtils0.LONG_ZERO;
      longArray0[2] = (long) numberUtils0.LONG_MINUS_ONE;
      longArray0[3] = (long) (byte)numberUtils0.BYTE_ZERO;
      longArray0[4] = 712L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(712L, long0);
      
      shortArray0[0] = (short) numberUtils0.SHORT_ONE;
      shortArray0[1] = (short) numberUtils0.SHORT_ZERO;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1, short0);
      
      byte byte0 = NumberUtils.max((byte) numberUtils0.BYTE_ZERO, (byte) numberUtils0.BYTE_ZERO, (byte) (-29));
      assertEquals((byte)0, byte0);
      
      short short1 = NumberUtils.min((short)2257, (short)2999, (short)120);
      assertEquals((short)120, short1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.max(1274, 46, (int) numberUtils0.INTEGER_ONE);
      assertEquals(1274, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1610.645F;
      float float0 = NumberUtils.max(1610.645F, 1610.645F, 1610.645F);
      assertEquals(1610.645F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      try { 
        NumberUtils.createNumber("o+}%");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // o+}% is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)103;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)103, byte0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--a");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)48;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long[] longArray0 = new long[4];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int[] intArray0 = new int[18];
      intArray0[0] = 86;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(",a.+U?A");
      assertFalse(boolean0);
      
      NumberUtils.min((-1.234E8F), (-2732.7856F), (-1.234E8F));
      short short0 = NumberUtils.toShort(",a.+U?A", (short)2);
      assertEquals((short)2, short0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.min((byte)108, (byte) numberUtils0.BYTE_ZERO, (byte) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((byte) (-1), byte0);
      
      boolean boolean0 = NumberUtils.isDigits("0x11d11");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      float[] floatArray0 = new float[14];
      floatArray0[1] = (-3.4028235E38F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-3.4028235E38F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      boolean boolean0 = NumberUtils.isDigits("-0x");
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)numberUtils0.SHORT_ZERO;
      doubleArray0[1] = (double) (long)numberUtils0.LONG_MINUS_ONE;
      doubleArray0[2] = 27.0;
      doubleArray0[3] = (double) (float)numberUtils0.FLOAT_MINUS_ONE;
      doubleArray0[4] = (double) (short)numberUtils0.SHORT_ZERO;
      doubleArray0[5] = (double) (long)numberUtils0.LONG_ONE;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      try { 
        NumberUtils.createNumber("min(double[]) failed for array length 5");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short)4994;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)4994, short0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (byte)numberUtils0.BYTE_ONE;
      short[] shortArray0 = new short[18];
      shortArray0[4] = (short) (byte)numberUtils0.BYTE_ZERO;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
      
      byte byte0 = NumberUtils.max((byte)9, (byte) numberUtils0.BYTE_MINUS_ONE, (byte)47);
      assertEquals((byte)47, byte0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.toShort("--a", (short) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((short) (-1), short0);
      
      long long0 = NumberUtils.min((long) numberUtils0.BYTE_ZERO, (long) numberUtils0.INTEGER_ZERO, 12345L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      NumberUtils.isNumber("isNumber(String)/createNumber(String) 21 f.iled");
      short short0 = NumberUtils.toShort("111", (short)1889);
      assertEquals((short)111, short0);
      
      long long0 = NumberUtils.min((long) (short)1889, (long) (short)1889, (long) (short)111);
      assertEquals(111L, long0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_147()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (short)numberUtils0.SHORT_MINUS_ONE;
      floatArray0[1] = (float) (long)numberUtils0.LONG_MINUS_ONE;
      floatArray0[2] = (float) (short)numberUtils0.SHORT_ZERO;
      floatArray0[3] = (float) (int)numberUtils0.INTEGER_ZERO;
      floatArray0[4] = (float) (int)numberUtils0.INTEGER_ONE;
      floatArray0[5] = (float) (byte)numberUtils0.BYTE_MINUS_ONE;
      floatArray0[6] = 1580.196F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1.0F), float0, 0.01F);
      
      NumberUtils.isNumber("~24S}&sv~U^'C #p7");
      float[] floatArray1 = new float[1];
      floatArray1[0] = (-10.0F);
      float float1 = NumberUtils.max(floatArray1);
      assertEquals((-10.0F), float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      float[] floatArray0 = new float[12];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_150()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.min((double) numberUtils0.SHORT_ONE, (double) numberUtils0.DOUBLE_ZERO, (double) numberUtils0.DOUBLE_MINUS_ONE);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      float[] floatArray0 = new float[13];
      floatArray0[0] = (-1.0F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.min((byte) numberUtils0.BYTE_ZERO, (byte) numberUtils0.BYTE_ZERO, (byte) numberUtils0.BYTE_ZERO);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-10.6F);
      floatArray0[1] = (-1234.5F);
      floatArray0[2] = 5.4F;
      floatArray0[3] = 14.3F;
      floatArray0[4] = 10.4F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(14.3F, float0, 0.01F);
      
      byte byte0 = NumberUtils.min((byte)59, (byte)59, (byte)59);
      assertEquals((byte)59, byte0);
      
      boolean boolean0 = NumberUtils.isDigits("false");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.max((int) numberUtils0.BYTE_MINUS_ONE, (int) numberUtils0.BYTE_ONE, 125);
      assertEquals(125, int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("}A+p}ZUP|J@Eeog");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_156()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.toLong("toLong(String) 3 failed", (long) numberUtils0.BYTE_MINUS_ONE);
      boolean boolean0 = NumberUtils.isNumber("toLong(String) 3 failed");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_157()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.toShort("0x11def");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      try { 
        NumberUtils.createNumber("RO1gdz#wD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // RO1gdz#wD is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("noq");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"noq\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[2] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[3] = (byte) numberUtils0.BYTE_ONE;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      NumberUtils.createFloat((String) null);
      long long0 = NumberUtils.toLong((String) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-10.543663679429944);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-10.543663679429944), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double double0 = NumberUtils.toDouble("}A+p}ZUP|J@Eeog", (-5.0));
      assertEquals((-5.0), double0, 0.01);
      
      short short0 = NumberUtils.min((short)0, (short)0, (short) (-3125));
      assertEquals((short) (-3125), short0);
      
      float float0 = NumberUtils.toFloat("}A+p}ZUP|J@Eeog", Float.NEGATIVE_INFINITY);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      float float0 = NumberUtils.toFloat("#Dx#XC~ugc.iF", (float) (short)0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_172()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.toDouble("11g");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.max((-1618L), 5L, (long) numberUtils0.INTEGER_ONE);
      assertEquals(5L, long0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      long long0 = NumberUtils.max((-1704L), (-1704L), (-1704L));
      assertEquals((-1704L), long0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_175()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.max((double) numberUtils0.LONG_ZERO, 827.69582, (double) numberUtils0.SHORT_ZERO);
      assertEquals(827.69582, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2;
      short short0 = NumberUtils.min((short)2, (short)2, (short)2);
      assertEquals((short)2, short0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.min((short)10, (short)5613, (short) (-465));
      assertEquals((short) (-465), short0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1264.99);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1716.659);
      doubleArray0[5] = 3739.541;
      doubleArray0[6] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-985.3155956469475);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("8zVt%9$\"Zm");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("|kb&=<a{V.,");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_186()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (long)numberUtils0.LONG_ONE;
      floatArray0[1] = (float) numberUtils0.FLOAT_ZERO;
      floatArray0[2] = (float) (long)numberUtils0.LONG_ONE;
      floatArray0[3] = (float) (byte)numberUtils0.BYTE_ONE;
      floatArray0[4] = (float) (short)numberUtils0.SHORT_ONE;
      floatArray0[5] = (float) (long)numberUtils0.LONG_MINUS_ONE;
      floatArray0[6] = (float) numberUtils0.FLOAT_ONE;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      float[] floatArray0 = new float[13];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.toByte("0x11def", (byte) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Double double0 = NumberUtils.createDouble("1.4E-45");
      assertEquals(1.4E-45, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.toByte("False result for (true, false, true)");
      // Undeclared exception!
      try { 
        NumberUtils.createDouble("False result for (true, false, true)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.toInt("", 1770732118);
      assertEquals(1770732118, int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = 3056L;
      longArray0[1] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      longArray0[2] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      longArray0[3] = (long) (short)numberUtils0.SHORT_ZERO;
      longArray0[4] = (long) (short)numberUtils0.SHORT_ONE;
      longArray0[5] = (long) (int)numberUtils0.INTEGER_ZERO;
      longArray0[6] = (long) (byte)numberUtils0.BYTE_MINUS_ONE;
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (-1384L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1384L), long0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      long[] longArray0 = new long[8];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.toInt("off");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.max((byte) numberUtils0.BYTE_ZERO, (byte)34, (byte)101);
      // Undeclared exception!
      try { 
        NumberUtils.createDouble("s&-5vc;T}y6xc0gqF");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) numberUtils0.SHORT_ONE;
      shortArray0[1] = (short) numberUtils0.SHORT_ZERO;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1, short0);
      
      byte byte0 = NumberUtils.max((byte) numberUtils0.BYTE_ZERO, (byte) numberUtils0.BYTE_ZERO, (byte)9);
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      NumberUtils.max((byte) (-109), (byte) (-109), (byte) (-109));
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }
}
