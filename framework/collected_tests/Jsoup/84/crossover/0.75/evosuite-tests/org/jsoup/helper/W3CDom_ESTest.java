/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 18:28:06 GMT 2023
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.sun.org.apache.xerces.internal.dom.DocumentImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.helper.W3CDom;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class W3CDom_ESTest extends W3CDom_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      Document document0 = new Document("xm:ns");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Parser parser1 = new Parser(htmlTreeBuilder0);
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag.valueOf("#root", parseSettings0);
      Tag tag0 = Tag.valueOf("html", parseSettings0);
      Attributes attributes0 = new Attributes();
      attributes0.normalize();
      attributes0.iterator();
      Element element0 = new Element(tag0, "xm:ns", attributes0);
      document0.appendChild(element0);
      Document document1 = Parser.parseBodyFragmentRelaxed("xm:ns", "#root");
      attributes0.put("xmlns:id", "html");
      org.w3c.dom.Document document2 = w3CDom0.fromJsoup(document0);
      W3CDom.W3CBuilder w3CDom_W3CBuilder0 = new W3CDom.W3CBuilder(document2);
      document0.appendElement("html");
      org.w3c.dom.Document document3 = w3CDom0.fromJsoup(document1);
      element0.elementSiblingIndex();
      document1.nextElementSibling();
      attributes0.put("#root", "7XZx>'y?O;f/c$C");
      W3CDom.W3CBuilder w3CDom_W3CBuilder1 = new W3CDom.W3CBuilder(document3);
      org.w3c.dom.Document document4 = w3CDom0.fromJsoup(document1);
      assertNotSame(document4, document3);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      Document document0 = new Document("xmlns");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.setTrackErrors(100);
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("html", parseSettings0);
      Attributes attributes0 = new Attributes();
      attributes0.normalize();
      Element element0 = new Element(tag0, "xmlns", attributes0);
      Document document1 = (Document)document0.appendChild(element0);
      document1.getAllElements();
      DocumentImpl documentImpl0 = (DocumentImpl)w3CDom0.fromJsoup(document0);
      attributes0.put("xmlns", "#root");
      W3CDom.W3CBuilder w3CDom_W3CBuilder0 = new W3CDom.W3CBuilder(documentImpl0);
      DocumentImpl documentImpl1 = (DocumentImpl)w3CDom0.fromJsoup(document1);
      assertNotSame(documentImpl1, documentImpl0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      Document document0 = new Document("xmlns:\"mls0pN");
      Attributes attributes0 = document0.attributes();
      document0.appendChild(document0);
      attributes0.put("xmlns:\"mls0pN", "xmlns:\"mls0pN");
      // Undeclared exception!
      try { 
        w3CDom0.fromJsoup(document0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      Document document0 = new Document("xm:ns");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("html", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "xm:ns", attributes0);
      Document document1 = (Document)document0.appendChild(element0);
      Parser.parse("html", "html");
      DocumentImpl documentImpl0 = (DocumentImpl)w3CDom0.fromJsoup(document1);
      W3CDom.W3CBuilder w3CDom_W3CBuilder0 = new W3CDom.W3CBuilder(documentImpl0);
      DataNode dataNode0 = new DataNode("xm:ns", "!lC]");
      // Undeclared exception!
      try { 
        w3CDom_W3CBuilder0.head(dataNode0, 21);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.W3CDom$W3CBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      Document document0 = new Document("M");
      Attributes attributes0 = document0.attributes();
      Document document1 = (Document)document0.tagName("M");
      document0.appendChild(document1);
      attributes0.put("[^-a-zA$-ZY-9:.]", "[^-a-zA$-ZY-9:.]");
      // Undeclared exception!
      w3CDom0.fromJsoup(document1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      Document document0 = new Document("xmlns");
      Attributes attributes0 = document0.attributes();
      Node node0 = document0.clearAttributes();
      document0.appendChild(node0);
      attributes0.put("xmlns", "xmlns");
      // Undeclared exception!
      try { 
        w3CDom0.fromJsoup(document0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      Document document0 = new Document("xmMwn");
      Tag tag0 = Tag.valueOf("xmMwn");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "xmMwn", attributes0);
      Document document1 = (Document)document0.appendChild(pseudoTextElement0);
      attributes0.put("xmMwn", "xmMwn");
      DocumentImpl documentImpl0 = (DocumentImpl)w3CDom0.fromJsoup(document1);
      assertNotNull(documentImpl0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      Document document0 = new Document("xmMwn");
      Attributes attributes0 = document0.attributes();
      document0.appendChild(document0);
      attributes0.put("xmMwn", "xmMwn");
      // Undeclared exception!
      try { 
        w3CDom0.fromJsoup(document0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      Document document0 = Parser.parse("b:)km6V</(rZ", "b:)km6V</(rZ");
      org.w3c.dom.Document document1 = w3CDom0.fromJsoup(document0);
      // Undeclared exception!
      try { 
        w3CDom0.convert(document0, document1);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      Document document0 = new Document("xmlns:[^-a-zA$-ZY-9:.]");
      document0.appendElement("xmlns:[^-a-zA$-ZY-9:.]");
      // Undeclared exception!
      try { 
        w3CDom0.fromJsoup(document0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      Document document0 = Parser.parse("XMK*Wcg!3DSBVa&a_", "XMK*Wcg!3DSBVa&a_");
      document0.previousSibling();
      org.w3c.dom.Document document1 = w3CDom0.fromJsoup(document0);
      W3CDom.W3CBuilder w3CDom_W3CBuilder0 = new W3CDom.W3CBuilder(document1);
      w3CDom_W3CBuilder0.head((Node) null, (-2979));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      String string0 = w3CDom0.asString((org.w3c.dom.Document) null);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      Document document0 = Parser.parseBodyFragment("", "");
      Document document1 = (Document)document0.appendChild(document0);
      DocumentImpl documentImpl0 = (DocumentImpl)w3CDom0.fromJsoup(document1);
      assertNotNull(documentImpl0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      Document document0 = Parser.parse("XMK*Wcg!3DSBVa&a_", "XMK*Wcg!3DSBVa&a_");
      w3CDom0.fromJsoup(document0);
  }
}
