/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 06:09:49 GMT 2023
 */

package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.archivers.memory.MemoryArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.utils.ArchiveUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ArchiveUtils_ESTest extends ArchiveUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)0;
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, 1, 9612, byteArray0, (byte)70, (byte)0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry(mockFile1, "");
      String string0 = ArchiveUtils.toString((ArchiveEntry) zipArchiveEntry0);
      assertEquals("d      -1 /", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, 1, 6, byteArray0, 6, 1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, 1, 0, byteArray0, 0, 2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)4;
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, 100, 0, byteArray0, 0, 100);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, (byte)0, 1, byteArray0, (byte)0, 0);
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, (byte)0, 1, byteArray0, (byte)0, 0);
      boolean boolean1 = ArchiveUtils.isEqualWithNull(byteArray0, (-241), (-241), byteArray0, 2158, (-241));
      assertTrue(boolean1 == boolean0);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ArchiveUtils.toAsciiString(byteArray0, 2, 1);
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry("\u0000", 1);
      String string0 = ArchiveUtils.toString((ArchiveEntry) arArchiveEntry0);
      assertEquals("-       1 \u0000", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ArchiveUtils.isEqualWithNull(byteArray0, 117, (-9), byteArray0, 0, (-9));
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-109);
      byteArray1[2] = (byte)59;
      byteArray1[3] = (byte) (-109);
      ArchiveUtils.isEqual(byteArray0, (-2935), 0, byteArray1, 0, 1267, true);
      ArchiveUtils.isArrayZero(byteArray0, (byte) (-109));
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(3041);
      System.setCurrentTimeMillis(1L);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-99);
      byteArray0[0] = (byte) (-99);
      int int0 = 21;
      ArchiveUtils.isEqualWithNull(byteArray0, 21, (byte) (-99), byteArray0, 100, (byte) (-99));
      ArchiveUtils.isEqual(byteArray0, byteArray0, false);
      ArchiveUtils.sanitize("Bc1N?");
      ArchiveUtils.isArrayZero(byteArray0, 21);
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("Bc1N?");
      cpioArchiveEntry0.isCharacterDevice();
      cpioArchiveEntry0.setChksum(1L);
      cpioArchiveEntry0.isRegularFile();
      ArchiveUtils.toString((ArchiveEntry) cpioArchiveEntry0);
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, (-1836), (byte) (-99), byteArray0, 21, 111);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -78
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      MockFile mockFile0 = new MockFile(" NIkLU_bCsGD~-", " NIkLU_bCsGD~-");
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry(mockFile0, "");
      String string0 = ArchiveUtils.toString((ArchiveEntry) arArchiveEntry0);
      assertEquals("-       0 ", string0);
      
      ArchiveUtils.isArrayZero(byteArray0, (byte) (-23));
      byte[] byteArray1 = new byte[2];
      byteArray1[1] = (byte) (-110);
      String string1 = ArchiveUtils.sanitize("?'oI_#[he87K3[IodWB");
      assertEquals("?'oI_#[he87K3[IodWB", string1);
      
      boolean boolean0 = ArchiveUtils.isArrayZero(byteArray1, 619);
      assertFalse(boolean0);
      
      boolean boolean1 = ArchiveUtils.isEqualWithNull(byteArray0, 0, 0, byteArray0, (byte)0, 4);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean2 = ArchiveUtils.isEqualWithNull(byteArray0, 0, (-107), byteArray1, 0, (-107));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MemoryArchiveEntry memoryArchiveEntry0 = new MemoryArchiveEntry("Ah9gN$\"t8E");
      memoryArchiveEntry0.getLastModifiedDate();
      MockDate mockDate0 = new MockDate();
      MemoryArchiveEntry memoryArchiveEntry1 = new MemoryArchiveEntry("o=R");
      memoryArchiveEntry0.getLastModifiedDate();
      memoryArchiveEntry0.getLastModifiedDate();
      ArchiveUtils.toString((ArchiveEntry) memoryArchiveEntry0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte)0;
      ArchiveUtils.isEqualWithNull(byteArray0, 112, (-1304), byteArray0, 239, (-1304));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArchiveUtils.sanitize("o=R");
      ArchiveUtils.sanitize("Ah9gN$\"t8E");
      ArchiveUtils.toString((ArchiveEntry) memoryArchiveEntry0);
      ArchiveUtils.toString((ArchiveEntry) memoryArchiveEntry1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArchiveUtils.toAsciiString(byteArray0, 0, 1);
      byte[] byteArray1 = new byte[14];
      byteArray1[0] = (byte) (-44);
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray1, 105, 106, byteArray1, (byte) (-44), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 105
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MemoryArchiveEntry memoryArchiveEntry0 = new MemoryArchiveEntry("Ah9gN$\"t8E");
      memoryArchiveEntry0.getLastModifiedDate();
      MockDate mockDate0 = new MockDate();
      MemoryArchiveEntry memoryArchiveEntry1 = new MemoryArchiveEntry("o=R");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      memoryArchiveEntry0.getLastModifiedDate();
      memoryArchiveEntry0.getLastModifiedDate();
      MockDate mockDate1 = new MockDate();
      ArchiveUtils.toString((ArchiveEntry) memoryArchiveEntry0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-44);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte)0;
      ArchiveUtils.isEqualWithNull(byteArray0, 112, (-1304), byteArray0, 239, (-1304));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArchiveUtils.toAsciiString(byteArray0, 0, (int) (byte)0);
      ArchiveUtils.sanitize("Ah9gN$\"t8E");
      ArchiveUtils.toString((ArchiveEntry) memoryArchiveEntry0);
      ArchiveUtils.toString((ArchiveEntry) memoryArchiveEntry1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArchiveUtils.toAsciiString(byteArray0, 0, 1);
      byte[] byteArray1 = new byte[14];
      byteArray1[0] = (byte) (-44);
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray1, 105, 106, byteArray1, (byte) (-44), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 105
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ArchiveUtils.isEqualWithNull(byteArray0, 104, (-9), byteArray0, 0, (-9));
      int int0 = 0;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-109);
      byteArray1[1] = (byte) (-109);
      byteArray1[2] = (byte)59;
      byteArray1[3] = (byte) (-109);
      ArchiveUtils.isEqual(byteArray0, (-2935), 0, byteArray1, 0, 1267, true);
      int int1 = (-3032);
      ArchiveUtils.isArrayZero(byteArray0, (-3032));
      int int2 = (-11);
      byte[] byteArray2 = new byte[0];
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, (-9), 7, byteArray2, 7, (-3522));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3531
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[10] = (byte) (-81);
      boolean boolean0 = ArchiveUtils.isArrayZero(byteArray0, (byte) (-60));
      ArchiveUtils.sanitize("");
      boolean boolean1 = ArchiveUtils.isEqualWithNull(byteArray0, 287, (byte) (-81), byteArray0, 83, 958);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArchiveUtils.sanitize("");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-81);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-109);
      byteArray1[2] = (byte) (-117);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-109);
      byteArray1[5] = (byte)112;
      byteArray1[6] = (byte) (-109);
      ArchiveUtils.isEqualWithNull(byteArray1, (byte)112, (byte) (-109), byteArray1, (byte) (-109), (byte) (-109));
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "org.apache.commons.compress.archivers.dump.DumpArchiveInputStream");
      TarArchiveEntry tarArchiveEntry0 = new TarArchiveEntry(mockFile1);
      ArchiveUtils.toString((ArchiveEntry) tarArchiveEntry0);
      ArchiveUtils.sanitize("");
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqual(byteArray1, (int) (byte) (-117), (int) (byte)0, byteArray1, 45, (-1), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -118
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MemoryArchiveEntry memoryArchiveEntry0 = new MemoryArchiveEntry("o=R");
      memoryArchiveEntry0.getLastModifiedDate();
      ArchiveUtils.toString((ArchiveEntry) memoryArchiveEntry0);
      String string0 = ArchiveUtils.sanitize("-       0 o=R");
      ArchiveUtils.sanitize("`");
      ArchiveUtils.toAsciiString(byteArray0, 0, 0);
      memoryArchiveEntry0.getLastModifiedDate();
      ArchiveUtils.sanitize("Wo+B[");
      String string1 = ArchiveUtils.toString((ArchiveEntry) memoryArchiveEntry0);
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = ArchiveUtils.isArrayZero(byteArray0, 0);
      byte[] byteArray1 = new byte[3];
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("`", 5528);
      cpioArchiveEntry0.isRegularFile();
      ArchiveUtils.toString((ArchiveEntry) cpioArchiveEntry0);
      ArchiveUtils.toString((ArchiveEntry) cpioArchiveEntry0);
      boolean boolean1 = ArchiveUtils.isEqualWithNull(byteArray0, 101, 0, byteArray1, (-35), 0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MemoryArchiveEntry memoryArchiveEntry0 = new MemoryArchiveEntry("Ah9gN$\"t8E");
      memoryArchiveEntry0.getLastModifiedDate();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      memoryArchiveEntry0.getLastModifiedDate();
      memoryArchiveEntry0.getLastModifiedDate();
      MemoryArchiveEntry memoryArchiveEntry1 = new MemoryArchiveEntry("o=R");
      memoryArchiveEntry1.getLastModifiedDate();
      memoryArchiveEntry1.getLastModifiedDate();
      MemoryArchiveEntry memoryArchiveEntry2 = new MemoryArchiveEntry((String) null);
      memoryArchiveEntry2.getLastModifiedDate();
      ArchiveUtils.toString((ArchiveEntry) memoryArchiveEntry0);
      byte[] byteArray0 = new byte[3];
      ArchiveUtils.toAsciiString(byteArray0, 0, 0);
      ArchiveUtils.sanitize("-       0 Ah9gN$\"t8E");
      ArchiveUtils.isEqual(byteArray0, (-2264), 19, byteArray0, (-15), 0, false);
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, 0, (-15), byteArray0, (-15), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -30
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)88;
      ArchiveUtils.isEqualWithNull(byteArray0, 32, (byte) (-102), byteArray0, 102, (byte) (-102));
      ArchiveUtils.isEqual(byteArray0, byteArray0, false);
      ArchiveUtils.sanitize("Bc1N?");
      ArchiveUtils.isArrayZero(byteArray0, (-4895));
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("Bc1N?");
      cpioArchiveEntry0.setChksum(0L);
      cpioArchiveEntry0.isRegularFile();
      ArchiveUtils.toString((ArchiveEntry) cpioArchiveEntry0);
      ArchiveUtils.toString((ArchiveEntry) cpioArchiveEntry0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-102);
      byteArray1[1] = (byte) (-102);
      byteArray1[2] = (byte) (-102);
      byteArray1[3] = (byte) (-102);
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte) (-102);
      byteArray1[6] = (byte) (-102);
      byteArray1[7] = (byte) (-102);
      byteArray1[8] = (byte) (-102);
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, (byte)88, 1844, byteArray1, (byte)88, (byte) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 87
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)123;
      byteArray0[12] = (byte)123;
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, 0, 4427, byteArray0, 0, 0);
      assertFalse(boolean0);
      
      String string0 = ArchiveUtils.sanitize("s@$/S52J8");
      assertEquals("s@$/S52J8", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-10);
      byte[] byteArray1 = new byte[0];
      ArchiveUtils.isEqual(byteArray0, byteArray1, true);
      ArchiveUtils.sanitize("<xz`SHjg0?br*2%7U./");
      ArchiveUtils.isArrayZero(byteArray0, (-409));
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry("");
      cpioArchiveEntry0.setGID(60L);
      ArchiveUtils.toString((ArchiveEntry) cpioArchiveEntry0);
      ArchiveUtils.toString((ArchiveEntry) cpioArchiveEntry0);
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, (byte) (-107), (byte) (-107), byteArray0, 1710, (byte) (-10));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1603
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      MemoryArchiveEntry memoryArchiveEntry0 = new MemoryArchiveEntry("Ah9gN$\"t8E");
      memoryArchiveEntry0.getLastModifiedDate();
      memoryArchiveEntry0.getLastModifiedDate();
      memoryArchiveEntry0.getLastModifiedDate();
      memoryArchiveEntry0.getLastModifiedDate();
      memoryArchiveEntry0.getLastModifiedDate();
      MemoryArchiveEntry memoryArchiveEntry1 = new MemoryArchiveEntry("o=R");
      memoryArchiveEntry1.getLastModifiedDate();
      memoryArchiveEntry1.getLastModifiedDate();
      ArchiveUtils.toString((ArchiveEntry) memoryArchiveEntry1);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)19;
      byteArray1[1] = (byte)86;
      byteArray1[2] = (byte) (-30);
      byteArray1[1] = (byte) (-113);
      byteArray1[4] = (byte)7;
      ArchiveUtils.isEqual(byteArray0, byteArray1, false);
      System.setCurrentTimeMillis((byte)7);
      String string0 = ArchiveUtils.toAsciiString(byteArray0, (int) (byte)0, (int) (byte)0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArchiveUtils.sanitize("US-ASCII");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-85);
      byteArray0[8] = (byte) (-80);
      ArchiveUtils.isEqualWithNull(byteArray0, 45, (byte) (-80), (byte[]) null, (byte) (-85), (byte) (-80));
      System.setCurrentTimeMillis(101010256L);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = ArchiveUtils.sanitize("US-ASCII");
      assertEquals("US-ASCII", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)100;
      boolean boolean0 = ArchiveUtils.isArrayZero(byteArray0, (byte)100);
      byte[] byteArray1 = ArchiveUtils.toAsciiBytes("_vyTeAC%g_E2][vd");
      boolean boolean1 = ArchiveUtils.matchAsciiBuffer("-$AyXIYYXG", byteArray1);
      assertFalse(boolean1);
      
      boolean boolean2 = ArchiveUtils.isEqual(byteArray1, byteArray1, false);
      boolean boolean3 = ArchiveUtils.matchAsciiBuffer("", byteArray1);
      assertTrue(boolean3 == boolean0);
      
      boolean boolean4 = ArchiveUtils.isEqual(byteArray0, 166, (-767), byteArray1, 7, (-1640));
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte)9;
      ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.toAsciiString(byteArray0);
      ArchiveUtils.sanitize("\uFFFD\uFFFD\uFFFD\uFFFD\t\u0000");
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString(byteArray0, (int) (byte) (-8), 4214);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)100;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-9);
      byteArray1[1] = (byte) (-116);
      byteArray1[2] = (byte)100;
      byteArray1[3] = (byte) (-9);
      byteArray1[4] = (byte) (-122);
      byteArray1[5] = (byte)100;
      byteArray1[6] = (byte)100;
      byteArray1[7] = (byte)69;
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte) (-116);
      byteArray2[1] = (byte) (-9);
      byteArray2[2] = (byte)100;
      byteArray2[3] = (byte) (-9);
      byteArray2[4] = (byte) (-122);
      byteArray2[5] = (byte) (-116);
      byteArray2[6] = (byte) (-9);
      ArchiveUtils.isEqual(byteArray2, (int) (byte)100, (int) (byte) (-122), byteArray2, 123, (-66));
      ArchiveUtils.sanitize("");
      boolean boolean0 = ArchiveUtils.matchAsciiBuffer("", byteArray2);
      ArchiveUtils.isArrayZero(byteArray1, (-465));
      boolean boolean1 = ArchiveUtils.isArrayZero(byteArray0, (byte) (-9));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      MockFile mockFile0 = new MockFile("6C@q=OebF+^5/");
      ArArchiveEntry arArchiveEntry0 = new ArArchiveEntry(mockFile0, "org.apache.commons.compress.utils.ArchiveUtils");
      mockFile0.mkdirs();
      CpioArchiveEntry cpioArchiveEntry0 = new CpioArchiveEntry(mockFile0, "");
      ArchiveUtils.toString((ArchiveEntry) cpioArchiveEntry0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ArchiveUtils.sanitize("A");
      int int0 = 4;
      ArchiveUtils.isArrayZero(byteArray0, 4);
      int int1 = 0;
      int int2 = (-409);
      int int3 = (-64);
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, (-409), 0, byteArray0, (-64), 619);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -64
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArchiveUtils.sanitize("US-ASCII");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-106);
      ArchiveUtils.isArrayZero(byteArray0, 491);
      MemoryArchiveEntry memoryArchiveEntry0 = new MemoryArchiveEntry("US-ASCII");
      memoryArchiveEntry0.getLastModifiedDate();
      memoryArchiveEntry0.getLastModifiedDate();
      memoryArchiveEntry0.getLastModifiedDate();
      memoryArchiveEntry0.getLastModifiedDate();
      memoryArchiveEntry0.getLastModifiedDate();
      memoryArchiveEntry0.getLastModifiedDate();
      ArchiveUtils.toString((ArchiveEntry) memoryArchiveEntry0);
      // Undeclared exception!
      try { 
        ArchiveUtils.sanitize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SevenZArchiveEntry sevenZArchiveEntry0 = new SevenZArchiveEntry();
      String string0 = ArchiveUtils.toString((ArchiveEntry) sevenZArchiveEntry0);
      assertEquals("-       0 null", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ArchiveUtils.sanitize(";{1r|1.5@E#?@V^");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte)100;
      String string0 = ArchiveUtils.toAsciiString(byteArray0);
      assertEquals("\uFFFDZ-\uFFFD\uFFFDsbd", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = ArchiveUtils.sanitize(" =z0{");
      assertEquals(" ?=z0{", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArchiveUtils.sanitize("x7g\"oSPEu>{ X");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)112;
      boolean boolean0 = ArchiveUtils.matchAsciiBuffer("US-ASCII", byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)100;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-9);
      byteArray1[1] = (byte) (-116);
      byteArray1[2] = (byte)100;
      byteArray1[3] = (byte) (-9);
      byteArray1[4] = (byte) (-122);
      byteArray1[5] = (byte)100;
      byteArray1[6] = (byte)100;
      byteArray1[7] = (byte)69;
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, (int) (byte) (-116), (int) (byte) (-122), byteArray1, 26114, 509);
      ArchiveUtils.sanitize("");
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-9);
      byteArray2[1] = (byte)100;
      byteArray2[2] = (byte)100;
      byteArray2[3] = (byte) (-122);
      byteArray2[4] = (byte) (-9);
      byteArray2[5] = (byte) (-122);
      byteArray2[6] = (byte)63;
      byteArray2[7] = (byte) (-116);
      byteArray2[8] = (byte) (-122);
      boolean boolean1 = ArchiveUtils.matchAsciiBuffer("US-ASCII", byteArray2);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-110);
      boolean boolean0 = ArchiveUtils.isArrayZero(byteArray0, 619);
      assertFalse(boolean0);
      
      String string0 = ArchiveUtils.sanitize("6C@q=OebF+^5/");
      assertEquals("6C@q=OebF+^5/", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, byteArray0, false);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)14;
      boolean boolean0 = ArchiveUtils.matchAsciiBuffer("", byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = ArchiveUtils.sanitize("rQq4!:$=?jHY");
      assertEquals("rQq4!:$=?jHY", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, (byte)0, 1, byteArray0, (byte)0, 6);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqualWithNull(byteArray0, 6, 6, byteArray0, 6, (-3811));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3805
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)29;
      boolean boolean0 = ArchiveUtils.isEqual(byteArray0, (int) (byte)29, (int) (byte)28, byteArray0, (int) (byte)29, (-1183));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)68;
      byteArray1[1] = (byte)68;
      boolean boolean0 = ArchiveUtils.isEqual(byteArray1, byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = ArchiveUtils.isArrayZero(byteArray0, 12);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte)52;
      boolean boolean0 = ArchiveUtils.isArrayZero(byteArray0, (-1));
      boolean boolean1 = ArchiveUtils.isEqual(byteArray0, (-2612), (int) (byte) (-13), byteArray0, 5, (-2663));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString(byteArray0, 7, 7);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[24];
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, 1, 1, byteArray0, 1, 1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      boolean boolean0 = ArchiveUtils.isEqualWithNull(byteArray0, (byte)0, 0, byteArray0, (byte)0, 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArchiveUtils.isEqual((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.ArchiveUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = ArchiveUtils.toAsciiBytes("mwJA~}-DX9J)sW");
      assertEquals(14, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArchiveUtils.toAsciiString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
