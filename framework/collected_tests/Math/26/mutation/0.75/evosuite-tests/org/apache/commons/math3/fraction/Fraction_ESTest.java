/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 22:55:24 GMT 2023
 */

package org.apache.commons.math3.fraction;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thoughtworks.xstream.io.StreamException;
import org.apache.commons.math3.fraction.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.testcarver.testcase.EvoSuiteXStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Fraction_ESTest extends Fraction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(1146439561, (-3079));
      Fraction fraction1 = fraction0.negate();
      fraction1.ONE_QUARTER.divide((-468));
      Fraction fraction2 = new Fraction(2018, (-3079));
      fraction1.compareTo(fraction0);
      Fraction.getReducedFraction(1146439561, 1);
      Fraction fraction3 = Fraction.MINUS_ONE;
      // Undeclared exception!
      try { 
        fraction1.subtract(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: 2,292,879,122
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      Fraction fraction2 = fraction1.negate();
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-1), int0);
      
      String string0 = fraction0.toString();
      assertEquals("1 / 2", string0);
      
      Object object0 = new Object();
      fraction2.equals(fraction2);
      Fraction fraction3 = Fraction.ONE_THIRD;
      fraction2.negate();
      assertEquals((-1), fraction2.getNumerator());
      assertEquals(100.0, fraction1.percentageValue(), 0.01);
      
      Fraction fraction4 = Fraction.getReducedFraction(Integer.MIN_VALUE, 2147483593);
      assertEquals((-1.0000000256113715), fraction4.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        fraction0.negate();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = Fraction.MINUS_ONE;
      Fraction fraction2 = fraction0.TWO_FIFTHS.divide(fraction1);
      Fraction fraction3 = fraction2.ZERO.add(fraction0);
      assertEquals(5, fraction2.getDenominator());
      assertEquals((-0.4F), fraction2.floatValue(), 0.01F);
      
      int int0 = fraction0.compareTo(fraction0);
      assertSame(fraction0, fraction3);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      // Undeclared exception!
      try { 
        fraction0.ONE.divide((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-411));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-411, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(0, 269977023);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.8171022020396776E-8);
      Fraction fraction1 = fraction0.negate();
      // Undeclared exception!
      try { 
        fraction1.ONE.divide(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      fraction0.compareTo(fraction0);
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Fraction.getReducedFraction((-325), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -325/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      assertEquals(100.0F, fraction0.floatValue(), 0.01F);
      
      fraction0.THREE_FIFTHS.negate();
      Fraction fraction1 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction2 = new Fraction((-1.0));
      Fraction fraction3 = new Fraction(500.0);
      Fraction fraction4 = new Fraction(500.0);
      Fraction fraction5 = new Fraction((double) Integer.MAX_VALUE);
      Fraction fraction6 = new Fraction(726.3014519319844);
      Fraction fraction7 = new Fraction(500.0);
      Fraction fraction8 = new Fraction((-1.0));
      Fraction fraction9 = new Fraction(5);
      Fraction fraction10 = new Fraction((-1.0));
      Fraction fraction11 = Fraction.ONE_HALF;
      Fraction fraction12 = Fraction.ONE_FIFTH;
      Fraction fraction13 = new Fraction(100.0);
      Fraction fraction14 = Fraction.ZERO;
      Fraction fraction15 = Fraction.ONE_QUARTER;
      fraction15.equals(fraction12);
      // Undeclared exception!
      try { 
        EvoSuiteXStream.fromString("X");
        fail("Expecting exception: StreamException");
      
      } catch(StreamException e) {
         //
         // 
         //
         verifyException("com.thoughtworks.xstream.io.xml.XppReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(100.0);
      Fraction fraction2 = Fraction.ONE_FIFTH;
      Fraction fraction3 = new Fraction((-2147483645));
      Fraction fraction4 = new Fraction(100.0);
      Fraction fraction5 = new Fraction((-2323.0));
      Fraction fraction6 = new Fraction((-2323.0));
      assertEquals((-2323), fraction6.getNumerator());
      
      Fraction fraction7 = Fraction.getReducedFraction((-2147483645), (-2147483645));
      Fraction fraction8 = Fraction.ZERO;
      Fraction fraction9 = new Fraction((double) (-2147483645));
      Fraction fraction10 = new Fraction(1.0E-5);
      Fraction fraction11 = new Fraction(3.778802692977479E-8);
      Fraction fraction12 = fraction4.add(179);
      assertTrue(fraction4.equals((Object)fraction1));
      assertEquals(279L, fraction12.longValue());
      
      fraction2.equals(fraction7);
      Object object0 = new Object();
      Fraction.getReducedFraction(1317, (-1858));
      Fraction fraction13 = Fraction.ONE_FIFTH;
      Fraction fraction14 = fraction7.multiply(fraction11);
      assertFalse(fraction7.equals((Object)fraction10));
      
      Fraction fraction15 = fraction11.abs();
      assertNotSame(fraction15, fraction14);
      assertFalse(fraction11.equals((Object)fraction3));
      assertFalse(fraction11.equals((Object)fraction10));
      assertTrue(fraction15.equals((Object)fraction14));
      
      Fraction fraction16 = Fraction.getReducedFraction(3182, (-2147483645));
      assertEquals((-1.4817342182831851E-6), fraction16.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      // Undeclared exception!
      try { 
        fraction0.multiply((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = new Fraction((double) Integer.MIN_VALUE);
      Fraction.getReducedFraction(Integer.MIN_VALUE, 1);
      Fraction fraction1 = null;
      try {
        fraction1 = new Fraction(1.633123935319537E16, (-1495));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 16,331,239,353,195,370 to fraction (16,331,239,353,195,370/1)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = new Fraction(2147483616, 2147483616);
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction1.ZERO.subtract(fraction0);
      assertEquals((byte) (-1), fraction2.byteValue());
      
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = Fraction.ZERO;
      Fraction fraction3 = fraction1.multiply(fraction2);
      assertEquals(0, fraction3.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((short) (-2), fraction1.shortValue());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.MINUS_ONE.abs();
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1L, fraction1.longValue());
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = Fraction.TWO_THIRDS;
      int int0 = fraction0.compareTo(fraction1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01);
      
      Fraction fraction1 = fraction0.FOUR_FIFTHS.add(Integer.MIN_VALUE);
      assertEquals((-4.294967288E10), fraction1.percentageValue(), 0.01);
      assertEquals(5, fraction1.getDenominator());
      
      String string0 = fraction0.toString();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.09972279851127);
      assertEquals(7509.9715099715095, fraction1.percentageValue(), 0.01);
      
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction(7.592192774059647E-4);
      Fraction fraction5 = new Fraction(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
      Fraction fraction6 = fraction4.add(Integer.MAX_VALUE);
      assertEquals(439, fraction6.getDenominator());
      assertEquals(715827444, fraction6.getNumerator());
      
      Fraction fraction7 = Fraction.getReducedFraction(Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(1, fraction7.intValue());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = Fraction.TWO_FIFTHS;
      Fraction fraction2 = fraction0.TWO_FIFTHS.subtract(fraction1);
      assertEquals(0.0, fraction2.percentageValue(), 0.01);
      assertEquals(1, fraction2.getDenominator());
      
      String string0 = fraction0.toString();
      assertEquals("3 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.ONE_QUARTER;
      Fraction fraction2 = fraction1.TWO_THIRDS.add(fraction0);
      assertEquals(1.0, fraction2.doubleValue(), 0.01);
      
      Fraction fraction3 = fraction0.negate();
      assertEquals((-33.33333333333333), fraction3.percentageValue(), 0.01);
      assertEquals(3, fraction3.getDenominator());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = Fraction.THREE_FIFTHS;
      Fraction fraction2 = fraction0.subtract(fraction1);
      int int0 = fraction1.compareTo(fraction2);
      assertEquals((-0.4F), fraction2.floatValue(), 0.01F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = fraction0.ONE_FIFTH.reciprocal();
      Fraction fraction2 = new Fraction(75.0);
      Fraction fraction3 = fraction2.THREE_FIFTHS.divide(fraction0);
      fraction3.TWO_FIFTHS.reciprocal();
      assertEquals(0.006F, fraction3.floatValue(), 0.01F);
      
      Fraction fraction4 = new Fraction(500.0);
      Fraction fraction5 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction6 = new Fraction(75.0);
      Fraction fraction7 = new Fraction(1.0E-5);
      Fraction fraction8 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction9 = new Fraction((-638.139));
      Fraction fraction10 = fraction6.multiply(fraction1);
      assertEquals(375L, fraction10.longValue());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      Fraction fraction2 = fraction0.ZERO.multiply(fraction1);
      assertEquals(0.0, fraction2.percentageValue(), 0.01);
      
      String string0 = fraction0.toString();
      assertEquals("1 / 2", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-0.1));
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction9 = new Fraction(332.0);
      Fraction fraction10 = new Fraction((-2323.0));
      assertEquals(1, fraction10.getDenominator());
      
      Fraction fraction11 = new Fraction((double) Integer.MAX_VALUE);
      Fraction fraction12 = new Fraction(0.715432090472385);
      Fraction fraction13 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object1);
      fraction13.equals(object0);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Fraction fraction14 = Fraction.getReducedFraction((-1516), 269);
      assertEquals((-5.635687732342007), fraction14.doubleValue(), 0.01);
      
      Fraction fraction15 = fraction6.multiply(fraction0);
      assertEquals((short) (-10), fraction15.shortValue());
      
      Fraction fraction16 = fraction5.abs();
      assertSame(fraction16, fraction5);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      Fraction fraction1 = Fraction.MINUS_ONE;
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-411), Integer.MIN_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -411/-2,147,483,648, cannot negate
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void testRemovetestRemovetestRemovetestRemove_30()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-0.1));
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction9 = new Fraction(332.0);
      Fraction fraction10 = new Fraction((-2323.0));
      assertEquals((-2323), fraction10.getNumerator());
      
      Fraction fraction11 = new Fraction((double) Integer.MAX_VALUE);
      Fraction fraction12 = new Fraction(0.715432090472385);
      Fraction fraction13 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object2);
      assertFalse(fraction13.equals((Object)fraction6));
      assertFalse(fraction13.equals((Object)fraction12));
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      Fraction fraction14 = Fraction.getReducedFraction((-1516), 269);
      String string0 = fraction14.toString();
      assertEquals("-1516 / 269", string0);
  }

  @Test(timeout = 4000)
  public void testRemovetestRemove_31()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-0.1));
      assertEquals(10, fraction6.getDenominator());
      
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction9 = fraction8.TWO_THIRDS.abs();
      assertEquals(2, fraction9.getNumerator());
      
      Fraction fraction10 = new Fraction(332.0);
      Fraction fraction11 = new Fraction((-2323.0));
      Fraction fraction12 = new Fraction((double) Integer.MAX_VALUE);
      Fraction fraction13 = fraction12.ONE_FIFTH.divide((-2147483646));
      assertTrue(fraction12.equals((Object)fraction8));
      assertEquals((-4.656612894761436E-10), fraction13.doubleValue(), 0.01);
      
      Fraction fraction14 = new Fraction(0.715432090472385);
      Fraction fraction15 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction15.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction15.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction15.equals(object2);
      assertTrue(fraction15.equals((Object)fraction5));
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      int int0 = fraction14.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -2,147,483,648 to fraction (2,147,483,649/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      Fraction fraction1 = fraction0.FOUR_FIFTHS.multiply(3156371);
      assertEquals(12625484, fraction1.getNumerator());
      assertEquals(2525096.8, fraction1.doubleValue(), 0.01);
      
      String string0 = fraction0.toString();
      assertEquals("1 / 5", string0);
  }

  @Test(timeout = 4000)
  public void testRemovetestRemove_34()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = Fraction.ONE_FIFTH;
      Fraction fraction7 = new Fraction((-242343.0));
      Fraction fraction8 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction9 = new Fraction(332.0);
      Fraction fraction10 = new Fraction((-2323.0));
      Fraction fraction11 = new Fraction((double) Integer.MAX_VALUE);
      assertTrue(fraction11.equals((Object)fraction8));
      
      Fraction fraction12 = new Fraction((-0.1));
      assertFalse(fraction12.equals((Object)fraction4));
      
      Fraction fraction13 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction13.equals(object2);
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      int int0 = fraction2.getNumerator();
      assertEquals(500, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_QUARTERS;
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      Fraction fraction2 = fraction0.TWO_FIFTHS.divide(fraction1);
      assertEquals(15, fraction2.getDenominator());
      assertEquals(0.5333333333333333, fraction2.doubleValue(), 0.01);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((-21475), (-21475), (-21475));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -21,475 to fraction (-9,223,372,036,854,754,332/9,223,372,036,854,775,807)
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = new Fraction(1.0E-5, 629);
      String string0 = fraction0.toString();
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_THIRD;
      Fraction fraction1 = Fraction.THREE_QUARTERS;
      Fraction fraction2 = fraction1.multiply(fraction0);
      Fraction fraction3 = Fraction.ONE_FIFTH;
      Fraction fraction4 = fraction3.multiply((-32750));
      Fraction fraction5 = new Fraction(2393.7551698843813, 587);
      boolean boolean0 = fraction3.equals(fraction2);
      assertFalse(boolean0);
      
      Fraction fraction6 = fraction5.abs();
      Fraction fraction7 = fraction4.add(fraction5);
      Fraction fraction8 = fraction7.multiply(fraction2);
      assertSame(fraction5, fraction6);
      assertFalse(fraction2.equals((Object)fraction1));
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1, fraction4.getDenominator());
      assertFalse(fraction0.equals((Object)fraction2));
      assertEquals((-1039.0612F), fraction8.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(98304);
      Fraction fraction2 = new Fraction(75.0);
      Fraction fraction3 = new Fraction(100.0);
      Fraction fraction4 = new Fraction(100.0);
      Fraction fraction5 = new Fraction(5);
      Fraction fraction6 = new Fraction((-1.0));
      Fraction fraction7 = Fraction.ONE_HALF;
      Fraction fraction8 = Fraction.ONE_FIFTH;
      Fraction fraction9 = new Fraction((double) 98304);
      Fraction fraction10 = Fraction.ZERO;
      fraction3.equals(fraction4);
      // Undeclared exception!
      try { 
        EvoSuiteXStream.fromString("X");
        fail("Expecting exception: StreamException");
      
      } catch(StreamException e) {
         //
         // 
         //
         verifyException("com.thoughtworks.xstream.io.xml.XppReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      // Undeclared exception!
      try { 
        fraction0.reciprocal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.ZERO.abs();
      assertEquals(0, fraction1.getNumerator());
      
      String string0 = fraction0.toString();
      assertEquals("2", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2147483645), (-2147483645));
      assertEquals(1, fraction0.getNumerator());
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      Fraction fraction1 = fraction0.divide(786);
      Fraction fraction2 = fraction1.negate();
      assertEquals((-2), fraction2.getNumerator());
      assertEquals(0.0010178117048346056, fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      Fraction fraction1 = fraction0.negate();
      assertEquals(5, fraction1.getDenominator());
      assertEquals((-0.4), fraction1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.multiply(fraction0);
      assertEquals(4.0F, fraction1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      Fraction fraction2 = fraction0.TWO_FIFTHS.add(fraction1);
      assertEquals(10, fraction2.getDenominator());
      assertEquals(90.0, fraction2.percentageValue(), 0.01);
      
      String string0 = fraction0.toString();
      assertEquals("3 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction4 = fraction3.TWO_THIRDS.subtract(888148);
      assertEquals((-2664442), fraction4.getNumerator());
      
      Fraction fraction5 = new Fraction((-1.0));
      Fraction fraction6 = new Fraction(0.0);
      Fraction fraction7 = new Fraction((-0.1));
      Fraction fraction8 = new Fraction((-242343.0));
      String string0 = fraction8.THREE_QUARTERS.toString();
      assertEquals("3 / 4", string0);
      
      Fraction fraction9 = new Fraction(Integer.MAX_VALUE);
      Fraction fraction10 = new Fraction(332.0);
      Fraction fraction11 = new Fraction((-2323.0));
      assertEquals(1, fraction11.getDenominator());
      
      Fraction fraction12 = new Fraction((double) Integer.MAX_VALUE);
      assertTrue(fraction12.equals((Object)fraction3));
      
      Fraction fraction13 = new Fraction(0.715432090472385);
      Fraction fraction14 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction14.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction14.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction14.equals(object2);
      assertFalse(fraction14.equals((Object)fraction13));
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      String string1 = fraction10.toString();
      assertEquals("332", string1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      Fraction fraction1 = fraction0.TWO.subtract(255);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-25300.0), fraction1.percentageValue(), 0.01);
      
      String string0 = fraction0.toString();
      assertEquals("1 / 4", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      String string0 = fraction0.toString();
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      fraction0.FOUR_FIFTHS.getField();
      Fraction fraction1 = fraction0.negate();
      assertEquals((-0.2), fraction1.doubleValue(), 0.01);
      assertEquals(5, fraction1.getDenominator());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction(Integer.MAX_VALUE);
      assertEquals((byte) (-1), fraction3.byteValue());
      
      Fraction fraction4 = new Fraction((-1.0));
      Fraction fraction5 = new Fraction(0.0);
      Fraction fraction6 = new Fraction((-242343.0));
      Fraction fraction7 = new Fraction(Integer.MIN_VALUE);
      assertEquals((-2.147483648E9), fraction7.doubleValue(), 0.01);
      
      Fraction fraction8 = new Fraction(332.0);
      Fraction fraction9 = new Fraction((-2323.0));
      Fraction fraction10 = new Fraction(44.0);
      Fraction fraction11 = new Fraction(0.715432090472385);
      assertEquals(0L, fraction11.longValue());
      
      Fraction fraction12 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object1);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      boolean boolean0 = fraction12.equals(object2);
      assertFalse(boolean0);
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction4.floatValue();
      assertEquals((-1), fraction4.getNumerator());
      
      fraction0.hashCode();
      long long0 = fraction5.longValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      String string0 = fraction0.toString();
      assertEquals("3 / 5", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fraction fraction0 = new Fraction(100.0);
      Fraction fraction1 = new Fraction(75.0);
      Fraction fraction2 = new Fraction(500.0);
      Fraction fraction3 = new Fraction((-1.0));
      Fraction fraction4 = new Fraction(0.0);
      Fraction fraction5 = new Fraction((-0.1));
      assertEquals(10, fraction5.getDenominator());
      
      Fraction fraction6 = new Fraction((-242343.0));
      Fraction fraction7 = new Fraction(Integer.MIN_VALUE);
      assertEquals((-2.147483648E11), fraction7.percentageValue(), 0.01);
      
      Fraction fraction8 = new Fraction(332.0);
      Fraction fraction9 = new Fraction((-2323.0));
      Fraction fraction10 = new Fraction(44.0);
      Fraction fraction11 = new Fraction(0.715432090472385);
      Fraction fraction12 = Fraction.ZERO;
      Object object0 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object0);
      Object object1 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      fraction12.equals(object1);
      fraction12.equals(object0);
      Object object2 = EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      boolean boolean0 = fraction12.equals(object2);
      assertFalse(boolean0);
      assertTrue(fraction12.equals((Object)fraction4));
      
      EvoSuiteXStream.fromString("<org.apache.commons.math3.fraction.Fraction>\n  <denominator>1</denominator>\n  <numerator>0</numerator>\n</org.apache.commons.math3.fraction.Fraction>");
      double double0 = fraction1.percentageValue();
      assertEquals(7500.0, double0, 0.01);
      
      fraction0.getDenominator();
      fraction0.getField();
      assertEquals(10000.0, fraction0.percentageValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(0.003814700000020821, 0.003814700000020821, (-1148));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 0.004 to fraction after -1,148 iterations
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = Fraction.ZERO;
      Fraction fraction2 = fraction0.add(fraction1);
      assertSame(fraction2, fraction0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO;
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.percentageValue(), 0.01);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      // Undeclared exception!
      try { 
        fraction0.ONE_FIFTH.add((Fraction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
         verifyException("org.apache.commons.math3.fraction.Fraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      
      Fraction fraction1 = fraction0.negate();
      Fraction fraction2 = fraction1.negate();
      int int1 = fraction1.compareTo(fraction0);
      assertEquals((-1), int1);
      
      String string0 = fraction0.toString();
      assertEquals("1 / 5", string0);
      
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = fraction2.equals(object1);
      assertFalse(boolean0);
      
      Fraction fraction3 = fraction2.multiply(fraction1);
      fraction3.negate();
      assertEquals((-0.04), fraction3.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fraction fraction0 = new Fraction((-885.17110400976));
      assertEquals((-232800), fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fraction fraction0 = new Fraction((-2147483634));
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2147483634L), fraction0.longValue());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      Fraction fraction1 = Fraction.MINUS_ONE;
      boolean boolean0 = fraction1.equals(fraction0);
      assertFalse(boolean0);
      
      Fraction fraction2 = fraction0.negate();
      assertTrue(fraction2.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction1));
      
      Fraction fraction3 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);
      assertEquals((-1.0000000004656613), fraction3.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fraction fraction0 = Fraction.getReducedFraction(Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertEquals(100.0, fraction0.percentageValue(), 0.01);
      assertEquals(1, fraction0.getDenominator());
  }
}
