/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 01:28:13 GMT 2023
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Properties;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultParser_ESTest extends DefaultParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("a", "a", true, "org.apache.commons.cli.DefaultParser");
      option0.setArgs(4);
      Options options1 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      OptionGroup optionGroup2 = optionGroup1.addOption(option0);
      Properties properties0 = new Properties();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-ab";
      stringArray0[1] = "-ab";
      stringArray0[2] = "-ab";
      stringArray0[3] = "org.apache.commons.cli.DefaultParser";
      defaultParser0.parse(options0, stringArray0, properties0, true);
      Options options2 = options0.addOptionGroup(optionGroup2);
      optionGroup0.setRequired(true);
      CommandLine commandLine0 = defaultParser0.cmd;
      DefaultParser defaultParser1 = new DefaultParser();
      defaultParser1.parse(options2, stringArray0, true);
      defaultParser0.parse(options1, stringArray0);
      defaultParser1.handleConcatenatedOptions("7:2Q");
      CommandLine commandLine1 = defaultParser0.parse(options1, stringArray0, properties0, true);
      CommandLine commandLine2 = defaultParser1.parse(options0, (String[]) null);
      assertFalse(commandLine2.equals((Object)commandLine1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("a", "t0");
      option0.setArgs((-2328));
      options0.addOption(option0);
      String[] stringArray0 = new String[10];
      stringArray0[0] = "-a=b";
      Properties properties0 = new Properties();
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -a=b
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("a", "t0");
      option0.setArgs((-2));
      options0.addOption(option0);
      String[] stringArray0 = new String[10];
      stringArray0[0] = "-a=b";
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "T<~M;mC2)(i2`qof";
      stringArray0[1] = "-f=bar";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -f=bar
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      Option option0 = option_Builder0.build();
      option0.setArgs((-2));
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-t1";
      DefaultParser defaultParser0 = new DefaultParser();
      stringArray0[1] = "---e0iEL*m=";
      defaultParser0.handleConcatenatedOptions("");
      Properties properties0 = new Properties();
      defaultParser0.parse(options1, stringArray0);
      defaultParser0.parse(options0, stringArray0);
      defaultParser0.handleConcatenatedOptions("just a string");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      Option option0 = option_Builder0.build();
      option0.setArgs((-2));
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-t1";
      DefaultParser defaultParser0 = new DefaultParser();
      stringArray0[1] = "---e0iEL*m=";
      CommandLine commandLine0 = defaultParser0.parse(options1, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption((String) null, "r", false, (String) null);
      DefaultParser defaultParser0 = new DefaultParser();
      options0.addRequiredOption("W", "--=wJ!*C4OHBhp84}>", false, "--=wJ!*C4OHBhp84}>");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "--=wJ!*C4OHBhp84}>";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Ambiguous option: '--'  (could be: 'r', '--=wJ!*C4OHBhp84}>')
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      Options options1 = options0.addRequiredOption("", "", true, "");
      String[] stringArray0 = new String[29];
      stringArray0[0] = "--=wJ!*C4OHBhp84}>";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      Options options1 = options0.addRequiredOption("r", "r", false, "--=VJy*C4zHBhp84}>");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "--=VJy*C4zHBhp84}>";
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: --=VJy*C4zHBhp84}>
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Options options0 = new Options();
      Option.builder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("a", "a", true, "a");
      option0.setArgs((-2));
      Options options1 = options0.addOption(option0);
      option0.toString();
      Properties properties0 = new Properties();
      DefaultParser defaultParser0 = new DefaultParser();
      option0.setDescription("$]u rC+ 41G");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-ab";
      defaultParser0.parse(options1, stringArray0, properties0, true);
      DefaultParser defaultParser1 = new DefaultParser();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      defaultParser0.parse(options1, stringArray0);
      String[] stringArray1 = new String[6];
      stringArray1[0] = "[ option: a a [ARG...] :: a :: class java.lang.String ]";
      stringArray1[2] = "-ab";
      stringArray1[3] = "-ab";
      stringArray1[4] = "[ option: a a [ARG...] :: a :: class java.lang.String ]";
      options1.getOptions();
      CommandLine commandLine0 = defaultParser1.parse(options0, stringArray1, properties0, true);
      defaultParser1.skipParsing = true;
      defaultParser1.parse(options1, stringArray0, true);
      DefaultParser defaultParser2 = new DefaultParser();
      CommandLine commandLine1 = defaultParser2.parse(options0, stringArray0);
      assertFalse(commandLine1.equals((Object)commandLine0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("kQ", "a", true, "a");
      option0.setArgs((-2));
      options0.addOption(option0);
      optionGroup0.addOption(option0);
      String[] stringArray0 = new String[11];
      stringArray0[0] = "-ab";
      Properties properties0 = new Properties();
      Options options1 = options0.addOption(option0);
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Options options0 = new Options();
      Option.builder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Option option0 = new Option("a", "a", true, "a");
      option0.setArgs(40);
      Options options1 = options0.addOption(option0);
      option0.toString();
      DefaultParser defaultParser0 = new DefaultParser();
      DefaultParser defaultParser1 = new DefaultParser();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-ab";
      stringArray0[1] = "-ab";
      CommandLine commandLine0 = defaultParser1.parse(options1, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.builder();
      Option option0 = new Option("t0", "a", false, "t0");
      option0.setArgs((-337));
      Options options1 = options0.addOption(option0);
      Option.builder("t0");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-ab";
      stringArray0[1] = "-ab";
      stringArray0[2] = "t0";
      Properties properties0 = new Properties();
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, properties0, true);
      defaultParser0.handleConcatenatedOptions("-ab");
      Properties properties1 = new Properties();
      Object object0 = new Object();
      Object object1 = new Object();
      properties0.put(object1, object1);
      CommandLine commandLine1 = defaultParser0.parse(options1, stringArray0, properties1, true);
      assertFalse(commandLine1.equals((Object)commandLine0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      Options options1 = options0.addOption("", "--=VJy*C4zHehp84}>", true, "--=VJy*C4zHehp84}>");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--=VJy*C4zHehp84}>";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option option0 = new Option("t1", "a", false, "t1");
      Options options1 = options0.addOption("a", false, "t1");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-a";
      stringArray0[1] = "-a";
      stringArray0[2] = "a";
      stringArray0[3] = "-.K";
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -.K
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      option_Builder0.hasArg();
      Option.builder("t1");
      Option option0 = option_Builder0.build();
      Options options1 = options0.addOption(option0);
      Option.Builder option_Builder1 = Option.builder("b");
      Option.Builder option_Builder2 = option_Builder1.hasArg(false);
      Option.builder("t1");
      option_Builder2.build();
      Options options2 = options0.addOption(option0);
      OptionGroup optionGroup0 = new OptionGroup();
      options1.getMatchingOptions("-t1");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "t1";
      stringArray0[1] = "-t1";
      stringArray0[2] = "b";
      stringArray0[3] = "-t1";
      stringArray0[4] = "-";
      stringArray0[5] = "-t1";
      stringArray0[6] = "t1";
      stringArray0[7] = "b";
      stringArray0[8] = "t1";
      CommandLine commandLine0 = defaultParser0.parse(options2, stringArray0);
      defaultParser0.handleConcatenatedOptions("K");
      Properties properties0 = new Properties();
      CommandLine commandLine1 = defaultParser0.parse(options0, stringArray0, properties0, true);
      assertFalse(commandLine1.equals((Object)commandLine0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("t1", "t1");
      option0.setArgs((-2));
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-t1";
      DefaultParser defaultParser0 = new DefaultParser();
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option option0 = new Option("t1_path", "t1_path", true, "t1");
      Options options1 = options0.addOption(option0);
      Option.builder("t1_path");
      Option.builder("last");
      option0.toString();
      Option.builder("last");
      options1.hasLongOption(".K");
      Options options2 = options1.addOption(option0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-t1";
      options2.helpOptions();
      stringArray0[1] = "-t1";
      option0.setOptionalArg(true);
      stringArray0[2] = "-ab";
      stringArray0[3] = "t1_path";
      Properties properties0 = new Properties();
      CommandLine commandLine0 = defaultParser0.parse(options2, stringArray0, properties0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Options options0 = new Options();
      Properties properties0 = new Properties();
      properties0.put(".f.5AN-g_aoLdU|rplq6", ".f.5AN-g_aoLdU|rplq6");
      DefaultParser defaultParser0 = new DefaultParser();
      try { 
        defaultParser0.parse(options0, (String[]) null, properties0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Default option wasn't defined
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("a", "a", false, "a");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-ab";
      Properties properties0 = new Properties();
      DefaultParser defaultParser0 = new DefaultParser();
      CommandLine commandLine0 = defaultParser0.parse(options1, stringArray0, properties0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Options options0 = new Options();
      Option.builder();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-";
      DefaultParser defaultParser0 = new DefaultParser();
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[14];
      stringArray0[0] = "--ab";
      DefaultParser defaultParser0 = new DefaultParser();
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: --ab
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--=VJy*C4zHehp84}>";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: --=VJy*C4zHehp84}>
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "t1";
      stringArray0[1] = "t1";
      defaultParser0.parse(options0, stringArray0);
      options0.addRequiredOption("t1", "1", true, "t1");
      defaultParser0.handleConcatenatedOptions("t1");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      Option.builder();
      Option.builder();
      option_Builder0.argName("t1_path");
      Option option0 = option_Builder0.build();
      Options options1 = options0.addOption(option0);
      Option.builder("a");
      Option option1 = new Option("t1_path", "a", true, "t1");
      Options options2 = options1.addOption(option1);
      Option.Builder option_Builder1 = Option.builder("t1_path");
      Option option2 = option_Builder1.build();
      options1.addOption(option2);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-ab";
      stringArray0[1] = "-t1";
      stringArray0[2] = "t1";
      stringArray0[3] = "a";
      stringArray0[4] = "t1";
      defaultParser0.parse(options2, stringArray0);
      OptionGroup optionGroup0 = new OptionGroup();
      DefaultParser defaultParser1 = new DefaultParser();
      CommandLine commandLine0 = defaultParser1.parse(options0, stringArray0);
      Properties properties0 = new Properties();
      defaultParser0.parse(options0, stringArray0, properties0, true);
      defaultParser1.handleConcatenatedOptions("-ab");
      Properties properties1 = new Properties();
      CommandLine commandLine1 = defaultParser0.parse(options1, stringArray0, properties1, true);
      assertFalse(commandLine1.equals((Object)commandLine0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-.";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -.
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      option_Builder0.hasArg();
      Option.builder();
      Option option0 = option_Builder0.build();
      Options options1 = options0.addOption(option0);
      Option.Builder option_Builder1 = Option.builder("a");
      Option.Builder option_Builder2 = option_Builder1.hasArg(false);
      Option option1 = new Option("t1", "a", true, "t1");
      Options options2 = options1.addOption(option1);
      option_Builder2.hasArg(false);
      option_Builder0.build();
      Options options3 = options2.addOption("t1", true, "b");
      Option.builder("last");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "t1";
      stringArray0[1] = "a";
      stringArray0[2] = "t1";
      stringArray0[3] = "t1";
      stringArray0[4] = "1";
      CommandLine commandLine0 = defaultParser0.parse(options3, stringArray0);
      Properties properties0 = new Properties();
      defaultParser0.handleConcatenatedOptions("Matching options size");
      CommandLine commandLine1 = defaultParser0.parse(options2, stringArray0);
      assertFalse(commandLine1.equals((Object)commandLine0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option option0 = new Option("t1_path", "t1_path", true, "t1_path");
      options0.addOption(option0);
      String[] stringArray0 = new String[13];
      stringArray0[0] = "-t1";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      option_Builder0.hasArg();
      option_Builder0.numberOfArgs(1);
      option_Builder0.optionalArg(true);
      option_Builder0.argName("t1_path");
      Option option0 = option_Builder0.build();
      Options options1 = options0.addOption(option0);
      Option.Builder option_Builder1 = Option.builder("a");
      option_Builder1.hasArg(false);
      Option option1 = option_Builder1.build();
      Options options2 = options1.addOption(option1);
      Option.Builder option_Builder2 = Option.builder("b");
      option_Builder2.hasArg(false);
      Option option2 = option_Builder2.build();
      Options options3 = options2.addOption(option2);
      Option.Builder option_Builder3 = Option.builder("last");
      Option option3 = option_Builder3.build();
      Options options4 = options3.addOption(option3);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1";
      stringArray0[1] = "-ab";
      defaultParser0.parse(options4, stringArray0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "&!";
      Properties properties0 = new Properties();
      defaultParser0.parse(options2, stringArray1, properties0, true);
      defaultParser0.handleConcatenatedOptions("--Ut1");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      defaultParser0.parse(options0, (String[]) null, true);
      defaultParser0.handleConcatenatedOptions("'fDsr<");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("a", "a", false, "a");
      String[] stringArray0 = new String[0];
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing required option: a
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[12];
      stringArray0[0] = "--";
      DefaultParser defaultParser0 = new DefaultParser();
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-ey]Ltm=";
      DefaultParser defaultParser0 = new DefaultParser();
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      defaultParser0.handleConcatenatedOptions(".");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[0];
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("verbose", "verbose");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      CommandLine commandLine0 = defaultParser0.parse(options1, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("t1", "t1");
      option0.setArgs((-2));
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-t1";
      DefaultParser defaultParser0 = new DefaultParser();
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Properties properties0 = new Properties();
      CommandLine commandLine0 = defaultParser0.parse(options0, (String[]) null, properties0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void shouldParseShortOptionWithValueshouldParseShortOptionWithValue_37()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      option_Builder0.hasArg();
      option_Builder0.numberOfArgs(1);
      option_Builder0.optionalArg(true);
      option_Builder0.argName("t1_path");
      Option option0 = option_Builder0.build();
      Options options1 = options0.addOption(option0);
      Option.Builder option_Builder1 = Option.builder("a");
      option_Builder1.hasArg(false);
      Option option1 = option_Builder1.build();
      Options options2 = options1.addOption(option1);
      options0.getMatchingOptions("Ep5N,^-,1m:?mdI:{P");
      Option.Builder option_Builder2 = Option.builder("b");
      option_Builder2.hasArg(false);
      Option option2 = option_Builder2.build();
      Options options3 = options2.addOption(option2);
      Option.Builder option_Builder3 = Option.builder("last");
      option_Builder3.hasArg(false);
      Option option3 = option_Builder3.build();
      Options options4 = options3.addOption(option3);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-t1";
      stringArray0[1] = "path/to/my/db";
      defaultParser0.parse(options4, stringArray0);
      defaultParser0.handleConcatenatedOptions("9R_fq'TTm&(3");
      defaultParser0.handleConcatenatedOptions("last");
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      CommandLine commandLine0 = defaultParser0.parse(options0, (String[]) null);
      assertNotNull(commandLine0);
      
      try { 
        defaultParser0.handleConcatenatedOptions("-Unrecognized option: ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -Unrecognized option: 
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void shouldParseShortOptionWithoutValueshouldParseShortOptionWithoutValue_40()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      option_Builder0.hasArg();
      option_Builder0.numberOfArgs(1);
      option_Builder0.optionalArg(true);
      option_Builder0.argName("t1_path");
      Option option0 = option_Builder0.build();
      Options options1 = options0.addOption(option0);
      Option.Builder option_Builder1 = Option.builder("a");
      option_Builder1.hasArg(false);
      Option option1 = option_Builder1.build();
      Options options2 = options1.addOption(option1);
      Option.Builder option_Builder2 = Option.builder("b");
      option_Builder2.hasArg(false);
      Option option2 = option_Builder2.build();
      Options options3 = options2.addOption(option2);
      Option.Builder option_Builder3 = Option.builder("last");
      option_Builder3.hasArg(false);
      Option option3 = option_Builder3.build();
      Options options4 = options3.addOption(option3);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-t1";
      stringArray0[1] = "-last";
      defaultParser0.parse(options4, stringArray0);
      defaultParser0.handleConcatenatedOptions("?DhyIFP5>*>&{.-");
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      defaultParser0.parse(options0, (String[]) null);
      defaultParser0.handleConcatenatedOptions("value 3");
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      // Undeclared exception!
      try { 
        defaultParser0.handleConcatenatedOptions("-nrecognized ption: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "th_math";
      DefaultParser defaultParser0 = new DefaultParser();
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("t1", "t1");
      option0.setArgs((-2));
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-t1";
      stringArray0[1] = "";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-nrecognized ption: ";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -nrecognized ption: 
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("t1", "t1_path", true, "t1");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-t1";
      stringArray0[1] = "-t1";
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option: t1
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[0];
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("a", "a", false, "a");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-ab";
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -ab
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-j.";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -j.
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Options options1 = options0.addOption("t1", "t1", true, "t1");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "--t1";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Options options0 = new Options();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-e0~iEL*mq=c%";
      DefaultParser defaultParser0 = new DefaultParser();
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -e0~iEL*mq=c%
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Options options1 = options0.addOption("t1", "t1_path", true, "t1");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "--t1";
      stringArray0[1] = "t1";
      CommandLine commandLine0 = defaultParser0.parse(options1, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("a", "a", true, "a");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-ab";
      CommandLine commandLine0 = defaultParser0.parse(options1, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("t1", "t1", true, "t1");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "--t1";
      stringArray0[1] = "--t1";
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option: t1
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Options options0 = new Options();
      Option.Builder option_Builder0 = Option.builder("t1");
      option_Builder0.hasArg();
      Option option0 = option_Builder0.build();
      Options options1 = options0.addOption(option0);
      options1.addOption(option0);
      Options options2 = new Options();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-t1";
      stringArray0[1] = "-t1";
      DefaultParser defaultParser0 = new DefaultParser();
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option: t1
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }
}
