/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 21:29:19 GMT 2023
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      NumberUtils.createNumber("0X21478364");
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)97;
      Byte byte0 = new Byte((byte)0);
      NumberUtils.isNumber("0X21478364");
      try { 
        NumberUtils.createNumber("OLE9+M>LF;HX]4D_");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // OLE9+M>LF;HX]4D_ is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1l");
      assertEquals((-1L), number0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xf>!JF,`8h3~ZvuT");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xmaxlong[]) failed for array length 5");
      NumberUtils.isNumber("-123E2.12");
      boolean boolean1 = NumberUtils.isDigits("-");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0+W=g?YjP5L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -0+W=g?YjP5L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      NumberUtils.createNumber("0E1");
      Number number0 = NumberUtils.createNumber("0.9");
      assertNotNull(number0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-5570);
      intArray0[1] = 463;
      intArray0[2] = 1840;
      intArray0[3] = 28;
      intArray0[4] = 606;
      intArray0[5] = 275;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1840, int0);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short)89;
      shortArray0[1] = (short)115;
      shortArray0[2] = (short)307;
      shortArray0[3] = (short) (-564);
      shortArray0[4] = (short)4115;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-564), short0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0E0");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)6;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)6, byte0);
      
      NumberUtils.isNumber("j!H");
      boolean boolean0 = NumberUtils.isNumber("0x09%C[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xbar(Integer)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("6e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.1L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1E700F");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0Ee\"7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1E700");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0Ee7");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Ee7\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0E7");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0E is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1E-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234E5l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0E,");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0E, is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      try { 
        NumberUtils.createNumber("t?{C=Mk>3]uF3qLZ0EZ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // t?{C=Mk>3]uF3qLZ0EZ is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.1E-700F");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-700F");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      NumberUtils.isNumber("..");
      int[] intArray0 = new int[1];
      intArray0[0] = 2125;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(2125, int0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 2125;
      longArray0[1] = (long) 2125;
      longArray0[2] = (long) 2125;
      longArray0[3] = (long) 2125;
      longArray0[4] = (long) 2125;
      longArray0[5] = (long) 2125;
      longArray0[6] = (long) 2125;
      longArray0[7] = (long) 2125;
      longArray0[8] = (long) 2125;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(2125L, long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("23.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234.5d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("23.4E5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0y");
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-2838.8164F);
      floatArray0[1] = 380.444F;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = 1.0F;
      floatArray0[4] = 14.3F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-700");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("eilW|+hc]m5z%");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x12342D");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Xd.l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Xd.l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      try { 
        NumberUtils.createNumber("toFloat(Float.MAX_VALUE) failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // toFloat(Float.MAX_VALUE) failed is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1.1E200");
      assertEquals((-1.1E200), number0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
      
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+A6*!iSp[)q");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("01l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("4.1");
      assertEquals(4.1F, number0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.1E-700");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("12342D");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("123.4E21D");
      assertEquals(1.234E23, number0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      NumberUtils.createNumber((String) null);
      NumberUtils.isNumber("&XI7N6\"jpDf");
      NumberUtils.createBigInteger((String) null);
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[1];
      NumberUtils.max(doubleArray0);
      NumberUtils.isNumber("-");
      long[] longArray0 = new long[9];
      longArray0[0] = (long) numberUtils0.LONG_ZERO;
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) numberUtils0.BYTE_MINUS_ONE;
      NumberUtils.min(byteArray0);
      NumberUtils.createInteger((String) null);
      byteArray0[2] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[3] = (byte) numberUtils0.BYTE_ZERO;
      NumberUtils.max(byteArray0);
      NumberUtils.isDigits("-");
      NumberUtils.isNumber("-");
      longArray0[4] = 580L;
      longArray0[6] = (long) (int)numberUtils0.INTEGER_ZERO;
      longArray0[7] = (long) numberUtils0.LONG_ZERO;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_ONE;
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".4-?tZ?Y3h");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1387.6989062;
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.5F;
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      try { 
        NumberUtils.createNumber("R`NE?{QG4SNIv4e");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // R`NE?{QG4SNIv4e is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      try { 
        NumberUtils.createNumber(")_&,b:rEJ,:L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // )_&,b:rEJ,:L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      try { 
        NumberUtils.createNumber("K/c?vZL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // K/c?vZL is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1234.5f");
      assertEquals(1234.5F, number0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      try { 
        NumberUtils.createNumber("S#.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      try { 
        NumberUtils.createNumber(".zUJ'");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .zUJ' is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int[] intArray0 = new int[10];
      NumberUtils.max(intArray0);
      NumberUtils.toInt((String) null);
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("0X&y%Nm:90\"^z");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      try { 
        NumberUtils.createNumber("F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // F is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      try { 
        NumberUtils.createNumber("h^B7 ;7W\"Y{3oAgVD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // h^B7 ;7W\"Y{3oAgVD is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("---0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (float)numberUtils0.FLOAT_ONE;
      doubleArray0[1] = (double) (byte)numberUtils0.BYTE_MINUS_ONE;
      doubleArray0[2] = (double) (float)numberUtils0.FLOAT_MINUS_ONE;
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[2] = (short) (byte)numberUtils0.BYTE_ZERO;
      short short0 = NumberUtils.max(shortArray0);
      doubleArray0[3] = (double) (float)numberUtils0.FLOAT_ZERO;
      doubleArray0[4] = (double) (long)numberUtils0.LONG_ZERO;
      doubleArray0[5] = (double) numberUtils0.DOUBLE_ONE;
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
      
      short short1 = NumberUtils.toShort("-");
      assertTrue(short1 == short0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (long)numberUtils0.LONG_MINUS_ONE;
      floatArray0[1] = (float) numberUtils0.FLOAT_ONE;
      floatArray0[2] = 2321.5916F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1.0F), float0, 0.01F);
      
      int int0 = NumberUtils.min((int) numberUtils0.INTEGER_ZERO, 121, (-130941514));
      assertEquals((-130941514), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-887);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-10);
      shortArray0[3] = (short)1752;
      shortArray0[4] = (short) (-2788);
      shortArray0[5] = (short)1595;
      shortArray0[6] = (short)68;
      NumberUtils.max(shortArray0);
      NumberUtils.toShort((String) null, (short)1);
      Number number0 = NumberUtils.createNumber("--0X11d11");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      try { 
        NumberUtils.createNumber("l!S)rqo_XuB.OP\"D+n");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // l!S)rqo_XuB.OP\"D+n is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      try { 
        NumberUtils.createNumber("d8f1sw*uKYe");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // d8f1sw*uKYe is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("12");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      long[] longArray0 = new long[13];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      long long0 = new Long(0L);
      NumberUtils.createLong((String) null);
      Long long1 = NumberUtils.createLong((String) null);
      assertNull(long1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x5SkgjQ7 liet");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short)8, (short)8, (short) (-1172));
      assertEquals((short)8, short0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      longArray0[1] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      longArray0[2] = (long) (byte)numberUtils0.BYTE_ONE;
      longArray0[3] = (long) (int)numberUtils0.INTEGER_ONE;
      longArray0[4] = (long) (short) (-1172);
      longArray0[5] = (long) (short)numberUtils0.SHORT_ZERO;
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1172L), long0);
      
      boolean boolean0 = NumberUtils.isNumber("-0xmax(long[]) failed for array length 5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xFAE-1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xor.apache.commons.lang.math.NumberUtils");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xb+pX-0{HAj5>Q");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x/,;&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (float)numberUtils0.FLOAT_ONE;
      doubleArray0[1] = (-581.0);
      doubleArray0[2] = (double) (byte)numberUtils0.BYTE_ZERO;
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[2] = (short) numberUtils0.SHORT_MINUS_ONE;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) numberUtils0.INTEGER_MINUS_ONE;
      intArray0[2] = (int) (short)numberUtils0.SHORT_ONE;
      intArray0[2] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[4] = (int) numberUtils0.INTEGER_MINUS_ONE;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1, int0);
      
      byte byte0 = NumberUtils.toByte((String) null);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("IW");
      NumberUtils.max((byte)69, (byte) (-58), (byte)95);
      boolean boolean1 = NumberUtils.isNumber("IW");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E!~X9/36[xN");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      try { 
        NumberUtils.createNumber("The Array must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long long0 = NumberUtils.max((-1L), (-1L), (-1L));
      assertEquals((-1L), long0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1L);
      floatArray0[1] = (float) (-1L);
      NumberUtils.max(floatArray0);
      NumberUtils.max((-2105376124), (-2105376124), 151);
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("1@gmEq>Rd");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1@gmEq>Rd\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-812.0);
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (float)numberUtils0.FLOAT_ONE;
      doubleArray0[1] = (-581.0);
      doubleArray0[2] = (double) (byte)numberUtils0.BYTE_ZERO;
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[2] = (short) numberUtils0.SHORT_MINUS_ONE;
      int[] intArray0 = new int[5];
      intArray0[0] = (int) numberUtils0.INTEGER_MINUS_ONE;
      intArray0[1] = (int) (short)numberUtils0.SHORT_ONE;
      intArray0[2] = (int) (short)numberUtils0.SHORT_ONE;
      intArray0[3] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[4] = (int) numberUtils0.INTEGER_MINUS_ONE;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1, int0);
      
      boolean boolean0 = NumberUtils.isNumber("-0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      NumberUtils.isNumber("F,7l+iIX6svM");
      int int0 = NumberUtils.max(65, 1235, 65);
      assertEquals(1235, int0);
      
      short short0 = NumberUtils.toShort("F,7l+iIX6svM", (short) (-583));
      assertEquals((short) (-583), short0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      try { 
        NumberUtils.createNumber("max(int[]) failed for array length 1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      try { 
        NumberUtils.createNumber("org.apache.commons.lang3.JavaVersion");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // org.apache.commons.lang3.JavaVersion is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      try { 
        NumberUtils.createNumber("1-tEF:n8<*A.+L>gQ2");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 1-tEF:n8<*A.+L>gQ2 is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      try { 
        NumberUtils.createNumber("5SkgjQ7 liet");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 5SkgjQ7 liet is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.isNumber("ONp8c'P*?!!+IY#");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[2] = (byte)74;
      byteArray0[0] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[4] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[5] = (byte)70;
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) numberUtils0.SHORT_ONE;
      short short0 = NumberUtils.max(shortArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (int)numberUtils0.INTEGER_MINUS_ONE;
      doubleArray0[1] = (double) (long)numberUtils0.LONG_ONE;
      doubleArray0[2] = (double) (short)numberUtils0.SHORT_MINUS_ONE;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1.0, double0, 0.01);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short)numberUtils0.SHORT_ZERO;
      intArray0[1] = (int) (short)1;
      intArray0[2] = (int) (byte)74;
      intArray0[3] = (int) (byte)74;
      intArray0[4] = (int) (short)1;
      intArray0[5] = (int) (short)1;
      intArray0[6] = (int) (byte)0;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(74, int0);
      
      short short1 = NumberUtils.min(shortArray0);
      assertTrue(short1 == short0);
      
      short short2 = NumberUtils.min((short) (-1), (short) numberUtils0.BYTE_ZERO, (short) numberUtils0.BYTE_ONE);
      assertEquals((short) (-1), short2);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_ZERO;
      intArray0[1] = (int) (byte)numberUtils0.BYTE_ZERO;
      intArray0[2] = (int) numberUtils0.INTEGER_ZERO;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
      
      long long0 = NumberUtils.min((long) numberUtils0.INTEGER_MINUS_ONE, (long) numberUtils0.LONG_ONE, (long) numberUtils0.INTEGER_MINUS_ONE);
      assertEquals((-1L), long0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)6;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.max((byte)82, (byte)15, (byte)48);
      assertEquals((byte)82, byte0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (byte)71;
      longArray0[1] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      longArray0[2] = (long) (byte)82;
      longArray0[3] = 2400L;
      longArray0[4] = (long) (byte)numberUtils0.BYTE_MINUS_ONE;
      longArray0[5] = (long) (byte) (-9);
      longArray0[6] = (long) (byte) (-67);
      longArray0[7] = (long) numberUtils0.LONG_MINUS_ONE;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(2400L, long0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (long)numberUtils0.LONG_ZERO;
      floatArray0[1] = (float) 2400L;
      floatArray0[2] = (float) (-9L);
      floatArray0[3] = (float) (-9L);
      floatArray0[4] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
      
      byte byte1 = NumberUtils.max((byte) (-98), (byte)82, (byte)74);
      assertEquals((byte)82, byte1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1620.8F);
      floatArray0[1] = 63.626F;
      floatArray0[2] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.min((int) numberUtils0.INTEGER_ZERO, (int) numberUtils0.BYTE_MINUS_ONE, (int) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1327;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(")O@");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.max((int) numberUtils0.SHORT_ONE, (int) numberUtils0.BYTE_MINUS_ONE, (int) numberUtils0.SHORT_ONE);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (float)numberUtils0.FLOAT_ONE;
      doubleArray0[1] = (-581.0);
      doubleArray0[2] = (double) (byte)numberUtils0.BYTE_ZERO;
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[2] = (short) numberUtils0.SHORT_MINUS_ONE;
      NumberUtils.max(shortArray0);
      doubleArray0[3] = (double) (long)numberUtils0.LONG_ONE;
      doubleArray0[4] = (double) (byte)numberUtils0.BYTE_ONE;
      doubleArray0[5] = (-2651.611706652576);
      doubleArray0[6] = (double) (int)numberUtils0.INTEGER_ZERO;
      NumberUtils.max(doubleArray0);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1039.937F);
      floatArray0[1] = (-2457.9292F);
      floatArray0[2] = (-838.0F);
      floatArray0[3] = (float) (byte)numberUtils0.BYTE_ONE;
      floatArray0[4] = (float) (long)numberUtils0.LONG_ONE;
      floatArray0[5] = (float) (byte)numberUtils0.BYTE_ONE;
      floatArray0[6] = (float) (long)numberUtils0.LONG_MINUS_ONE;
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.toByte("0X11d11");
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = NumberUtils.min((-300), (-300), (-300));
      assertEquals((-300), int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short)8, (short)8, (short) (-1172));
      assertEquals((short)8, short0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-110);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-110), byte0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[2] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[3] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[4] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[5] = (short) numberUtils0.SHORT_ONE;
      shortArray0[6] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[7] = (short) numberUtils0.SHORT_ZERO;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1), short0);
      
      short short1 = NumberUtils.min((short) numberUtils0.BYTE_MINUS_ONE, (short) numberUtils0.BYTE_MINUS_ONE, (short) (-148));
      assertEquals((short) (-148), short1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      NumberUtils.min(177L, 177L, (-2083L));
      try { 
        NumberUtils.createNumber("F~lU5.MKIB[-55");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1.0, double0, 0.01);
      
      short short0 = NumberUtils.max((short)101, (short)32, (short)1416);
      assertEquals((short)1416, short0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-110);
      long long0 = NumberUtils.min((-1L), (long) (short)1416, (long) (byte) (-110));
      assertEquals((-110L), long0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int[] intArray0 = new int[10];
      intArray0[0] = (-867);
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0X-0[.Me>");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Sign character in wrong position
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0x-@[e>");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Sign character in wrong position
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0Xminimum(byte,byte,byte) 1 failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"minimum(byte,byte,byte) 1 failed\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[2] = (short) (-32);
      shortArray0[3] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[4] = (short) numberUtils0.SHORT_MINUS_ONE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[3] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[4] = (byte) numberUtils0.BYTE_ONE;
      NumberUtils.min(byteArray0);
      shortArray0[5] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[6] = (short) (byte)numberUtils0.BYTE_ZERO;
      NumberUtils.max(shortArray0);
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 1L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (short)numberUtils0.SHORT_ZERO;
      longArray0[1] = (long) (int)numberUtils0.INTEGER_ONE;
      longArray0[2] = (long) (short)numberUtils0.SHORT_ONE;
      longArray0[3] = (long) (short)numberUtils0.SHORT_ONE;
      longArray0[4] = 0L;
      longArray0[5] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      longArray0[6] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1L), long0);
      
      byte byte0 = NumberUtils.max((byte) numberUtils0.BYTE_ZERO, (byte) numberUtils0.BYTE_ZERO, (byte) (-10));
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (-500.521280867);
      double double0 = NumberUtils.min((-500.521280867), (-500.521280867), (-500.521280867));
      assertEquals((-500.521280867), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long[] longArray0 = new long[16];
      longArray0[8] = 8L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(8L, long0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.toShort("R7:3n._%P#xp8Bc5^AI");
      assertEquals((short)0, short0);
      
      byte byte0 = NumberUtils.min((byte)82, (byte) numberUtils0.BYTE_ONE, (byte) numberUtils0.BYTE_ZERO);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      NumberUtils.max((short) (-567), (short) (-567), (short) (-84));
      try { 
        NumberUtils.createNumber("}(e\"U'#GK");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // }(e\"U'#GK is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long long0 = NumberUtils.toLong((String) null);
      assertEquals(0L, long0);
      
      float float0 = NumberUtils.toFloat((String) null, 1.234E7F);
      assertEquals(1.234E7F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      long long0 = NumberUtils.max(0L, 26L, 1501L);
      assertEquals(1501L, long0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 1501L;
      long long1 = NumberUtils.min(longArray0);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long[] longArray0 = new long[3];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long long0 = NumberUtils.max(0L, 26L, 1501L);
      assertEquals(1501L, long0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[2] = 1501L;
      long long1 = NumberUtils.min(longArray0);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[3] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[4] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[5] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[6] = (byte) numberUtils0.BYTE_ONE;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)1, byte0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)0;
      doubleArray0[1] = (double) (byte) (-1);
      doubleArray0[2] = 1.2;
      doubleArray0[3] = (double) (byte) (-1);
      doubleArray0[4] = (double) (short)numberUtils0.SHORT_ONE;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1.2, double0, 0.01);
      
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (byte)1;
      shortArray0[1] = (short) (byte) (-1);
      shortArray0[2] = (short) (byte) (-34);
      shortArray0[3] = (short) (byte) (-1);
      shortArray0[4] = (short) (byte) (-1);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-34), short0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      short[] shortArray0 = new short[16];
      shortArray0[1] = (short) (-3333);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-3333), short0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0X1RhK/80L-n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_144()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (int)numberUtils0.INTEGER_ONE;
      doubleArray0[1] = (double) (float)numberUtils0.FLOAT_ZERO;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) numberUtils0.BYTE_ZERO;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
      
      doubleArray0[2] = 1.2;
      doubleArray0[3] = (double) (short)numberUtils0.SHORT_ZERO;
      doubleArray0[4] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      doubleArray0[5] = (double) (short)numberUtils0.SHORT_ZERO;
      doubleArray0[6] = (double) (int)numberUtils0.INTEGER_ZERO;
      doubleArray0[7] = (double) (long)numberUtils0.LONG_ZERO;
      doubleArray0[8] = (double) (float)numberUtils0.FLOAT_ONE;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1.2, double0, 0.01);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_ZERO;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
      
      short short1 = NumberUtils.min((short)0, (short)0, (short)32649);
      assertTrue(short1 == short0);
      assertEquals((short)0, short1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)43;
      NumberUtils.min((short)43, (short)43, (short)43);
      NumberUtils.isDigits("zt#;C_7iIR");
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) numberUtils0.SHORT_MINUS_ONE;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1), short0);
      
      short short1 = NumberUtils.min((short) numberUtils0.SHORT_ONE, (short) (-148), (short) (-1));
      assertEquals((short) (-148), short1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.min(12344L, (long) numberUtils0.LONG_MINUS_ONE, 90L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.toShort("0x1111 ");
      assertEquals((short)0, short0);
      
      byte byte0 = NumberUtils.min((byte) (-42), (byte) numberUtils0.BYTE_MINUS_ONE, (byte) numberUtils0.BYTE_ONE);
      assertEquals((byte) (-42), byte0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) (short)0;
      longArray0[1] = (long) (int)numberUtils0.INTEGER_ONE;
      longArray0[2] = (long) (int)numberUtils0.INTEGER_ONE;
      longArray0[3] = (long) numberUtils0.LONG_ONE;
      longArray0[4] = (long) (byte) (-42);
      longArray0[5] = (long) numberUtils0.LONG_ZERO;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      long[] longArray0 = new long[3];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-5.5F);
      floatArray0[1] = (-2960.5264F);
      float float0 = NumberUtils.max((-2960.5264F), (-5.5F), (-5.5F));
      float float1 = NumberUtils.max(floatArray0);
      assertEquals(float1, float0, 0.01F);
      assertEquals((-5.5F), float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double double0 = NumberUtils.toDouble("");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_153()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[2] = (short) (-32);
      shortArray0[3] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[4] = (short) numberUtils0.SHORT_MINUS_ONE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[3] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[4] = (byte) numberUtils0.BYTE_ONE;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-1), byte0);
      
      shortArray0[5] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[6] = (short) (byte)numberUtils0.BYTE_ZERO;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1, short0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (byte)numberUtils0.BYTE_ZERO;
      NumberUtils.min(longArray0);
      byte byte1 = NumberUtils.max((byte)8, (byte) (-7), (byte)1);
      assertEquals((byte)8, byte1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-86);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-86), byte0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.min((byte) numberUtils0.BYTE_MINUS_ONE, (byte)69, (byte) numberUtils0.BYTE_ZERO);
      byte byte1 = NumberUtils.max((byte) (-25), (byte) (-1), (byte) (-25));
      assertTrue(byte1 == byte0);
      assertEquals((byte) (-1), byte1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.max((byte) (-9), (byte) (-67), (byte) (-76));
      boolean boolean0 = NumberUtils.isNumber("-0XGZP#");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      NumberUtils.createBigDecimal((String) null);
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("java.vm.name");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_162()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float float0 = NumberUtils.toFloat("-- 1111");
      assertEquals(0.0F, float0, 0.01F);
      
      byte byte0 = NumberUtils.min((byte) numberUtils0.BYTE_ONE, (byte)85, (byte) numberUtils0.BYTE_ZERO);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      long long0 = NumberUtils.min(567L, 567L, 567L);
      assertEquals(567L, long0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = 1111.8903F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1111.8903F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (long)numberUtils0.LONG_ZERO;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = NumberUtils.toDouble((String) null, (double) numberUtils0.SHORT_MINUS_ONE);
      assertEquals((-1.0), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createInteger("0xFG");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"FG\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      long long0 = NumberUtils.toLong(" 11");
      assertEquals(0L, long0);
      
      float float0 = NumberUtils.toFloat(" 11", (float) 0L);
      assertEquals(11.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.max((-1005L), (long) numberUtils0.LONG_ONE, (long) numberUtils0.BYTE_MINUS_ONE);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-3), (short) (-3), (short) (-3));
      assertEquals((short) (-3), short0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_171()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short)100, (short)256, (short)256);
      assertEquals((short)256, short0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      try { 
        NumberUtils.createNumber("isNumber(String) 9 Neg failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // isNumber(String) 9 Neg failed is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1l");
      assertEquals(1L, number0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("0x/,V;&");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      try { 
        NumberUtils.createNumber("2y_");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 2y_ is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      try { 
        NumberUtils.createNumber("{%(acl^*cq$|Uw'uv53");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[1] = (short)1472;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1472, short0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      double double0 = NumberUtils.max((-1.0), (-1.0), (-1.0));
      double double1 = NumberUtils.min(doubleArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals((-1.0), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-99);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.toShort("0x1111 ");
      assertEquals((short)0, short0);
      
      byte byte0 = NumberUtils.min((byte) numberUtils0.BYTE_ONE, (byte) numberUtils0.BYTE_ONE, (byte) numberUtils0.BYTE_ONE);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_188()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.min((byte) (-5), (byte) (-5), (byte) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((byte) (-5), byte0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("--");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3549.711334039);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits(")aL-5CoW?#%o.c");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("pY {<G~=F->jy,B");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_200()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (int)numberUtils0.INTEGER_ONE;
      doubleArray0[1] = (double) (int)numberUtils0.INTEGER_MINUS_ONE;
      doubleArray0[2] = 106.1600660411;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) numberUtils0.FLOAT_ZERO;
      floatArray0[1] = (float) numberUtils0.FLOAT_MINUS_ONE;
      floatArray0[2] = (float) numberUtils0.FLOAT_ONE;
      floatArray0[3] = (float) (byte)numberUtils0.BYTE_MINUS_ONE;
      floatArray0[4] = (float) (long)numberUtils0.LONG_MINUS_ONE;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1.0F), float0, 0.01F);
      
      doubleArray0[3] = (double) (long)numberUtils0.LONG_ONE;
      doubleArray0[4] = (double) (int)numberUtils0.INTEGER_ONE;
      doubleArray0[5] = (double) (long)numberUtils0.LONG_MINUS_ONE;
      doubleArray0[6] = (double) numberUtils0.DOUBLE_ZERO;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      float[] floatArray0 = new float[7];
      floatArray0[0] = 1245.1119F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)numberUtils0.SHORT_ZERO;
      doubleArray0[1] = (double) (short)numberUtils0.SHORT_MINUS_ONE;
      doubleArray0[2] = (double) (short)numberUtils0.SHORT_MINUS_ONE;
      doubleArray0[3] = 1.1E200;
      doubleArray0[4] = (double) (byte)numberUtils0.BYTE_ZERO;
      doubleArray0[5] = (double) (byte)numberUtils0.BYTE_ONE;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-690.3435556106);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-690.3435556106), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_207()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float float0 = NumberUtils.min(244.042F, (float) numberUtils0.LONG_ONE, (float) numberUtils0.SHORT_ZERO);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      int int0 = NumberUtils.toInt("RdR+F}`|rZZ8G", 1024);
      assertEquals(1024, int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1024;
      floatArray0[1] = (float) 1024;
      floatArray0[2] = (-1062.6256F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1024.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      float[] floatArray0 = new float[10];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      int int0 = NumberUtils.toInt("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }
}
