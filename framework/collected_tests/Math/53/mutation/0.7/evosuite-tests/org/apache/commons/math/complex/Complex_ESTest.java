/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 17 08:46:46 GMT 2023
 */

package org.apache.commons.math.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(3008.796097342, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = Complex.INF;
      complex1.nthRoot(2417);
      Complex complex5 = new Complex(178.27455997786, 2417);
      Complex complex6 = Complex.ONE;
      Complex complex7 = Complex.INF;
      Complex complex8 = complex4.multiply(complex7);
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex9.divide(complex7);
      Complex complex11 = Complex.ZERO;
      Complex complex12 = Complex.NaN;
      complex8.nthRoot(53);
      Complex complex13 = complex2.sqrt();
      complex12.sqrt();
      Complex complex14 = Complex.INF;
      Complex complex15 = Complex.NaN;
      Complex complex16 = complex15.pow(complex6);
      Complex complex17 = Complex.ZERO;
      Complex complex18 = complex17.sinh();
      Complex complex19 = complex12.sinh();
      complex7.multiply(complex10);
      assertSame(complex10, complex13);
      
      Complex complex20 = complex6.sinh();
      assertEquals(0.0, complex20.getImaginary(), 0.01);
      assertEquals(1.1752011936438014, complex20.getReal(), 0.01);
      
      Complex complex21 = complex11.atan();
      assertEquals(0.0, complex21.getReal(), 0.01);
      assertTrue(complex21.equals((Object)complex18));
      
      Complex complex22 = complex6.multiply(178.27455997786);
      assertEquals(0.0, complex22.getImaginary(), 0.01);
      
      Complex complex23 = complex1.multiply((double) 53);
      assertSame(complex23, complex16);
      assertSame(complex23, complex19);
      
      List<Complex> list0 = complex14.nthRoot(2417);
      assertTrue(list0.contains(complex4));
      
      Complex complex24 = complex5.multiply(complex3);
      assertEquals(Double.POSITIVE_INFINITY, complex24.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.getField();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.multiply(Double.POSITIVE_INFINITY);
      assertTrue(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-0.5411961001461971), (-191.489271343655));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = new Complex((-191.489271343655), 0.25);
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = Complex.I;
      Complex complex6 = complex2.log();
      Complex complex7 = complex6.divide(complex4);
      List<Complex> list0 = complex1.nthRoot(1631);
      assertTrue(list0.contains(complex1));
      assertEquals(1631, list0.size());
      
      Complex complex8 = complex7.sqrt();
      assertEquals(0.10125629992712634, complex8.getImaginary(), 0.01);
      
      Complex complex9 = Complex.I;
      Complex complex10 = complex9.conjugate();
      Complex complex11 = Complex.NaN;
      complex10.sqrt();
      assertEquals(0.0, complex10.getReal(), 0.01);
      
      Complex complex12 = Complex.INF;
      Complex complex13 = Complex.INF;
      Complex complex14 = complex13.atan();
      assertEquals(Double.NaN, complex14.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex1.isNaN());
      
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.multiply(1048.1);
      Complex complex4 = complex1.conjugate();
      Complex complex5 = new Complex((-2463.366), (-2463.366));
      Complex complex6 = Complex.INF;
      complex6.multiply(complex4);
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY, 1048.1);
      Complex complex8 = new Complex(1048.1, Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.acos();
      Complex complex10 = complex9.acos();
      Complex complex11 = new Complex(1048.1, 9.008850121369303);
      Complex complex12 = complex3.sqrt();
      complex3.add(complex2);
      complex10.add(complex6);
      try { 
        complex12.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = (-177.37622);
      Complex complex1 = new Complex((-177.37622), 814.1065234808902);
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = Complex.I;
      Complex complex6 = Complex.I;
      Complex complex7 = complex4.subtract(complex6);
      complex3.log();
      complex5.divide(complex7);
      Complex complex8 = Complex.I;
      try { 
        complex8.nthRoot((-475));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -475
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex1.atan();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex4.multiply(complex0);
      complex0.multiply(Double.NaN);
      double double0 = complex5.abs();
      assertEquals((-5.551115123125783E-17), complex5.getImaginary(), 0.01);
      assertEquals(0.6995216443485196, double0, 0.01);
      
      complex0.nthRoot(299);
      List<Complex> list0 = complex6.nthRoot(299);
      assertTrue(list0.contains(complex7));
      
      List<Complex> list1 = complex0.nthRoot(299);
      assertTrue(complex0.equals((Object)complex3));
      assertEquals(299, list1.size());
      assertTrue(list1.contains(complex0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.equals(complex0);
      assertTrue(boolean0);
      
      double double0 = complex0.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.negate();
      complex1.ONE.cos();
      try { 
        complex0.nthRoot((-28242266));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -28,242,266
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.INF.conjugate();
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.multiply(complex3);
      assertTrue(complex4.isInfinite());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.ZERO.divide(complex2);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex0.acos();
      assertEquals(1.5707963267948966, complex4.getReal(), 0.01);
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cos();
      assertTrue(complex1.isNaN());
      
      List<Complex> list0 = complex0.nthRoot(33);
      assertTrue(list0.contains(complex0));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(33, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.acos();
      complex1.NaN.conjugate();
      try { 
        complex1.nthRoot((-1286));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,286
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.NaN.divide(complex0);
      assertEquals(0.5403023058681398, complex1.getReal(), 0.01);
      assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      
      complex0.abs();
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2325.99361686264, 2325.99361686264);
      Complex complex2 = complex1.multiply(complex0);
      complex2.ZERO.multiply(complex1);
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex0.multiply(complex4);
      assertTrue(complex5.isInfinite());
      
      Complex complex6 = complex0.divide(complex3);
      assertEquals(2325.99361686264, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex0));
      assertSame(complex6, complex3);
      assertNotSame(complex3, complex0);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.multiply(complex2);
      assertSame(complex3, complex1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      boolean boolean0 = complex0.equals(complex0);
      assertTrue(boolean0);
      assertSame(complex0, complex1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      List<Complex> list0 = complex0.nthRoot(1);
      assertTrue(list0.contains(complex0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.acos();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      
      complex0.equals((Object) null);
      double double0 = complex0.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.atan();
      assertTrue(complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.I.add(complex0);
      assertFalse(complex3.isInfinite());
      assertEquals(2.0, complex3.getImaginary(), 0.01);
      assertSame(complex1, complex2);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      complex1.multiply(complex2);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertNotSame(complex0, complex2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.INF.sqrt();
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      
      List<Complex> list0 = complex0.nthRoot(33);
      assertTrue(list0.contains(complex1));
      assertEquals(1, list0.size());
      assertSame(complex0, complex1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = new Object();
      double double0 = complex0.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      Complex complex1 = complex0.multiply((-1563.1021725565208));
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.sqrt();
      Complex complex1 = complex0.I.sqrt();
      assertEquals(0.7071067811865476, complex1.getReal(), 0.01);
      assertEquals(0.7071067811865475, complex1.getImaginary(), 0.01);
      
      List<Complex> list0 = complex0.nthRoot(29);
      assertEquals(29, list0.size());
      assertTrue(list0.contains(complex0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sin();
      assertTrue(complex1.isNaN());
      
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.equals(complex1);
      assertFalse(complex1.isInfinite());
      
      double double0 = complex0.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      Complex complex2 = complex0.sqrt();
      assertTrue(complex2.equals((Object)complex1));
      assertSame(complex2, complex0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(1.7);
      double double0 = complex1.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(1107.71, (-2.356194490192345));
      Complex complex1 = new Complex((-2.356194490192345), Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, 1.2246467991473532E-16);
      String string0 = complex2.toString();
      assertEquals("(Infinity, 1.2246467991473532E-16)", string0);
      
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.add(complex0);
      assertEquals((-1.3561944901923448), complex4.getImaginary(), 0.01);
      assertEquals(1107.71, complex4.getReal(), 0.01);
      
      Complex complex5 = complex2.add(complex3);
      Complex complex6 = complex0.subtract(complex2);
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY, (-2.356194490192345));
      Complex complex8 = complex5.subtract(complex7);
      assertTrue(complex8.isNaN());
      assertEquals(3.356194490192345, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex7.equals((Object)complex6));
      
      Complex complex9 = new Complex(2.0, 0.008333333333329196);
      Object object0 = complex2.readResolve();
      boolean boolean0 = complex1.equals(complex6);
      assertTrue(complex1.isInfinite());
      assertTrue(complex2.equals((Object)object0));
      assertTrue(complex6.isInfinite());
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-0.5411961001461971));
      Complex complex1 = new Complex((-1.414213562373095), (-462.9656925574));
      Complex complex2 = new Complex((-0.7653668647301795), (-2.30551));
      Complex complex3 = complex1.sqrt();
      assertEquals((-15.237815888472982), complex3.getImaginary(), 0.01);
      assertEquals(15.191340279535131, complex3.getReal(), 0.01);
      
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.I;
      Complex complex6 = complex4.add(complex5);
      Complex complex7 = complex2.atan();
      Complex complex8 = complex4.subtract(complex7);
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex9.subtract(complex8);
      assertEquals((-0.4194356513235782), complex10.getReal(), 0.01);
      assertEquals(0.4036979189090575, complex8.getImaginary(), 0.01);
      
      complex5.hashCode();
      assertTrue(complex5.equals((Object)complex6));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.tan();
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      
      List<Complex> list0 = complex0.nthRoot(17);
      assertEquals(17, list0.size());
      assertFalse(list0.contains(complex1));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-0.5411961001461971), (-191.489271343655));
      Complex complex1 = new Complex((-3400.648), 636.8);
      Complex complex2 = new Complex((-1.2246467991473532E-16), 84.9327176824);
      complex2.ONE.acos();
      Complex complex3 = new Complex(1.414213562373095, (-1.3065629648763764));
      complex2.add(complex1);
      complex0.add(complex3);
      Complex complex4 = complex1.subtract(complex3);
      // Undeclared exception!
      complex4.nthRoot(709994804);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.atan();
      try { 
        complex0.nthRoot((-1687));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,687
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-1.2246467991473532E-16), (-0.5411961001461971));
      Complex complex1 = new Complex((-1.414213562373095), (-1.3065629648763764));
      Complex complex2 = new Complex((-2769.39), (-0.5411961001461971));
      Complex complex3 = new Complex((-1.3065629648763764), 1.2246467991473532E-16);
      String string0 = complex3.ONE.toString();
      assertEquals("(1.0, 0.0)", string0);
      
      Complex complex4 = complex2.add(complex3);
      Complex complex5 = complex2.add(complex0);
      Complex complex6 = (Complex)complex2.INF.readResolve();
      assertTrue(complex6.isInfinite());
      
      Complex complex7 = complex4.subtract(complex2);
      Complex complex8 = complex7.subtract(complex2);
      assertEquals(2768.0834370351236, complex8.getReal(), 0.01);
      assertEquals(0.5411961001461972, complex8.getImaginary(), 0.01);
      
      Complex complex9 = new Complex(1.125, (-0.5411961001461971));
      Complex complex10 = (Complex)complex0.readResolve();
      boolean boolean0 = complex2.equals(complex5);
      assertFalse(boolean0);
      assertFalse(complex5.isInfinite());
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = (Complex)complex0.readResolve();
      boolean boolean0 = complex0.equals(complex1);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(boolean0);
      
      complex0.abs();
      Complex complex2 = complex0.sqrt();
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      double double0 = complex0.abs();
      assertTrue(complex0.equals((Object)complex2));
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.tanh();
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(1.557407724654902, complex2.getImaginary(), 0.01);
      
      Complex complex3 = Complex.NaN;
      assertFalse(complex3.equals((Object)complex2));
      
      boolean boolean0 = complex1.equals(complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(boolean0);
      
      double double0 = complex1.abs();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-1.2246467991473532E-16), (-0.5411961001461971));
      Complex complex1 = new Complex((-1.2246467991473532E-16), 1460.360476921667);
      Complex complex2 = new Complex(950.3, (-0.5411961001461971));
      Complex complex3 = new Complex(1.414213562373095, Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.add(complex3);
      assertEquals(Double.POSITIVE_INFINITY, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex3.add(complex2);
      Complex complex6 = complex3.subtract(complex2);
      Complex complex7 = Complex.ONE;
      complex6.getField();
      assertEquals((-948.8857864376268), complex6.getReal(), 0.01);
      assertTrue(complex6.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex6.getImaginary(), 0.01);
      
      Complex complex8 = complex5.multiply((-1894.9));
      Complex complex9 = complex8.cosh();
      assertEquals(951.7142135623731, complex5.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex8.getReal(), 0.01);
      assertTrue(complex9.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex5.getImaginary(), 0.01);
      
      double double0 = complex1.abs();
      assertEquals((-1.2246467991473532E-16), complex1.getReal(), 0.01);
      assertEquals(1460.360476921667, double0, 0.01);
      assertEquals(1460.360476921667, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.cosh();
      try { 
        complex0.nthRoot((-2034));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,034
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sin();
      assertFalse(complex1.isInfinite());
      
      Complex complex2 = complex0.acos();
      assertNotSame(complex2, complex1);
      assertTrue(complex2.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.abs();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
      assertTrue(complex0.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.nthRoot((-28242266));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -28,242,266
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sinh();
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      
      complex0.abs();
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex((-4083.07), 191.489271343655);
      Complex complex1 = complex0.acos();
      complex0.atan();
      complex1.NaN.subtract(complex0);
      int int0 = 0;
      complex1.conjugate();
      Complex complex2 = Complex.INF;
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.abs();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.exp();
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      
      List<Complex> list0 = complex0.nthRoot(1839);
      assertEquals(1839, list0.size());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(list0.contains(complex1));
      assertEquals(1.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.asin();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.tanh();
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.getField();
      Complex complex1 = complex0.acos();
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(6.283185307179586);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double double0 = (-1.3065629648763764);
      Complex complex0 = new Complex((-1.3065629648763764), 700.1866371808759);
      Complex complex1 = new Complex(0.05811951252333003, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.NaN;
      complex2.acos();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.atan();
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      complex0.ZERO.pow(complex1);
      List<Complex> list0 = complex0.nthRoot(256);
      assertEquals(256, list0.size());
      assertTrue(list0.contains(complex0));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      List<Complex> list0 = complex0.nthRoot(256);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(complex0));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.hashCode();
      List<Complex> list0 = complex0.nthRoot(44);
      assertEquals(44, list0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      List<Complex> list0 = complex0.nthRoot(188);
      assertTrue(list0.contains(complex0));
      assertEquals(188, list0.size());
      assertEquals(0.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.getField();
      Complex complex1 = complex0.exp();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.ONE.acos();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.NaN.asin();
      assertNotSame(complex2, complex1);
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex1.isInfinite());
      
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.sqrt1z();
      try { 
        complex0.nthRoot((-2774));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,774
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.hashCode();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.acos();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0232274785475506, complex2.getImaginary(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.sqrt();
      assertFalse(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      
      Complex complex2 = complex0.ONE.acos();
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex((-1.2246467991473532E-16), (-0.5411961001461971));
      Complex complex1 = new Complex((-1.414213562373095), (-1.3065629648763764));
      Complex complex2 = new Complex((-2769.39), (-0.5411961001461971));
      Complex complex3 = new Complex((-1.3065629648763764), 1.2246467991473532E-16);
      String string0 = complex3.ONE.toString();
      assertEquals("(1.0, 0.0)", string0);
      
      Complex complex4 = complex2.add(complex3);
      complex2.add(complex0);
      assertFalse(complex0.equals((Object)complex2));
      
      Complex complex5 = (Complex)complex2.INF.readResolve();
      assertTrue(complex5.isInfinite());
      
      Complex complex6 = complex4.subtract(complex2);
      Complex complex7 = complex6.subtract(complex2);
      assertFalse(complex2.equals((Object)complex0));
      assertEquals(2768.0834370351236, complex7.getReal(), 0.01);
      assertEquals(0.5411961001461972, complex7.getImaginary(), 0.01);
      
      Complex complex8 = new Complex(1.125, 0.0);
      Complex complex9 = (Complex)complex8.readResolve();
      boolean boolean0 = complex1.equals(complex9);
      assertTrue(complex9.equals((Object)complex8));
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.I.readResolve();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      
      complex0.abs();
      double double0 = complex0.abs();
      assertTrue(complex0.equals((Object)complex1));
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.acos();
      boolean boolean0 = complex1.equals(complex0);
      assertFalse(boolean0);
      
      double double0 = complex1.abs();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.toString();
      try { 
        complex0.nthRoot((-4193));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,193
         //
         verifyException("org.apache.commons.math.MathRuntimeException", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      assertEquals((-0.8813735870195429), complex1.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.tanh();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.557407724654902, complex1.getImaginary(), 0.01);
      
      List<Complex> list0 = complex0.nthRoot(12);
      assertEquals(12, list0.size());
      assertTrue(list0.contains(complex0));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.acos();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex((-4083.07), (-4083.07));
      Complex complex1 = complex0.I.cos();
      assertEquals(1.5430806348152437, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.acos();
      assertEquals(2.3561944827652836, complex2.getReal(), 0.01);
      assertEquals(9.35432520593233, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.isNaN();
      double double0 = complex0.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      Complex complex1 = complex0.multiply((-0.9682832256721062));
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
  }
}
