/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 05:49:36 GMT 2023
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class X7875_NewUnix_ESTest extends X7875_NewUnix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      long long0 = x7875_NewUnix0.getGID();
      assertEquals(1000L, long0);
      
      x7875_NewUnix0.setGID(513L);
      x7875_NewUnix0.hashCode();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      x7875_NewUnix0.getGID();
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)5;
      x7875_NewUnix0.setGID((-2960L));
      byteArray0[3] = (byte)2;
      byteArray0[5] = (byte) (-70);
      X7875_NewUnix x7875_NewUnix1 = new X7875_NewUnix();
      x7875_NewUnix0.setUID(0L);
      x7875_NewUnix1.getUID();
      x7875_NewUnix1.getGID();
      x7875_NewUnix1.parseFromLocalFileData(byteArray0, (byte)2, 1434);
      boolean boolean0 = x7875_NewUnix0.equals(x7875_NewUnix1);
      assertFalse(boolean0);
      
      byteArray0[6] = (byte)5;
      byte[] byteArray1 = X7875_NewUnix.trimLeadingZeroesForceMinLength(byteArray0);
      byte[] byteArray2 = X7875_NewUnix.trimLeadingZeroesForceMinLength(byteArray1);
      assertArrayEquals(new byte[] {(byte)5, (byte)8, (byte)5, (byte)2, (byte)0, (byte) (-70), (byte)5}, byteArray2);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      x7875_NewUnix0.getGID();
      x7875_NewUnix0.hashCode();
      byte[] byteArray0 = new byte[7];
      x7875_NewUnix0.getGID();
      x7875_NewUnix0.setGID(0L);
      Object object0 = x7875_NewUnix0.clone();
      x7875_NewUnix0.getGID();
      x7875_NewUnix0.getCentralDirectoryLength();
      assertTrue(x7875_NewUnix0.equals((Object)object0));
      
      x7875_NewUnix0.parseFromLocalFileData(byteArray0, 4, 196);
      X7875_NewUnix x7875_NewUnix1 = new X7875_NewUnix();
      X7875_NewUnix x7875_NewUnix2 = new X7875_NewUnix();
      x7875_NewUnix0.equals(object0);
      object0.hashCode();
      byte[] byteArray1 = X7875_NewUnix.trimLeadingZeroesForceMinLength(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = X7875_NewUnix.trimLeadingZeroesForceMinLength((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      String string0 = x7875_NewUnix0.toString();
      assertEquals("0x7875 Zip Extra Field: UID=1000 GID=1000", string0);
      
      x7875_NewUnix0.getLocalFileDataData();
      x7875_NewUnix0.toString();
      x7875_NewUnix0.hashCode();
      X7875_NewUnix x7875_NewUnix1 = (X7875_NewUnix)x7875_NewUnix0.clone();
      x7875_NewUnix1.getGID();
      x7875_NewUnix0.hashCode();
      assertTrue(x7875_NewUnix0.equals((Object)x7875_NewUnix1));
      
      x7875_NewUnix0.setUID(0L);
      x7875_NewUnix0.getCentralDirectoryLength();
      X7875_NewUnix x7875_NewUnix2 = (X7875_NewUnix)x7875_NewUnix0.clone();
      x7875_NewUnix0.equals(x7875_NewUnix2);
      x7875_NewUnix2.toString();
      x7875_NewUnix0.toString();
      byte[] byteArray0 = x7875_NewUnix0.getLocalFileDataData();
      x7875_NewUnix0.toString();
      x7875_NewUnix0.getUID();
      x7875_NewUnix0.getGID();
      x7875_NewUnix0.getUID();
      X7875_NewUnix x7875_NewUnix3 = new X7875_NewUnix();
      x7875_NewUnix3.getGID();
      X7875_NewUnix.trimLeadingZeroesForceMinLength(byteArray0);
      x7875_NewUnix2.hashCode();
      x7875_NewUnix1.hashCode();
      x7875_NewUnix1.setUID(1467L);
      X7875_NewUnix x7875_NewUnix4 = new X7875_NewUnix();
      x7875_NewUnix4.getCentralDirectoryLength();
      x7875_NewUnix2.parseFromLocalFileData(byteArray0, 1, 1);
      x7875_NewUnix3.hashCode();
      assertTrue(x7875_NewUnix3.equals((Object)x7875_NewUnix4));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      byte[] byteArray0 = new byte[6];
      x7875_NewUnix0.getLocalFileDataData();
      x7875_NewUnix0.parseFromLocalFileData(byteArray0, 2, (-668));
      byteArray0[0] = (byte) (-21);
      x7875_NewUnix0.getUID();
      x7875_NewUnix0.hashCode();
      X7875_NewUnix x7875_NewUnix1 = new X7875_NewUnix();
      x7875_NewUnix0.equals(x7875_NewUnix1);
      x7875_NewUnix0.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = x7875_NewUnix0.getLocalFileDataData();
      assertArrayEquals(new byte[] {(byte)1, (byte)2, (byte) (-24), (byte)3, (byte)2, (byte) (-24), (byte)3}, byteArray1);
      
      ZipShort zipShort0 = x7875_NewUnix0.getCentralDirectoryLength();
      assertEquals(7, zipShort0.getValue());
      
      x7875_NewUnix0.parseFromLocalFileData(byteArray0, 2, (-668));
      byteArray0[0] = (byte) (-21);
      x7875_NewUnix0.clone();
      byteArray0[1] = (byte)14;
      x7875_NewUnix0.setUID((byte) (-21));
      Object object0 = new Object();
      X7875_NewUnix x7875_NewUnix1 = new X7875_NewUnix();
      Object object1 = x7875_NewUnix0.clone();
      x7875_NewUnix1.equals(object1);
      x7875_NewUnix1.setGID(28L);
      byte[] byteArray2 = x7875_NewUnix0.getLocalFileDataData();
      assertTrue(x7875_NewUnix0.equals((Object)object1));
      assertArrayEquals(new byte[] {(byte)0, (byte)4, (byte) (-21), (byte) (-1), (byte) (-1), (byte) (-1), (byte)1, (byte)0}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      X7875_NewUnix x7875_NewUnix1 = new X7875_NewUnix();
      assertTrue(x7875_NewUnix1.equals((Object)x7875_NewUnix0));
      
      x7875_NewUnix1.setGID((-1249L));
      boolean boolean0 = x7875_NewUnix0.equals(x7875_NewUnix1);
      assertFalse(boolean0);
      
      x7875_NewUnix0.getLocalFileDataData();
      x7875_NewUnix0.toString();
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = X7875_NewUnix.trimLeadingZeroesForceMinLength(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      ZipShort zipShort0 = x7875_NewUnix0.getHeaderId();
      assertEquals(30837, zipShort0.getValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      x7875_NewUnix0.hashCode();
      Object object0 = x7875_NewUnix0.clone();
      x7875_NewUnix0.getCentralDirectoryLength();
      Object object1 = new Object();
      x7875_NewUnix0.equals(object1);
      x7875_NewUnix0.getCentralDirectoryLength();
      assertTrue(x7875_NewUnix0.equals((Object)object0));
      
      x7875_NewUnix0.setGID(93L);
      x7875_NewUnix0.getLocalFileDataData();
      x7875_NewUnix0.hashCode();
      x7875_NewUnix0.getLocalFileDataData();
      boolean boolean0 = x7875_NewUnix0.equals(object0);
      assertFalse(boolean0);
      
      x7875_NewUnix0.getUID();
      assertFalse(x7875_NewUnix0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      ZipShort zipShort0 = x7875_NewUnix0.getCentralDirectoryLength();
      assertEquals(7, zipShort0.getValue());
      
      x7875_NewUnix0.setUID(0L);
      x7875_NewUnix0.getGID();
      x7875_NewUnix0.getGID();
      Object object0 = x7875_NewUnix0.clone();
      x7875_NewUnix0.getUID();
      x7875_NewUnix0.getLocalFileDataLength();
      X7875_NewUnix x7875_NewUnix1 = new X7875_NewUnix();
      x7875_NewUnix1.toString();
      x7875_NewUnix0.equals(x7875_NewUnix1);
      x7875_NewUnix0.getUID();
      Object object1 = x7875_NewUnix0.clone();
      x7875_NewUnix1.clone();
      x7875_NewUnix0.toString();
      x7875_NewUnix0.clone();
      x7875_NewUnix0.getCentralDirectoryLength();
      x7875_NewUnix0.toString();
      x7875_NewUnix0.getLocalFileDataLength();
      x7875_NewUnix0.clone();
      x7875_NewUnix0.getCentralDirectoryData();
      x7875_NewUnix0.getLocalFileDataData();
      x7875_NewUnix0.getUID();
      x7875_NewUnix0.getGID();
      x7875_NewUnix0.getLocalFileDataLength();
      x7875_NewUnix0.getCentralDirectoryLength();
      x7875_NewUnix1.getLocalFileDataData();
      x7875_NewUnix0.setUID((-3556L));
      x7875_NewUnix1.getGID();
      x7875_NewUnix1.setUID(0L);
      x7875_NewUnix0.getCentralDirectoryLength();
      x7875_NewUnix0.setGID((-289L));
      x7875_NewUnix1.getLocalFileDataData();
      assertTrue(x7875_NewUnix1.equals((Object)object1));
      
      x7875_NewUnix0.hashCode();
      assertFalse(x7875_NewUnix0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      byte[] byteArray0 = x7875_NewUnix0.getCentralDirectoryData();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[26];
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      X7875_NewUnix x7875_NewUnix1 = new X7875_NewUnix();
      assertTrue(x7875_NewUnix1.equals((Object)x7875_NewUnix0));
      
      x7875_NewUnix1.setUID((-46L));
      boolean boolean0 = x7875_NewUnix0.equals(x7875_NewUnix1);
      assertFalse(boolean0);
      
      x7875_NewUnix0.hashCode();
      assertFalse(x7875_NewUnix0.equals((Object)x7875_NewUnix1));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      boolean boolean0 = x7875_NewUnix0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      Object object0 = x7875_NewUnix0.clone();
      x7875_NewUnix0.hashCode();
      x7875_NewUnix0.parseFromCentralDirectoryData((byte[]) null, 1, 1);
      ZipShort zipShort0 = x7875_NewUnix0.getLocalFileDataLength();
      assertTrue(x7875_NewUnix0.equals((Object)object0));
      
      x7875_NewUnix0.setUID(0L);
      x7875_NewUnix0.equals(zipShort0);
      x7875_NewUnix0.toString();
      x7875_NewUnix0.equals(zipShort0);
      String string0 = x7875_NewUnix0.toString();
      assertEquals("0x7875 Zip Extra Field: UID=0 GID=1000", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      Object object0 = x7875_NewUnix0.clone();
      boolean boolean0 = x7875_NewUnix0.equals(object0);
      assertTrue(boolean0);
      
      x7875_NewUnix0.clone();
      assertTrue(x7875_NewUnix0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = X7875_NewUnix.trimLeadingZeroesForceMinLength(byteArray0);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = X7875_NewUnix.trimLeadingZeroesForceMinLength(byteArray0);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      byte[] byteArray0 = x7875_NewUnix0.getLocalFileDataData();
      assertArrayEquals(new byte[] {(byte)1, (byte)2, (byte) (-24), (byte)3, (byte)2, (byte) (-24), (byte)3}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      x7875_NewUnix0.getUID();
      byte[] byteArray0 = x7875_NewUnix0.getLocalFileDataData();
      assertArrayEquals(new byte[] {(byte)1, (byte)2, (byte) (-24), (byte)3, (byte)2, (byte) (-24), (byte)3}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      x7875_NewUnix0.toString();
      x7875_NewUnix0.getLocalFileDataData();
      x7875_NewUnix0.toString();
      x7875_NewUnix0.hashCode();
      x7875_NewUnix0.clone();
      x7875_NewUnix0.hashCode();
      x7875_NewUnix0.setUID(0L);
      x7875_NewUnix0.getCentralDirectoryLength();
      Object object0 = x7875_NewUnix0.clone();
      x7875_NewUnix0.equals(object0);
      x7875_NewUnix0.toString();
      x7875_NewUnix0.clone();
      x7875_NewUnix0.toString();
      byte[] byteArray0 = x7875_NewUnix0.getLocalFileDataData();
      x7875_NewUnix0.toString();
      x7875_NewUnix0.getUID();
      x7875_NewUnix0.getGID();
      x7875_NewUnix0.getUID();
      x7875_NewUnix0.setGID((-2337L));
      x7875_NewUnix0.getCentralDirectoryLength();
      x7875_NewUnix0.getLocalFileDataLength();
      // Undeclared exception!
      try { 
        x7875_NewUnix0.parseFromLocalFileData(byteArray0, 5, (-5));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.compress.archivers.zip.X7875_NewUnix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      x7875_NewUnix0.setUID((-1L));
      ZipShort zipShort0 = x7875_NewUnix0.getCentralDirectoryLength();
      assertEquals(9, zipShort0.getValue());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      x7875_NewUnix0.hashCode();
      Object object0 = x7875_NewUnix0.clone();
      x7875_NewUnix0.equals(object0);
      x7875_NewUnix0.setGID(0L);
      byte[] byteArray0 = null;
      x7875_NewUnix0.getGID();
      int int0 = 28789;
      x7875_NewUnix0.toString();
      // Undeclared exception!
      try { 
        x7875_NewUnix0.parseFromLocalFileData((byte[]) null, 28789, (-1210));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.X7875_NewUnix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      // Undeclared exception!
      try { 
        x7875_NewUnix0.parseFromLocalFileData(byteArray0, 2090, 2090);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2090
         //
         verifyException("org.apache.commons.compress.archivers.zip.X7875_NewUnix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      x7875_NewUnix0.setGID(0L);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      boolean boolean0 = x7875_NewUnix0.equals(x7875_NewUnix0);
      assertTrue(boolean0);
  }
}
