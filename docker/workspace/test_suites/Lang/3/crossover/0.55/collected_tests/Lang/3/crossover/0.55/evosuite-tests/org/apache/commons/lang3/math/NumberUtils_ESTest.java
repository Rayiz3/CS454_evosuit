/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 20:26:45 GMT 2023
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      long[] longArray0 = new long[2];
      NumberUtils.isNumber("-");
      NumberUtils.createNumber("302236e38");
      float[] floatArray0 = new float[6];
      short[] shortArray0 = new short[5];
      double[] doubleArray0 = new double[2];
      NumberUtils.min(doubleArray0);
      NumberUtils.max(shortArray0);
      NumberUtils.min(shortArray0);
      NumberUtils.max(floatArray0);
      NumberUtils.isNumber("302236e38");
      NumberUtils.max(longArray0);
      NumberUtils.isNumber("-");
      NumberUtils.isNumber("1.1L");
      NumberUtils.createNumber("0.1E-70F");
      byte[] byteArray0 = new byte[2];
      NumberUtils.max(byteArray0);
      NumberUtils.createNumber("302236e38");
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long[] longArray0 = new long[10];
      NumberUtils.isNumber("-");
      NumberUtils.createNumber("302236e38");
      float[] floatArray0 = new float[6];
      short[] shortArray0 = new short[12];
      double[] doubleArray0 = new double[2];
      NumberUtils.min(doubleArray0);
      NumberUtils.max(shortArray0);
      NumberUtils.min(shortArray0);
      NumberUtils.max(floatArray0);
      NumberUtils.isNumber("302236e38");
      NumberUtils.isNumber("0X$");
      NumberUtils.isNumber("'");
      NumberUtils.createNumber(".1E70F");
      byte[] byteArray0 = new byte[2];
      NumberUtils.max(byteArray0);
      NumberUtils.min(byteArray0);
      NumberUtils.isDigits(".1E70F");
      NumberUtils.max((byte)0, (byte)0, (byte)0);
      NumberUtils.min(floatArray0);
      NumberUtils.max(doubleArray0);
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("0X$");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"X$\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1eE+00001");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234E5l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1234.5d");
      assertEquals(1234.5, number0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0Ex");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0Ex is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x7fffffffffffffff0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0Ex");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-700F");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      try { 
        NumberUtils.createNumber("x[eE8K6");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"x[eE8K6\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0e");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0e is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0}#^3L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
      
      NumberUtils.isNumber("0.");
      try { 
        NumberUtils.createNumber("0E~q0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      NumberUtils.isNumber("0x9ci");
      boolean boolean0 = NumberUtils.isNumber("0x9ci");
      assertFalse(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 46;
      int int0 = NumberUtils.min(intArray0);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)2;
      shortArray0[2] = (short) (-4984);
      shortArray0[3] = (short)6;
      shortArray0[4] = (short)6;
      shortArray0[5] = (short) (-22165);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-22165), short0);
      
      int int1 = NumberUtils.max(intArray0);
      assertTrue(int1 == int0);
      assertEquals(46, int1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-221.23F");
      assertEquals((-221.23F), number0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      try { 
        NumberUtils.createNumber("022338L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"22338\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234E5");
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 5125.711103648238;
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1l");
      assertEquals((-1L), number0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      NumberUtils.createNumber("0.9");
      int[] intArray0 = new int[7];
      intArray0[0] = (-521);
      intArray0[1] = (-994);
      intArray0[2] = 0;
      intArray0[3] = 741;
      intArray0[4] = 5079;
      intArray0[5] = 2379;
      intArray0[6] = (-954);
      int int0 = NumberUtils.max(intArray0);
      assertEquals(5079, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      try { 
        NumberUtils.createNumber("F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // F is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      try { 
        NumberUtils.createNumber("6|Gq6fZ:=F.'9OCn\"L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 6|Gq6fZ:=F.'9OCn\"L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-0");
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[6];
      NumberUtils.isNumber("kPH['");
      longArray0[0] = (long) (byte)numberUtils0.BYTE_MINUS_ONE;
      longArray0[1] = (long) (int)numberUtils0.INTEGER_ZERO;
      longArray0[2] = (long) numberUtils0.LONG_MINUS_ONE;
      longArray0[3] = (long) (int)numberUtils0.INTEGER_ONE;
      longArray0[5] = (long) (byte)numberUtils0.BYTE_ZERO;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1L, long0);
      
      long[] longArray1 = new long[7];
      longArray0[3] = (long) (int)numberUtils0.INTEGER_ZERO;
      boolean boolean0 = NumberUtils.isNumber("1234.5D");
      longArray1[1] = (long) numberUtils0.LONG_ZERO;
      longArray1[2] = (long) (short)numberUtils0.SHORT_ZERO;
      longArray1[3] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      longArray1[4] = (-2437L);
      longArray1[5] = (long) numberUtils0.LONG_MINUS_ONE;
      longArray1[6] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      Long long1 = new Long((long) numberUtils0.SHORT_ONE);
      NumberUtils.max(longArray1);
      NumberUtils.isNumber("-");
      boolean boolean1 = NumberUtils.isNumber("0xcreateNumber(String) 14 failed");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-123E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      try { 
        NumberUtils.createNumber("}if");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // }if is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+F#U2g74(w\"_VhGk");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Cr&`-,n:(l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Cr&`-,n:(l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      try { 
        NumberUtils.createNumber("The Array must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-123E2.12");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("eQ%");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      try { 
        NumberUtils.createNumber("1e/E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 1e/E is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -0E is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0xcreateNumber(String) g4 failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"cr\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234.5F");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("022338L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xD");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".12.3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".4.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1E-320");
      assertEquals(1.0E-320, number0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E700");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-700");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      try { 
        NumberUtils.createNumber("X3K+km(+g'cL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // X3K+km(+g'cL is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2520.4232;
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234E-5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E5kfMf99fIp(h");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("--");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -- is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      try { 
        NumberUtils.createNumber("D");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // D is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      try { 
        NumberUtils.createNumber("e");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // e is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      float float0 = NumberUtils.toFloat((String) null, 833.5529F);
      assertEquals(833.5529F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.isNumber("?lP9niqZ");
      boolean boolean0 = NumberUtils.isNumber("-0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      NumberUtils.createNumber("0");
      NumberUtils.createFloat((String) null);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-256.1731969226638);
      doubleArray0[1] = 858.3113;
      doubleArray0[2] = 1235.054;
      doubleArray0[3] = 382.89881043695;
      doubleArray0[4] = 2733.13;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-256.1731969226638), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-9);
      intArray0[1] = (-2592);
      int int0 = NumberUtils.max(intArray0);
      assertEquals((-9), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-2592);
      longArray0[1] = (long) (-2592);
      long long0 = new Integer((-9));
      double double0 = NumberUtils.toDouble((String) null, (-1.1E200));
      assertEquals((-1.1E200), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      try { 
        NumberUtils.createNumber("?CfH.(IVe:Tvs6/]E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ?CfH.(IVe:Tvs6/]E is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("v<R");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("3.");
      assertEquals(3.0F, number0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = (-1983L);
      longArray0[1] = 0L;
      longArray0[2] = (-218L);
      longArray0[3] = 1326L;
      longArray0[4] = (-2171L);
      longArray0[5] = (-1L);
      longArray0[6] = (-709L);
      longArray0[7] = (-434L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1326L, long0);
      
      double double0 = NumberUtils.min((double) (-434L), (-5.56), (-3217.32));
      assertEquals((-3217.32), double0, 0.01);
      
      byte byte0 = NumberUtils.min((byte)118, (byte)118, (byte)120);
      assertEquals((byte)118, byte0);
      
      long long1 = NumberUtils.toLong("", (-1983L));
      assertEquals((-1983L), long1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-10);
      shortArray0[1] = (short) (-10891);
      shortArray0[2] = (short) (-10891);
      shortArray0[3] = (short)165;
      short short0 = NumberUtils.min((short) (-10), (short) (-10891), (short)165);
      assertEquals((short) (-10891), short0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)65;
      short short0 = NumberUtils.min((short)65, (short)65, (short)65);
      assertEquals((short)65, short0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)3858;
      shortArray0[1] = (short) (-966);
      shortArray0[2] = (short)3;
      short short0 = NumberUtils.min((short)3858, (short)3858, (short)3);
      assertEquals((short)3, short0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      short short0 = NumberUtils.min((short)426, (short)426, (short)239);
      assertEquals((short)239, short0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (short)426;
      intArray0[1] = (int) (short)239;
      intArray0[2] = (int) (short)239;
      intArray0[3] = (int) (short)426;
      intArray0[4] = (int) (short)239;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(426, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x22338L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xcreateNumber(String) 14 failed");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xW%c[p");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
      
      boolean boolean0 = NumberUtils.isNumber("0x0aMwKVTC");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.createInteger((String) null);
      long[] longArray0 = new long[6];
      longArray0[0] = (long) numberUtils0.LONG_ZERO;
      longArray0[1] = 5L;
      longArray0[2] = (long) numberUtils0.LONG_MINUS_ONE;
      longArray0[3] = (long) (short)numberUtils0.SHORT_ONE;
      longArray0[4] = (-56L);
      longArray0[5] = (long) (int)numberUtils0.INTEGER_ONE;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(5L, long0);
      
      double double0 = NumberUtils.min((double) 1L, 1.0, 3743.0);
      assertEquals(1.0, double0, 0.01);
      
      byte byte0 = NumberUtils.min((byte)65, (byte) numberUtils0.BYTE_MINUS_ONE, (byte) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((byte) (-1), byte0);
      
      long long1 = NumberUtils.toLong((String) null, 1L);
      assertEquals(1L, long1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      try { 
        NumberUtils.createNumber("max(int[]) failed for array length 1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[3] = (-612L);
      Long long0 = new Long((-612L));
      Long long1 = NumberUtils.createLong((String) null);
      assertNull(long1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 108.0F;
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.isNumber("A blank string is not a valid number");
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) numberUtils0.SHORT_ONE;
      long long0 = NumberUtils.min((long) numberUtils0.SHORT_ONE, (-801L), (-4341L));
      assertEquals((-4341L), long0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.min((-7L), (-1013L), 0L);
      assertEquals((-1013L), long0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 7L;
      long long0 = NumberUtils.min(7L, 7L, 7L);
      assertEquals(7L, long0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x-%c[p");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("--uK11?6%a[");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"u\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (long)numberUtils0.LONG_MINUS_ONE;
      floatArray0[1] = (float) (int)numberUtils0.INTEGER_ONE;
      floatArray0[2] = (float) (long)numberUtils0.LONG_ONE;
      short short0 = NumberUtils.max((short) numberUtils0.SHORT_MINUS_ONE, (short) numberUtils0.SHORT_ONE, (short) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((short)1, short0);
      
      floatArray0[3] = (float) (short)numberUtils0.SHORT_MINUS_ONE;
      floatArray0[4] = (float) (short)numberUtils0.SHORT_ZERO;
      floatArray0[5] = (float) numberUtils0.FLOAT_ZERO;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
      
      BigInteger bigInteger0 = NumberUtils.createBigInteger("017777777777");
      assertEquals((short) (-1), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("-0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      short short0 = NumberUtils.max((short) (-1185), (short) (-1185), (short)57);
      assertEquals((short)57, short0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[1] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[2] = (short) (byte)numberUtils0.BYTE_ONE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[1] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[3] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[4] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[5] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-1), byte0);
      
      double double0 = NumberUtils.toDouble("_bDo(jz<", (double) numberUtils0.FLOAT_ONE);
      assertEquals(1.0, double0, 0.01);
      
      NumberUtils.max((long) numberUtils0.SHORT_ZERO, (long) numberUtils0.INTEGER_ZERO, (long) numberUtils0.SHORT_ZERO);
      int int0 = NumberUtils.max((int) numberUtils0.SHORT_MINUS_ONE, (int) numberUtils0.BYTE_ONE, 89);
      assertEquals(89, int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = 1205L;
      longArray0[1] = (long) (int)numberUtils0.INTEGER_ONE;
      longArray0[2] = (long) (byte) (-1);
      longArray0[3] = (long) (byte) (-1);
      longArray0[4] = (long) (short)0;
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = new Double((double) numberUtils0.DOUBLE_ONE);
      long long0 = NumberUtils.max((long) numberUtils0.SHORT_ONE, (long) numberUtils0.SHORT_ONE, 0L);
      assertEquals(1L, long0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (long)numberUtils0.LONG_ZERO;
      doubleArray0[1] = (double) (int)numberUtils0.INTEGER_ZERO;
      doubleArray0[2] = (double) (float)numberUtils0.FLOAT_ONE;
      doubleArray0[3] = (double) (int)numberUtils0.INTEGER_ONE;
      doubleArray0[4] = (double) numberUtils0.DOUBLE_ZERO;
      doubleArray0[5] = (double) (int)numberUtils0.INTEGER_ZERO;
      doubleArray0[6] = (double) (long)numberUtils0.LONG_ONE;
      doubleArray0[7] = 1.0E-4;
      double double1 = NumberUtils.max(doubleArray0);
      assertEquals(1.0, double1, 0.01);
      
      int int0 = NumberUtils.min(120, 2, (int) numberUtils0.SHORT_MINUS_ONE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short) numberUtils0.SHORT_MINUS_ONE, (short) numberUtils0.SHORT_ONE, (short) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((short)1, short0);
      
      BigInteger bigInteger0 = NumberUtils.createBigInteger("017777777777");
      assertNotNull(bigInteger0);
      assertEquals((short) (-1), bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long[] longArray0 = new long[6];
      boolean boolean0 = NumberUtils.isNumber("-");
      Number number0 = NumberUtils.createNumber("3.02236e+38");
      assertNotNull(number0);
      
      float[] floatArray0 = new float[6];
      short[] shortArray0 = new short[8];
      double[] doubleArray0 = new double[2];
      double double0 = NumberUtils.toDouble("3.02236e+38");
      assertEquals(3.02236E38, double0, 0.01);
      
      short short0 = NumberUtils.max(shortArray0);
      short short1 = NumberUtils.min(shortArray0);
      assertTrue(short1 == short0);
      
      NumberUtils.max(longArray0);
      NumberUtils.min(longArray0);
      boolean boolean1 = NumberUtils.isNumber("-0N");
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = NumberUtils.isNumber("-~-hx");
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int[] intArray0 = new int[11];
      intArray0[0] = 1130;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)numberUtils0.SHORT_ONE;
      NumberUtils.min(floatArray0);
      floatArray0[1] = 1.0F;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = (float) numberUtils0.FLOAT_ONE;
      floatArray0[4] = (float) (int)numberUtils0.INTEGER_ZERO;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) numberUtils0.INTEGER_MINUS_ONE;
      intArray0[1] = (int) (byte)numberUtils0.BYTE_ZERO;
      intArray0[2] = (int) (short)numberUtils0.SHORT_ZERO;
      NumberUtils.min(intArray0);
      NumberUtils.min(floatArray0);
      Long long0 = new Long((long) numberUtils0.INTEGER_MINUS_ONE);
      assertEquals((-1L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[2] = (byte) numberUtils0.BYTE_ZERO;
      Byte byte0 = new Byte((byte)1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (float)numberUtils0.FLOAT_ZERO;
      doubleArray0[1] = (double) (long)numberUtils0.LONG_ZERO;
      NumberUtils.max(doubleArray0);
      NumberUtils.max(131.89F, (float) numberUtils0.BYTE_ONE, 0.0F);
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.max((byte) numberUtils0.BYTE_ONE, (byte) numberUtils0.BYTE_ZERO, (byte) numberUtils0.BYTE_MINUS_ONE);
      NumberUtils.isNumber("");
      NumberUtils.toInt("ZnI[DlP`nNAj9O", (-1981));
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Ie.]&U;0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Ie.]&U;0 is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[1] = 220.3369F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(220.3369F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      try { 
        NumberUtils.createNumber("org.apache.commons.lang3.math.NumberUtils");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // org.apache.commons.lang3.math.NumberUtils is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      try { 
        NumberUtils.createNumber("\"n{8S. T5u}Kg&");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // \"n{8S. T5u}Kg& is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      float[] floatArray0 = new float[16];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      NumberUtils.isDigits("1E-");
      NumberUtils.max((byte)4, (byte)4, (byte)32);
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("1E-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) numberUtils0.BYTE_ZERO;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
      
      long long0 = NumberUtils.max((long) numberUtils0.BYTE_MINUS_ONE, (long) numberUtils0.LONG_MINUS_ONE, (long) numberUtils0.BYTE_ZERO);
      assertEquals(0L, long0);
      
      boolean boolean0 = NumberUtils.isNumber("3");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0017777777777");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("o");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructortestConstructortestConstructor_113()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[0] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[2] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[3] = (short) numberUtils0.SHORT_ONE;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)numberUtils0.SHORT_ZERO;
      doubleArray0[1] = (double) (long)numberUtils0.LONG_ZERO;
      doubleArray0[2] = 1.2339999888423831E23;
      doubleArray0[3] = (double) (byte)numberUtils0.BYTE_MINUS_ONE;
      doubleArray0[1] = (double) (int)numberUtils0.INTEGER_ZERO;
      doubleArray0[5] = (double) (short)0;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
      
      shortArray0[4] = (short) (-5851);
      shortArray0[5] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[6] = (short) (-410);
      shortArray0[7] = (short) numberUtils0.SHORT_ZERO;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-5851), short0);
      
      byte byte0 = NumberUtils.max((byte)76, (byte) numberUtils0.BYTE_ZERO, (byte) (-42));
      assertEquals((byte)76, byte0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.min((int) numberUtils0.INTEGER_MINUS_ONE, 105, (-58));
      assertEquals((-58), int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--uDK12?-6%aW");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("j_Pse0/0I*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.toDouble("-M`-", (-2054.0219531235243));
      assertEquals((-2054.0219531235243), double0, 0.01);
      
      long long0 = NumberUtils.max((long) numberUtils0.SHORT_ONE, (long) numberUtils0.SHORT_ONE, 0L);
      assertEquals(1L, long0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (long)numberUtils0.LONG_ZERO;
      doubleArray0[1] = (double) (int)numberUtils0.INTEGER_ZERO;
      doubleArray0[2] = (double) (float)numberUtils0.FLOAT_ONE;
      doubleArray0[3] = (double) (int)numberUtils0.INTEGER_ONE;
      doubleArray0[4] = (double) numberUtils0.DOUBLE_ZERO;
      doubleArray0[5] = (double) (int)numberUtils0.INTEGER_ZERO;
      doubleArray0[6] = (double) (long)numberUtils0.LONG_ONE;
      doubleArray0[7] = 1.0E-4;
      double double1 = NumberUtils.max(doubleArray0);
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 26.886565534;
      doubleArray0[1] = 976.691301074732;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(976.691301074732, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.toByte((String) null, (byte)78);
      assertEquals((byte)78, byte0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = (double) (long)numberUtils0.LONG_MINUS_ONE;
      doubleArray0[1] = (double) (float)numberUtils0.FLOAT_ZERO;
      doubleArray0[2] = (double) (long)numberUtils0.LONG_ZERO;
      NumberUtils.min(doubleArray0);
      NumberUtils.createBigDecimal("01777777777777777777777");
      NumberUtils.toInt((String) null);
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.max((int) numberUtils0.SHORT_MINUS_ONE, (int) numberUtils0.BYTE_ONE, (-1957));
      assertEquals(1, int0);
      
      long long0 = NumberUtils.max(881L, (-1423L), (long) numberUtils0.INTEGER_MINUS_ONE);
      assertEquals(881L, long0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("#");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[7];
      longArray0[0] = (-3253L);
      longArray0[1] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      longArray0[2] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      longArray0[3] = 4886718345L;
      longArray0[4] = (long) (byte)numberUtils0.BYTE_ONE;
      longArray0[5] = (long) (short)numberUtils0.SHORT_ZERO;
      longArray0[6] = (long) numberUtils0.LONG_MINUS_ONE;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(4886718345L, long0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      float[] floatArray0 = new float[19];
      floatArray0[0] = 50.4F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.min((byte)1, (byte) numberUtils0.BYTE_MINUS_ONE, (byte)3);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)45, (byte)45, (byte)20);
      assertEquals((byte)20, byte0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("-0Xfade");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Xfade\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (-1853L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1853L), long0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_137()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[1] = (int) numberUtils0.INTEGER_ZERO;
      intArray0[2] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[3] = (int) numberUtils0.INTEGER_ONE;
      intArray0[4] = (int) (short)numberUtils0.SHORT_ZERO;
      intArray0[5] = 120;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(120, int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[2] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[3] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[4] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[5] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[6] = (byte) numberUtils0.BYTE_ONE;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)1, byte0);
      
      byte byte1 = NumberUtils.min((byte) (-120), (byte) (-32), (byte)1);
      assertEquals((byte) (-120), byte1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)67, (byte)67, (byte)67);
      assertEquals((byte)67, byte0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.max(1256.781, 5.699999809265137, 712.77334473126);
      assertEquals(1256.781, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_141()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.toShort((String) null, (short)78);
      assertEquals((short)78, short0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[3];
      shortArray0[2] = (short) numberUtils0.SHORT_ONE;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("1e/E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1e/E\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.toLong("isNumber(String)/createNumber(String) 3 failed");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = NumberUtils.min((-141082867), (-141082867), (-141082867));
      assertEquals((-141082867), int0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_147()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[2] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[3] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[4] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[5] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[6] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)53;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)56;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0XER:sf0aG_%'\"D|\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ER:sf0aG_%'\"D|\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      try { 
        NumberUtils.createNumber("5:");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 5: is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)6;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("1234.5");
      assertEquals((short)1234, bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      double[] doubleArray0 = new double[0];
      double double0 = new Long((long) numberUtils0.SHORT_MINUS_ONE);
      NumberUtils.createBigDecimal("01777777777777777777777");
      NumberUtils.toInt("01777777777777777777777");
      Double double1 = NumberUtils.createDouble("01777777777777777777777");
      assertEquals(1.7777777777777778E21, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      try { 
        NumberUtils.createNumber("toLong(String) 3 failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // toLong(String) 3 failed is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[2] = (short)1431;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1431, short0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("}.b");
      assertEquals((byte)0, byte0);
      
      short short0 = NumberUtils.max((short) (byte)0, (short) (-1164), (short) (byte)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createLong("AO\"j\"'O%n:]5(5");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"AO\"j\"'O%n:]5(5\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 195225789;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(195225789, int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      float float0 = NumberUtils.toFloat("j_Pse0/0I*");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_166()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[1] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[2] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[3] = (short) numberUtils0.SHORT_ONE;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (short)numberUtils0.SHORT_ZERO;
      doubleArray0[1] = (double) (long)numberUtils0.LONG_ZERO;
      doubleArray0[2] = 1.2339999888423831E23;
      doubleArray0[3] = (double) (byte)numberUtils0.BYTE_MINUS_ONE;
      doubleArray0[4] = (double) (int)numberUtils0.INTEGER_ZERO;
      doubleArray0[5] = (double) (short) (-1);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
      
      shortArray0[4] = (short) (-5871);
      shortArray0[5] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[6] = (short) (-410);
      shortArray0[7] = (short) numberUtils0.SHORT_ZERO;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-5871), short0);
      
      byte byte0 = NumberUtils.max((byte)76, (byte) numberUtils0.BYTE_ZERO, (byte) (-42));
      assertEquals((byte)76, byte0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (long)numberUtils0.LONG_ZERO;
      doubleArray0[1] = (double) (float)numberUtils0.FLOAT_MINUS_ONE;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      short[] shortArray0 = new short[12];
      shortArray0[0] = (short)4863;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      short[] shortArray0 = new short[19];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      short short0 = NumberUtils.toShort("createDouble(null) failed", (short) (-1642));
      assertEquals((short) (-1642), short0);
      
      int int0 = NumberUtils.toInt((String) null, 125);
      assertEquals(125, int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      short short0 = NumberUtils.toShort("6?M~O(G");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[3];
      longArray0[2] = (long) (int)numberUtils0.INTEGER_ONE;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_174()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[7];
      longArray0[0] = (long) numberUtils0.LONG_MINUS_ONE;
      longArray0[1] = 2297L;
      longArray0[2] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      longArray0[3] = (long) numberUtils0.LONG_ONE;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[1] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[2] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1), int0);
      
      longArray0[4] = (long) (byte)numberUtils0.BYTE_MINUS_ONE;
      longArray0[5] = (long) numberUtils0.LONG_ONE;
      longArray0[6] = (long) numberUtils0.LONG_ONE;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(2297L, long0);
      
      double double0 = NumberUtils.min((double) (-1L), (double) numberUtils0.INTEGER_ONE, 2275.11);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      long[] longArray0 = new long[3];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int[] intArray0 = new int[15];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[1];
      intArray0[0] = (int) numberUtils0.INTEGER_MINUS_ONE;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1), int0);
      
      BigDecimal bigDecimal0 = new BigDecimal((int) numberUtils0.SHORT_ZERO);
      double double0 = NumberUtils.min(10.78, (double) numberUtils0.SHORT_MINUS_ONE, (-1092.2992));
      assertEquals((-1092.2992), double0, 0.01);
      
      byte byte0 = NumberUtils.min((byte)13, (byte) numberUtils0.BYTE_MINUS_ONE, (byte)13);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (short)numberUtils0.SHORT_ZERO;
      longArray0[1] = (long) (byte)numberUtils0.BYTE_ZERO;
      longArray0[2] = (long) (byte)numberUtils0.BYTE_ZERO;
      longArray0[3] = (long) (short)numberUtils0.SHORT_ONE;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      long[] longArray0 = new long[4];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double double0 = NumberUtils.toDouble("3", Double.NaN);
      assertEquals(3.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      NumberUtils.max(120, 2737, 2737);
      // Undeclared exception!
      try { 
        NumberUtils.createLong("[t)@6#");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"[t)@6#\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.max(932, (int) numberUtils0.SHORT_MINUS_ONE, (-1294));
      assertEquals(932, int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1931.69F;
      float float0 = NumberUtils.min(1931.69F, 1931.69F, 1931.69F);
      assertEquals(1931.69F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.max((byte) numberUtils0.BYTE_ONE, (byte)52, (byte) numberUtils0.BYTE_MINUS_ONE);
      // Undeclared exception!
      try { 
        NumberUtils.createInteger(";~@pxi>");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \";~@pxi>\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      try { 
        NumberUtils.createNumber(";57LPI++)u1~c'S8");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_190()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.max((byte)105, (byte)105, (byte) numberUtils0.BYTE_ZERO);
      assertEquals((byte)105, byte0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.toByte("?@68_7gm", (byte) numberUtils0.BYTE_ZERO);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_192()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.max((-5380L), (long) numberUtils0.INTEGER_ZERO, (long) numberUtils0.LONG_MINUS_ONE);
      assertEquals(0L, long0);
  }
}
