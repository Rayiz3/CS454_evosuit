/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 21:35:56 GMT 2023
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("6eehU^Jl+P7jhGn");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0E`GMKKC6");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Ee6");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Ee6\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E390");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0x1234cE5f");
      assertNotNull(number0);
      assertEquals(305450591, number0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "0.1E-70V";
      try { 
        NumberUtils.createNumber("0.1E-70V");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.1E-70V is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1.1E9700F");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-123E2.12");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0{!X-1l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -0{!X-1l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1.1E-700F");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1l");
      assertEquals((-1L), number0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.7976931348623157E308");
      assertEquals(1.7976931348623157E308, number0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("7D");
      assertEquals(7.0, number0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Number number0 = NumberUtils.createNumber(".1E-70");
      assertEquals(1.0E-71, number0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-700");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertNotNull(number0);
      assertEquals(0.0F, number0);
      
      boolean boolean0 = NumberUtils.isNumber("-0x9MJ)w[n>wlQF=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("12345EL");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      try { 
        NumberUtils.createNumber("toDou'le(Double.M>N_VALPElf:led");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // toDou'le(Double.M>N_VALPElf:led is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0y");
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 802.211435063;
      doubleArray0[1] = (-3296.66);
      doubleArray0[2] = Double.POSITIVE_INFINITY;
      doubleArray0[3] = (-2086.6852);
      doubleArray0[4] = 4129.82058942;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-335.88163);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-3296.66), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xf");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("");
      assertFalse(boolean0);
      
      boolean boolean1 = NumberUtils.isNumber("0xa}6e*;Kp2s%2");
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2611.0;
      doubleArray0[4] = 87.160932843368;
      long[] longArray0 = new long[7];
      longArray0[0] = (-10L);
      doubleArray0[4] = (double) (-1064L);
      longArray0[2] = 12360L;
      longArray0[3] = (-2648L);
      doubleArray0[2] = (double) 0L;
      longArray0[5] = 0L;
      longArray0[6] = 12344L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-2648L), long0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-1.1E-700F");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0.5r#T*OUUw");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.5r#T*OUUw is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e}GP<h)1|ga'&<WcpY");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234E5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("4.9E-324");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234.5f");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      try { 
        NumberUtils.createNumber("1eE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 1eE is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      try { 
        NumberUtils.createNumber("+C)o?R|n{\"<qQktgD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // +C)o?R|n{\"<qQktgD is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      try { 
        NumberUtils.createNumber("W3knOk]'?w{,eaV6BF");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // W3knOk]'?w{,eaV6BF is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
      
      NumberUtils.createFloat((String) null);
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+d3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      NumberUtils.isNumber("-0xtoLong(String) 1 failed");
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2681;
      shortArray0[0] = (short) (-834);
      shortArray0[2] = (short)123;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)123, short0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)123;
      intArray0[1] = (int) (short)123;
      intArray0[2] = (int) (short)123;
      intArray0[3] = (int) (short) (-834);
      intArray0[4] = 76;
      intArray0[5] = (int) (short)123;
      intArray0[6] = (int) (short)0;
      intArray0[7] = (int) (short)2681;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(2681, int0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 76;
      floatArray0[1] = (float) 76;
      floatArray0[2] = (float) 76;
      floatArray0[3] = (float) 2681;
      floatArray0[4] = (float) (-834);
      floatArray0[5] = (float) 76;
      floatArray0[6] = (float) (short) (-834);
      NumberUtils.min(floatArray0);
      boolean boolean0 = NumberUtils.isNumber("-0xd[");
      assertFalse(boolean0);
      
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(2681.0F, float0, 0.01F);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte)11;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-62), byte0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      NumberUtils.isNumber((String) null);
      short[] shortArray0 = new short[3];
      short short0 = (short)2681;
      shortArray0[0] = (short)2681;
      shortArray0[1] = (short) (-834);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)46;
      byteArray0[0] = (byte)46;
      byte byte1 = (byte)78;
      byteArray0[1] = (byte)78;
      NumberUtils.max(byteArray0);
      NumberUtils.createLong((String) null);
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("WVP O?s#GU>lh");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xboolean");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      NumberUtils.isNumber("-0x");
      Short short0 = new Short((short)617);
      assertEquals((short)617, (short)short0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 5.7F;
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xD");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      try { 
        NumberUtils.createNumber("z2V&)L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // z2V&)L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      NumberUtils.toLong((String) null, 120L);
      NumberUtils.toLong("8TdUx", (-9223372036854775808L));
      NumberUtils.isDigits("..");
      long[] longArray0 = new long[9];
      longArray0[0] = 120L;
      longArray0[1] = 120L;
      longArray0[2] = (-9223372036854775808L);
      longArray0[3] = 120L;
      longArray0[4] = 1260L;
      longArray0[5] = (-9223372036854775808L);
      longArray0[6] = 120L;
      longArray0[7] = 120L;
      longArray0[8] = (-9223372036854775808L);
      NumberUtils.max(longArray0);
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-228.1626090179243);
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x1234.5f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-3184.0F);
      floatArray0[1] = (-947.149F);
      floatArray0[2] = Float.NaN;
      floatArray0[3] = 15.688464F;
      NumberUtils.min(floatArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-45);
      byteArray0[6] = (byte)33;
      byteArray0[7] = (byte)95;
      byteArray0[8] = (byte)7;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-45), byte0);
      
      NumberUtils.min(floatArray0);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte)18;
      intArray0[1] = (int) (byte) (-45);
      int int0 = NumberUtils.max(intArray0);
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Minimum abbreviation width with offset is 7");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      NumberUtils.toLong((String) null, 120L);
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-3184.0F);
      floatArray0[1] = (-947.149F);
      floatArray0[2] = Float.NaN;
      floatArray0[3] = 14.3F;
      NumberUtils.min(floatArray0);
      try { 
        NumberUtils.createNumber("-0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 2116.91F;
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      try { 
        NumberUtils.createNumber("D");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // D is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      NumberUtils.max((short) (-1258), (short)3900, (short)3900);
      try { 
        NumberUtils.createNumber("HHF;eC!4FfdJvb8W}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // HHF;eC!4FfdJvb8W} is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      try { 
        NumberUtils.createNumber(".wh1~n3L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .wh1~n3L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) (byte)numberUtils0.BYTE_MINUS_ONE;
      doubleArray0[2] = (double) (long)numberUtils0.LONG_ZERO;
      doubleArray0[3] = (double) (long)numberUtils0.LONG_ZERO;
      doubleArray0[4] = (-5.56);
      doubleArray0[5] = (double) (float)numberUtils0.FLOAT_ONE;
      doubleArray0[6] = 27.0;
      NumberUtils.max(doubleArray0);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(27.0, double0, 0.01);
      
      byte byte0 = NumberUtils.toByte((String) null, (byte) numberUtils0.BYTE_ZERO);
      assertEquals((byte)0, byte0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) numberUtils0.LONG_ONE;
      longArray0[1] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      longArray0[2] = (long) (int)numberUtils0.INTEGER_ONE;
      longArray0[3] = (long) (int)numberUtils0.INTEGER_ZERO;
      longArray0[4] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      NumberUtils.max((byte) (-109), (byte) (-109), (byte)90);
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (byte)90;
      floatArray0[1] = (float) (byte)90;
      floatArray0[2] = (float) (byte)90;
      NumberUtils.min(floatArray0);
      boolean boolean0 = NumberUtils.isNumber("%Aiy8K%");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".5wh1~n3L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1234.5f");
      assertEquals(1234.5F, number0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.toLong("n5UXuyW$m>L5dTJ6", (long) numberUtils0.SHORT_ZERO);
      int int0 = NumberUtils.min(46, 111, (-145979014));
      assertEquals((-145979014), int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      short short0 = NumberUtils.max((short)45, (short) (-3), (short) (-1258));
      assertEquals((short)45, short0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 15;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 15;
      Byte byte0 = new Byte((byte)37);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)37;
      byte byte1 = NumberUtils.max(byteArray0);
      assertEquals((byte)37, byte1);
      
      short short0 = NumberUtils.min((short)5404, (short)102, (short)1454);
      assertEquals((short)102, short0);
      
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(15.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.createInteger((String) null);
      int int0 = NumberUtils.min((int) numberUtils0.BYTE_MINUS_ONE, (-2147383246), 97);
      assertEquals((-2147383246), int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[2] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[3] = (short) numberUtils0.SHORT_MINUS_ONE;
      NumberUtils.min(shortArray0);
      boolean boolean0 = NumberUtils.isNumber("--fm");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[6];
      intArray0[0] = (int) numberUtils0.INTEGER_ZERO;
      intArray0[1] = (int) (byte)numberUtils0.BYTE_ZERO;
      intArray0[2] = (-2032);
      intArray0[3] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[4] = (-19);
      intArray0[5] = (int) (byte)numberUtils0.BYTE_ONE;
      NumberUtils.max(intArray0);
      NumberUtils.min((long) 15, 12346L, (long) numberUtils0.LONG_ONE);
      // Undeclared exception!
      try { 
        NumberUtils.createInteger("''@.30w>$Y");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"''@.30w>$Y\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0x0X$3C7x7D5|16BO?!");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-0X$3C7x7D5|16BO?!\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      boolean boolean0 = NumberUtils.isNumber("-0xtoLong(String) 1 failed");
      assertFalse(boolean0);
      
      int int0 = NumberUtils.toInt("-0xtoLong(String) 1 failed", (-793));
      assertEquals((-793), int0);
      
      byte byte0 = NumberUtils.toByte("X", (byte) numberUtils0.BYTE_ZERO);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("9223372036854775807");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      doubleArray0[0] = (-5013.028);
      double double0 = NumberUtils.max((-5013.028), (-5013.028), (-5013.028));
      assertEquals((-5013.028), double0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 3538;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(3538, int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[9];
      intArray0[1] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[2] = (int) (short)numberUtils0.SHORT_ZERO;
      intArray0[3] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[4] = (int) numberUtils0.INTEGER_ZERO;
      intArray0[5] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[6] = (int) (short)numberUtils0.SHORT_ONE;
      intArray0[7] = (int) numberUtils0.INTEGER_ONE;
      intArray0[8] = (int) (byte)numberUtils0.BYTE_ZERO;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1, int0);
      
      int int1 = NumberUtils.toInt((String) null, (int) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-1.0);
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x-1234E5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xmin(int[E) failed for array lengthM2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = NumberUtils.min(1060L, 1060L, 1060L);
      assertEquals(1060L, long0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)numberUtils0.SHORT_ONE;
      intArray0[1] = (int) numberUtils0.INTEGER_ONE;
      intArray0[2] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[3] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1, int0);
      
      long long0 = NumberUtils.min(1L, (long) (-1), 87L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)numberUtils0.BYTE_ZERO;
      doubleArray0[1] = (double) (byte)numberUtils0.BYTE_MINUS_ONE;
      doubleArray0[2] = (double) (long)numberUtils0.LONG_ZERO;
      doubleArray0[3] = (double) (long)numberUtils0.LONG_ZERO;
      doubleArray0[4] = (-5.56);
      doubleArray0[5] = (double) (float)numberUtils0.FLOAT_ONE;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)numberUtils0.SHORT_MINUS_ONE;
      floatArray0[1] = (float) (long)numberUtils0.LONG_ZERO;
      floatArray0[2] = (float) (short)numberUtils0.SHORT_ZERO;
      floatArray0[3] = (float) (long)numberUtils0.LONG_ZERO;
      floatArray0[4] = (float) (int)numberUtils0.INTEGER_ZERO;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_ZERO;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (short)numberUtils0.SHORT_ZERO;
      longArray0[1] = (long) numberUtils0.LONG_ZERO;
      longArray0[2] = (long) (short)numberUtils0.SHORT_ZERO;
      longArray0[3] = (long) (short)numberUtils0.SHORT_ONE;
      longArray0[4] = (long) (int)numberUtils0.INTEGER_ZERO;
      longArray0[5] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      longArray0[6] = 2506L;
      longArray0[7] = (-2877L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-2877L), long0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      try { 
        NumberUtils.createNumber("?0e6Tr[t,|");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ?0e6Tr[t,| is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1L");
      assertEquals(1L, number0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      int int0 = NumberUtils.max(102, 0, 2274);
      assertEquals(2274, int0);
      
      float float0 = NumberUtils.toFloat((String) null);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      try { 
        NumberUtils.createNumber("user.country");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // user.country is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("Z", (byte) (-73));
      assertEquals((byte) (-73), byte0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-73);
      intArray0[1] = (int) (byte) (-73);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-73), int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = NumberUtils.min((-81820398), (-81820398), (-81820398));
      assertEquals((-81820398), int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.toLong("n5UXuyW$m>L5dTJ6", (long) numberUtils0.SHORT_ZERO);
      byte byte0 = NumberUtils.min((byte)108, (byte)108, (byte) numberUtils0.BYTE_ONE);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("");
      assertFalse(boolean0);
      
      NumberUtils.isNumber("-0X}G8s*");
      int int0 = NumberUtils.toInt("-0X}G8s*");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 15;
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 15;
      float float0 = new Integer(15);
      NumberUtils.isNumber("java.vm.specification.vendor");
      byte byte0 = NumberUtils.min((byte) (-1), (byte) (-95), (byte)121);
      assertEquals((byte) (-95), byte0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte) (-117), (byte)57, (byte) (-117));
      assertEquals((byte)57, byte0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (short)numberUtils0.SHORT_ONE;
      doubleArray0[0] = (double) (long)numberUtils0.LONG_ONE;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1.0, double0, 0.01);
      
      short short0 = NumberUtils.toShort((String) null, (short)5957);
      assertEquals((short)5957, short0);
      
      NumberUtils.createBigInteger((String) null);
      float float0 = NumberUtils.toFloat("di+&IQ379W\">wVv");
      assertEquals(0.0F, float0, 0.01F);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) numberUtils0.LONG_ONE;
      longArray0[1] = (long) numberUtils0.LONG_MINUS_ONE;
      longArray0[2] = (long) (int)numberUtils0.INTEGER_ONE;
      longArray0[3] = (long) (short)numberUtils0.SHORT_ONE;
      longArray0[4] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1L, long0);
      
      byte byte0 = NumberUtils.toByte("Array cannot be empty.", (byte) (-54));
      assertEquals((byte) (-54), byte0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      try { 
        NumberUtils.createNumber("The");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      try { 
        NumberUtils.createNumber("The Array must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      NumberUtils.isNumber("-0xtoLong(String) 1 failed");
      short[] shortArray0 = new short[3];
      short short0 = NumberUtils.toShort("-0xtoLong(String) 1 failed");
      assertEquals((short)0, short0);
      
      int[] intArray0 = new int[8];
      intArray0[1] = (int) (short)0;
      boolean boolean0 = NumberUtils.isNumber("-0xtoLong(String) 1 failed");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short) numberUtils0.BYTE_ZERO, (short) numberUtils0.SHORT_ZERO, (short) numberUtils0.BYTE_ONE);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1274.039628230351);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals((-1274.039628230351), double0, 0.01);
      
      short short1 = NumberUtils.toShort("", (short) numberUtils0.SHORT_ONE);
      assertTrue(short1 == short0);
      
      int int0 = NumberUtils.max(897, 102, (int) numberUtils0.BYTE_ZERO);
      assertEquals(897, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      float[] floatArray0 = new float[1];
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)1234;
      shortArray0[1] = (short)1234;
      shortArray0[2] = (short)1234;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1234, short0);
      
      short short1 = NumberUtils.min((short)1349, (short)2741, (short)109);
      assertEquals((short)109, short1);
      
      short short2 = NumberUtils.toShort("-0xcreateNumber(String) 13 failed", (short)22622);
      assertEquals((short)22622, short2);
      
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[2];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
      
      short short1 = NumberUtils.min((short) numberUtils0.BYTE_ZERO, (short)2, (short) (-791));
      assertEquals((short) (-791), short1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (float)numberUtils0.FLOAT_ZERO;
      doubleArray0[1] = (double) (byte)numberUtils0.BYTE_ONE;
      doubleArray0[2] = (double) numberUtils0.DOUBLE_ONE;
      doubleArray0[3] = (double) numberUtils0.DOUBLE_ZERO;
      doubleArray0[4] = (double) (long)numberUtils0.LONG_ONE;
      doubleArray0[5] = (double) (byte)numberUtils0.BYTE_ZERO;
      doubleArray0[6] = (double) (float)numberUtils0.FLOAT_MINUS_ONE;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
      
      NumberUtils.createBigDecimal((String) null);
      double double1 = NumberUtils.toDouble((String) null, 0.0);
      assertEquals(0.0, double1, 0.01);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (short)numberUtils0.SHORT_MINUS_ONE;
      NumberUtils.createNumber((String) null);
      floatArray0[1] = (float) (byte)numberUtils0.BYTE_MINUS_ONE;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)108;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)108, byte0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      try { 
        NumberUtils.createNumber("j21qllv757");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"j\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.max(76, (int) numberUtils0.SHORT_ZERO, 82);
      assertEquals(82, int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      short[] shortArray0 = new short[20];
      shortArray0[0] = (short)1213;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      short[] shortArray0 = new short[13];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("]XcrP|.E.)c");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"]Xc\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0xtoDouble(Double.MIN_VALUE) failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"toDouble(Double.MIN_VALUE) failed\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0X");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      NumberUtils.max(longArray0);
      NumberUtils.createBigInteger((String) null);
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 4084L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(4084L, long0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      long[] longArray0 = new long[9];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = (-10L);
      longArray0[1] = (-10L);
      longArray0[2] = 12346L;
      longArray0[3] = 6L;
      longArray0[4] = 9L;
      longArray0[5] = (-668L);
      longArray0[6] = (-611L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals(12346L, long0);
      
      long long1 = NumberUtils.toLong("-");
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte)numberUtils0.BYTE_ZERO;
      floatArray0[1] = (float) (long)numberUtils0.LONG_ONE;
      floatArray0[2] = (float) (long)numberUtils0.LONG_MINUS_ONE;
      floatArray0[3] = 2.0F;
      floatArray0[4] = (float) (int)numberUtils0.INTEGER_MINUS_ONE;
      floatArray0[5] = (float) (int)numberUtils0.INTEGER_MINUS_ONE;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      float[] floatArray0 = new float[15];
      floatArray0[0] = 1155.5643F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[1] = (short)531;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)531, short0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.isNumber("Array cannot be empty.");
      NumberUtils.min((short)1, (short) (-909), (short) numberUtils0.SHORT_MINUS_ONE);
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("Array cannot be empty.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.isNumber("JE]bU2'Del6G)/StV");
      short short0 = NumberUtils.min((short) numberUtils0.SHORT_MINUS_ONE, (short) numberUtils0.BYTE_MINUS_ONE, (short) numberUtils0.BYTE_ZERO);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0XtOJUzU#OHOi|,");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-tOJUzU#OHOi|,\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0xM2#I");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-M2#I\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.max((long) numberUtils0.LONG_MINUS_ONE, (long) numberUtils0.INTEGER_ZERO, (long) numberUtils0.INTEGER_ONE);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1.6550304F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Number number0 = NumberUtils.createNumber(".5");
      assertEquals(0.5F, number0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = (double) (byte)numberUtils0.BYTE_MINUS_ONE;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_147()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.max((byte) numberUtils0.BYTE_ONE, (byte) numberUtils0.BYTE_ONE, (byte) numberUtils0.BYTE_ONE);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double double0 = NumberUtils.toDouble("7\"\"?Llu.N& =E G4", 5.0);
      assertEquals(5.0, double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 5.0;
      doubleArray0[1] = 5.0;
      doubleArray0[2] = 5.0;
      doubleArray0[3] = 5.0;
      doubleArray0[4] = 5.0;
      doubleArray0[5] = 5.0;
      doubleArray0[6] = 5.0;
      doubleArray0[7] = 2220.716309;
      doubleArray0[8] = 5.0;
      double double1 = NumberUtils.max(doubleArray0);
      assertEquals(2220.716309, double1, 0.01);
      
      byte byte0 = NumberUtils.max((byte) (-114), (byte) (-114), (byte) (-114));
      assertEquals((byte) (-114), byte0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (-3738.0);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-3738.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      boolean boolean0 = NumberUtils.isDigits("J0KEh/");
      assertFalse(boolean0);
      
      double double0 = NumberUtils.toDouble("Mz/L36cs9V-~YQo[Z");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[9];
      intArray0[0] = (int) numberUtils0.INTEGER_ONE;
      intArray0[1] = 874;
      intArray0[2] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[3] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[4] = (int) numberUtils0.INTEGER_MINUS_ONE;
      intArray0[5] = (int) (short)numberUtils0.SHORT_ZERO;
      intArray0[6] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[7] = (int) (byte)numberUtils0.BYTE_ONE;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (short)numberUtils0.SHORT_ZERO;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (short)numberUtils0.SHORT_MINUS_ONE;
      floatArray0[4] = (float) (int)numberUtils0.INTEGER_MINUS_ONE;
      floatArray0[5] = (float) (byte)numberUtils0.BYTE_MINUS_ONE;
      floatArray0[6] = (float) (long)numberUtils0.LONG_ZERO;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
      
      intArray0[8] = (int) numberUtils0.INTEGER_ONE;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(874, int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (int)numberUtils0.INTEGER_ZERO;
      longArray0[1] = (-2877L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-2877L), long0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (int)numberUtils0.INTEGER_ONE;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 2270;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(2270, int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      long[] longArray0 = new long[9];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.max((short) numberUtils0.BYTE_ZERO, (short) numberUtils0.SHORT_ZERO, (short) numberUtils0.BYTE_ONE);
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("-0x1111 ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_162()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.toByte("..", (byte)61);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)61;
      byte byte1 = NumberUtils.min(byteArray0);
      assertTrue(byte1 == byte0);
      assertEquals((byte)61, byte1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.min((int) numberUtils0.SHORT_ONE, (int) numberUtils0.INTEGER_ZERO, (int) numberUtils0.INTEGER_ZERO);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.toLong("n5UXuyW$m>L5dTJ6", (long) numberUtils0.SHORT_ZERO);
      try { 
        NumberUtils.createNumber("n5UXuyW$m>L5dTJ6");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"n5UXuyW\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.min((byte) (-75), (byte) numberUtils0.BYTE_ONE, (byte) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((byte) (-75), byte0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      long long0 = NumberUtils.max((-1086L), 12347L, (-1086L));
      assertEquals(12347L, long0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double double0 = NumberUtils.toDouble("^hP6yWWl4E!hX", 10.78);
      assertEquals(10.78, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-3561.031F);
      NumberUtils.min((-3561.031F), (-3561.031F), (-3561.031F));
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-3561.031F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createLong("0X");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 4;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int[] intArray0 = new int[13];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)79;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      try { 
        NumberUtils.createNumber("G<)gyAK>-t;K%STz!-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // G<)gyAK>-t;K%STz!- is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.toInt("-0X 1111", (int) numberUtils0.SHORT_ZERO);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      try { 
        NumberUtils.createNumber("...");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      try { 
        NumberUtils.createNumber("java.vm.specification.vendor");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // java.vm.specification.vendor is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Ed|d");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Ed|d is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      try { 
        NumberUtils.createNumber("w5d!./Mc>Nd?)Iq5$67");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("--fm");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 45.0F;
      float float0 = NumberUtils.max(45.0F, 45.0F, 45.0F);
      assertEquals(45.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      float float0 = NumberUtils.toFloat("%jf^(");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("Z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--fm");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0XTRue");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double double0 = NumberUtils.min((-1.0), (-1.0), (-10.5));
      assertEquals((-10.5), double0, 0.01);
      
      boolean boolean0 = NumberUtils.isNumber("-0X");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("!!S`P");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits(",\"#KRjaR|og");
      assertFalse(boolean0);
      
      int int0 = NumberUtils.toInt((String) null, 139);
      assertEquals(139, int0);
      
      long long0 = NumberUtils.max((long) 139, (long) 139, 1627L);
      assertEquals(1627L, long0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E%7I^nfRBRu~j4b(xoG");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_197()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.isNumber("#{yB.E)t][ip=");
      int int0 = NumberUtils.toInt((String) null, (-2210));
      assertEquals((-2210), int0);
      
      int int1 = NumberUtils.max(1270, 5170, (int) numberUtils0.INTEGER_ONE);
      assertEquals(5170, int1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.createNumber((String) null);
      int int0 = NumberUtils.max(102, 100, (int) numberUtils0.INTEGER_MINUS_ONE);
      assertEquals(102, int0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_199()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.toShort("0x11def", (short) (-609));
      assertEquals((short) (-609), short0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_200()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.toByte("YS:2|CKtfPmO@J[");
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createInteger("0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.max((long) numberUtils0.BYTE_ONE, (long) numberUtils0.BYTE_ZERO, (long) numberUtils0.LONG_ZERO);
      assertEquals(1L, long0);
  }
}
