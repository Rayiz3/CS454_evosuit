/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 19:27:16 GMT 2023
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.XmlDeclaration;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Comment_ESTest extends Comment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comment comment0 = new Comment("!??xml version='1.0'");
      boolean boolean0 = comment0.isXmlDeclaration();
      assertTrue(boolean0);
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comment comment0 = new Comment(">WuBB{Zbfl^I");
      MockPrintStream mockPrintStream0 = new MockPrintStream(">WuBB{Zbfl^I");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(6);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(false);
      comment0.outerHtmlHead(mockPrintStream0, 6, document_OutputSettings3);
      boolean boolean0 = comment0.isXmlDeclaration();
      assertFalse(boolean0);
      
      Comment comment1 = new Comment(">WuBB{Zbfl^I", "6qjm:]O_5_,-t");
      assertEquals("#comment", comment1.nodeName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comment comment0 = new Comment("#coGmbnt");
      String string0 = comment0.toString();
      assertEquals("\n<!--#coGmbnt-->", string0);
      
      boolean boolean0 = comment0.isXmlDeclaration();
      assertEquals("#comment", comment0.nodeName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comment comment0 = new Comment(":first-of-type", ":first-of-type");
      comment0.nodelistChanged();
      boolean boolean0 = comment0.isXmlDeclaration();
      assertFalse(boolean0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      comment0.outerHtmlTail((Appendable) null, 977, document_OutputSettings1);
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      assertNotNull(xmlDeclaration0);
      
      comment0.outerHtmlTail((Appendable) null, (-112), document_OutputSettings0);
      String string0 = comment0.toString();
      assertEquals("\n<!--:first-of-type-->", string0);
      
      comment0.getData();
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comment comment0 = new Comment("y", "y");
      boolean boolean0 = comment0.isXmlDeclaration();
      assertEquals("#comment", comment0.nodeName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comment comment0 = new Comment("!??xml version=\"1.0\" encoding=\"iso-8859-1\"", "!??xml version=\"1.0\" encoding=\"iso-8859-1\"");
      String string0 = comment0.outerHtml();
      assertEquals("\n<!--!??xml version=\"1.0\" encoding=\"iso-8859-1\"-->", string0);
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comment comment0 = new Comment("??XML version='1' encoding='UTF-8' something='else'?");
      boolean boolean0 = comment0.isXmlDeclaration();
      assertEquals("#comment", comment0.nodeName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comment comment0 = new Comment("??xml version=\"1.0\" encoding=\"iso-8859-1\"?", "??xml version=\"1.0\" encoding=\"iso-8859-1\"?");
      assertEquals("#comment", comment0.nodeName());
      
      // Undeclared exception!
      try { 
        comment0.asXmlDeclaration();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comment comment0 = new Comment("RH+@~Vud");
      boolean boolean0 = comment0.isXmlDeclaration();
      assertEquals("#comment", comment0.nodeName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comment comment0 = new Comment("1A-ISq 1\"*F6");
      comment0.asXmlDeclaration();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comment comment0 = new Comment((String) null);
      assertEquals(0, comment0.siblingIndex());
  }
}
