/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 21:22:42 GMT 2023
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1.1E700F");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Number number0 = NumberUtils.createNumber(".143E700");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234E5l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x9223372036854775807");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1.1E-700F");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0EW");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0EW is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0-1l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -0-1l is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E200");
      assertEquals(1.1E200, number0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1l");
      assertEquals((-1L), number0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0.0m");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.0m is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234Em");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0d");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      NumberUtils.isNumber("");
      NumberUtils.isNumber("-0x2a4fy[n99_(YCw");
      long[] longArray0 = new long[9];
      longArray0[8] = 0L;
      longArray0[5] = 0L;
      longArray0[7] = 0L;
      NumberUtils.max(longArray0);
      NumberUtils.isDigits("{");
      NumberUtils.isNumber("{");
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0L;
      floatArray0[0] = (float) 0L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("..");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-700");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-221.23F");
      assertEquals((-221.23F), number0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xorg.apache.commons.lang3.math.NumberUtils");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte) (-123);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)121, byte0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("..2?@C+B_");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      try { 
        NumberUtils.createNumber("e;r_oz9VnIGp\"AE7");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"e;r_oz9\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      try { 
        NumberUtils.createNumber("1f.1L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 1f.1L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("4.9E-324");
      assertEquals(4.9E-324, number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      try { 
        NumberUtils.createNumber("w9+e8drEv.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // w9+e8drEv. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.1L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("F");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      try { 
        NumberUtils.createNumber(".");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("11d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("22338L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234E5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-873.18);
      doubleArray0[1] = (-3164.366331);
      doubleArray0[2] = (-1.2);
      doubleArray0[3] = 1770.0;
      doubleArray0[4] = (-5.0);
      doubleArray0[5] = 230.4888876;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1770.0, double0, 0.01);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 27.0F;
      floatArray0[1] = (-2423.7397F);
      floatArray0[2] = Float.NaN;
      floatArray0[3] = 2324.8635F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".eAJV$J");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 282.1524684;
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-3498);
      shortArray0[1] = (short)52;
      shortArray0[2] = (short)43;
      NumberUtils.max(shortArray0);
      NumberUtils.createDouble((String) null);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)52, short0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      NumberUtils.isNumber("m.<x:{JwK9tr");
      NumberUtils.createNumber("0.9");
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)76;
      shortArray0[2] = (short) (-254);
      shortArray0[3] = (short)5;
      shortArray0[4] = (short) (-2607);
      shortArray0[5] = (short)3;
      NumberUtils.max(shortArray0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (short) (-2607);
      doubleArray0[1] = (double) (short)3;
      doubleArray0[2] = (double) (short)3;
      doubleArray0[3] = (double) (short)76;
      doubleArray0[4] = (double) (short) (-254);
      doubleArray0[5] = (double) (short) (-254);
      doubleArray0[6] = (double) (short) (-2607);
      doubleArray0[7] = (double) (short)5;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(76.0, double0, 0.01);
      
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)76, short0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      try { 
        NumberUtils.createNumber("AlFPTF");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // AlFPTF is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      try { 
        NumberUtils.createNumber("java.vm.name");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // java.vm.name is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E00");
      assertEquals(1.1F, number0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.9");
      assertEquals(0.9F, number0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
      
      NumberUtils.createNumber((String) null);
      long[] longArray0 = new long[8];
      longArray0[0] = (-115L);
      longArray0[1] = 3808L;
      longArray0[2] = 9223372036854775807L;
      longArray0[3] = 1L;
      longArray0[4] = (-122235072L);
      longArray0[5] = 0L;
      longArray0[6] = (-1L);
      longArray0[7] = (-4613L);
      NumberUtils.max(longArray0);
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      try { 
        NumberUtils.createNumber("zL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // zL is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x.UZN75o'4I|");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.1E200");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      try { 
        NumberUtils.createNumber("&8XF&O~{:'2-s'AD");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // &8XF&O~{:'2-s'AD is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("11d");
      assertEquals(11.0, number0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long long0 = NumberUtils.max(456L, 456L, 456L);
      assertEquals(456L, long0);
      
      NumberUtils.toFloat((String) null, (float) 456L);
      try { 
        NumberUtils.createNumber("f7uU8");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"f7uU8\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1l");
      assertEquals(1L, number0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Al");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Al is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("8");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Arguments cannot both be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Arguments cannot both be null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0X");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      try { 
        NumberUtils.createNumber("11def");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 11def is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--11z");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.isNumber("F*{tX:vptV{$Q");
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) numberUtils0.FLOAT_ZERO;
      floatArray0[1] = (float) (int)numberUtils0.INTEGER_ONE;
      floatArray0[2] = Float.NaN;
      floatArray0[3] = (float) (int)numberUtils0.INTEGER_ONE;
      floatArray0[4] = (float) (long)numberUtils0.LONG_ONE;
      floatArray0[5] = (float) (short)numberUtils0.SHORT_ONE;
      floatArray0[6] = (float) (long)numberUtils0.LONG_ZERO;
      floatArray0[7] = (-50.60078F);
      floatArray0[8] = (float) (byte)numberUtils0.BYTE_ZERO;
      NumberUtils.min(floatArray0);
      try { 
        NumberUtils.createNumber("F*{tX:vptV{$Q");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // F*{tX:vptV{$Q is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.3F;
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      short short0 = NumberUtils.toShort((String) null, (short)114);
      assertEquals((short)114, short0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      NumberUtils.max(456L, 456L, 456L);
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)174;
      shortArray0[1] = (short) (-601);
      shortArray0[2] = (short) (-126);
      shortArray0[3] = (short)174;
      NumberUtils.min(shortArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (short) (-126);
      intArray0[1] = 912;
      intArray0[2] = (int) (short) (-601);
      intArray0[3] = (int) (short)174;
      intArray0[4] = (int) (short)174;
      intArray0[5] = (int) (short)174;
      intArray0[6] = (int) (short)174;
      NumberUtils.max(intArray0);
      Float float0 = NumberUtils.createFloat((String) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      try { 
        NumberUtils.createNumber("'<,be>?Me3hVPjE47$");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // '<,be>?Me3hVPjE47$ is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      try { 
        NumberUtils.createNumber(".UZ75o'4I|");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .UZ75o'4I| is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Byte byte0 = new Byte((byte)34);
      byte byte1 = NumberUtils.max((byte)34, (byte)40, (byte)34);
      assertEquals((byte)40, byte1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 9223372036854775807L;
      longArray0[1] = (-3321L);
      longArray0[2] = 507L;
      long long0 = NumberUtils.min(507L, (-3321L), 507L);
      assertEquals((-3321L), long0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("&+zh9DHcec2BpuJod-");
      assertFalse(boolean0);
      
      NumberUtils.toLong((String) null, (-3530L));
      // Undeclared exception!
      try { 
        NumberUtils.createDouble("&+zh9DHcec2BpuJod-");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-401.77F);
      NumberUtils.max(floatArray0);
      NumberUtils.max((-401.77F), (-401.77F), (-401.77F));
      NumberUtils.createNumber((String) null);
      boolean boolean0 = NumberUtils.isNumber("ns@%a';");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      short short0 = NumberUtils.max((short)22708, (short)209, (short)22708);
      assertEquals((short)22708, short0);
      
      byte byte0 = NumberUtils.max((byte) (-100), (byte) (-100), (byte)8);
      assertEquals((byte)8, byte0);
      
      float float0 = NumberUtils.toFloat("0x-", (float) (short)22708);
      assertEquals(22708.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      NumberUtils.createNumber((String) null);
      byte byte0 = NumberUtils.max((byte) (-100), (byte) (-100), (byte) (-100));
      assertEquals((byte) (-100), byte0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      short short0 = NumberUtils.max((short)22708, (short)209, (short)22708);
      assertEquals((short)22708, short0);
      
      byte byte0 = NumberUtils.max((byte) (-100), (byte) (-100), (byte)8);
      assertEquals((byte)8, byte0);
      
      long long0 = NumberUtils.toLong("0x-", 6L);
      assertEquals(6L, long0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      short short0 = NumberUtils.toShort("U[YT.Ocb?C=^9<*");
      assertEquals((short)0, short0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)444;
      short short1 = NumberUtils.max((short)444, (short)444, (short)1454);
      assertEquals((short)1454, short1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (int)numberUtils0.INTEGER_ONE;
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (int)numberUtils0.INTEGER_ZERO;
      longArray0[1] = (long) (byte)numberUtils0.BYTE_ONE;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1L, long0);
      
      boolean boolean0 = NumberUtils.isDigits("n7/'Z%RHmVK");
      assertFalse(boolean0);
      
      long long1 = NumberUtils.min(955L, 12347L, (long) numberUtils0.INTEGER_ZERO);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      NumberUtils.max((-66L), 1281L, (-5L));
      NumberUtils.isNumber("11def");
      boolean boolean0 = NumberUtils.isNumber("11def");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".+gOxt");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[20];
      intArray0[0] = (int) numberUtils0.INTEGER_ONE;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.toInt((String) null);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (int) (byte)86;
      intArray0[1] = (int) (byte)numberUtils0.BYTE_ZERO;
      intArray0[2] = (int) (byte)86;
      intArray0[3] = (int) (byte)numberUtils0.BYTE_ZERO;
      intArray0[4] = 43;
      intArray0[5] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[6] = (int) numberUtils0.INTEGER_MINUS_ONE;
      intArray0[7] = (int) numberUtils0.INTEGER_MINUS_ONE;
      intArray0[8] = (int) numberUtils0.INTEGER_ZERO;
      int int1 = NumberUtils.min(intArray0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      try { 
        NumberUtils.createNumber(" is not a valid number.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  is not a valid number. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)numberUtils0.BYTE_ONE;
      longArray0[1] = (long) (byte)numberUtils0.BYTE_MINUS_ONE;
      int int0 = NumberUtils.toInt((String) null);
      assertEquals(0, int0);
      
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (long)numberUtils0.LONG_ONE;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1.1E-200;
      doubleArray0[3] = (double) (short)numberUtils0.SHORT_MINUS_ONE;
      doubleArray0[4] = (double) (short)numberUtils0.SHORT_MINUS_ONE;
      doubleArray0[5] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      doubleArray0[6] = (double) (-1L);
      doubleArray0[7] = (double) 1L;
      doubleArray0[8] = (double) (short)numberUtils0.SHORT_ONE;
      double[] doubleArray1 = new double[9];
      double double0 = NumberUtils.max(doubleArray1);
      assertEquals(0.0, double0, 0.01);
      
      byte byte0 = NumberUtils.toByte((String) null, (byte) numberUtils0.BYTE_ONE);
      assertEquals((byte)1, byte0);
      
      double double1 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (float)numberUtils0.FLOAT_MINUS_ONE;
      doubleArray0[1] = (double) (byte)numberUtils0.BYTE_ZERO;
      NumberUtils.max(doubleArray0);
      long long0 = NumberUtils.min((long) numberUtils0.SHORT_ZERO, (long) numberUtils0.BYTE_ZERO, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[1] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) numberUtils0.BYTE_ONE;
      NumberUtils.max(byteArray0);
      NumberUtils.toInt("O[M#tV8))(vk<$Xr?\"");
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[1] = (int) (byte)numberUtils0.BYTE_ZERO;
      boolean boolean0 = NumberUtils.isNumber(":vYr>4-e\"3Gb!(`Y?");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)34;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)34, byte0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("&+zh9DHcec2BpuJod-");
      assertFalse(boolean0);
      
      byte byte0 = NumberUtils.min((byte) (-59), (byte) (-59), (byte) (-89));
      assertEquals((byte) (-89), byte0);
      
      float float0 = NumberUtils.toFloat("---", 6.8F);
      assertEquals(6.8F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (int)numberUtils0.INTEGER_ONE;
      floatArray0[1] = (float) (int)numberUtils0.INTEGER_ONE;
      floatArray0[2] = (float) (short)numberUtils0.SHORT_ZERO;
      floatArray0[3] = (float) (int)numberUtils0.INTEGER_ONE;
      boolean boolean0 = NumberUtils.isNumber("0x");
      assertFalse(boolean0);
      
      floatArray0[4] = (float) (short)numberUtils0.SHORT_MINUS_ONE;
      floatArray0[5] = (float) (short)numberUtils0.SHORT_ZERO;
      float float0 = NumberUtils.toFloat("0x");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      short short0 = NumberUtils.toShort("U[YT.Ocb?C=^9<*");
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)444;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      short short1 = NumberUtils.min(shortArray0);
      assertTrue(short1 == short0);
      assertEquals((short)0, short1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      short[] shortArray0 = new short[12];
      shortArray0[0] = (short)43;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      NumberUtils.isNumber("_3!=i}-");
      short short0 = NumberUtils.max((short) (-5), (short)6, (short)6);
      assertEquals((short)6, short0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xAlFPTF");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0XH'<.^");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-H'<.^\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0xQ3IM?$ n");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-Q3IM?$ n\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (short)numberUtils0.SHORT_ONE;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      try { 
        NumberUtils.createNumber("A blank string is not a valid number");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("11def");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)0, (byte) (-101), (byte) (-101));
      assertEquals((byte) (-101), byte0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)13;
      byte byte0 = NumberUtils.min((byte)13, (byte)13, (byte)13);
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      short[] shortArray0 = new short[15];
      shortArray0[0] = (short) (-100);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      try { 
        NumberUtils.createNumber("f");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // f is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructortestConstructortestConstructor_117()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[8];
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (int)numberUtils0.INTEGER_MINUS_ONE;
      doubleArray0[1] = (double) (short)numberUtils0.SHORT_ONE;
      doubleArray0[2] = (double) (float)numberUtils0.FLOAT_ZERO;
      doubleArray0[3] = (double) numberUtils0.DOUBLE_ONE;
      doubleArray0[4] = (double) (float)numberUtils0.FLOAT_MINUS_ONE;
      doubleArray0[5] = (double) (byte)numberUtils0.BYTE_ZERO;
      doubleArray0[6] = (double) (byte)numberUtils0.BYTE_ONE;
      NumberUtils.max(doubleArray0);
      floatArray0[0] = (float) (long)numberUtils0.LONG_ZERO;
      floatArray0[1] = (float) numberUtils0.FLOAT_ONE;
      floatArray0[2] = (float) (short)numberUtils0.SHORT_ZERO;
      floatArray0[3] = (float) (int)numberUtils0.INTEGER_ONE;
      floatArray0[4] = (-1.0F);
      floatArray0[5] = (float) (byte)numberUtils0.BYTE_ONE;
      floatArray0[6] = (float) numberUtils0.FLOAT_ONE;
      floatArray0[7] = (float) (byte)numberUtils0.BYTE_MINUS_ONE;
      NumberUtils.min(floatArray0);
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = (-1.2F);
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1.2F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (float)numberUtils0.FLOAT_MINUS_ONE;
      doubleArray0[1] = (double) (byte)numberUtils0.BYTE_ZERO;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = NumberUtils.min(doubleArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1.0), double1, 0.01);
      
      short short0 = NumberUtils.max((short)1839, (short)1839, (short)1839);
      assertEquals((short)1839, short0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_ZERO;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--~zc(LYq^Dk~D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("123.4E-D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)114;
      short short0 = NumberUtils.max((short)114, (short)114, (short)114);
      assertEquals((short)114, short0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (float)numberUtils0.FLOAT_ZERO;
      doubleArray0[1] = (double) (long)numberUtils0.LONG_ZERO;
      doubleArray0[2] = (double) (short)numberUtils0.SHORT_MINUS_ONE;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      doubleArray0[1] = (-1.0);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.toDouble((String) null, (double) numberUtils0.SHORT_MINUS_ONE);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_ZERO;
      NumberUtils.createBigInteger((String) null);
      intArray0[1] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[2] = (int) numberUtils0.INTEGER_ONE;
      intArray0[3] = 2325;
      intArray0[4] = (int) numberUtils0.INTEGER_ONE;
      NumberUtils.max(intArray0);
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.max(1L, (long) numberUtils0.INTEGER_MINUS_ONE, 721L);
      assertEquals(721L, long0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (byte)numberUtils0.BYTE_ONE;
      longArray0[1] = (long) (byte)numberUtils0.BYTE_MINUS_ONE;
      longArray0[2] = (long) numberUtils0.LONG_ZERO;
      longArray0[3] = (long) numberUtils0.LONG_ZERO;
      longArray0[4] = (long) numberUtils0.LONG_MINUS_ONE;
      longArray0[5] = (long) numberUtils0.LONG_MINUS_ONE;
      longArray0[6] = 1771L;
      NumberUtils.min(longArray0);
      short[] shortArray0 = new short[1];
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long[] longArray0 = new long[5];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.toInt((String) null);
      NumberUtils.isDigits("0x0");
      String string0 = "wGhz]+?Vafa:rf:";
      // Undeclared exception!
      try { 
        NumberUtils.createDouble("0xA blank string is not a valid number");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-157.73251809601);
      doubleArray0[1] = 68.95;
      double double0 = NumberUtils.min(68.95, (-157.73251809601), 68.95);
      assertEquals((-157.73251809601), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (-1837.8757490738);
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_148()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.min(1826963691, (int) numberUtils0.BYTE_MINUS_ONE, (int) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.toByte(" is not a valid number.");
      assertEquals((byte)0, byte0);
      
      int int0 = NumberUtils.min((int) numberUtils0.SHORT_MINUS_ONE, 228, 68);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_150()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.max(3167, 3167, 1596846761);
      assertEquals(1596846761, int0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_151()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float float0 = NumberUtils.toFloat("-0x 1111", (float) numberUtils0.SHORT_MINUS_ONE);
      assertEquals((-1.0F), float0, 0.01F);
      
      int int0 = NumberUtils.max((-2146972949), (int) numberUtils0.INTEGER_ZERO, (-1352));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-1541);
      int int0 = NumberUtils.max((-1541), (-1541), (-1541));
      assertEquals((-1541), int0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_153()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[1] = (int) (short)numberUtils0.SHORT_ZERO;
      intArray0[2] = (int) (byte)numberUtils0.BYTE_ZERO;
      intArray0[3] = (int) numberUtils0.INTEGER_ONE;
      intArray0[4] = (int) numberUtils0.INTEGER_ZERO;
      intArray0[5] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[6] = 100;
      intArray0[7] = (int) (byte)numberUtils0.BYTE_ZERO;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(100, int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[2];
      intArray0[1] = (int) (short)numberUtils0.SHORT_ONE;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = NumberUtils.toInt("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[4] = 1966.7F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1966.7F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float float0 = NumberUtils.toFloat("@3", (float) numberUtils0.FLOAT_ONE);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      try { 
        NumberUtils.createNumber("isNumber(String)/createNumber(String) 16 Neg failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // isNumber(String)/createNumber(String) 16 Neg failed is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      NumberUtils.createInteger((String) null);
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.min((short)76, (short) numberUtils0.BYTE_ZERO, (short) numberUtils0.SHORT_MINUS_ONE);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) numberUtils0.SHORT_ONE;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[2] = (short)11735;
      shortArray0[3] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[4] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)11735, short0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      short short0 = NumberUtils.min((short)70, (short)70, (short)70);
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)70;
      shortArray0[1] = (short)70;
      shortArray0[2] = (short)70;
      shortArray0[3] = (short)70;
      shortArray0[4] = (short)70;
      shortArray0[5] = (short)70;
      shortArray0[6] = (short)70;
      shortArray0[7] = (short)70;
      shortArray0[8] = (short)70;
      short short1 = NumberUtils.max(shortArray0);
      assertTrue(short1 == short0);
      assertEquals((short)70, short1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)108;
      short short0 = NumberUtils.min((short)108, (short)108, (short)108);
      assertEquals((short)108, short0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.min((int) numberUtils0.INTEGER_MINUS_ONE, (int) numberUtils0.BYTE_MINUS_ONE, (-2331));
      assertEquals((-2331), int0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[5] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[6] = (byte) (-64);
      byteArray0[7] = (byte) numberUtils0.BYTE_ONE;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-64), byte0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-126);
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-126), byte0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_174()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.max((double) numberUtils0.BYTE_ONE, (double) numberUtils0.FLOAT_ZERO, (double) numberUtils0.DOUBLE_MINUS_ONE);
      assertEquals(1.0, double0, 0.01);
      
      long long0 = NumberUtils.toLong(")9:Me~qcK#");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("~r![");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte byte0 = NumberUtils.toByte("_b/fxUt6yIyle", (byte) (-9));
      assertEquals((byte) (-9), byte0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_177()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      longArray0[1] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      longArray0[2] = (long) numberUtils0.LONG_ONE;
      longArray0[3] = (-1427L);
      longArray0[4] = (long) (short)numberUtils0.SHORT_ZERO;
      longArray0[5] = (long) (int)numberUtils0.INTEGER_ZERO;
      longArray0[6] = (long) (short)numberUtils0.SHORT_ONE;
      longArray0[7] = (long) numberUtils0.LONG_MINUS_ONE;
      long long0 = NumberUtils.max(longArray0);
      long long1 = NumberUtils.toLong(".ZI0`HB4'TH&k&< E", (-1L));
      assertFalse(long1 == long0);
      assertEquals((-1L), long1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 12344L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(12344L, long0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.toLong("4U+!?p!.X2?r~>FP.=4", (long) numberUtils0.INTEGER_ONE);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      long[] longArray0 = new long[6];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (int)numberUtils0.INTEGER_MINUS_ONE;
      floatArray0[1] = (float) (short)numberUtils0.SHORT_ZERO;
      floatArray0[2] = (float) numberUtils0.FLOAT_ZERO;
      floatArray0[3] = 1966.7F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1966.7F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (int)numberUtils0.INTEGER_ONE;
      floatArray0[1] = (float) (int)numberUtils0.INTEGER_ONE;
      floatArray0[2] = (float) (short)numberUtils0.SHORT_ZERO;
      floatArray0[3] = (float) (int)numberUtils0.INTEGER_ONE;
      boolean boolean0 = NumberUtils.isNumber("0x");
      assertFalse(boolean0);
      
      floatArray0[4] = (float) (short)numberUtils0.SHORT_MINUS_ONE;
      floatArray0[5] = (float) (short)numberUtils0.SHORT_ZERO;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x11def");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      short short0 = NumberUtils.toShort("o[YDT.Ocb?C=^9<*");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      short short0 = NumberUtils.toShort("U[YT.Ocb?C=^9<*");
      assertEquals((short)0, short0);
      
      float float0 = NumberUtils.min((float) (short)0, (float) (short)0, (float) (short)0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("8(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0X");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".UZ75o'4I|");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      try { 
        NumberUtils.createNumber("=\"d[c}E^UFwo3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      try { 
        NumberUtils.createNumber("11z");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 11z is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      try { 
        NumberUtils.createNumber("java.vm.specification.vendor");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // java.vm.specification.vendor is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      try { 
        NumberUtils.createNumber("XwIQ(DjL{> 7");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"XwI\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0xjava.vm.specification.vendor");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.vm.specification.vendor\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      String string0 = "o";
      NumberUtils.toDouble("o");
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_201()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.toDouble("11z", (-2012.81076));
      assertEquals((-2012.81076), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }
}
