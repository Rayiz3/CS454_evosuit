/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 13:37:53 GMT 2023
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.Quote;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.testcarver.testcase.EvoSuiteXStream;
import org.h2.tools.SimpleResultSet;
import org.h2.value.ValueLong;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVPrinter_ESTest extends CSVPrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('5');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat1);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('.');
      String string0 = "NewValue";
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("A");
      Object object0 = new Object();
      CharBuffer charBuffer0 = CharBuffer.allocate(32);
      Quote quote0 = Quote.ALL;
      CSVFormat cSVFormat3 = cSVFormat2.withQuotePolicy(quote0);
      CSVPrinter cSVPrinter1 = new CSVPrinter(charBuffer0, cSVFormat3);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) quote0;
      objectArray0[1] = (Object) "<string-builder></string-builder>";
      objectArray0[2] = (Object) "A";
      objectArray0[3] = (Object) cSVPrinter1;
      objectArray0[4] = (Object) cSVFormat1;
      objectArray0[5] = (Object) charBuffer0;
      objectArray0[6] = (Object) cSVFormat0;
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecords(objectArray0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('5');
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat1);
      cSVFormat1.withEscape('.');
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("A");
      arrayList0.add("MERG'E INTO ");
      arrayList0.add("MERG'E INTO ");
      arrayList0.add("Chunk {0} not found");
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter0.getOut();
      CSVPrinter cSVPrinter1 = cSVFormat0.print(stringBuilder0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "NewValue";
      objectArray0[1] = (Object) "<string-builder></string-builder>";
      objectArray0[2] = (Object) cSVPrinter1;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "NewValue";
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      StringBuffer stringBuffer0 = new StringBuffer();
      CSVPrinter cSVPrinter1 = new CSVPrinter(stringBuffer0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("<string-builder></string-builder>");
      arrayList0.add("autoCommitDelay");
      arrayList0.add("autoCommitDelay");
      arrayList0.add("<string-builder></string-builder>");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("<string-builder></string-builder>");
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      StringBuilder stringBuilder1 = (StringBuilder)cSVPrinter0.getOut();
      cSVPrinter0.close();
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat2 = CSVFormat.newFormat('8');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) stringBuffer0;
      objectArray0[1] = (Object) cSVPrinter1;
      objectArray0[2] = (Object) cSVPrinter0;
      cSVFormat2.format(objectArray0);
      cSVPrinter1.printRecord((Iterable<?>) arrayList0);
      cSVPrinter1.getOut();
      cSVPrinter1.close();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      cSVPrinter1.printRecords((ResultSet) simpleResultSet0);
      cSVPrinter1.printRecords((Iterable<?>) arrayList1);
      Object object0 = new Object();
      CSVPrinter cSVPrinter2 = cSVFormat1.print(stringBuilder1);
      cSVPrinter2.printRecords(objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("A");
      arrayList0.add("B");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("N>6XtI%w#0QwvAOusE ");
      arrayList0.retainAll(arrayList1);
      arrayList1.add("A");
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "<string-builder></string-builder>";
      objectArray0[2] = (Object) cSVFormat0;
      objectArray0[3] = (Object) cSVFormat0;
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.print("A");
      ValueLong valueLong0 = ValueLong.get((-502L));
      SimpleResultSet simpleResultSet0 = (SimpleResultSet)valueLong0.getResultSet();
      cSVPrinter0.printRecords((ResultSet) simpleResultSet0);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      assertFalse(arrayList0.contains("<string-builder></string-builder>"));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat2.withEscape('Q');
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("<string-builder></string-builder>");
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      arrayList0.add((String) null);
      arrayList0.add("");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVPrinter0.printRecord((Iterable<?>) arrayList1);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      arrayList1.add((String) null);
      cSVPrinter0.printRecord((Iterable<?>) arrayList1);
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      assertEquals(3, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("A");
      arrayList0.add("B");
      arrayList0.add("N>6XtI%w#0QwvAOusE ");
      arrayList0.retainAll(arrayList0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "A";
      objectArray0[1] = (Object) "N>6XtI%w#0QwvAOusE ";
      objectArray0[2] = (Object) arrayList0;
      objectArray0[3] = (Object) "B";
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      StringBuilder stringBuilder1 = new StringBuilder();
      StringBuilder stringBuilder2 = new StringBuilder("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(120);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) stringBuilder0);
      CSVPrinter cSVPrinter0 = new CSVPrinter(charArrayWriter1, cSVFormat1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      CSVFormat cSVFormat3 = cSVFormat0.withRecordSeparator("@4&g)?*#");
      CSVPrinter cSVPrinter1 = new CSVPrinter(charArrayWriter0, cSVFormat3);
      cSVPrinter1.getOut();
      cSVPrinter0.close();
      // Undeclared exception!
      try { 
        cSVPrinter1.printRecord((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVPrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
      cSVFormat2.withEscape('Q');
      CSVFormat cSVFormat3 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("<string-builder></string-builder>");
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      arrayList0.add((String) null);
      arrayList0.add("");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("<string-builder></string-builder>");
      cSVPrinter0.printRecord((Iterable<?>) arrayList1);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      cSVPrinter0.printRecords((ResultSet) simpleResultSet0);
      cSVPrinter0.printComment("");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      cSVFormat1.print(stringBuilder1);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[3];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.flush();
      assertEquals("\n\n\n\n", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      CSVFormat cSVFormat1 = CSVFormat.MYSQL;
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      Appendable appendable0 = cSVPrinter0.getOut();
      cSVPrinter0.close();
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) appendable0;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Boolean boolean0 = new Boolean("<string-builder></string-builder>");
      arrayList0.add("<string-builder></string-builder>");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      cSVPrinter0.flush();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) cSVFormat0;
      objectArray0[1] = (Object) stringBuilder0;
      cSVPrinter0.printRecords(objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      cSVFormat0.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat1.withDelimiter('\t');
      cSVFormat1.withDelimiter('*');
      CSVFormat cSVFormat2 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat2);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("<string-builder></string-builder>");
      arrayList0.add("B");
      arrayList0.add("<string-builder></string-builder>");
      arrayList0.add((String) null);
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
      cSVPrinter0.print((Object) null);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("N>6XtI%w#0QwvAOusE ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter0.close();
      cSVPrinter0.printComment("B");
      cSVPrinter0.close();
      cSVPrinter0.printRecords((Iterable<?>) arrayList0);
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("");
      arrayList0.add("org.apache.commons.csv.CSVPrinter$1");
      ArrayList<String> arrayList1 = new ArrayList<String>(arrayList0);
      arrayList1.add("");
      arrayList0.retainAll(arrayList0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.csv.CSVPrinter");
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      cSVPrinter0.printRecords((ResultSet) simpleResultSet0);
      cSVPrinter0.printComment("%,&RB^|");
      cSVPrinter0.printComment(";Z2y");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Boolean boolean0 = new Boolean("<string-builder></string-builder>");
      CSVPrinter cSVPrinter0 = cSVFormat0.print(stringBuilder0);
      cSVPrinter0.close();
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[0];
      cSVPrinter0.printRecords(objectArray0);
      cSVPrinter0.print(object0);
      assertFalse(object0.equals((Object)object1));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      Boolean boolean0 = new Boolean("<string-builder></string-builder>");
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVPrinter0.close();
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("");
      cSVFormat0.withRecordSeparator("B");
      cSVPrinter0.printRecord((Iterable<?>) arrayList1);
      cSVPrinter0.getOut();
      cSVPrinter0.close();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Boolean boolean0 = new Boolean("<string-builder></string-builder>");
      arrayList0.add("B");
      FileSystemHandling.shouldAllThrowIOExceptions();
      cSVPrinter0.printRecord((Iterable<?>) arrayList0);
      cSVPrinter0.close();
      cSVPrinter0.flush();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringBuilder stringBuilder0 = (StringBuilder)EvoSuiteXStream.fromString("<string-builder></string-builder>");
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuilder0, cSVFormat0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      Object[] objectArray0 = new Object[4];
      objectArray0[3] = (Object) timeUnit0;
      cSVPrinter0.printRecord(objectArray0);
      assertEquals(4, objectArray0.length);
  }
}
