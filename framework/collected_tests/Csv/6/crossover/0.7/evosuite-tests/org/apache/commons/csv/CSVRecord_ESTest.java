/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 11:59:21 GMT 2023
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thoughtworks.xstream.security.ForbiddenClassException;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.csv.CSVRecord;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.testcarver.testcase.EvoSuiteXStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVRecord_ESTest extends CSVRecord_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[9];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(23506);
      hashMap0.put("!Dp$", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "!Dp$", 500L);
      boolean boolean0 = cSVRecord0.isSet("!Dp$");
      assertFalse(boolean0);
      assertEquals(9, cSVRecord0.size());
      assertEquals(500L, cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[7];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(7);
      hashMap0.replace("!I\"bK", integer0, integer0);
      Integer integer1 = new Integer(3);
      Integer integer2 = new Integer(218);
      hashMap0.put(" -i^X", integer2);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, " -i^X", 400L);
      cSVRecord0.isConsistent();
      cSVRecord0.isSet(" -i^X");
      cSVRecord0.isConsistent();
      long long0 = 0L;
      CSVRecord cSVRecord1 = new CSVRecord(stringArray0, hashMap0, " -i^X", 400L);
      // Undeclared exception!
      try { 
        cSVRecord0.get("XkAQYL$8J,^97QuY ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mapping for XkAQYL$8J,^97QuY  not found, expected one of [ -i^X]
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[4];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "2", (-1474L));
      boolean boolean0 = cSVRecord0.isSet("2");
      assertFalse(boolean0);
      assertEquals((-1474L), cSVRecord0.getRecordNumber());
      assertEquals("[null, null, null, null]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[10];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "L5#Ujk", (-753L));
      boolean boolean0 = cSVRecord0.isConsistent();
      assertTrue(boolean0);
      assertEquals((-753L), cSVRecord0.getRecordNumber());
      assertEquals("[null, null, null, null, null, null, null, null, null, null]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = "h59^~py_^bGp@8qM)";
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, (Map<String, Integer>) null, "h59^~py_^bGp@8qM)", (-15L));
      // Undeclared exception!
      try { 
        cSVRecord0.get("Index for header '%s' is %d but CSVRecord only has %d values!");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No header mapping was specified, the record values can't be accessed by name
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[8];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-569));
      hashMap0.put("!Dp$", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "!Dp$", 500L);
      // Undeclared exception!
      try { 
        cSVRecord0.get("!Dp$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index for header '!Dp$' is -569 but CSVRecord only has 8 values!
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[10];
      hashMap0.put((String) null, (Integer) null);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[4], (-15L));
      // Undeclared exception!
      try { 
        cSVRecord0.isSet(stringArray0[4]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[2];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(1146);
      hashMap0.put("INSTEAD", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "INSTEAD", 1146);
      boolean boolean0 = cSVRecord0.isMapped("INSTEAD");
      assertEquals(1146L, cSVRecord0.getRecordNumber());
      assertTrue(boolean0);
      assertEquals("[null, null]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[9];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "", (-1573));
      Integer integer0 = new Integer((-1573));
      hashMap0.put("", integer0);
      boolean boolean0 = cSVRecord0.isConsistent();
      boolean boolean1 = cSVRecord0.isSet("");
      assertFalse(boolean1 == boolean0);
      assertEquals((-1573L), cSVRecord0.getRecordNumber());
      assertEquals(9, cSVRecord0.size());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "I1`6~1apDwD~-";
      stringArray0[1] = "I1`6~1apDwD~-";
      stringArray0[2] = "HI1\"JJ7BW{`";
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "HI1\"JJ7BW{`", 400L);
      cSVRecord0.isMapped("I1`6~1apDwD~-");
      boolean boolean0 = cSVRecord0.isConsistent();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      cSVRecord0.putIn(hashMap1);
      cSVRecord0.isConsistent();
      cSVRecord0.isConsistent();
      boolean boolean1 = cSVRecord0.isSet("(f'Op4z7Ym\"bo");
      assertTrue(boolean1 == boolean0);
      
      long long0 = cSVRecord0.getRecordNumber();
      assertEquals(400L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Object object1 = new Object();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "TZZIyY=6]N|";
      stringArray0[1] = "TZZIyY=6]N|";
      Integer integer0 = new Integer(552);
      hashMap0.replace("TZZIyY=6]N|", integer0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "TZZIyY=6]N|", 1L);
      boolean boolean0 = cSVRecord0.isSet("noF4");
      assertFalse(boolean0);
      
      cSVRecord0.getComment();
      assertEquals(1L, cSVRecord0.getRecordNumber());
      assertFalse(cSVRecord0.isConsistent());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "TZZIyY=6]N|";
      stringArray0[1] = "TZZIyY=6]N|";
      stringArray0[2] = "F]zyhh,:\u0007|)Fy";
      stringArray0[3] = "TZZIyY=6]N|";
      stringArray0[4] = "TZZIyY=6]N|";
      stringArray0[5] = "TZZIyY=6]N|";
      stringArray0[6] = "HI1\"JJ7BW{`";
      stringArray0[7] = "<org.apache.commons.csv.CSVRecord>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[8] = "TZZIyY=6]N|";
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "I1`6~1apDwD~-", 0L);
      cSVRecord0.isMapped("HI1\"JJ7BW{`");
      cSVRecord0.isConsistent();
      cSVRecord0.isConsistent();
      cSVRecord0.isConsistent();
      // Undeclared exception!
      try { 
        cSVRecord0.get(1066);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1066
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "TZZIyY=6]N|";
      stringArray0[1] = "TZZIyY=6]N|";
      stringArray0[2] = "F]zyhh,:\u0007|)Fy";
      stringArray0[3] = "TZZIyY=6]N|";
      stringArray0[4] = "TZZIyY=6]N|";
      stringArray0[5] = "TZZIyY=6]N|";
      stringArray0[6] = "HI1\"JJ7BW{`";
      stringArray0[7] = "<org.apache.commons.csv.CSVRecord>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[8] = "TZZIyY=6]N|";
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "I1`6~1apDwD~-", 0L);
      cSVRecord0.isMapped("HI1\"JJ7BW{`");
      cSVRecord0.isConsistent();
      cSVRecord0.isConsistent();
      boolean boolean0 = cSVRecord0.isConsistent();
      assertFalse(boolean0);
      
      cSVRecord0.isMapped("HI1\"JJ7BW{`");
      String string0 = cSVRecord0.toString();
      assertEquals("[TZZIyY=6]N|, TZZIyY=6]N|, F]zyhh,:\u0007|)Fy, TZZIyY=6]N|, TZZIyY=6]N|, TZZIyY=6]N|, HI1\"JJ7BW{`, <org.apache.commons.csv.CSVRecord>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>, TZZIyY=6]N|]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[6];
      hashMap0.putIfAbsent("o", (Integer) null);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[4], 19L);
      // Undeclared exception!
      try { 
        cSVRecord0.toMap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[9];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[4], (-1L));
      cSVRecord0.spliterator();
      boolean boolean0 = cSVRecord0.isSet(stringArray0[4]);
      assertEquals((-1L), cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
      assertFalse(cSVRecord0.isConsistent());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord((String[]) null, hashMap0, "J{=2", 557L);
      assertEquals(557L, cSVRecord0.getRecordNumber());
      assertEquals("[]", cSVRecord0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "y}V]", (-10L));
      boolean boolean0 = cSVRecord0.isConsistent();
      assertTrue(boolean0);
      assertEquals((-10L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[10];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[4], (-15L));
      cSVRecord0.toMap();
      boolean boolean0 = cSVRecord0.isSet(stringArray0[4]);
      assertEquals((-15L), cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
      assertEquals(10, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[7];
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "2", 100L);
      // Undeclared exception!
      try { 
        cSVRecord0.get("2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Mapping for 2 not found, expected one of []
         //
         verifyException("org.apache.commons.csv.CSVRecord", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[18];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[4], 826L);
      cSVRecord0.putIn((Map<String, Integer>) hashMap0);
      assertEquals(826L, cSVRecord0.getRecordNumber());
      assertEquals(18, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void testIsConsistenttestIsConsistenttestIsMapped_20()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "<\")gtrRK3]*O9.TJG";
      stringArray0[1] = "<\")gtrRK3]*O9.TJG";
      stringArray0[2] = "<\")gtrRK3]*O9.TJG";
      stringArray0[3] = "<\")gtrRK3]*O9.TJG";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(1967);
      hashMap0.put("<\")gtrRK3]*O9.TJG", integer0);
      Integer integer1 = new Integer(0);
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "<\")gtrRK3]*O9.TJG", 0);
      cSVRecord0.size();
      hashMap0.put("A", integer1);
      CSVRecord cSVRecord1 = new CSVRecord(stringArray0, hashMap0, ">(u}M{y,>", 400L);
      // Undeclared exception!
      try { 
        ((CSVRecord) object0).isConsistent();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "<\")gtrRK3]*O9.TJG";
      stringArray0[1] = "<\")gtrRK3]*O9.TJG";
      stringArray0[2] = "<\")gtrRK3]*O9.TJG";
      stringArray0[3] = "<\")gtrRK3]*O9.TJG";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, ">(u}M{y,>", 400L);
      cSVRecord0.isMapped("<\")gtrRK3]*O9.TJG");
      cSVRecord0.isConsistent();
      // Undeclared exception!
      try { 
        EvoSuiteXStream.fromString("<org.apache.commons.csv.CSVRecord>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>");
        fail("Expecting exception: ForbiddenClassException");
      
      } catch(ForbiddenClassException e) {
         //
         // org.apache.commons.csv.CSVRecord
         //
         verifyException("com.thoughtworks.xstream.security.NoTypePermission", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[14];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[4], (-4L));
      boolean boolean0 = cSVRecord0.isConsistent();
      assertFalse(boolean0);
      assertEquals((-4L), cSVRecord0.getRecordNumber());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "first";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "<org.apache.commons.csv.CSVRecord>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[1] = "first";
      stringArray0[2] = "<org.apache.commons.csv.CSVRecord>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>";
      stringArray0[3] = "first";
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, "<org.apache.commons.csv.CSVRecord>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>", 0L);
      cSVRecord0.values();
      // Undeclared exception!
      try { 
        EvoSuiteXStream.fromString("<org.apache.commons.csv.CSVRecord>\n  <mapping>\n    <entry>\n      <string>third</string>\n      <int>2</int>\n    </entry>\n    <entry>\n      <string>first</string>\n      <int>0</int>\n    </entry>\n    <entry>\n      <string>second</string>\n      <int>1</int>\n    </entry>\n  </mapping>\n  <recordNumber>0</recordNumber>\n  <values>\n    <string>A</string>\n    <string>B</string>\n    <string>C</string>\n  </values>\n</org.apache.commons.csv.CSVRecord>");
        fail("Expecting exception: ForbiddenClassException");
      
      } catch(ForbiddenClassException e) {
         //
         // org.apache.commons.csv.CSVRecord
         //
         verifyException("com.thoughtworks.xstream.security.NoTypePermission", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[11];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[4], 0L);
      assertEquals(11, cSVRecord0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String[] stringArray0 = new String[9];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, stringArray0[4], (-1L));
      boolean boolean0 = cSVRecord0.isSet(stringArray0[4]);
      assertEquals((-1L), cSVRecord0.getRecordNumber());
      assertFalse(boolean0);
      assertEquals("[null, null, null, null, null, null, null, null, null]", cSVRecord0.toString());
  }
}
