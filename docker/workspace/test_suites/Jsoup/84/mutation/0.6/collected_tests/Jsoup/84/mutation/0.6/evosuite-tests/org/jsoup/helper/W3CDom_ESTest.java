/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 18:45:03 GMT 2023
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl;
import javax.xml.parsers.DocumentBuilderFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.helper.W3CDom;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class W3CDom_ESTest extends W3CDom_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      Document document0 = Parser.parseBodyFragment("vxknssty", "vxknssty");
      Element element0 = document0.tagName("vxknssty");
      Document document1 = (Document)element0.attr("{>.J1@", true);
      document0.prependChild(document1);
      // Undeclared exception!
      w3CDom0.fromJsoup(document1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      Document document0 = Parser.parseBodyFragmentRelaxed("xmlns", "xmlns");
      Element element0 = document0.attr("xmlns", true);
      document0.prependChild(element0);
      // Undeclared exception!
      try { 
        w3CDom0.fromJsoup(document0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      Document document0 = Parser.parseBodyFragmentRelaxed("xmlns:cotns", "xmlns:cotns");
      Document document1 = (Document)document0.attr("xmlns:cotns", true);
      document1.prependChild(document0);
      // Undeclared exception!
      try { 
        w3CDom0.fromJsoup(document1);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      Document document0 = Parser.parse("xmlns:style", "xmlns:style");
      org.w3c.dom.Document document1 = w3CDom0.fromJsoup(document0);
      w3CDom0.asString(document1);
      Document document2 = Parser.parse("<html>\n<head>\n<META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n</head>\n<body>xmlns:style</body>\n</html>\n", "xmlns:style");
      org.w3c.dom.Document document3 = w3CDom0.fromJsoup(document2);
      assertNotSame(document3, document1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      Document document0 = Parser.parseBodyFragment("vxknssty", "vxknssty");
      org.w3c.dom.Document document1 = w3CDom0.fromJsoup(document0);
      DocumentBuilderFactoryImpl documentBuilderFactoryImpl0 = (DocumentBuilderFactoryImpl)w3CDom0.factory;
      w3CDom0.factory = (DocumentBuilderFactory) documentBuilderFactoryImpl0;
      Document document2 = Parser.parseBodyFragment("<html><head><title>W3c</title></head><body><p class='one' id=12>Text</p><!-- comment --><invalid>What<script>alert('!')", "<html><head><title>W3c</title></head><body><p class='one' id=12>Text</p><!-- comment --><invalid>What<script>alert('!')");
      org.w3c.dom.Document document3 = w3CDom0.fromJsoup(document2);
      assertNotSame(document3, document1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      Document document0 = Document.createShell("n:");
      Document document1 = (Document)document0.tagName("n:");
      document0.prependChild(document1);
      // Undeclared exception!
      try { 
        w3CDom0.fromJsoup(document1);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      Document document0 = Parser.parseBodyFragmentRelaxed("/Hcn-)I_>/wbJ", "/Hcn-)I_>/wbJ");
      org.w3c.dom.Document document1 = w3CDom0.fromJsoup(document0);
      W3CDom.W3CBuilder w3CDom_W3CBuilder0 = new W3CDom.W3CBuilder(document1);
      w3CDom_W3CBuilder0.head((Node) null, (-1844151889));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      Document document0 = Parser.parse("n8uwqKC#'wF=}#Qj?9", "n8uwqKC#'wF=}#Qj?9");
      org.w3c.dom.Document document1 = w3CDom0.fromJsoup(document0);
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      String string0 = w3CDom0.asString((org.w3c.dom.Document) null);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      W3CDom.W3CBuilder w3CDom_W3CBuilder0 = new W3CDom.W3CBuilder((org.w3c.dom.Document) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      org.w3c.dom.Document document1 = w3CDom0.fromJsoup(document0);
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      Document document0 = Document.createShell("C");
      w3CDom0.fromJsoup(document0);
  }
}
