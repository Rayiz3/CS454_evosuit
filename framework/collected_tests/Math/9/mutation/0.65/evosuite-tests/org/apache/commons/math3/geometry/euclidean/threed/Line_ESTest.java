/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 22:14:03 GMT 2023
 */

package org.apache.commons.math3.geometry.euclidean.threed;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.geometry.Vector;
import org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D;
import org.apache.commons.math3.geometry.euclidean.oned.Vector1D;
import org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Line_ESTest extends Line_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1106.79210802029, 1106.79210802029, (-1.0));
      Vector3D vector3D1 = new Vector3D((-1.0), vector3D0, 1.0, vector3D0, (-1.0), vector3D0, 1106.79210802029, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      vector3D0.getSpace();
      Line line1 = new Line(line0);
      Vector3D vector3D2 = line0.intersection(line1);
      vector3D1.subtract((Vector<Euclidean3D>) vector3D2);
      Vector3D vector3D3 = new Vector3D((-1.0), vector3D0, 1106.79210802029, vector3D2, 1.0, vector3D1);
      Vector3D vector3D4 = line1.closestPoint(line0);
      line0.reset(vector3D1, vector3D3);
      line0.isSimilarTo(line1);
      Line line2 = new Line(line0);
      Vector3D vector3D5 = Vector3D.NEGATIVE_INFINITY;
      line0.revert();
      line0.reset(vector3D0, vector3D3);
      line1.toSubSpace(vector3D4);
      try { 
        line0.reset(vector3D2, vector3D2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(vector3D1, vector3D0);
      boolean boolean0 = line0.isSimilarTo(line1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1106.79210802029, 4.440892098500626E-16, (-1.0));
      Vector3D vector3D1 = new Vector3D((-5.8), 1106.79210802029, 1.0);
      Line line0 = new Line(vector3D1, vector3D0);
      vector3D0.getSpace();
      Line line1 = new Line(line0);
      boolean boolean0 = line1.isSimilarTo(line0);
      assertTrue(boolean0);
      
      Vector3D vector3D2 = line1.intersection(line0);
      Vector3D vector3D3 = new Vector3D(1106.79210802029, vector3D0);
      Line line2 = new Line(line0);
      Line line3 = new Line(line2);
      line0.reset(vector3D2, vector3D3);
      Vector3D vector3D4 = line1.getOrigin();
      Vector3D vector3D5 = Vector3D.crossProduct(vector3D2, vector3D4);
      line0.reset(vector3D5, vector3D0);
      assertEquals(0.7880114949710733, vector3D4.getAlpha(), 0.01);
      assertEquals(550.5036524303075, vector3D2.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(598.2794969, 1.0, 1.0);
      Vector3D vector3D1 = new Vector3D(1.5, 1.0, 1.0);
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(vector3D0, vector3D1);
      line1.toSubSpace(vector3D0);
      line1.toSubSpace(vector3D1);
      Vector3D vector3D2 = new Vector3D(2.0, 0.0, 0.0);
      Vector3D vector3D3 = new Vector3D(1.5, 0.5, 0.5);
      Line line2 = new Line(vector3D2, vector3D3);
      Line line3 = new Line(vector3D2, vector3D3);
      line3.toSubSpace(vector3D2);
      Vector1D vector1D0 = line3.toSubSpace(vector3D3);
      assertEquals((-0.2886751345948128), vector1D0.getX(), 0.01);
      
      Vector3D vector3D4 = line0.intersection(line2);
      assertNotNull(vector3D4);
      
      line0.toSubSpace(vector3D4);
      line2.toSubSpace(vector3D4);
      Vector3D vector3D5 = line2.closestPoint(line3);
      line2.wholeLine();
      line0.intersection(line2);
      line2.wholeLine();
      boolean boolean0 = line2.isSimilarTo(line3);
      assertTrue(boolean0);
      
      line3.reset(vector3D5, vector3D0);
      assertEquals(2.666666666666667, vector3D5.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 1.0, 1.0);
      Vector3D vector3D1 = new Vector3D((-684.7996534871703), 1525.4483409252036, 1.0);
      Vector3D vector3D2 = Vector3D.POSITIVE_INFINITY;
      Line line0 = new Line(vector3D1, vector3D2);
      Line line1 = new Line(vector3D2, vector3D0);
      line1.toSubSpace(vector3D2);
      line0.toSubSpace(vector3D0);
      Vector3D vector3D3 = new Vector3D(2.0, (-1218.51260931947), 0.0);
      Vector3D vector3D4 = new Vector3D((-1218.51260931947), 601.88, 1.0);
      Line line2 = new Line(vector3D0, vector3D1);
      Line line3 = new Line(vector3D1, vector3D3);
      line1.toSubSpace(vector3D3);
      Line line4 = new Line(line0);
      line0.toSubSpace(vector3D2);
      line2.intersection(line1);
      line0.toSubSpace(vector3D0);
      line2.toSubSpace(vector3D3);
      line2.intersection(line0);
      line1.toSubSpace(vector3D4);
      Line line5 = new Line(line4);
      Vector1D vector1D0 = line0.toSubSpace(vector3D0);
      assertEquals(Double.NaN, vector1D0.getNorm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      double double0 = line0.distance(line0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 1.0, 1.0);
      Vector3D vector3D1 = new Vector3D(1.5, 1.0, 1.0);
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(vector3D0, vector3D1);
      line1.toSubSpace(vector3D0);
      line1.toSubSpace(vector3D1);
      Vector3D vector3D2 = new Vector3D(2.0, 0.0, 0.0);
      Vector3D vector3D3 = new Vector3D(2.0, 0.5, 0.5);
      Line line2 = new Line(vector3D2, vector3D3);
      Line line3 = new Line(vector3D2, vector3D3);
      line3.toSubSpace(vector3D2);
      line3.toSubSpace(vector3D3);
      Vector3D vector3D4 = line0.intersection(line2);
      assertNotNull(vector3D4);
      
      Vector1D vector1D0 = line0.toSubSpace(vector3D4);
      assertEquals(2.0, vector1D0.getX(), 0.01);
      assertEquals(4.0, vector3D4.getNorm1(), 0.01);
      
      line3.toSubSpace(vector3D2);
      Vector3D vector3D5 = line1.intersection(line0);
      line2.toSubSpace(vector3D2);
      line3.toSubSpace(vector3D3);
      line1.getDirection();
      assertFalse(vector3D0.equals((Object)vector3D5));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      // Undeclared exception!
      try { 
        line0.toSpace((Vector<Euclidean1D>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      line0.pointAt(2.0);
      double double0 = line0.distance(line0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = Vector3D.MINUS_I;
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(line0);
      double double0 = line1.distance(line0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      boolean boolean0 = line0.isSimilarTo(line0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      line0.wholeLine();
      double double0 = line0.distance(line0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Line line0 = null;
      try {
        line0 = new Line(vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 1.0, 1.0);
      Vector3D vector3D1 = new Vector3D(1.5, 1.0, 1.0);
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(vector3D0, vector3D1);
      line1.toSubSpace(vector3D0);
      line1.toSubSpace(vector3D1);
      Vector3D vector3D2 = new Vector3D(2.0, 0.0, 0.0);
      Vector3D vector3D3 = new Vector3D(3.141592653489793, 2.0, 0.9999999999999999);
      Line line2 = new Line(vector3D1, vector3D3);
      Line line3 = new Line(vector3D0, vector3D2);
      line2.toSubSpace(vector3D2);
      line1.toSubSpace(vector3D3);
      line0.intersection(line1);
      line0.toSubSpace(vector3D0);
      line2.toSubSpace(vector3D0);
      Line line4 = line3.revert();
      Vector3D vector3D4 = line3.intersection(line1);
      assertNotNull(vector3D4);
      
      line2.toSubSpace(vector3D4);
      assertNotSame(line3, line4);
      
      Vector1D vector1D0 = line0.toSubSpace(vector3D1);
      assertEquals(1.5, vector1D0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Line line1 = line0.revert();
      boolean boolean0 = line0.isSimilarTo(line0);
      assertFalse(boolean0);
      assertNotSame(line0, line1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Line line1 = new Line(vector3D0, vector3D0);
      line0.intersection(line1);
      boolean boolean0 = line0.contains(vector3D0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Line line0 = null;
      Line line1 = null;
      try {
        line1 = new Line((Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.geometry.euclidean.threed.Line", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_K;
      Vector3D vector3D1 = Vector3D.ZERO;
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(line0);
      Vector3D vector3D2 = line0.closestPoint(line1);
      assertEquals(0.0, vector3D2.getNormSq(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D vector3D0 = new Vector3D(1.0, 1.0, 1.0);
      Vector3D vector3D1 = new Vector3D(1.5, 1.0, 1.0);
      Line line0 = new Line(vector3D0, vector3D1);
      Line line1 = new Line(vector3D0, vector3D1);
      line1.toSubSpace(vector3D0);
      Vector1D vector1D0 = line1.toSubSpace(vector3D1);
      assertEquals(1.5, vector1D0.getX(), 0.01);
      
      Vector3D vector3D2 = new Vector3D(2.0, 0.0, 1.0);
      Vector3D vector3D3 = new Vector3D(2.0, 0.5, 0.5);
      Line line2 = new Line(vector3D2, vector3D3);
      Vector1D vector1D1 = line2.toSubSpace(vector3D2);
      Vector3D vector3D4 = line0.intersection(line0);
      assertNotNull(vector3D4);
      
      Vector3D.crossProduct(vector3D3, vector3D2);
      line0.toSubSpace(vector3D4);
      line1.toSubSpace(vector3D4);
      Vector3D vector3D5 = line0.intersection(line0);
      line0.toSubSpace(vector3D5);
      Vector1D vector1D2 = line0.toSubSpace(vector3D5);
      assertSame(vector3D5, vector3D4);
      assertFalse(vector1D2.equals((Object)vector1D1));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      vector3D0.getSpace();
      Vector3D vector3D1 = new Vector3D(0.5773502691896257, vector3D0);
      Line line0 = new Line(vector3D1, vector3D0);
      line0.wholeLine();
      Line line1 = new Line(line0);
      Vector3D vector3D2 = line1.intersection(line0);
      assertNotNull(vector3D2);
      
      Vector3D vector3D3 = line0.closestPoint(line0);
      assertSame(vector3D3, vector3D2);
      assertEquals(5.793758576800781E-17, vector3D3.getNormInf(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      line0.toSubSpace(vector3D0);
      double double0 = line0.distance(line0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      Line line0 = new Line(vector3D0, vector3D0);
      boolean boolean0 = line0.contains(vector3D0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      Vector3D vector3D1 = Vector3D.MINUS_J;
      Line line0 = new Line(vector3D0, vector3D1);
      boolean boolean0 = line0.isSimilarTo(line0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      double double0 = line0.getAbscissa(vector3D0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      Line line0 = new Line(vector3D0, vector3D0);
      Vector3D vector3D1 = line0.closestPoint(line0);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01);
  }
}
