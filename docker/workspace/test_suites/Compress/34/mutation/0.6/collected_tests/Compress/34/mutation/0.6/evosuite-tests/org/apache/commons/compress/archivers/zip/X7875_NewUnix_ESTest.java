/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 05:43:37 GMT 2023
 */

package org.apache.commons.compress.archivers.zip;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.zip.ZipShort;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class X7875_NewUnix_ESTest extends X7875_NewUnix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      FileSystemHandling.shouldAllThrowIOExceptions();
      x7875_NewUnix0.getHeaderId();
      x7875_NewUnix0.getUID();
      x7875_NewUnix0.hashCode();
      x7875_NewUnix0.toString();
      x7875_NewUnix0.getCentralDirectoryLength();
      X7875_NewUnix x7875_NewUnix1 = new X7875_NewUnix();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      X7875_NewUnix x7875_NewUnix2 = (X7875_NewUnix)x7875_NewUnix1.clone();
      x7875_NewUnix2.setUID((byte) (-50));
      x7875_NewUnix2.getGID();
      x7875_NewUnix2.getUID();
      x7875_NewUnix2.hashCode();
      X7875_NewUnix x7875_NewUnix3 = (X7875_NewUnix)x7875_NewUnix0.clone();
      x7875_NewUnix3.setUID((-1818L));
      byte[] byteArray0 = x7875_NewUnix3.getLocalFileDataData();
      x7875_NewUnix2.parseFromLocalFileData(byteArray0, (byte)0, (byte) (-50));
      X7875_NewUnix.trimLeadingZeroesForceMinLength(byteArray0);
      assertTrue(x7875_NewUnix3.equals((Object)x7875_NewUnix2));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      boolean boolean0 = x7875_NewUnix0.equals(x7875_NewUnix0);
      assertTrue(boolean0);
      
      x7875_NewUnix0.getHeaderId();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-50);
      x7875_NewUnix0.setGID((byte) (-50));
      byteArray0[2] = (byte) (-124);
      byteArray0[2] = (byte)3;
      x7875_NewUnix0.getUID();
      x7875_NewUnix0.toString();
      x7875_NewUnix0.parseFromLocalFileData(byteArray0, (byte)0, (-3));
      ZipShort zipShort0 = x7875_NewUnix0.getCentralDirectoryLength();
      assertEquals(5, zipShort0.getValue());
      
      X7875_NewUnix x7875_NewUnix1 = new X7875_NewUnix();
      x7875_NewUnix1.clone();
      x7875_NewUnix0.clone();
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      boolean boolean0 = x7875_NewUnix0.equals(x7875_NewUnix0);
      x7875_NewUnix0.getLocalFileDataLength();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-50);
      x7875_NewUnix0.setGID((byte) (-50));
      byteArray0[1] = (byte) (-124);
      x7875_NewUnix0.getUID();
      String string0 = x7875_NewUnix0.toString();
      assertEquals("0x7875 Zip Extra Field: UID=1000 GID=4294967246", string0);
      
      x7875_NewUnix0.parseFromLocalFileData(byteArray0, (byte)3, (-1));
      ZipShort zipShort0 = x7875_NewUnix0.getCentralDirectoryLength();
      assertEquals(5, zipShort0.getValue());
      
      X7875_NewUnix x7875_NewUnix1 = new X7875_NewUnix();
      Object object0 = x7875_NewUnix0.clone();
      x7875_NewUnix0.equals(object0);
      X7875_NewUnix x7875_NewUnix2 = new X7875_NewUnix();
      boolean boolean1 = x7875_NewUnix1.equals(x7875_NewUnix2);
      assertTrue(boolean1);
      
      boolean boolean2 = x7875_NewUnix0.equals(x7875_NewUnix2);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = X7875_NewUnix.trimLeadingZeroesForceMinLength((byte[]) null);
      assertNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      X7875_NewUnix x7875_NewUnix1 = new X7875_NewUnix();
      boolean boolean0 = x7875_NewUnix1.equals(x7875_NewUnix0);
      assertTrue(x7875_NewUnix1.equals((Object)x7875_NewUnix0));
      assertTrue(boolean0);
      
      x7875_NewUnix0.setUID(2583L);
      X7875_NewUnix x7875_NewUnix2 = new X7875_NewUnix();
      boolean boolean1 = x7875_NewUnix0.equals(x7875_NewUnix2);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      ZipShort zipShort0 = x7875_NewUnix0.getCentralDirectoryLength();
      assertEquals(7, zipShort0.getValue());
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      x7875_NewUnix0.setGID(0L);
      ZipShort zipShort1 = x7875_NewUnix0.getLocalFileDataLength();
      assertEquals(6, zipShort1.getValue());
      
      x7875_NewUnix0.setUID((-1440L));
      x7875_NewUnix0.getCentralDirectoryData();
      x7875_NewUnix0.hashCode();
      x7875_NewUnix0.getGID();
      x7875_NewUnix0.getGID();
      byte[] byteArray0 = x7875_NewUnix0.getCentralDirectoryData();
      byte[] byteArray1 = X7875_NewUnix.trimLeadingZeroesForceMinLength(byteArray0);
      assertEquals(1, byteArray1.length);
      
      X7875_NewUnix x7875_NewUnix1 = new X7875_NewUnix();
      boolean boolean0 = x7875_NewUnix0.equals(x7875_NewUnix1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      X7875_NewUnix x7875_NewUnix1 = (X7875_NewUnix)x7875_NewUnix0.clone();
      assertTrue(x7875_NewUnix1.equals((Object)x7875_NewUnix0));
      
      x7875_NewUnix1.setGID((-3843L));
      boolean boolean0 = x7875_NewUnix0.equals(x7875_NewUnix1);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      x7875_NewUnix0.getGID();
      X7875_NewUnix.trimLeadingZeroesForceMinLength(byteArray0);
      ZipShort zipShort0 = x7875_NewUnix0.getCentralDirectoryLength();
      assertEquals(7, zipShort0.getValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = X7875_NewUnix.trimLeadingZeroesForceMinLength(byteArray0);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      x7875_NewUnix0.getLocalFileDataLength();
      x7875_NewUnix0.clone();
      x7875_NewUnix0.getHeaderId();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-79);
      x7875_NewUnix0.setUID((byte) (-79));
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)14;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[3] = (byte) (-17);
      x7875_NewUnix0.parseFromCentralDirectoryData(byteArray0, 174, (byte)14);
      x7875_NewUnix0.getLocalFileDataLength();
      x7875_NewUnix0.getUID();
      x7875_NewUnix0.getCentralDirectoryData();
      x7875_NewUnix0.getLocalFileDataLength();
      x7875_NewUnix0.hashCode();
      x7875_NewUnix0.getUID();
      x7875_NewUnix0.clone();
      x7875_NewUnix0.getLocalFileDataLength();
      // Undeclared exception!
      try { 
        x7875_NewUnix0.parseFromLocalFileData(byteArray0, 2048, (byte) (-17));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2048
         //
         verifyException("org.apache.commons.compress.archivers.zip.X7875_NewUnix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      byte[] byteArray0 = x7875_NewUnix0.getCentralDirectoryData();
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte[] byteArray1 = X7875_NewUnix.trimLeadingZeroesForceMinLength(byteArray0);
      assertEquals(1, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      byte[] byteArray0 = x7875_NewUnix0.getLocalFileDataData();
      assertArrayEquals(new byte[] {(byte)1, (byte)2, (byte) (-24), (byte)3, (byte)2, (byte) (-24), (byte)3}, byteArray0);
      
      x7875_NewUnix0.getUID();
      x7875_NewUnix0.getHeaderId();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.compress.archivers.cpio.CpioArchiveEntry");
      x7875_NewUnix0.setUID((-1173L));
      byte[] byteArray1 = x7875_NewUnix0.getLocalFileDataData();
      assertEquals(9, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)4, (byte)107, (byte) (-5), (byte) (-1), (byte) (-1), (byte)2, (byte) (-24), (byte)3}, byteArray1);
      
      ZipShort zipShort0 = x7875_NewUnix0.getLocalFileDataLength();
      assertEquals(9, zipShort0.getValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      x7875_NewUnix0.getGID();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      x7875_NewUnix0.hashCode();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      x7875_NewUnix0.clone();
      ZipShort zipShort0 = x7875_NewUnix0.getCentralDirectoryLength();
      assertEquals(7, zipShort0.getValue());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      X7875_NewUnix x7875_NewUnix1 = new X7875_NewUnix();
      x7875_NewUnix0.equals(x7875_NewUnix1);
      x7875_NewUnix0.getLocalFileDataData();
      x7875_NewUnix0.getCentralDirectoryLength();
      assertTrue(x7875_NewUnix0.equals((Object)x7875_NewUnix1));
      
      x7875_NewUnix0.setGID(80L);
      assertFalse(x7875_NewUnix0.equals((Object)x7875_NewUnix1));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      x7875_NewUnix0.toString();
      x7875_NewUnix0.setGID(4278190080L);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      x7875_NewUnix0.setUID(7L);
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = x7875_NewUnix0.getCentralDirectoryData();
      assertEquals(0, byteArray1.length);
      
      ZipShort zipShort0 = x7875_NewUnix0.getCentralDirectoryLength();
      assertEquals(6, zipShort0.getValue());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      byte[] byteArray0 = x7875_NewUnix0.getLocalFileDataData();
      x7875_NewUnix0.equals((Object) null);
      x7875_NewUnix0.getCentralDirectoryLength();
      x7875_NewUnix0.parseFromCentralDirectoryData(byteArray0, (-2141), (-1446));
      assertArrayEquals(new byte[] {(byte)1, (byte)2, (byte) (-24), (byte)3, (byte)2, (byte) (-24), (byte)3}, byteArray0);
      
      ZipShort zipShort0 = x7875_NewUnix0.getCentralDirectoryLength();
      assertEquals(7, zipShort0.getValue());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      x7875_NewUnix0.toString();
      x7875_NewUnix0.hashCode();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      FileSystemHandling.shouldAllThrowIOExceptions();
      x7875_NewUnix0.getUID();
      x7875_NewUnix0.getLocalFileDataLength();
      ZipShort zipShort0 = x7875_NewUnix0.getCentralDirectoryLength();
      assertEquals(7, zipShort0.getValue());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      boolean boolean0 = x7875_NewUnix0.equals(x7875_NewUnix0);
      ZipShort zipShort0 = x7875_NewUnix0.getHeaderId();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)0;
      x7875_NewUnix0.parseFromLocalFileData(byteArray0, (byte)3, (byte)0);
      assertArrayEquals(new byte[] {(byte) (-50), (byte) (-50), (byte)3, (byte)8, (byte)0, (byte)0}, byteArray0);
      
      x7875_NewUnix0.equals(zipShort0);
      x7875_NewUnix0.hashCode();
      X7875_NewUnix x7875_NewUnix1 = new X7875_NewUnix();
      boolean boolean1 = x7875_NewUnix0.equals(x7875_NewUnix1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      ZipShort zipShort0 = x7875_NewUnix0.getHeaderId();
      x7875_NewUnix0.equals(zipShort0);
      byte[] byteArray0 = new byte[2];
      X7875_NewUnix x7875_NewUnix1 = new X7875_NewUnix();
      x7875_NewUnix0.equals(x7875_NewUnix1);
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)16;
      // Undeclared exception!
      try { 
        x7875_NewUnix0.parseFromLocalFileData(byteArray0, (byte) (-56), (byte)16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -56
         //
         verifyException("org.apache.commons.compress.archivers.zip.X7875_NewUnix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      Object object0 = new Object();
      boolean boolean0 = x7875_NewUnix0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      ZipShort zipShort0 = x7875_NewUnix0.getHeaderId();
      assertEquals(30837, zipShort0.getValue());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      // Undeclared exception!
      try { 
        x7875_NewUnix0.parseFromLocalFileData((byte[]) null, (-3030), (-3030));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.archivers.zip.X7875_NewUnix", e);
      }
  }
}
