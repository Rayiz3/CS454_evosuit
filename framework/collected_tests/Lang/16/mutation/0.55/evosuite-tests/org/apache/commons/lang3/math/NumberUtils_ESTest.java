/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 21:58:18 GMT 2023
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      NumberUtils.isNumber(".6E-7.");
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("13EeID");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.1L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      NumberUtils.isNumber("-123E2.12");
      long[] longArray0 = new long[3];
      longArray0[0] = (-3849L);
      longArray0[1] = (-23L);
      longArray0[2] = (-1678L);
      long long0 = NumberUtils.max(longArray0);
      assertEquals((-23L), long0);
      
      boolean boolean0 = NumberUtils.isDigits("-123E2.12");
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-23L);
      floatArray0[1] = (float) (-23L);
      floatArray0[2] = (float) (-1678L);
      floatArray0[3] = (float) (-23L);
      floatArray0[4] = (float) (-23L);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals((-23.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".12.3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("123.4ED");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-1234E5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x9LuDT`f*[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0.)CO7L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.)CO7L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E700F");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      try { 
        NumberUtils.createNumber("J:L reEnv4{1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"J:L\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      NumberUtils.isNumber("X4;C%YKWK()c-KuY%eb");
      Number number0 = NumberUtils.createNumber("-0x5");
      assertEquals((-5), number0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Number number0 = NumberUtils.createNumber(".0");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.797693134862317E308");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("2f");
      assertEquals(2.0F, number0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1234.5d");
      assertEquals(1234.5, number0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      try { 
        NumberUtils.createNumber("^Hwe/f*|WXsjH{UcJBE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ^Hwe/f*|WXsjH{UcJBE is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("12345L");
      assertEquals(12345L, number0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-6:zU-XX5g#u08L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -6:zU-XX5g#u08L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      try { 
        NumberUtils.createNumber("hkyI EFY.t8xOenl4X");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // hkyI EFY.t8xOenl4X is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("+s]ylws{AIh1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1l");
      assertEquals((-1L), number0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      try { 
        NumberUtils.createNumber("dja4.c?t.dirl");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // dja4.c?t.dirl is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0y");
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1498.41484914);
      doubleArray0[1] = 4185.210407;
      doubleArray0[2] = 406.90459743804;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1498.41484914), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234E5l");
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)43;
      shortArray0[1] = (short)46;
      shortArray0[2] = (short)110;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)43, short0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (short)43;
      floatArray0[1] = (float) (short)43;
      floatArray0[2] = (float) (short)110;
      floatArray0[3] = (float) (short)110;
      floatArray0[4] = (float) (short)43;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(43.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("12345L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.7976931348623157E308");
      assertEquals(1.7976931348623157E308, number0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[2] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[1] = (-1815.82F);
      floatArray0[2] = (-1126.8033F);
      floatArray0[3] = 1056.9F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-1126.8033F);
      floatArray0[6] = Float.NaN;
      floatArray0[7] = (-2527.5403F);
      NumberUtils.min(floatArray0);
      boolean boolean0 = NumberUtils.isNumber("($ADYJ3+WWNnW;tM+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0_a");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 4610.6189528558;
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      Number number0 = NumberUtils.createNumber("0.9");
      assertEquals(0.9F, number0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      float[] floatArray0 = new float[8];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = (-1815.82F);
      floatArray0[2] = (-1126.8033F);
      floatArray0[3] = 1056.9F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-702.11F);
      floatArray0[6] = Float.NaN;
      floatArray0[7] = (-2527.5403F);
      NumberUtils.min(floatArray0);
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("-A<a");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"A<a\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234.5D");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.isNumber("0x11ef");
      // Undeclared exception!
      try { 
        NumberUtils.max((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.isNumber((String) null);
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (byte)numberUtils0.BYTE_ZERO;
      floatArray0[1] = (float) (byte)numberUtils0.BYTE_ONE;
      floatArray0[2] = (float) (int)numberUtils0.INTEGER_ZERO;
      floatArray0[3] = (float) numberUtils0.FLOAT_ONE;
      floatArray0[4] = (float) (short)numberUtils0.SHORT_ZERO;
      floatArray0[5] = (float) (short)numberUtils0.SHORT_MINUS_ONE;
      floatArray0[6] = (float) numberUtils0.FLOAT_ZERO;
      floatArray0[7] = (-2000.6504F);
      NumberUtils.max(floatArray0);
      NumberUtils.createFloat((String) null);
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      short short0 = NumberUtils.max((short)0, (short)0, (short)101);
      assertEquals((short)101, short0);
      
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (short)101;
      intArray0[1] = (int) (short)0;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(101, int0);
      
      byte byte0 = NumberUtils.max((byte) (-15), (byte) (-15), (byte) (-60));
      assertEquals((byte) (-15), byte0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 101;
      floatArray0[1] = (float) (byte) (-60);
      floatArray0[2] = (float) (short)101;
      floatArray0[3] = (float) (short)0;
      floatArray0[4] = 1378.4F;
      floatArray0[5] = (float) (byte) (-15);
      floatArray0[6] = (float) (short)0;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-60.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      try { 
        NumberUtils.createNumber("E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // E is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
      
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      try { 
        NumberUtils.createNumber("08@{qKO_}wpu?.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[1] = (short) numberUtils0.SHORT_ZERO;
      boolean boolean0 = NumberUtils.isDigits("max(int[]) failed for array length 1");
      assertFalse(boolean0);
      
      int int0 = NumberUtils.max((-1745), (-1745), (int) (short)0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-1l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("eqn51Tt");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.createInteger((String) null);
      try { 
        NumberUtils.createNumber("11ef");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 11ef is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      try { 
        NumberUtils.createNumber("The Array must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      try { 
        NumberUtils.createNumber("toL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // toL is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      doubleArray0[0] = 5.67;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Byte byte0 = new Byte((byte)104);
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)104;
      shortArray0[1] = (short) (byte)104;
      shortArray0[2] = (short) (byte)104;
      shortArray0[3] = (short) (byte)104;
      shortArray0[4] = (short) (byte)104;
      shortArray0[5] = (short) (byte)104;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)104, short0);
      
      boolean boolean0 = NumberUtils.isNumber("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.min((short)1477, (short)737, (short) numberUtils0.SHORT_MINUS_ONE);
      try { 
        NumberUtils.createNumber("-0x is not a valid number.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"- is not a valid number.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      try { 
        NumberUtils.createNumber("minimum(short,short,short) 1 failed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // minimum(short,short,short) 1 failed is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
      
      boolean boolean0 = NumberUtils.isDigits("kcQnG");
      assertFalse(boolean0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = (int) (byte)0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      try { 
        NumberUtils.createNumber("=f");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // =f is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      try { 
        NumberUtils.createNumber("YApf6D");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // YApf6D is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      try { 
        NumberUtils.createNumber("1.13-70#F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 1.13-70#F is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--3.4028235E3&8");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-700F");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      try { 
        NumberUtils.createNumber("3.4028235E3&8");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[1] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[2] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[3] = (short)2457;
      shortArray0[4] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[5] = (short)91;
      boolean boolean0 = NumberUtils.isNumber("0xg1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-102);
      int int0 = NumberUtils.min((-102), (-102), (-102));
      assertEquals((-102), int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      NumberUtils.isNumber("--J@Mg'WDG2{yB!v]Fxi");
      int int0 = NumberUtils.min(1191, 455, (-842));
      assertEquals((-842), int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.isNumber("/D5+#//;jg?W>ve5a");
      int int0 = NumberUtils.max((int) numberUtils0.SHORT_MINUS_ONE, (int) numberUtils0.INTEGER_ONE, (int) numberUtils0.SHORT_MINUS_ONE);
      assertEquals(1, int0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1637);
      intArray0[1] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[2] = 20;
      intArray0[3] = (int) (byte)numberUtils0.BYTE_ZERO;
      int int1 = NumberUtils.max(intArray0);
      assertEquals(20, int1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((short[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      longArray0[1] = (long) (byte)numberUtils0.BYTE_MINUS_ONE;
      longArray0[2] = (long) (short)numberUtils0.SHORT_ONE;
      longArray0[3] = (long) (short)numberUtils0.SHORT_ONE;
      longArray0[4] = (long) (short)numberUtils0.SHORT_ONE;
      NumberUtils.createBigDecimal((String) null);
      NumberUtils.createDouble((String) null);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("3.4028235E3&8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (int)numberUtils0.INTEGER_ZERO;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (int)numberUtils0.INTEGER_ONE;
      floatArray0[1] = (float) (int)numberUtils0.INTEGER_ZERO;
      floatArray0[2] = (float) (short)numberUtils0.SHORT_ONE;
      floatArray0[3] = (float) (short)numberUtils0.SHORT_ZERO;
      floatArray0[4] = (float) (byte)numberUtils0.BYTE_MINUS_ONE;
      floatArray0[5] = (float) (byte)numberUtils0.BYTE_MINUS_ONE;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1.0F), float0, 0.01F);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte) numberUtils0.BYTE_ZERO;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 16;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (int)numberUtils0.INTEGER_ZERO;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (int)numberUtils0.INTEGER_ONE;
      floatArray0[1] = (float) (int)numberUtils0.INTEGER_ZERO;
      floatArray0[2] = (float) (short)numberUtils0.SHORT_ONE;
      floatArray0[3] = (float) (short)numberUtils0.SHORT_ZERO;
      floatArray0[4] = (float) (byte)numberUtils0.BYTE_MINUS_ONE;
      floatArray0[5] = (float) (byte)numberUtils0.BYTE_ZERO;
      long[] longArray0 = new long[2];
      longArray0[1] = (long) numberUtils0.LONG_ONE;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1L, long0);
      
      double double1 = NumberUtils.toDouble((String) null, (double) numberUtils0.BYTE_ZERO);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("Z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 3312.0F;
      floatArray0[1] = 3502.5063F;
      floatArray0[2] = (-0.12345F);
      NumberUtils.max(floatArray0);
      NumberUtils.min((byte)1, (byte)1, (byte) (-98));
      boolean boolean0 = NumberUtils.isNumber("7'/g8JAv;@{>3,");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-1.2345F);
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.isNumber("max(int[]) failed for array length 1");
      int int0 = NumberUtils.max((int) numberUtils0.INTEGER_ONE, (int) numberUtils0.SHORT_ONE, (int) numberUtils0.SHORT_ONE);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.9");
      assertEquals(0.9F, number0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1775.74012);
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte byte0 = NumberUtils.toByte(" 11", (byte)91);
      assertEquals((byte)91, byte0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)20;
      intArray0[1] = (int) (byte)91;
      intArray0[2] = (int) (byte)91;
      intArray0[3] = 40;
      intArray0[4] = (int) (byte)91;
      intArray0[5] = (int) (byte)91;
      intArray0[6] = (int) (byte)91;
      intArray0[7] = (int) (byte)91;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(91, int0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 91;
      longArray0[1] = (-2189L);
      longArray0[2] = (long) (byte)91;
      longArray0[3] = (-51L);
      longArray0[4] = (long) (byte)91;
      longArray0[5] = (-2789L);
      longArray0[6] = (long) (byte)91;
      longArray0[7] = (long) 91;
      longArray0[8] = (long) 20;
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-2789L), long0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) numberUtils0.FLOAT_ONE;
      floatArray0[1] = (float) (int)numberUtils0.INTEGER_ONE;
      floatArray0[2] = (float) numberUtils0.FLOAT_MINUS_ONE;
      floatArray0[3] = (float) (int)numberUtils0.INTEGER_ZERO;
      floatArray0[4] = (float) (long)numberUtils0.LONG_MINUS_ONE;
      NumberUtils.max(floatArray0);
      NumberUtils.min((byte) numberUtils0.BYTE_ZERO, (byte)1, (byte)68);
      boolean boolean0 = NumberUtils.isNumber("l'K9rKF;rdai");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NumberUtils.toByte(" 11", (byte)91);
      NumberUtils.max((float) (byte)91, (float) (byte)91, (-221.23F));
      NumberUtils.max((byte)84, (byte)61, (byte)97);
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("Z(TLhK9l],l)~nj");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-0xa");
      assertEquals((-10), number0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
      
      byte byte1 = NumberUtils.max((byte) (-91), (byte)68, (byte) (-91));
      assertEquals((byte)68, byte1);
      
      short short0 = NumberUtils.min((short)12346, (short)12346, (short)43);
      assertEquals((short)43, short0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_ONE;
      byte byte0 = NumberUtils.max((byte) (-1), (byte)116, (byte) numberUtils0.BYTE_ONE);
      assertEquals((byte)116, byte0);
      
      shortArray0[2] = (short)2;
      shortArray0[3] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[4] = (short) numberUtils0.SHORT_MINUS_ONE;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)2, short0);
      
      shortArray0[5] = (short) numberUtils0.SHORT_ZERO;
      short short1 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1), short1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      NumberUtils.toInt("z]M");
      String string0 = "B??Ho&#cKY";
      try { 
        NumberUtils.createNumber("B??Ho&#cKY");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // B??Ho&#cKY is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      short short0 = NumberUtils.toShort("The Array must not be null", (short)64);
      assertEquals((short)64, short0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[9];
      floatArray0[1] = (float) (int)numberUtils0.INTEGER_ZERO;
      floatArray0[2] = (float) numberUtils0.FLOAT_ONE;
      long long0 = NumberUtils.min(1651L, 12344L, (long) numberUtils0.SHORT_ZERO);
      assertEquals(0L, long0);
      
      short short0 = NumberUtils.min((short) numberUtils0.BYTE_MINUS_ONE, (short) numberUtils0.SHORT_ZERO, (short) numberUtils0.SHORT_MINUS_ONE);
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-5L);
      longArray0[1] = 1701L;
      longArray0[2] = 2147483648L;
      long long0 = NumberUtils.min(2147483648L, (-5L), (-5L));
      assertEquals((-5L), long0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte byte0 = NumberUtils.toByte(" 11", (byte)91);
      assertEquals((byte)91, byte0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)20;
      byte byte1 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 567;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(567, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.1E-700F");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte)108, (byte)108, (byte) (-114));
      assertEquals((byte) (-114), byte0);
      
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((float[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xcj3BkLcIMG");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)69;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)69, byte0);
      
      boolean boolean0 = NumberUtils.isNumber("-0xa");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xisNumber(String) LANG-664 failed");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x?yUN%D'1te.7t>;,`O^");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x3.4028235E3&8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xE");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x.c'M92?{U@WxrHvA");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_131()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[15];
      longArray0[0] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      longArray0[1] = (long) numberUtils0.LONG_MINUS_ONE;
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      short[] shortArray0 = new short[15];
      shortArray0[6] = (short) (-2700);
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-2700), short0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      short[] shortArray0 = new short[19];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      NumberUtils.toLong((String) null);
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("`<*3E/8 =3B^S|");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0xmin(byte[]) failed for array length 1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"min(byte[]) failed for array length 1\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createInteger("-0xEb-=wtgIo8nE'X");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-Eb-=wtgIo8nE'X\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.min((short) numberUtils0.BYTE_ONE, (short) numberUtils0.SHORT_ZERO, (short)102);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = NumberUtils.min((short) (-981), (short) (-981), (short) (-981));
      assertEquals((short) (-981), short0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte byte0 = NumberUtils.toByte((String) null);
      assertEquals((byte)0, byte0);
      
      long long0 = NumberUtils.max(12343L, 1249L, 12347L);
      assertEquals(12347L, long0);
      
      float float0 = NumberUtils.min((-5.0F), (-2769.7437F), (float) 12343L);
      assertEquals((-2769.7437F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.createBigDecimal((String) null);
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-110);
      byte byte0 = NumberUtils.max((byte) (-110), (byte) (-110), (byte) (-110));
      assertEquals((byte) (-110), byte0);
      
      boolean boolean0 = NumberUtils.isNumber("13");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[1] = (short) numberUtils0.SHORT_ONE;
      shortArray0[2] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[3] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      shortArray0[4] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[5] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("-0x is");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)83;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      try { 
        NumberUtils.createNumber("s");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // s is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Eb-=wtgIo8nE'X");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Eb-=wtgIo8nE'X is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 10.0F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((int[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_158()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float float0 = NumberUtils.toFloat((String) null, (float) numberUtils0.BYTE_ONE);
      assertEquals(1.0F, float0, 0.01F);
      
      short short0 = NumberUtils.toShort((String) null);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_159()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.min(1L, (long) numberUtils0.SHORT_MINUS_ONE, (-3404L));
      assertEquals((-3404L), long0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double double0 = NumberUtils.min((-1843.8786651454159), 0.0, (-1843.8786651454159));
      assertEquals((-1843.8786651454159), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1663.49;
      doubleArray0[1] = 1214.9226;
      doubleArray0[2] = 789.1347158322;
      doubleArray0[3] = 743.54573656541;
      doubleArray0[4] = 1616.9096140574313;
      doubleArray0[5] = 789.1347158322;
      doubleArray0[6] = (-1497.0);
      double double0 = NumberUtils.max(1663.49, 1616.9096140574313, 1214.9226);
      assertEquals(1663.49, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      float[] floatArray0 = new float[12];
      floatArray0[1] = (-1.1684241F);
      float float0 = NumberUtils.max((-1.1684241F), (-1.1684241F), (-1.1684241F));
      assertEquals((-1.1684241F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)11;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("-0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      NumberUtils.toInt((String) null);
      NumberUtils.createNumber((String) null);
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.max((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte byte0 = NumberUtils.min((byte) (-5), (byte) (-5), (byte) (-5));
      assertEquals((byte) (-5), byte0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_169()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      BigInteger bigInteger0 = NumberUtils.createBigInteger("111");
      assertNotNull(bigInteger0);
      
      byte byte0 = NumberUtils.min((byte) numberUtils0.BYTE_ONE, (byte) numberUtils0.BYTE_MINUS_ONE, (byte) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) numberUtils0.DOUBLE_ZERO;
      doubleArray0[1] = (double) numberUtils0.DOUBLE_ONE;
      doubleArray0[2] = (double) (byte)numberUtils0.BYTE_ZERO;
      doubleArray0[3] = (double) (byte)numberUtils0.BYTE_ONE;
      doubleArray0[4] = (double) (long)numberUtils0.LONG_ONE;
      doubleArray0[5] = (double) (float)numberUtils0.FLOAT_MINUS_ONE;
      doubleArray0[6] = (double) (float)numberUtils0.FLOAT_MINUS_ONE;
      doubleArray0[7] = (double) (float)numberUtils0.FLOAT_MINUS_ONE;
      doubleArray0[8] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 205.450939666;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(205.450939666, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      longArray0[1] = (long) (byte)numberUtils0.BYTE_MINUS_ONE;
      longArray0[2] = (long) (short)numberUtils0.SHORT_ONE;
      longArray0[3] = (long) (short)numberUtils0.SHORT_ONE;
      longArray0[4] = (long) (short)numberUtils0.SHORT_ONE;
      longArray0[5] = (long) (byte)numberUtils0.BYTE_MINUS_ONE;
      longArray0[6] = (long) (int)numberUtils0.INTEGER_ONE;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1L, long0);
      
      double double0 = NumberUtils.toDouble("v,W", (double) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 1072L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(1072L, long0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      long[] longArray0 = new long[7];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      float float0 = NumberUtils.toFloat("?xs*Q(s nn_");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)12973;
      short short0 = NumberUtils.max((short)12973, (short)12973, (short)12973);
      assertEquals((short)12973, short0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_179()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.max((short) numberUtils0.BYTE_MINUS_ONE, (short)22, (short)13);
      assertEquals((short)22, short0);
      
      float float0 = NumberUtils.toFloat("'t&$y?", (-648.6091F));
      assertEquals((-648.6091F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte byte0 = NumberUtils.toByte(" 11", (byte)91);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)70;
      byte byte1 = NumberUtils.max(byteArray0);
      assertTrue(byte1 == byte0);
      
      boolean boolean0 = NumberUtils.isNumber(" 11");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("oR<c+c$6^'3$XSx)");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("*ID");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = 2486L;
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      long[] longArray0 = new long[2];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      try { 
        NumberUtils.createNumber("C_:`k}4ng3L2");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"C_:\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      long long0 = NumberUtils.toLong("eGe0v`");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E^>po9?'(4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      try { 
        NumberUtils.createNumber("min(byte[]) failedmfor array length{2");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      try { 
        NumberUtils.createNumber(" is not a valid number.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  is not a valid number. is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[19];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_MINUS_ONE;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("-0xa");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      Long long0 = NumberUtils.createLong((String) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("1M+zf");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_200()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.toDouble("-0x11def");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.toByte("#;");
      NumberUtils.max((long) numberUtils0.BYTE_ZERO, 12347L, (long) (byte)0);
      try { 
        NumberUtils.createNumber("#;");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // #; is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.max((long) numberUtils0.BYTE_ONE, (long) numberUtils0.LONG_ONE, (long) numberUtils0.LONG_ONE);
      NumberUtils.min((float) numberUtils0.BYTE_ZERO, 27.0F, (float) 1L);
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("V/%U)i");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1042L);
      long long0 = NumberUtils.max((-1042L), (-1042L), (-1042L));
      assertEquals((-1042L), long0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      NumberUtils.toByte("#;");
      try { 
        NumberUtils.createNumber("#;");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // #; is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }
}
