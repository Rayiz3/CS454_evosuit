/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 17:54:54 GMT 2023
 */

package org.apache.commons.csv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.QuoteMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CSVFormat_ESTest extends CSVFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();
      assertFalse(boolean0);
      
      char char0 = '\u00DE';
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      CSVFormat cSVFormat2 = cSVFormat1.DEFAULT.withCommentMarker('\u00DE');
      Object[] objectArray0 = new Object[16];
      CSVFormat.newFormat('\u00DE');
      cSVFormat2.MYSQL.format(objectArray0);
      char char1 = '!';
      cSVFormat2.withCommentMarker('\u00DE');
      Character character0 = new Character('\r');
      CSVFormat cSVFormat3 = cSVFormat0.TDF.withSkipHeaderRecord(false);
      CSVFormat cSVFormat4 = cSVFormat0.withAllowMissingColumnNames(false);
      cSVFormat4.hashCode();
      cSVFormat4.EXCEL.format(objectArray0);
      cSVFormat4.equals(cSVFormat0);
      cSVFormat1.withNullString("");
      // Undeclared exception!
      try { 
        cSVFormat3.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character cannot be a line break
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator((String) null);
      cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('Q');
      CSVFormat cSVFormat3 = CSVFormat.EXCEL;
      cSVFormat1.equals(cSVFormat3);
      CSVFormat cSVFormat4 = cSVFormat3.withQuote('s');
      assertEquals('s', (char)cSVFormat4.getQuoteCharacter());
      
      CSVFormat cSVFormat5 = cSVFormat3.withEscape('s');
      CSVFormat cSVFormat6 = cSVFormat5.withDelimiter('X');
      assertEquals('\"', (char)cSVFormat6.getQuoteCharacter());
      assertFalse(cSVFormat3.equals((Object)cSVFormat5));
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertEquals('X', cSVFormat6.getDelimiter());
      assertFalse(cSVFormat3.equals((Object)cSVFormat4));
      assertFalse(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat3.equals((Object)cSVFormat2));
      assertFalse(cSVFormat5.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("6");
      CSVFormat cSVFormat2 = cSVFormat1.withNullString("M%UYQ~3}S!");
      MockPrintStream mockPrintStream0 = new MockPrintStream("6");
      cSVFormat1.print(mockPrintStream0);
      cSVFormat1.toString();
      CSVFormat cSVFormat3 = cSVFormat1.withQuote('b');
      cSVFormat1.withHeader((String[]) null);
      CSVFormat cSVFormat4 = cSVFormat0.withDelimiter('b');
      QuoteMode quoteMode0 = QuoteMode.ALL;
      cSVFormat4.withQuoteMode(quoteMode0);
      cSVFormat2.equals(cSVFormat0);
      // Undeclared exception!
      try { 
        cSVFormat3.withDelimiter('b');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('b')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('x');
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((String[]) null);
      cSVFormat0.equals(cSVFormat1);
      Character character0 = new Character('t');
      CSVFormat cSVFormat2 = cSVFormat0.withNullString("-iW\"&:l)zL@r\"");
      CSVFormat cSVFormat3 = cSVFormat1.withEscape(character0);
      assertFalse(cSVFormat3.isQuoteCharacterSet());
      
      CSVFormat cSVFormat4 = cSVFormat2.withIgnoreEmptyLines(true);
      CSVFormat cSVFormat5 = cSVFormat4.withIgnoreEmptyLines(true);
      boolean boolean0 = cSVFormat5.equals(cSVFormat4);
      assertFalse(cSVFormat0.equals((Object)cSVFormat3));
      assertFalse(cSVFormat4.getAllowMissingColumnNames());
      assertTrue(cSVFormat5.getIgnoreEmptyLines());
      assertFalse(cSVFormat5.getSkipHeaderRecord());
      assertTrue(boolean0);
      assertFalse(cSVFormat5.getIgnoreSurroundingSpaces());
      assertEquals('x', cSVFormat5.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
      CSVFormat cSVFormat1 = cSVFormat0.withHeader((String[]) null);
      boolean boolean0 = cSVFormat1.equals(cSVFormat0);
      assertTrue(boolean0);
      assertEquals('G', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getSkipHeaderRecord());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(boolean0);
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat1.equals(cSVFormat0);
      assertFalse(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullStringSet());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("vL:*");
      cSVFormat0.equals(cSVFormat1);
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('|');
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.MYSQL.withCommentMarker('|');
      CSVFormat cSVFormat3 = cSVFormat0.MYSQL.withAllowMissingColumnNames(true);
      CSVFormat cSVFormat4 = cSVFormat0.withEscape('\\');
      cSVFormat3.withCommentMarker('<');
      CSVFormat cSVFormat5 = cSVFormat4.withCommentMarker('/');
      assertEquals('\\', (char)cSVFormat5.getEscapeCharacter());
      
      Character character1 = Character.valueOf('<');
      CSVFormat cSVFormat6 = cSVFormat3.withQuote(character1);
      cSVFormat6.getDelimiter();
      cSVFormat3.hashCode();
      boolean boolean0 = cSVFormat2.equals(cSVFormat6);
      assertEquals('\t', cSVFormat3.getDelimiter());
      assertFalse(cSVFormat6.isNullStringSet());
      assertFalse(cSVFormat3.getIgnoreEmptyLines());
      assertEquals('|', (char)cSVFormat2.getCommentMarker());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      
      Character character0 = Character.valueOf('c');
      CSVFormat cSVFormat2 = cSVFormat0.withQuote(character0);
      boolean boolean0 = cSVFormat0.equals(cSVFormat2);
      assertFalse(boolean0);
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat0.equals((Object)cSVFormat1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('y');
      cSVFormat1.withCommentMarker('<');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('/');
      Character character0 = Character.valueOf('y');
      CSVFormat cSVFormat3 = cSVFormat0.withNullString("timeout after ");
      cSVFormat3.hashCode();
      CSVFormat cSVFormat4 = cSVFormat0.withQuote(character0);
      cSVFormat0.getDelimiter();
      cSVFormat3.getQuoteCharacter();
      cSVFormat1.withIgnoreEmptyLines(false);
      CSVFormat cSVFormat5 = cSVFormat0.withIgnoreEmptyLines(false);
      cSVFormat5.getCommentMarker();
      cSVFormat2.getIgnoreSurroundingSpaces();
      assertEquals('/', (char)cSVFormat2.getCommentMarker());
      
      CSVFormat cSVFormat6 = cSVFormat4.withRecordSeparator('w');
      assertEquals("w", cSVFormat6.getRecordSeparator());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 273);
      cSVFormat0.parse(pipedReader0);
      boolean boolean0 = cSVFormat1.getIgnoreEmptyLines();
      assertEquals('y', (char)cSVFormat1.getEscapeCharacter());
      assertTrue(cSVFormat0.equals((Object)cSVFormat5));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("setTransactionIsolation");
      cSVFormat1.hashCode();
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("setTransactionIsolation", cSVFormat1.getNullString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("abeG");
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(boolean0);
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertEquals("\r\n", cSVFormat1.getRecordSeparator());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('|');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
      CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
      boolean boolean0 = cSVFormat1.equals(cSVFormat2);
      assertFalse(cSVFormat2.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertEquals('|', (char)cSVFormat2.getCommentMarker());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(boolean0);
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      Object object0 = new Object();
      boolean boolean1 = cSVFormat1.equals(object0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      CSVFormat cSVFormat2 = cSVFormat0.withHeader(stringArray0);
      CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker('\\');
      cSVFormat3.getDelimiter();
      // Undeclared exception!
      try { 
        cSVFormat1.withCommentMarker('\r');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start marker character cannot be a line break
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = cSVFormat1.equals(cSVFormat0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
      cSVFormat1.hashCode();
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertEquals(',', cSVFormat1.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('T');
      cSVFormat1.getDelimiter();
      CSVFormat cSVFormat2 = cSVFormat0.TDF.withRecordSeparator("The comment start character and the quoteChar cannot be the same ('");
      CSVFormat cSVFormat3 = cSVFormat1.withIgnoreEmptyLines(true);
      cSVFormat0.equals(cSVFormat3);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      Object object1 = new Object();
      cSVFormat3.equals(object1);
      CSVFormat cSVFormat4 = cSVFormat2.withDelimiter('T');
      boolean boolean0 = cSVFormat1.equals(cSVFormat4);
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat4.equals((Object)cSVFormat2));
      assertFalse(cSVFormat0.equals((Object)cSVFormat1));
      assertFalse(cSVFormat2.equals((Object)cSVFormat4));
      assertTrue(cSVFormat4.isQuoteCharacterSet());
      assertFalse(cSVFormat4.isNullStringSet());
      assertEquals('T', cSVFormat4.getDelimiter());
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(boolean0);
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertEquals(',', cSVFormat1.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      boolean boolean0 = cSVFormat0.equals(cSVFormat0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('|');
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat0.withIgnoreEmptyLines(false);
      boolean boolean0 = cSVFormat1.equals(cSVFormat0);
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(true);
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertFalse(boolean0);
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('x');
      cSVFormat0.hashCode();
      assertEquals('x', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      // Undeclared exception!
      try { 
        cSVFormat0.withDelimiter('\"');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The quoteChar character and the delimiter cannot be the same ('\"')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('t');
      cSVFormat0.toString();
      Character character0 = new Character('W');
      assertEquals('W', (char)character0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      boolean boolean0 = cSVFormat0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('+');
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(boolean0);
      assertEquals('+', (char)cSVFormat1.getEscapeCharacter());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = new Character('5');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(boolean0);
      assertEquals('\t', cSVFormat1.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines(false);
      boolean boolean0 = cSVFormat1.equals(cSVFormat0);
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      QuoteMode quoteMode0 = QuoteMode.ALL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      CSVFormat cSVFormat2 = cSVFormat1.DEFAULT.withCommentMarker('i');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Z");
      cSVFormat0.getDelimiter();
      CSVFormat cSVFormat3 = cSVFormat1.withNullString("(-POWER(0, -1))");
      cSVFormat3.getQuoteCharacter();
      cSVFormat2.getCommentMarker();
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      
      cSVFormat3.RFC4180.withRecordSeparator('i');
      cSVFormat1.getIgnoreSurroundingSpaces();
      cSVFormat3.getIgnoreEmptyLines();
      cSVFormat1.hashCode();
      CSVFormat cSVFormat4 = cSVFormat3.withSkipHeaderRecord(false);
      String string0 = cSVFormat4.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> NullString=<(-POWER(0, -1))> RecordSeparator=<\r\n> SkipHeaderRecord:false", string0);
      
      boolean boolean0 = cSVFormat1.isNullStringSet();
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      Character.valueOf('+');
      CSVFormat cSVFormat1 = cSVFormat0.withNullString("CommentStart=<");
      Character character0 = new Character('+');
      CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
      CSVFormat cSVFormat3 = cSVFormat2.withNullString("CommentStart=<");
      String string0 = cSVFormat3.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> CommentStart=<+> NullString=<CommentStart=<> RecordSeparator=<\r\n> SkipHeaderRecord:false", string0);
      
      CSVFormat cSVFormat4 = CSVFormat.newFormat('H');
      assertEquals('H', cSVFormat4.getDelimiter());
      assertFalse(cSVFormat4.getSkipHeaderRecord());
      
      CSVFormat cSVFormat5 = CSVFormat.TDF;
      cSVFormat5.hashCode();
      assertFalse(cSVFormat5.isCommentMarkerSet());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.hashCode();
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullStringSet());
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      Character character0 = new Character('|');
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat0.MYSQL.withAllowMissingColumnNames(false);
      assertEquals('\t', cSVFormat2.getDelimiter());
      
      CSVFormat cSVFormat3 = cSVFormat2.withEscape('|');
      CSVFormat cSVFormat4 = cSVFormat3.withCommentMarker('\\');
      CSVFormat cSVFormat5 = cSVFormat1.withCommentMarker('_');
      cSVFormat5.getEscapeCharacter();
      cSVFormat4.getQuoteCharacter();
      assertEquals('|', (char)cSVFormat4.getEscapeCharacter());
      
      cSVFormat1.getCommentMarker();
      Character character1 = new Character('Z');
      cSVFormat1.withQuote((Character) null);
      CSVFormat cSVFormat6 = CSVFormat.EXCEL;
      cSVFormat1.getIgnoreSurroundingSpaces();
      CSVFormat cSVFormat7 = cSVFormat2.withRecordSeparator('Z');
      cSVFormat7.getIgnoreEmptyLines();
      assertEquals("Z", cSVFormat7.getRecordSeparator());
      
      cSVFormat2.hashCode();
      boolean boolean0 = cSVFormat1.equals(cSVFormat2);
      assertFalse(boolean0);
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertFalse(cSVFormat2.equals((Object)cSVFormat7));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      // Undeclared exception!
      try { 
        cSVFormat0.DEFAULT.withQuoteMode(quoteMode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No quotes mode set but no escape character is set
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String string0 = cSVFormat0.TDF.toString();
      assertEquals("Delimiter=<\t> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false", string0);
      assertEquals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
      
      cSVFormat0.hashCode();
      assertFalse(cSVFormat0.isNullStringSet());
      assertTrue(cSVFormat0.isEscapeCharacterSet());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.isNullStringSet());
      
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat2 = cSVFormat0.withQuoteMode(quoteMode0);
      boolean boolean0 = cSVFormat0.equals(cSVFormat2);
      assertFalse(cSVFormat2.getIgnoreEmptyLines());
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(boolean0);
      assertEquals(',', cSVFormat2.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.EXCEL;
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      CSVFormat cSVFormat1 = CSVFormat.TDF;
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('F');
      cSVFormat1.hashCode();
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Character character0 = new Character('|');
      CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withCommentMarker(character0);
      cSVFormat0.MYSQL.withAllowMissingColumnNames(false);
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('\\');
      assertEquals('\\', (char)cSVFormat2.getEscapeCharacter());
      
      cSVFormat0.withCommentMarker('#');
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('#');
      cSVFormat3.getDelimiter();
      cSVFormat3.getQuoteCharacter();
      cSVFormat3.getCommentMarker();
      cSVFormat3.getIgnoreSurroundingSpaces();
      boolean boolean0 = cSVFormat3.getIgnoreEmptyLines();
      assertTrue(boolean0);
      
      cSVFormat1.hashCode();
      String string0 = cSVFormat1.toString();
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals("Delimiter=<,> QuoteChar=<\"> CommentStart=<|> RecordSeparator=<\r\n> SkipHeaderRecord:false", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[1];
      cSVFormat0.getDelimiter();
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat1.hashCode();
      String string0 = cSVFormat1.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false Header:[null]", string0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
      cSVFormat0.equals(cSVFormat1);
      assertFalse(cSVFormat1.equals((Object)cSVFormat2));
      
      Character character0 = new Character('8');
      cSVFormat0.withEscape(character0);
      assertFalse(cSVFormat0.isEscapeCharacterSet());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      // Undeclared exception!
      try { 
        cSVFormat0.DEFAULT.print((Appendable) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'out' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object object0 = new Object();
      boolean boolean0 = cSVFormat0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('#');
      cSVFormat0.withCommentMarker('#');
      cSVFormat0.getDelimiter();
      cSVFormat1.getQuoteCharacter();
      cSVFormat1.getCommentMarker();
      Object[] objectArray0 = new Object[0];
      cSVFormat0.RFC4180.format(objectArray0);
      cSVFormat0.getIgnoreSurroundingSpaces();
      cSVFormat2.getIgnoreEmptyLines();
      cSVFormat1.toString();
      Character character0 = new Character(',');
      // Undeclared exception!
      try { 
        cSVFormat1.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same (',')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String string0 = cSVFormat0.MYSQL.toString();
      assertEquals("Delimiter=<\t> Escape=<\\> RecordSeparator=<\n> SkipHeaderRecord:false", string0);
      assertEquals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> SkipHeaderRecord:false", string0);
      
      cSVFormat0.hashCode();
      assertTrue(cSVFormat0.isQuoteCharacterSet());
      assertFalse(cSVFormat0.isCommentMarkerSet());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('r');
      // Undeclared exception!
      try { 
        cSVFormat0.withCommentMarker('r');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the delimiter cannot be the same ('r')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.NONE;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      assertEquals('\t', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isQuoteCharacterSet());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('9');
      Character character0 = Character.valueOf('9');
      // Undeclared exception!
      try { 
        cSVFormat1.withEscape(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start and the escape character cannot be the same ('9')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "zGQ2v<gL J";
      stringArray0[2] = "Ba6UpY`/?IkLi9#Z";
      stringArray0[3] = "\n";
      stringArray0[4] = "1zPR]6Gdy]8/vM4pDl";
      stringArray0[5] = "o}]c^Qy/qV03Xa41";
      stringArray0[6] = "---";
      CSVFormat cSVFormat2 = cSVFormat1.TDF.withHeader(stringArray0);
      cSVFormat0.withCommentMarker('#');
      CSVFormat cSVFormat3 = cSVFormat0.withCommentMarker('#');
      char char0 = cSVFormat3.getDelimiter();
      assertEquals(',', char0);
      
      cSVFormat3.getEscapeCharacter();
      cSVFormat3.getQuoteCharacter();
      cSVFormat3.getCommentMarker();
      boolean boolean0 = cSVFormat3.getIgnoreSurroundingSpaces();
      boolean boolean1 = cSVFormat1.getIgnoreEmptyLines();
      assertFalse(boolean1 == boolean0);
      
      cSVFormat2.hashCode();
      assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      String string0 = cSVFormat1.format(stringArray0);
      assertEquals("\"\"\r\n\"\"", string0);
      
      Object object0 = new Object();
      boolean boolean0 = cSVFormat1.equals(object0);
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(boolean0);
      assertEquals(',', cSVFormat1.getDelimiter());
      assertTrue(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      CSVFormat cSVFormat2 = cSVFormat0.withEscape('!');
      CSVFormat cSVFormat3 = cSVFormat0.withEscape('!');
      cSVFormat3.getDelimiter();
      cSVFormat3.getEscapeCharacter();
      cSVFormat3.getQuoteCharacter();
      cSVFormat1.getCommentMarker();
      cSVFormat3.withCommentMarker('z');
      char char0 = new Character(',');
      cSVFormat1.getEscapeCharacter();
      cSVFormat0.getQuoteCharacter();
      cSVFormat3.getCommentMarker();
      cSVFormat0.getIgnoreSurroundingSpaces();
      CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('0');
      cSVFormat4.getIgnoreEmptyLines();
      assertEquals('0', cSVFormat4.getDelimiter());
      
      cSVFormat2.hashCode();
      assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.getIgnoreEmptyLines());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      // Undeclared exception!
      try { 
        cSVFormat0.DEFAULT.parse((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameter 'reader' must not be null!
         //
         verifyException("org.apache.commons.csv.Assertions", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      cSVFormat0.MYSQL.withNullString("&Q$AFC");
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(false);
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertTrue(cSVFormat1.equals((Object)cSVFormat0));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('I');
      assertEquals(',', cSVFormat1.getDelimiter());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertEquals('I', (char)cSVFormat1.getQuoteCharacter());
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertFalse(cSVFormat1.isNullStringSet());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        cSVFormat0.withHeader(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'null' in [null, null, null]
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('#');
      char char0 = new Character('#');
      cSVFormat0.getCommentMarker();
      cSVFormat1.getIgnoreEmptyLines();
      String string0 = cSVFormat1.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> CommentStart=<#> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
      
      CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('o');
      assertEquals('o', cSVFormat2.getDelimiter());
  }

  @Test(timeout = 4000)
  public void testEscapedControlCharactertestComments_61()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withEscape('\\');
      cSVFormat0.withEscape('!');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('!');
      char char0 = cSVFormat1.getDelimiter();
      assertEquals(',', char0);
      
      String string0 = cSVFormat1.DEFAULT.toString();
      assertEquals("Delimiter=<,> QuoteChar=<\"> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false", string0);
      
      Character character0 = cSVFormat1.getEscapeCharacter();
      assertEquals('!', (char)character0);
      
      Character character1 = cSVFormat1.getQuoteCharacter();
      assertEquals('\"', (char)character1);
      
      cSVFormat1.getCommentMarker();
      boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
      boolean boolean1 = cSVFormat1.getIgnoreEmptyLines();
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void testCommentstestComments_62()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      
      cSVFormat0.withCommentMarker('#');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('#');
      char char0 = cSVFormat2.getDelimiter();
      assertEquals(',', char0);
      
      cSVFormat2.getEscapeCharacter();
      cSVFormat2.getQuoteCharacter();
      Character character0 = cSVFormat2.getCommentMarker();
      assertEquals('#', (char)character0);
      
      boolean boolean0 = cSVFormat2.getIgnoreSurroundingSpaces();
      boolean boolean1 = cSVFormat2.getIgnoreEmptyLines();
      assertFalse(boolean1 == boolean0);
      assertFalse(cSVFormat2.getAllowMissingColumnNames());
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      
      boolean boolean2 = cSVFormat0.isNullStringSet();
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      boolean boolean0 = cSVFormat0.isNullStringSet();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      Character character0 = Character.valueOf('\"');
      // Undeclared exception!
      try { 
        cSVFormat0.DEFAULT.withCommentMarker(character0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The comment start character and the quoteChar cannot be the same ('\"')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      // Undeclared exception!
      try { 
        cSVFormat0.withDelimiter('\\');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The escape character and the delimiter cannot be the same ('\\')
         //
         verifyException("org.apache.commons.csv.CSVFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.withEscape('\\');
      cSVFormat0.withEscape('!');
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('!');
      char char0 = cSVFormat1.getDelimiter();
      assertEquals(',', char0);
      
      Character character0 = cSVFormat1.getEscapeCharacter();
      assertEquals('!', (char)character0);
      
      Character character1 = cSVFormat1.getQuoteCharacter();
      assertEquals('\"', (char)character1);
      
      cSVFormat1.getCommentMarker();
      boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
      boolean boolean1 = cSVFormat1.getIgnoreEmptyLines();
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(boolean1 == boolean0);
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertTrue(boolean1);
      
      boolean boolean2 = cSVFormat0.getSkipHeaderRecord();
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.newFormat('a');
      assertFalse(cSVFormat0.getAllowMissingColumnNames());
      assertFalse(cSVFormat0.getIgnoreEmptyLines());
      assertEquals('a', cSVFormat0.getDelimiter());
      assertFalse(cSVFormat0.getSkipHeaderRecord());
      assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      boolean boolean0 = cSVFormat0.isQuoteCharacterSet();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('f');
      Character.valueOf('f');
      Character.valueOf('f');
      cSVFormat1.getIgnoreEmptyLines();
      cSVFormat1.toString();
      int int0 = new Character('f');
      assertEquals('f', int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      Object[] objectArray0 = new Object[0];
      cSVFormat0.TDF.format(objectArray0);
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[1];
      String string0 = cSVFormat0.format(stringArray0);
      assertEquals("\"\"", string0);
      
      cSVFormat0.hashCode();
      assertTrue(cSVFormat0.isQuoteCharacterSet());
  }

  @Test(timeout = 4000)
  public void testCommentstestComments_72()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.withEscape('\\');
      assertEquals('\\', (char)cSVFormat1.getEscapeCharacter());
      
      cSVFormat0.withCommentMarker('#');
      CSVFormat cSVFormat2 = cSVFormat0.withCommentMarker('#');
      char char0 = cSVFormat2.getDelimiter();
      assertEquals(',', char0);
      
      cSVFormat2.getEscapeCharacter();
      cSVFormat2.getQuoteCharacter();
      Character character0 = cSVFormat2.getCommentMarker();
      assertEquals('#', (char)character0);
      
      boolean boolean0 = cSVFormat2.getIgnoreSurroundingSpaces();
      assertFalse(boolean0);
      
      boolean boolean1 = cSVFormat2.getIgnoreEmptyLines();
      boolean boolean2 = cSVFormat2.getAllowMissingColumnNames();
      assertFalse(boolean2 == boolean1);
      assertTrue(cSVFormat2.isQuoteCharacterSet());
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('9');
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertFalse(cSVFormat1.isNullStringSet());
      assertFalse(cSVFormat1.getAllowMissingColumnNames());
      assertFalse(cSVFormat1.getIgnoreEmptyLines());
      assertTrue(cSVFormat1.isQuoteCharacterSet());
      assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
      assertFalse(boolean0);
      assertFalse(cSVFormat1.isEscapeCharacterSet());
      assertEquals(',', cSVFormat1.getDelimiter());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.RFC4180;
      char char0 = cSVFormat0.getDelimiter();
      assertEquals(',', char0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      cSVFormat0.getDelimiter();
      Character character0 = cSVFormat0.getCommentMarker();
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      cSVFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      PipedReader pipedReader0 = new PipedReader();
      cSVFormat0.DEFAULT.parse(pipedReader0);
      cSVFormat0.hashCode();
  }
}
