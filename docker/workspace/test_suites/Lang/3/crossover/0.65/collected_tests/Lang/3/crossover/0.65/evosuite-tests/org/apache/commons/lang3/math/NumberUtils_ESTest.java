/*
 * This file was automatically generated by EvoSuite
 * Sat Dec 16 20:17:53 GMT 2023
 */

package org.apache.commons.lang3.math;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NumberUtils_ESTest extends NumberUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      NumberUtils.isNumber("-");
      boolean boolean0 = NumberUtils.isNumber(".1E970F");
      NumberUtils.createNumber(".1E970F");
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
      
      long[] longArray0 = new long[2];
      NumberUtils.max(longArray0);
      int[] intArray0 = new int[2];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
      
      boolean boolean1 = NumberUtils.isNumber("-");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      NumberUtils.isNumber("1.1L");
      NumberUtils.isNumber(".1E-70F");
      NumberUtils.createNumber(".1E-70F");
      NumberUtils.min(byteArray0);
      NumberUtils.isDigits("1.1L");
      long[] longArray0 = new long[2];
      NumberUtils.max(longArray0);
      int[] intArray0 = new int[2];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
      
      NumberUtils.createNumber("2");
      NumberUtils.toLong(".1E-70F");
      NumberUtils.isNumber("0x;[UTtICP,cJk0W?-(1");
      NumberUtils.createBigInteger("2");
      float[] floatArray0 = new float[15];
      NumberUtils.max(floatArray0);
      NumberUtils.min(longArray0);
      double[] doubleArray0 = new double[8];
      NumberUtils.min(doubleArray0);
      boolean boolean0 = NumberUtils.isNumber("2");
      assertTrue(boolean0);
      
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
      
      NumberUtils.max(intArray0);
      double double0 = new Float(0.0F);
      short[] shortArray0 = new short[8];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
      
      NumberUtils.min(floatArray0);
      double double1 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-123E2.a2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-.e0E-0");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("8D");
      assertEquals(8.0, number0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xF");
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)1482;
      shortArray0[1] = (short) (-1);
      shortArray0[2] = (short)4575;
      shortArray0[3] = (short)6;
      shortArray0[4] = (short) (-126);
      shortArray0[5] = (short)1010;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short) (-26);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)4575, short0);
      
      boolean boolean1 = NumberUtils.isNumber("0xaYeS");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-22338L");
      assertEquals((-22338L), number0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0}x`0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      try { 
        NumberUtils.createNumber("java.vendor.url");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // java.vendor.url is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".12.3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      NumberUtils.createNumber("0.");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)55;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)45, byte0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.1E7");
      assertEquals(1000000.0F, number0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2700.07290008;
      doubleArray0[1] = (-1197.5182212976995);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1197.5182212976995), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.1700F");
      assertEquals(0.17F, number0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0.");
      assertEquals(0.0F, number0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".1El");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      try { 
        NumberUtils.createNumber("--#22R38L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // --#22R38L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1E%");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".1eE-70");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234.5d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("7e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.1E-700F");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      NumberUtils.isNumber("0x7fffffffffffffff0");
      long[] longArray0 = new long[2];
      longArray0[0] = (-934L);
      longArray0[1] = (-1051L);
      NumberUtils.min(longArray0);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)49;
      shortArray0[1] = (short) (-1714);
      shortArray0[2] = (short)1;
      NumberUtils.max(shortArray0);
      NumberUtils.min(longArray0);
      // Undeclared exception!
      try { 
        NumberUtils.createFloat("0x\"HBgf#!3ID");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-700F");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x1245678901234567890L");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte) (-1);
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)72, byte0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)72;
      shortArray0[1] = (short) (byte)19;
      shortArray0[2] = (short) (byte) (-1);
      shortArray0[3] = (short) (byte)19;
      shortArray0[4] = (short) (byte)72;
      shortArray0[5] = (short) (-1557);
      shortArray0[6] = (short) (byte)53;
      shortArray0[7] = (short) (byte)72;
      shortArray0[8] = (short) (byte)72;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short) (-1557), short0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".1E7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      try { 
        NumberUtils.createNumber("PLrDrn'el0fSEAadbC");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // PLrDrn'el0fSEAadbC is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1234.5f");
      assertEquals(1234.5F, number0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1234.5f");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-221.23F");
      assertEquals((-221.23F), number0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      try { 
        NumberUtils.createNumber("24567890123456789&L");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 24567890123456789&L is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("* ");
      float[] floatArray0 = new float[3];
      floatArray0[0] = 2962.33F;
      floatArray0[1] = 1.8F;
      floatArray0[2] = Float.NaN;
      NumberUtils.min(floatArray0);
      boolean boolean1 = NumberUtils.isNumber("* ");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = (-2012.853F);
      floatArray0[1] = Float.NaN;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      try { 
        NumberUtils.createNumber("MayyEuh.lj&5.BK\"ed");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // MayyEuh.lj&5.BK\"ed is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-1.1E200");
      assertEquals((-1.1E200), number0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Number number0 = NumberUtils.createNumber(".1E700");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.1E-700");
      assertEquals((short)0, number0.shortValue());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0E*6r$^%tkE");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0E*6r$^%tkE is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("12345678901234567890L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-807.4581);
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[1] = (-1.0F);
      floatArray0[2] = Float.NaN;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("#%zl@y%^q=ea?^F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"%zl@y%^\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte) (-17);
      intArray0[1] = (int) (byte) (-17);
      intArray0[2] = (int) (byte) (-17);
      intArray0[3] = (int) (byte) (-17);
      intArray0[4] = (-5346);
      NumberUtils.max(intArray0);
      NumberUtils.isNumber(">");
      NumberUtils.toShort((String) null, (short)8);
      NumberUtils.isDigits((String) null);
      try { 
        NumberUtils.createNumber(">");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // > is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)numberUtils0.SHORT_ZERO;
      NumberUtils.min((byte) (-52), (byte) (-86), (byte) (-86));
      Short short0 = new Short((short) numberUtils0.SHORT_ZERO);
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      NumberUtils.isNumber((String) null);
      NumberUtils.max((-1698L), (long) numberUtils0.LONG_ONE, (-10L));
      Double double0 = NumberUtils.createDouble((String) null);
      assertNull(double0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.1E-700");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--\"HFI");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[5];
      longArray0[0] = (long) numberUtils0.LONG_MINUS_ONE;
      longArray0[1] = (long) (short)numberUtils0.SHORT_ONE;
      longArray0[2] = (long) (byte)numberUtils0.BYTE_ONE;
      longArray0[3] = (long) (short)numberUtils0.SHORT_MINUS_ONE;
      boolean boolean0 = NumberUtils.isNumber("0x\"HBgf3ID");
      assertFalse(boolean0);
      
      longArray0[4] = (-2637L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-2637L), long0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)numberUtils0.SHORT_ZERO;
      long[] longArray1 = new long[1];
      NumberUtils.min(longArray1);
      NumberUtils.createFloat((String) null);
      boolean boolean1 = NumberUtils.isNumber("-#");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_ONE;
      shortArray0[0] = (short) numberUtils0.SHORT_ZERO;
      byte byte0 = NumberUtils.min((byte) (-107), (byte) (-107), (byte) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((byte) (-107), byte0);
      
      Short short0 = new Short((short)751);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (float)numberUtils0.FLOAT_ONE;
      doubleArray0[1] = (-2656.013);
      doubleArray0[2] = (double) (short)751;
      doubleArray0[3] = (double) numberUtils0.DOUBLE_ZERO;
      doubleArray0[4] = (double) (short)numberUtils0.SHORT_ZERO;
      doubleArray0[5] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      doubleArray0[6] = (double) (short)1;
      doubleArray0[7] = (double) (short)numberUtils0.SHORT_ZERO;
      doubleArray0[8] = (double) (byte)numberUtils0.BYTE_ZERO;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-2656.013), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      NumberUtils.isNumber("#[HsVGm(");
      short short0 = NumberUtils.toShort("#[HsVGm(", (short)4274);
      boolean boolean0 = NumberUtils.isNumber("0");
      boolean boolean1 = NumberUtils.isDigits("#[HsVGm(");
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)4274;
      shortArray0[1] = (short)4274;
      shortArray0[2] = (short)4274;
      shortArray0[3] = (short)4274;
      shortArray0[4] = (short)4274;
      shortArray0[5] = (short)4274;
      shortArray0[6] = (short)4274;
      shortArray0[7] = (short)4274;
      shortArray0[8] = (short)4274;
      short short1 = NumberUtils.min(shortArray0);
      assertTrue(short1 == short0);
      assertEquals((short)4274, short1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      try { 
        NumberUtils.createNumber("max(float[]) failed for array length 1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1245678901234567890L");
      assertEquals(1245678901234567890L, number0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
      
      float float0 = NumberUtils.toFloat((String) null, (float) (short)1);
      assertEquals(1.0F, float0, 0.01F);
      
      short short0 = NumberUtils.min((short)1, (short)1, (short)1);
      assertEquals((short)1, short0);
      
      boolean boolean1 = NumberUtils.isNumber("isNumber(String) 23 Neg failed");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".d+CW:q5W");
      assertFalse(boolean0);
      
      long long0 = NumberUtils.max(252L, 173L, 1196L);
      assertEquals(1196L, long0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      try { 
        NumberUtils.createNumber("\"HF3ID");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // \"HF3ID is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_ZERO;
      Byte byte0 = new Byte((byte) numberUtils0.BYTE_MINUS_ONE);
      int int0 = NumberUtils.toInt((String) null);
      assertEquals(0, int0);
      
      long long0 = NumberUtils.min(1826L, 10L, (-10L));
      assertEquals((-10L), long0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (-1407L);
      longArray0[1] = (-5L);
      longArray0[2] = (-1249L);
      long long0 = NumberUtils.min((-5L), (-5L), (-5L));
      assertEquals((-5L), long0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)numberUtils0.SHORT_ZERO;
      long[] longArray0 = new long[1];
      boolean boolean0 = NumberUtils.isNumber("");
      assertFalse(boolean0);
      
      long long0 = NumberUtils.max((long) numberUtils0.INTEGER_ZERO, 5495L, (long) numberUtils0.INTEGER_ONE);
      assertEquals(5495L, long0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[1] = (-50);
      intArray0[2] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[3] = (int) numberUtils0.INTEGER_ONE;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(1, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (long)numberUtils0.LONG_MINUS_ONE;
      doubleArray0[1] = (double) (int)numberUtils0.INTEGER_MINUS_ONE;
      doubleArray0[2] = (double) (long)numberUtils0.LONG_MINUS_ONE;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      NumberUtils.isNumber("0xCv/E'<cAF@D\"3r");
      intArray0[1] = (-50);
      intArray0[2] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[3] = (int) numberUtils0.INTEGER_ONE;
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte byte0 = (byte) (-107);
      NumberUtils.min((byte)13, (byte)89, (byte) (-107));
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)13;
      intArray0[1] = (int) (byte) (-107);
      intArray0[2] = (int) (byte) (-107);
      NumberUtils.min(intArray0);
      NumberUtils.toDouble("J#()7w@h6m9,0[X~*@", (-1095.60750876071));
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("7}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (int)numberUtils0.INTEGER_MINUS_ONE;
      floatArray0[1] = (float) (long)numberUtils0.LONG_ONE;
      floatArray0[2] = (float) (int)numberUtils0.INTEGER_ONE;
      floatArray0[3] = (float) (short)numberUtils0.SHORT_MINUS_ONE;
      floatArray0[4] = (float) (byte)numberUtils0.BYTE_ZERO;
      floatArray0[5] = (float) (byte)numberUtils0.BYTE_ONE;
      floatArray0[6] = (float) (long)numberUtils0.LONG_ONE;
      NumberUtils.max(floatArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_ONE;
      NumberUtils.isDigits("java.compiler");
      NumberUtils.createLong((String) null);
      byteArray0[2] = (byte) numberUtils0.BYTE_ZERO;
      Byte byte0 = new Byte((byte) numberUtils0.BYTE_MINUS_ONE);
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_ZERO;
      NumberUtils.toLong((String) null);
      NumberUtils.toInt((String) null);
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("L");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1669.6206F;
      floatArray0[1] = 1669.6206F;
      floatArray0[2] = 1669.6206F;
      floatArray0[3] = 1669.6206F;
      floatArray0[4] = 1669.6206F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(1669.6206F, float0, 0.01F);
      
      NumberUtils.toFloat("false", 1669.6206F);
      short short0 = NumberUtils.min((short)8, (short) (-1122), (short) (-1122));
      assertEquals((short) (-1122), short0);
      
      boolean boolean0 = NumberUtils.isNumber("0x1eE+00001");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Number number0 = NumberUtils.createNumber(".8");
      assertEquals(0.8F, number0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0FAE");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1.");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1.");
      assertEquals(1.0F, number0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      try { 
        NumberUtils.createNumber("ZjsH~j-:.Ob8B\"2");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = 4432.0F;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(4432.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.toByte("P");
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)100;
      NumberUtils.toByte((String) null);
      try { 
        NumberUtils.createNumber("uJY%)@21h0Cy3>UCZ`");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // uJY%)@21h0Cy3>UCZ` is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[1] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[3] = (byte) numberUtils0.BYTE_ZERO;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double double0 = NumberUtils.toDouble((String) null, 432.26075984415934);
      assertEquals(432.26075984415934, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createNumber("L");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      try { 
        NumberUtils.createNumber("--@2HMEo^d<W3");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // --@2HMEo^d<W3 is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      short[] shortArray0 = new short[2];
      NumberUtils.createFloat((String) null);
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long long0 = NumberUtils.min(123L, (long) numberUtils0.LONG_ZERO, (long) numberUtils0.BYTE_ZERO);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("1");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(">");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("$");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xFADE");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      try { 
        NumberUtils.createNumber("The Array must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float float0 = NumberUtils.max(454.9F, 9.7F, (-5.6F));
      assertEquals(454.9F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      try { 
        NumberUtils.createNumber("%zl@y%^q;ea?^F");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // %zl@y%^q;ea?^F is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("-01234");
      assertEquals((byte)100, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger("0");
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (short)numberUtils0.SHORT_ZERO;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_ZERO;
      intArray0[1] = (int) (byte)numberUtils0.BYTE_ZERO;
      intArray0[2] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[3] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[4] = (int) (byte)numberUtils0.BYTE_ONE;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1), int0);
      
      double double1 = NumberUtils.toDouble("--");
      assertEquals(0.0, double1, 0.01);
      
      double double2 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)12347;
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      try { 
        NumberUtils.createNumber("G`K=4 >.t<0qgr+\"`");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // G`K=4 >.t<0qgr+\"` is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("3.40282354e+38");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[1] = (-1);
      intArray0[2] = (int) (short)numberUtils0.SHORT_ZERO;
      intArray0[3] = (int) numberUtils0.INTEGER_ONE;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      int int1 = NumberUtils.max((-8323580), (-3613), (-161013543));
      assertEquals((-3613), int1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      float[] floatArray0 = new float[2];
      floatArray0[0] = 2575.0671F;
      floatArray0[1] = 1.6F;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(1.6F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[1] = (-50);
      intArray0[2] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[3] = (int) numberUtils0.INTEGER_ONE;
      boolean boolean0 = NumberUtils.isDigits("0");
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[2] = (short)6;
      shortArray0[3] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[4] = (short)70;
      shortArray0[5] = (short) (byte)numberUtils0.BYTE_ZERO;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)70, short0);
      
      double double0 = NumberUtils.toDouble("82/}:I]", (double) numberUtils0.INTEGER_ONE);
      assertEquals(1.0, double0, 0.01);
      
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal("0");
      assertNotNull(bigDecimal0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (short)70;
      floatArray0[1] = (float) (int)numberUtils0.INTEGER_MINUS_ONE;
      floatArray0[2] = (float) numberUtils0.FLOAT_MINUS_ONE;
      floatArray0[3] = (float) numberUtils0.FLOAT_ZERO;
      floatArray0[4] = (float) (byte)numberUtils0.BYTE_MINUS_ONE;
      floatArray0[5] = (float) (short)70;
      floatArray0[6] = (float) (byte)numberUtils0.BYTE_MINUS_ONE;
      floatArray0[7] = (float) (int)numberUtils0.INTEGER_ZERO;
      float float0 = NumberUtils.min(floatArray0);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 100;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(100, int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0xThe Array must not be null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"The A\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-96);
      NumberUtils.min((byte) (-96), (byte) (-96), (byte) (-96));
      try { 
        NumberUtils.createNumber("0$qH(_:\"t#Xw`Rdf?>7");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"$qH(_:\"t\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[1] = 6;
      intArray0[2] = (int) (short)numberUtils0.SHORT_ZERO;
      intArray0[3] = (int) numberUtils0.INTEGER_ONE;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      doubleArray0[1] = (double) (-1);
      short short0 = NumberUtils.toShort("0x", (short) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((short) (-1), short0);
      
      boolean boolean0 = NumberUtils.isNumber("0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-0xFADE");
      assertEquals((-64222), number0);
      assertNotNull(number0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0x.d+C_W:q5W");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \".d+C_W:q5W\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (byte)numberUtils0.BYTE_MINUS_ONE;
      longArray0[1] = (long) (int)numberUtils0.INTEGER_ONE;
      longArray0[2] = (long) (int)numberUtils0.INTEGER_ZERO;
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1L), long0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[1] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[2] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[3] = (byte) numberUtils0.BYTE_MINUS_ONE;
      byteArray0[4] = (byte) numberUtils0.BYTE_ZERO;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte) numberUtils0.BYTE_ONE;
      byteArray0[7] = (byte)8;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 5.67;
      doubleArray0[1] = (double) (byte)numberUtils0.BYTE_ONE;
      doubleArray0[2] = (double) (short)numberUtils0.SHORT_ZERO;
      doubleArray0[3] = (double) (long)numberUtils0.LONG_ZERO;
      doubleArray0[4] = 859.2683794216223;
      doubleArray0[5] = (double) (int)numberUtils0.INTEGER_MINUS_ONE;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      longArray0[1] = (long) numberUtils0.LONG_MINUS_ONE;
      longArray0[2] = (long) (int)numberUtils0.INTEGER_ZERO;
      longArray0[3] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      longArray0[4] = (long) (byte)numberUtils0.BYTE_ZERO;
      longArray0[5] = 10L;
      longArray0[6] = (long) (byte)numberUtils0.BYTE_ONE;
      longArray0[7] = (long) numberUtils0.LONG_ZERO;
      longArray0[8] = (long) numberUtils0.LONG_MINUS_ONE;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(10L, long0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) numberUtils0.INTEGER_MINUS_ONE;
      intArray0[1] = (int) (short)numberUtils0.SHORT_ZERO;
      intArray0[2] = 39;
      intArray0[3] = (int) numberUtils0.INTEGER_MINUS_ONE;
      intArray0[4] = (int) numberUtils0.INTEGER_ONE;
      intArray0[5] = (int) numberUtils0.INTEGER_ZERO;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1), int0);
      
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      NumberUtils.isNumber("m");
      NumberUtils.toLong((String) null);
      String string0 = "22338L";
      try { 
        NumberUtils.createNumber("m");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // m is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      doubleArray0[0] = 454.44143726683;
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (long)numberUtils0.LONG_ONE;
      doubleArray0[1] = (double) (short)numberUtils0.SHORT_ZERO;
      doubleArray0[2] = (double) numberUtils0.DOUBLE_ZERO;
      doubleArray0[3] = (double) (byte)numberUtils0.BYTE_ZERO;
      doubleArray0[4] = 2396.4677042274;
      doubleArray0[5] = (double) (float)numberUtils0.FLOAT_ONE;
      doubleArray0[6] = (double) (long)numberUtils0.LONG_ONE;
      NumberUtils.min(doubleArray0);
      NumberUtils.isDigits("@]t;");
      NumberUtils.toLong((String) null);
      NumberUtils.toInt("M+h");
      Integer integer0 = NumberUtils.createInteger((String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[1] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[2] = (int) (byte)numberUtils0.BYTE_ZERO;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (long)numberUtils0.LONG_ONE;
      floatArray0[1] = (float) (long)numberUtils0.LONG_ONE;
      floatArray0[2] = (float) (long)numberUtils0.LONG_MINUS_ONE;
      floatArray0[3] = (float) (-1);
      NumberUtils.max(floatArray0);
      intArray0[3] = (int) numberUtils0.INTEGER_MINUS_ONE;
      intArray0[4] = (int) (short)numberUtils0.SHORT_ONE;
      NumberUtils.isNumber("Bw,7");
      intArray0[5] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      int int0 = new Integer((int) numberUtils0.INTEGER_MINUS_ONE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("5");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("38i<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)14;
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[1] = (-1);
      intArray0[2] = (int) (short)numberUtils0.SHORT_ZERO;
      intArray0[3] = (int) numberUtils0.INTEGER_ONE;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) numberUtils0.DOUBLE_MINUS_ONE;
      doubleArray0[1] = (double) (-1);
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0xFA~E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x1eE+00001");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      boolean boolean0 = NumberUtils.isDigits("Array cannot be empty.");
      assertFalse(boolean0);
      
      long long0 = NumberUtils.toLong("<ery+4_0@7!JW~");
      assertEquals(0L, long0);
      
      short short0 = NumberUtils.max((short)1055, (short)1055, (short) numberUtils0.BYTE_ONE);
      assertEquals((short)1055, short0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      try { 
        NumberUtils.createNumber("\ne_ .iv");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 
         // e_ .iv is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Qi!e");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Qi!e is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      try { 
        NumberUtils.createNumber("path.separator");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // path.separator is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 5.67;
      doubleArray0[1] = (double) (byte)numberUtils0.BYTE_ONE;
      doubleArray0[2] = (double) (short)numberUtils0.SHORT_ZERO;
      doubleArray0[3] = (double) (long)numberUtils0.LONG_ZERO;
      doubleArray0[4] = 859.2683794216223;
      doubleArray0[5] = (double) (int)numberUtils0.INTEGER_MINUS_ONE;
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      longArray0[1] = (long) numberUtils0.LONG_MINUS_ONE;
      longArray0[2] = (long) (int)numberUtils0.INTEGER_ZERO;
      longArray0[3] = (long) (int)numberUtils0.INTEGER_MINUS_ONE;
      longArray0[4] = (long) (byte)numberUtils0.BYTE_ZERO;
      longArray0[5] = 10L;
      longArray0[6] = (long) (byte)numberUtils0.BYTE_ONE;
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = NumberUtils.max(674, 10, (-1750));
      assertEquals(674, int0);
      
      short short0 = NumberUtils.min((short)5, (short)2, (short) (-1214));
      assertEquals((short) (-1214), short0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = (-796L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-796L), long0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte byte0 = NumberUtils.max((byte)1, (byte)1, (byte)60);
      assertEquals((byte)60, byte0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (byte)1;
      longArray0[1] = (long) (byte)60;
      longArray0[2] = (long) (byte)60;
      longArray0[3] = (long) (byte)60;
      longArray0[4] = (-1146L);
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-1146L), long0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 12.966420755869782;
      double double0 = NumberUtils.max(12.966420755869782, 12.966420755869782, 12.966420755869782);
      assertEquals(12.966420755869782, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array cannot be empty.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[19];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[1] = (int) (short)numberUtils0.SHORT_ZERO;
      NumberUtils.min((int) numberUtils0.SHORT_ONE, 1, (int) numberUtils0.INTEGER_ZERO);
      try { 
        NumberUtils.createNumber("j}GMd$WT/qZm|a&p");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // j}GMd$WT/qZm|a&p is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_136()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (int)numberUtils0.INTEGER_MINUS_ONE;
      doubleArray0[1] = (double) (short)numberUtils0.SHORT_ZERO;
      doubleArray0[2] = (double) (long)numberUtils0.LONG_ZERO;
      doubleArray0[3] = (double) (byte)numberUtils0.BYTE_ONE;
      doubleArray0[4] = (double) (short)numberUtils0.SHORT_MINUS_ONE;
      doubleArray0[5] = (double) (byte)numberUtils0.BYTE_ZERO;
      doubleArray0[6] = (double) (byte)numberUtils0.BYTE_ZERO;
      doubleArray0[7] = (double) (float)numberUtils0.FLOAT_ZERO;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(1.0, double0, 0.01);
      
      int int0 = NumberUtils.min(132, 110, 8);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      try { 
        NumberUtils.createNumber("RqgM@]q8FI`Q*{[C'F+");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // RqgM@]q8FI`Q*{[C'F+ is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double double0 = NumberUtils.min((-15.074523447549), (double) numberUtils0.SHORT_ONE, 1.2339999888423831E23);
      assertEquals((-15.074523447549), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[7] = (byte)6;
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = NumberUtils.max(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      long[] longArray0 = new long[5];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      try { 
        NumberUtils.createNumber("1wx{o<V9");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1wx{o<V9\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      float[] floatArray0 = new float[17];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 5180.743F;
      float float0 = NumberUtils.min(5180.743F, 5180.743F, 5180.743F);
      assertEquals(5180.743F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.max((byte) (-67), (byte) numberUtils0.BYTE_ZERO, (byte)123);
      assertEquals((byte)123, byte0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_146()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      byte byte0 = NumberUtils.toByte("0", (byte) numberUtils0.BYTE_ONE);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[1] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[2] = (short) numberUtils0.SHORT_ONE;
      shortArray0[3] = (short) (byte)numberUtils0.BYTE_ZERO;
      NumberUtils.isNumber("&0mL*UIG!c$kJ");
      shortArray0[4] = (short) (byte)numberUtils0.BYTE_ZERO;
      shortArray0[5] = (short) numberUtils0.SHORT_MINUS_ONE;
      shortArray0[6] = (short) numberUtils0.SHORT_ONE;
      shortArray0[7] = (short) numberUtils0.SHORT_ZERO;
      shortArray0[8] = (short) (byte)numberUtils0.BYTE_ONE;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)1, short0);
      
      double double0 = NumberUtils.toDouble("#1.23", 1.2339999888423831E23);
      assertEquals(1.2339999888423831E23, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-28887);
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      short[] shortArray0 = new short[10];
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double double0 = NumberUtils.toDouble("JAVA_1_7", (-1379.3415690133745));
      assertEquals((-1379.3415690133745), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      NumberUtils.toInt("tR 1Dz1@d}Np6dHcX~`");
      try { 
        NumberUtils.createNumber("0x1eE+00001");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1eE+00001\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      NumberUtils.toLong("JAVA_1_7");
      // Undeclared exception!
      try { 
        NumberUtils.createBigDecimal("JAVA_1_7");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_153()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      short short0 = NumberUtils.toShort("A !md");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_154()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      boolean boolean0 = NumberUtils.isDigits("WKFtnHNb'GV/KvRdnA");
      assertFalse(boolean0);
      
      int int0 = NumberUtils.toInt((String) null, 1391);
      assertEquals(1391, int0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("SnLDw0+Sb5N@C>8y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      short short0 = NumberUtils.toShort("0x1eE+00001", (short)1);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-93.57975222162882);
      doubleArray0[1] = Double.NaN;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void testConstructortestConstructor_158()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[7];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[1] = (-50);
      intArray0[2] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[3] = (int) numberUtils0.INTEGER_ONE;
      intArray0[4] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[5] = (int) (byte)numberUtils0.BYTE_ONE;
      intArray0[6] = (int) (short)numberUtils0.SHORT_ONE;
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-50), int0);
      
      int[] intArray1 = new int[4];
      intArray1[0] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray1[1] = (int) (byte)numberUtils0.BYTE_ZERO;
      intArray1[2] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray1[3] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      NumberUtils.min(intArray1);
      short short0 = NumberUtils.max((short) (-679), (short) numberUtils0.BYTE_ZERO, (short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int[] intArray0 = new int[14];
      intArray0[10] = (-4195);
      int int0 = NumberUtils.min(intArray0);
      assertEquals((-4195), int0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[1];
      intArray0[0] = (int) numberUtils0.INTEGER_ZERO;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
      
      short short0 = NumberUtils.max((short) numberUtils0.SHORT_ONE, (short) (-679), (short) numberUtils0.BYTE_MINUS_ONE);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)numberUtils0.BYTE_MINUS_ONE;
      intArray0[1] = (int) (byte)numberUtils0.BYTE_ZERO;
      intArray0[2] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      intArray0[3] = (int) (short)numberUtils0.SHORT_MINUS_ONE;
      int int0 = new Integer((int) numberUtils0.SHORT_ZERO);
      short short0 = NumberUtils.max((short) (-679), (short) numberUtils0.BYTE_ZERO, (short)16);
      assertEquals((short)16, short0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      NumberUtils.max((byte) (-17), (byte) (-17), (byte) (-17));
      try { 
        NumberUtils.createNumber("G");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // G is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      int int0 = NumberUtils.max((int) numberUtils0.INTEGER_ONE, (int) numberUtils0.BYTE_MINUS_ONE, 5);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int int0 = NumberUtils.min(1789569706, 1789569706, 1789569706);
      assertEquals(1789569706, int0);
      
      float float0 = NumberUtils.toFloat("%");
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.min((long[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (long)numberUtils0.LONG_MINUS_ONE;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[1] = 9L;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      long[] longArray0 = new long[7];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("7");
      assertEquals(7, number0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      try { 
        NumberUtils.createNumber("1_x{o<Vd");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 1_x{o<Vd is not a valid number.
         //
         verifyException("org.apache.commons.lang3.math.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float float0 = NumberUtils.toFloat("6!KD{De4^dl@+U5z", (float) numberUtils0.LONG_ONE);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      long[] longArray0 = new long[4];
      short[] shortArray0 = new short[2];
      short short0 = NumberUtils.max(shortArray0);
      short short1 = NumberUtils.min((short)0, (short)0, (short)0);
      assertTrue(short1 == short0);
      assertEquals((short)0, short1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      float float0 = NumberUtils.toFloat(")JlDDkZ&z7vZ?Rjb", 341.0F);
      assertEquals(341.0F, float0, 0.01F);
      
      short short0 = NumberUtils.min((short) numberUtils0.SHORT_MINUS_ONE, (short) numberUtils0.SHORT_MINUS_ONE, (short) numberUtils0.BYTE_ONE);
      assertEquals((short) (-1), short0);
  }
}
